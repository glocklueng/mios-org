$Id$

MIDIbox64 V2.4
~~~~~~~~~~~~~~

   o a patch mode has been implemented which can be selected as an
     alternative option to the common "bank" mode in main.asm

     In patch mode, each BankStick contains only one bank
     configuration (means: pot/button/label setup), but 
     128 snapshots! This allows you to prepare one configuration
     for your MIDI gear, and to store/recall/morph up to 128 scenes.

   o there are two new SysEx commands for storing/restoring patches

   o patches and banks can be changed from external with a 
     "Program Change" command. The channels are specified in
     main.asm. Default: Channel 16 - Banks; Channel 15: Patches 

   o some minor bugfixes and improvements


MIDIbox64 V2.3
~~~~~~~~~~~~~~

   o three new SysEx commands have been implemented to simplify
     the configuration data up- and download. It's a block
     oriented format and therefore doesn't require delays between
     every byte anymore. This means, that data uploads can
     now also be realized without the use of MIDI-Ox so long the
     SysEx tool allows to insert delays between every block
     ("Delay after F7") - it should be 750 mS - thats the
     same requirement like for MIOS uploads.
     More infos can be found here:
        http://www.uCApps.de/howto_tools_mbsyx.html

   o the mk_syx.pl script has been updated to support the
     new upload format. It can be downloaded from here:
        http://www.uCApps.de/midibox/mk_syx.zip

   o the AMUX extension is now working, but not documented yet


MIDIbox64 V2.2
~~~~~~~~~~~~~~

   o Bankswitching now significantly faster

   o experimental support for 8 AOUTs (can be controlled via MIDI and
     from the pots, assigned to the first 8 pot positions)

   o AMUX extension (64 analog outputs by using 8 sample & hold chips,
     each with 8 outputs) in preparation, but not implemented yet

   o experimental support for drum triggers - driver needs some
     improvements!

   o MTC code or alternatively the MIDIclock + BPM are now displayed
     in a new last display page

   o support for a datawheel (rotary encoder) as replacement for
     the left/right button. To enable it, set DEFAULT_ENC_DATAWHEEL 
     to 0 - connect the rotary encoder to pin 4 and 5 of the first
     DIN shift register, connect the exec button to pin 7 and
     the snapshot button to pin 6 

   o Matthias Schreiber has integrated a Page-Mode for MIDIBoxes 
     with only 16 pots. Using the SF-Buttons you are able to switch
     between pots 1-16; 17-32; 33-48; 49-64 in the same bank. So 64 
     pot-events could be used per bank instead of only 16.

     These SF-Buttons are added for the Page-Mode:
     FF 05 10 | Decrement BankStick Bank without overflow
     FF 05 11 | Decrement BankStick Bank with overflow
     FF 05 12 | Increment BankStick Bank without overflow
     FF 05 13 | Increment BankStick Bank with overflow

     Example panel layout:
     http://www.midibox.org/midibox_gallery/matthias1.jpg

   o PayC has added some improvements especially for 4x16 displays

   o seperate layout files for 2x16, 2x20, 4x16 and 4x20 LCDs
     to simplify future improvements for various display sizes.
     The display size has to be selected in main.asm (DEFAULT_LCD_SIZE)


MIDIbox64 V2.1
~~~~~~~~~~~~~~
   o Douglas Pederick has integrated a 4th display mode especially
     for 4x20 displays

   o the LCD screen can now be centered for various displays, the
     cursor positions have to be configured in main.asm
     (search for DEFAULT_YOFFSET_LINE*)

   o MB64_POT_ScaleValue fixed (reverse direction didn't work)

   o the DEFAULT_BANKSTICK_CS setting in main.asm allows you to
     select a dedicated EEPROM for your application or disable
     the BankStick support at all. This feature is especially 
     usefull when different applications are used with the MIDIbox

   o the predefined MIDI channels stored in the bank can now be 
     overwritten by a global channel


MIDIbox64 V2.0 - MIOS based version 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   o the complete MIDIbox64 firmware has been ported to MIOS and is
     now running on a PIC18F452. For new projects it's recommented 
     to switch to the PIC18F452 because of the higher flexibility, 
     but also the update of an existing MIDIbox to MIOS makes sense 
     due to the new features - just only the processor and the 
     crystal have to be changed. 

   o V2.0 is almost compatible to the PIC16F firmware, only the 
     dynamic jitter filter is not available anymore (not required, 
     MIOS works internally with 10bit resolution) and the 4-line LCD 
     flag has been replaced by the possibility to freely customize 
     the screen (see cs_m_display.inc), so that any kind of LCD which 
     is supported by MIOS can be adapted to this firmware. 

   o Note that Serge's vmidibox64 editor (which has been developed 
     for the PIC16F version) can also interact with the new
     implementation. 
     The transfer rate has to be set to a value less than 150, otherwise 
     the dump won't be received completely. This isn't a bug in MIOS, but 
     a problem related to the PIC18F which can only save 64 bytes at once 
     in the internal flash memory (the PIC16F saves 2 bytes (14 bit)
     at once). 

   o Beside of the MIDI Learn function, MIDI events can now also be
     edited directly 

   o Support for on-screen editing of pot lables and banknames 

   o up to 8 BankSticks can be handled by the firmware now (-> up to 128 banks) 
   
   o banks can be copied 

   o A morphing function has been added which allows to fade smoothly 
     between two pot scenes: the current pot positions and the pot positions 
     saved in a snapshot (bank) 

   o Pot events can now be triggered via Remote: 
        F0 00 00 7E 43 [d]9 00 [pot] [value] F7 
     ([d] = device number (0-7), 
      [pot] = pot number (0-63), 
      [value] = pot value (0-127) 

   o Button events (also menu buttons) can now be triggered via Remote: 
        F0 00 00 7E 43 [d]9 01 [button] [value] F7 
     ([d] = device number (0-7), 
      [button] = button number (0-63), 
      [value] = button value (0=pressed, 1=depressed) 

   o Special Functions can now be triggered via Remote: 
        F0 00 00 7E 43 [d]9 02 [sfbn] [sfbp] [value] F7 
     ([d] = device number (0-7), 
      [sfbn] = special function number (0-127), 
      [sfbp] = special function parameter (0-127), 
      [value] = button value (0=pressed, 1=depressed) 

   o A software implemented MIDI Rx/Tx LED function has been integrated 

   o the MIDIbox64 tutorial has been updated (see http://www.ucapps.de)
