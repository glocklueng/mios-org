gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.7.0 #4818 (Jan 18 2008)
               00004 ; This file generated Tue Sep 16 06:43:12 2008
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f452
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _current_screen_num
               00016         global _current_preset_num
               00017         global _current_bus_num
               00018         global _current_preset
               00019         global _midi_inout_map
               00020         global _timer_ticks_count
               00021         global _store_preset
               00022         global _load_preset
               00023         global _screen_init
               00024         global _preset_init
               00025         global _Init
               00026         global _Timer
               00027         global _MPROC_NotifyReceivedByte
               00028         global _MPROC_NotifyReceivedEvnt
               00029         global _DIN_NotifyToggle
               00030         global _DISPLAY_Init
               00031         global _DISPLAY_Tick
               00032         global _Tick
               00033         global _MPROC_NotifyFoundEvent
               00034         global _MPROC_NotifyTimeout
               00035         global _SR_Service_Prepare
               00036         global _SR_Service_Finish
               00037         global _ENC_NotifyChange
               00038         global _AIN_NotifyChange
               00039         global _int_bit_ormask
               00040 
               00041 ;--------------------------------------------------------
               00042 ; extern variables in this module
               00043 ;--------------------------------------------------------
               00044         extern _MIOS_BOX_CFG0
               00045         extern _MIOS_BOX_CFG1
               00046         extern _MIOS_BOX_STAT
               00047         extern _MIOS_PARAMETER1
               00048         extern _MIOS_PARAMETER2
               00049         extern _MIOS_PARAMETER3
               00050         extern _PORTAbits
               00051         extern _PORTBbits
               00052         extern _PORTCbits
               00053         extern _PORTDbits
               00054         extern _PORTEbits
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _LATAbits
               00056         extern _LATBbits
               00057         extern _LATCbits
               00058         extern _LATDbits
               00059         extern _LATEbits
               00060         extern _TRISAbits
               00061         extern _TRISBbits
               00062         extern _TRISCbits
               00063         extern _TRISDbits
               00064         extern _TRISEbits
               00065         extern _PIE1bits
               00066         extern _PIR1bits
               00067         extern _IPR1bits
               00068         extern _PIE2bits
               00069         extern _PIR2bits
               00070         extern _IPR2bits
               00071         extern _EECON1bits
               00072         extern _RCSTAbits
               00073         extern _TXSTAbits
               00074         extern _T3CONbits
               00075         extern _CCP2CONbits
               00076         extern _CCP1CONbits
               00077         extern _ADCON1bits
               00078         extern _ADCON0bits
               00079         extern _SSPCON2bits
               00080         extern _SSPCON1bits
               00081         extern _SSPSTATbits
               00082         extern _T2CONbits
               00083         extern _T1CONbits
               00084         extern _RCONbits
               00085         extern _WDTCONbits
               00086         extern _LVDCONbits
               00087         extern _OSCCONbits
               00088         extern _T0CONbits
               00089         extern _STATUSbits
               00090         extern _INTCON3bits
               00091         extern _INTCON2bits
               00092         extern _INTCONbits
               00093         extern _STKPTRbits
               00094         extern _PORTA
               00095         extern _PORTB
               00096         extern _PORTC
               00097         extern _PORTD
               00098         extern _PORTE
               00099         extern _LATA
               00100         extern _LATB
               00101         extern _LATC
               00102         extern _LATD
               00103         extern _LATE
               00104         extern _TRISA
               00105         extern _TRISB
               00106         extern _TRISC
               00107         extern _TRISD
               00108         extern _TRISE
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _PIE1
               00110         extern _PIR1
               00111         extern _IPR1
               00112         extern _PIE2
               00113         extern _PIR2
               00114         extern _IPR2
               00115         extern _EECON1
               00116         extern _EECON2
               00117         extern _EEDATA
               00118         extern _EEADR
               00119         extern _RCSTA
               00120         extern _TXSTA
               00121         extern _TXREG
               00122         extern _RCREG
               00123         extern _SPBRG
               00124         extern _T3CON
               00125         extern _TMR3L
               00126         extern _TMR3H
               00127         extern _CCP2CON
               00128         extern _CCPR2L
               00129         extern _CCPR2H
               00130         extern _CCP1CON
               00131         extern _CCPR1L
               00132         extern _CCPR1H
               00133         extern _ADCON1
               00134         extern _ADCON0
               00135         extern _ADRESL
               00136         extern _ADRESH
               00137         extern _SSPCON2
               00138         extern _SSPCON1
               00139         extern _SSPSTAT
               00140         extern _SSPADD
               00141         extern _SSPBUF
               00142         extern _T2CON
               00143         extern _PR2
               00144         extern _TMR2
               00145         extern _T1CON
               00146         extern _TMR1L
               00147         extern _TMR1H
               00148         extern _RCON
               00149         extern _WDTCON
               00150         extern _LVDCON
               00151         extern _OSCCON
               00152         extern _T0CON
               00153         extern _TMR0L
               00154         extern _TMR0H
               00155         extern _STATUS
               00156         extern _FSR2L
               00157         extern _FSR2H
               00158         extern _PLUSW2
               00159         extern _PREINC2
               00160         extern _POSTDEC2
               00161         extern _POSTINC2
               00162         extern _INDF2
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _BSR
               00164         extern _FSR1L
               00165         extern _FSR1H
               00166         extern _PLUSW1
               00167         extern _PREINC1
               00168         extern _POSTDEC1
               00169         extern _POSTINC1
               00170         extern _INDF1
               00171         extern _WREG
               00172         extern _FSR0L
               00173         extern _FSR0H
               00174         extern _PLUSW0
               00175         extern _PREINC0
               00176         extern _POSTDEC0
               00177         extern _POSTINC0
               00178         extern _INDF0
               00179         extern _INTCON3
               00180         extern _INTCON2
               00181         extern _INTCON
               00182         extern _PRODL
               00183         extern _PRODH
               00184         extern _TABLAT
               00185         extern _TBLPTRL
               00186         extern _TBLPTRH
               00187         extern _TBLPTRU
               00188         extern _PCL
               00189         extern _PCLATH
               00190         extern _PCLATU
               00191         extern _STKPTR
               00192         extern _TOSL
               00193         extern _TOSH
               00194         extern _TOSU
               00195         extern _MIOS_MIDI_TxBufferPut
               00196         extern _MIOS_DIN_PinGet
               00197         extern _MIOS_DOUT_SRSet
               00198         extern _MIOS_SRIO_NumberSet
               00199         extern _MIOS_SRIO_UpdateFrqSet
               00200         extern _MIOS_SRIO_DebounceSet
               00201         extern _MIOS_EEPROM_Read
               00202         extern _MIOS_EEPROM_Write
               00203         extern _MIOS_BANKSTICK_CtrlSet
               00204         extern _MIOS_BANKSTICK_WritePage
               00205         extern _MIOS_BANKSTICK_ReadPage
               00206         extern _MIOS_TIMER_Init
               00207         extern _MIOS_TIMER_Stop
               00208         extern _MIOS_HLP_GetBitORMask
               00209         extern _mios_enc_pin_table
               00210         extern _mios_mproc_event_table
               00211         extern _MIOS_MPROC_EVENT_TABLE
               00212         extern _MIOS_ENC_PIN_TABLE
               00213 ;--------------------------------------------------------
               00214 ;       Equates to used internal registers
               00215 ;--------------------------------------------------------
  00000FD8     00216 STATUS  equ     0xfd8
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000FF9     00217 PCL     equ     0xff9
  00000FFA     00218 PCLATH  equ     0xffa
  00000FFB     00219 PCLATU  equ     0xffb
  00000FE8     00220 WREG    equ     0xfe8
  00000FF6     00221 TBLPTRL equ     0xff6
  00000FF7     00222 TBLPTRH equ     0xff7
  00000FF8     00223 TBLPTRU equ     0xff8
  00000FF5     00224 TABLAT  equ     0xff5
  00000FE1     00225 FSR0L equ 0xfe1 ;; normaly 0xfe9, changed by mios-gpasm
  00000FE2     00226 FSR0H equ 0xfe2 ;; normaly 0xfea, changed by mios-gpasm
  00000FE9     00227 FSR1L equ 0xfe9 ;; normaly 0xfe1, changed by mios-gpasm
  00000FD9     00228 FSR2L   equ     0xfd9
  00000FE7     00229 INDF0 equ 0xfe7 ;; normaly 0xfef, changed by mios-gpasm
  00000FE6     00230 POSTINC0 equ 0xfe6 ;; normaly 0xfee, changed by mios-gpasm
  00000FED     00231 POSTDEC1 equ 0xfed ;; normaly 0xfe5, changed by mios-gpasm
  00000FEC     00232 PREINC1 equ 0xfec ;; normaly 0xfe4, changed by mios-gpasm
  00000FDB     00233 PLUSW2  equ     0xfdb
  00000FF3     00234 PRODL   equ     0xff3
  00000FF4     00235 PRODH   equ     0xff4
               00236 
               00237 
               00238         idata
               00239 _current_screen_num     db      0x00
               00240 _current_preset_num     db      0x00
               00241 _current_bus_num        db      0x00
               00242 _timer_ticks_count      db      0x00
               00243 _MPROC_NotifyReceivedByte_fx_status_1_1 db      0x00
               00244 
               00245 
               00246 ; Internal registers
               00247 .registers udata_ovr 0x0010 ;; normaly 0x0000, changed by mios-gpasm
               00248 r0x00   res     1
               00249 r0x01   res     1
               00250 r0x02   res     1
               00251 r0x03   res     1
               00252 r0x04   res     1
               00253 r0x05   res     1
               00254 r0x06   res     1
               00255 r0x07   res     1
               00256 r0x08   res     1
               00257 r0x09   res     1
               00258 r0x0a   res     1
               00259 r0x0b   res     1
               00260 r0x0c   res     1
               00261 r0x0d   res     1
               00262 r0x0e   res     1
               00263 r0x0f   res     1
               00264 r0x10   res     1
               00265 r0x11   res     1
               00266 r0x12   res     1
               00267 r0x13   res     1
               00268 r0x14   res     1
               00269 r0x15   res     1
               00270 
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271 udata_main_0    udata
               00272 _current_preset res     64
               00273 
               00274 udata_main_1    udata
               00275 _midi_inout_map res     256
               00276 
               00277 ;--------------------------------------------------------
               00278 ; global & static initialisations
               00279 ;--------------------------------------------------------
               00280 ; I code from now on!
               00281 ; ; Starting pCode block
               00282 S_main__AIN_NotifyChange        code
0000           00283 _AIN_NotifyChange:
               00284 ;       .line   353; main.c     void AIN_NotifyChange(unsigned char pin, unsigned int pin_value) __wparam{
0000 CFD9 FFED 00285         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 00286         MOVFF   FSR1L, FSR2L
               00287 ;       .line   354; main.c     }
0008 CFEC FFD9 00288         MOVFF   PREINC1, FSR2L
000C 0012      00289         RETURN  
               00290 
               00291 ; ; Starting pCode block
               00292 S_main__ENC_NotifyChange        code
0000           00293 _ENC_NotifyChange:
               00294 ;       .line   347; main.c     void ENC_NotifyChange(unsigned char encoder, char incrementer) __wparam{
0000 CFD9 FFED 00295         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 00296         MOVFF   FSR1L, FSR2L
               00297 ;       .line   348; main.c     }
0008 CFEC FFD9 00298         MOVFF   PREINC1, FSR2L
000C 0012      00299         RETURN  
               00300 
               00301 ; ; Starting pCode block
               00302 S_main__SR_Service_Finish       code
0000           00303 _SR_Service_Finish:
               00304 ;       .line   340; main.c     }
0000 0012      00305         RETURN  
               00306 
               00307 ; ; Starting pCode block
               00308 S_main__SR_Service_Prepare      code
0000           00309 _SR_Service_Prepare:
               00310 ;       .line   334; main.c     }
0000 0012      00311         RETURN  
               00312 
               00313 ; ; Starting pCode block
               00314 S_main__MPROC_NotifyTimeout     code
0000           00315 _MPROC_NotifyTimeout:
               00316 ;       .line   327; main.c     }
0000 0012      00317         RETURN  
               00318 
               00319 ; ; Starting pCode block
               00320 S_main__MPROC_NotifyFoundEvent  code
0000           00321 _MPROC_NotifyFoundEvent:
               00322 ;       .line   319; main.c     void MPROC_NotifyFoundEvent(unsigned entry, unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
0000 CFD9 FFED 00323         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 00324         MOVFF   FSR1L, FSR2L
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325 ;       .line   320; main.c     }
0008 CFEC FFD9 00326         MOVFF   PREINC1, FSR2L
000C 0012      00327         RETURN  
               00328 
               00329 ; ; Starting pCode block
               00330 S_main__Tick    code
0000           00331 _Tick:
               00332 ;       .line   313; main.c     }
0000 0012      00333         RETURN  
               00334 
               00335 ; ; Starting pCode block
               00336 S_main__DISPLAY_Tick    code
0000           00337 _DISPLAY_Tick:
               00338 ;       .line   307; main.c     }
0000 0012      00339         RETURN  
               00340 
               00341 ; ; Starting pCode block
               00342 S_main__DISPLAY_Init    code
0000           00343 _DISPLAY_Init:
               00344 ;       .line   300; main.c     }
0000 0012      00345         RETURN  
               00346 
               00347 ; ; Starting pCode block
               00348 S_main__DIN_NotifyToggle        code
0000           00349 _DIN_NotifyToggle:
               00350 ;       .line   221; main.c     void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value) __wparam{
0000 CFD9 FFED 00351         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 00352         MOVFF   FSR1L, FSR2L
0008 C000 FFED 00353         MOVFF   r0x00, POSTDEC1
000C C000 FFED 00354         MOVFF   r0x01, POSTDEC1
0010 C000 FFED 00355         MOVFF   r0x02, POSTDEC1
0014 C000 FFED 00356         MOVFF   r0x03, POSTDEC1
0018 C000 FFED 00357         MOVFF   r0x04, POSTDEC1
001C C000 FFED 00358         MOVFF   r0x05, POSTDEC1
0020 C000 FFED 00359         MOVFF   r0x06, POSTDEC1
0024 C000 FFED 00360         MOVFF   r0x07, POSTDEC1
0028 C000 FFED 00361         MOVFF   r0x08, POSTDEC1
002C C000 FFED 00362         MOVFF   r0x09, POSTDEC1
0030 C000 FFED 00363         MOVFF   r0x0a, POSTDEC1
0034 C000 FFED 00364         MOVFF   r0x0b, POSTDEC1
0038 C000 FFED 00365         MOVFF   r0x0c, POSTDEC1
003C C000 FFED 00366         MOVFF   r0x0d, POSTDEC1
0040 C000 FFED 00367         MOVFF   r0x0e, POSTDEC1
0044 C000 FFED 00368         MOVFF   r0x0f, POSTDEC1
0048 C000 FFED 00369         MOVFF   r0x10, POSTDEC1
004C C000 FFED 00370         MOVFF   r0x11, POSTDEC1
0050 C000 FFED 00371         MOVFF   r0x12, POSTDEC1
0054 6E00      00372         MOVWF   r0x00
0056 0E02      00373         MOVLW   0x02
0058 CFDB F000 00374         MOVFF   PLUSW2, r0x01
               00375 ;       .line   223; main.c     MIOS_TIMER_Stop();//stops the init request countdown
005C EC00 F000 00376         CALL    _MIOS_TIMER_Stop
               00377 ;       .line   224; main.c     if(pin_value) return;//button up, nothing more to do    
0060 5000      00378         MOVF    r0x01, W
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0062 E000      00379         BZ      _00255_DS_
0064 EF00 F000 00380         GOTO    _00292_DS_
0068           00381 _00255_DS_:
               00382 ;       .line   225; main.c     if(pin > 7){
0068 0E08      00383         MOVLW   0x08
006A 5C00      00384         SUBWF   r0x00, W
006C A0D8      00385         BTFSS   STATUS, 0
006E EF00 F000 00386         GOTO    _00278_DS_
               00387 ;       .line   226; main.c     value = pin - 8;
0072 0EF8      00388         MOVLW   0xf8
0074 2400      00389         ADDWF   r0x00, W
0076 6E00      00390         MOVWF   r0x01
               00391 ;       .line   227; main.c     switch(current_screen_num){
0078 0E04      00392         MOVLW   0x04
007A 0000      00393         BANKSEL _current_screen_num
007C 5D00      00394         SUBWF   _current_screen_num, W, B
007E B0D8      00395         BTFSC   STATUS, 0
0080 EF00 F000 00396         GOTO    _00279_DS_
0084 C000 FFED 00397         MOVFF   r0x13, POSTDEC1
0088 C000 FFED 00398         MOVFF   r0x14, POSTDEC1
008C 6A00      00399         CLRF    r0x14
               00400 ; removed redundant BANKSEL
008E 3500      00401         RLCF    _current_screen_num, W, B
0090 3600      00402         RLCF    r0x14, F
0092 34E8      00403         RLCF    WREG, W
0094 3600      00404         RLCF    r0x14, F
0096 0BFC      00405         ANDLW   0xfc
0098 6E00      00406         MOVWF   r0x13
009A 0E00      00407         MOVLW   UPPER(_00327_DS_)
009C 6EFB      00408         MOVWF   PCLATU
009E 0E00      00409         MOVLW   HIGH(_00327_DS_)
00A0 6EFA      00410         MOVWF   PCLATH
00A2 0E00      00411         MOVLW   LOW(_00327_DS_)
00A4 2600      00412         ADDWF   r0x13, F
00A6 5000      00413         MOVF    r0x14, W
00A8 22FA      00414         ADDWFC  PCLATH, F
00AA B0D8      00415         BTFSC   STATUS, 0
00AC 2AFB      00416         INCF    PCLATU, F
00AE 5000      00417         MOVF    r0x13, W
00B0 CFEC F000 00418         MOVFF   PREINC1, r0x14
00B4 CFEC F000 00419         MOVFF   PREINC1, r0x13
00B8 6EF9      00420         MOVWF   PCL
00BA           00421 _00327_DS_:
00BA EF00 F000 00422         GOTO    _00256_DS_
00BE EF00 F000 00423         GOTO    _00257_DS_
00C2 EF00 F000 00424         GOTO    _00258_DS_
00C6 EF00 F000 00425         GOTO    _00264_DS_
00CA           00426 _00256_DS_:
               00427 ;       .line   229; main.c     current_preset_num = value;                             
00CA C000 F000 00428         MOVFF   r0x01, _current_preset_num
00CE 0000      00429         BANKSEL _current_preset_num
               00430 ;       .line   230; main.c     load_preset(current_preset_num);
00D0 5100      00431         MOVF    _current_preset_num, W, B
00D2 EC00 F000 00432         CALL    _load_preset
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00D6 0000      00433         BANKSEL _current_preset_num
               00434 ;       .line   231; main.c     MIOS_EEPROM_Write(0x01,current_preset_num);
00D8 5100      00435         MOVF    _current_preset_num, W, B
00DA 6EED      00436         MOVWF   POSTDEC1
00DC 0E01      00437         MOVLW   0x01
00DE EC00 F000 00438         CALL    _MIOS_EEPROM_Write
00E2 2AE9      00439         INCF    FSR1L, F
               00440 ;       .line   232; main.c     break;                  
00E4 EF00 F000 00441         GOTO    _00279_DS_
00E8           00442 _00257_DS_:
               00443 ;       .line   234; main.c     current_bus_num = value;
00E8 C000 F000 00444         MOVFF   r0x01, _current_bus_num
00EC 0000      00445         BANKSEL _current_preset_num
               00446 ;       .line   235; main.c     MIOS_EEPROM_Write(0x03,current_preset_num);
00EE 5100      00447         MOVF    _current_preset_num, W, B
00F0 6EED      00448         MOVWF   POSTDEC1
00F2 0E03      00449         MOVLW   0x03
00F4 EC00 F000 00450         CALL    _MIOS_EEPROM_Write
00F8 2AE9      00451         INCF    FSR1L, F
               00452 ;       .line   236; main.c     break;                  
00FA EF00 F000 00453         GOTO    _00279_DS_
00FE           00454 _00258_DS_:
               00455 ;       .line   238; main.c     if (MIOS_DIN_PinGet(0x02)){//set/unset input chanel
00FE 0E02      00456         MOVLW   0x02
0100 EC00 F000 00457         CALL    _MIOS_DIN_PinGet
0104 6E00      00458         MOVWF   r0x02
0106 5000      00459         MOVF    r0x02, W
0108 B4D8      00460         BTFSC   STATUS, 2
010A D000      00461         BRA     _00260_DS_
               00462 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
               00463 ; ;Unrolled 8 X 8 multiplication
               00464 ; ;FIXME: the function does not support result==WREG
010C 0000      00465         BANKSEL _current_bus_num
               00466 ;       .line   239; main.c     current_preset[current_bus_num].inputs = 
010E 5100      00467         MOVF    _current_bus_num, W, B
0110 0D04      00468         MULLW   0x04
0112 CFF3 F000 00469         MOVFF   PRODL, r0x02
0116 0E00      00470         MOVLW   LOW(_current_preset)
0118 2600      00471         ADDWF   r0x02, F
011A 0E00      00472         MOVLW   HIGH(_current_preset)
011C 6A00      00473         CLRF    r0x03
011E 2200      00474         ADDWFC  r0x03, F
0120 C000 F000 00475         MOVFF   r0x02, r0x04
0124 C000 F000 00476         MOVFF   r0x03, r0x05
               00477 ;       .line   240; main.c     current_preset[current_bus_num].inputs==int_bit_ormask[value] ? 0x0000 :int_bit_ormask[value];
0128 C000 FFE1 00478         MOVFF   r0x02, FSR0L
012C C000 FFE2 00479         MOVFF   r0x03, FSR0H
0130 CFE6 F000 00480         MOVFF   POSTINC0, r0x02
0134 CFE7 F000 00481         MOVFF   INDF0, r0x03
               00482 ; ;multiply lit val:0x02 by variable r0x01 and store in r0x06
               00483 ; ;Unrolled 8 X 8 multiplication
               00484 ; ;FIXME: the function does not support result==WREG
0138 90D8      00485         BCF     STATUS, 0
013A 3400      00486         RLCF    r0x01, W
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
013C 6E00      00487         MOVWF   r0x06
013E 0E00      00488         MOVLW   LOW(_int_bit_ormask)
0140 2600      00489         ADDWF   r0x06, F
0142 0E00      00490         MOVLW   HIGH(_int_bit_ormask)
0144 6A00      00491         CLRF    r0x07
0146 2200      00492         ADDWFC  r0x07, F
0148 0E00      00493         MOVLW   UPPER(_int_bit_ormask)
014A 6A00      00494         CLRF    r0x08
014C 2200      00495         ADDWFC  r0x08, F
014E C000 FFF6 00496         MOVFF   r0x06, TBLPTRL
0152 C000 FFF7 00497         MOVFF   r0x07, TBLPTRH
0156 C000 FFF8 00498         MOVFF   r0x08, TBLPTRU
015A 0009      00499         TBLRD*+ 
015C CFF5 F000 00500         MOVFF   TABLAT, r0x06
0160 0009      00501         TBLRD*+ 
0162 CFF5 F000 00502         MOVFF   TABLAT, r0x07
0166 5000      00503         MOVF    r0x02, W
0168 1800      00504         XORWF   r0x06, W
016A E100      00505         BNZ     _00328_DS_
016C 5000      00506         MOVF    r0x03, W
016E 1800      00507         XORWF   r0x07, W
0170 E000      00508         BZ      _00329_DS_
0172           00509 _00328_DS_:
0172 D000      00510         BRA     _00294_DS_
0174           00511 _00329_DS_:
0174 6A00      00512         CLRF    r0x02
0176 6A00      00513         CLRF    r0x03
0178 D000      00514         BRA     _00295_DS_
017A           00515 _00294_DS_:
017A C000 F000 00516         MOVFF   r0x06, r0x02
017E C000 F000 00517         MOVFF   r0x07, r0x03
0182           00518 _00295_DS_:
0182 C000 FFE1 00519         MOVFF   r0x04, FSR0L
0186 C000 FFE2 00520         MOVFF   r0x05, FSR0H
018A C000 FFE6 00521         MOVFF   r0x02, POSTINC0
018E C000 FFE7 00522         MOVFF   r0x03, INDF0
0192 D000      00523         BRA     _00310_DS_
               00524 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
               00525 ; ;Unrolled 8 X 8 multiplication
               00526 ; ;FIXME: the function does not support result==WREG
0194           00527 _00260_DS_:
0194 0000      00528         BANKSEL _current_bus_num
               00529 ;       .line   243; main.c     current_preset[current_bus_num].inputs = 
0196 5100      00530         MOVF    _current_bus_num, W, B
0198 0D04      00531         MULLW   0x04
019A CFF3 F000 00532         MOVFF   PRODL, r0x02
019E 0E00      00533         MOVLW   LOW(_current_preset)
01A0 2600      00534         ADDWF   r0x02, F
01A2 0E00      00535         MOVLW   HIGH(_current_preset)
01A4 6A00      00536         CLRF    r0x03
01A6 2200      00537         ADDWFC  r0x03, F
01A8 C000 F000 00538         MOVFF   r0x02, r0x04
01AC C000 F000 00539         MOVFF   r0x03, r0x05
               00540 ;       .line   244; main.c     (current_preset[current_bus_num].inputs & int_bit_ormask[value])?
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01B0 C000 FFE1 00541         MOVFF   r0x02, FSR0L
01B4 C000 FFE2 00542         MOVFF   r0x03, FSR0H
01B8 CFE6 F000 00543         MOVFF   POSTINC0, r0x02
01BC CFE7 F000 00544         MOVFF   INDF0, r0x03
               00545 ; ;multiply lit val:0x02 by variable r0x01 and store in r0x06
               00546 ; ;Unrolled 8 X 8 multiplication
               00547 ; ;FIXME: the function does not support result==WREG
01C0 90D8      00548         BCF     STATUS, 0
01C2 3400      00549         RLCF    r0x01, W
01C4 6E00      00550         MOVWF   r0x06
01C6 0E00      00551         MOVLW   LOW(_int_bit_ormask)
01C8 2600      00552         ADDWF   r0x06, F
01CA 0E00      00553         MOVLW   HIGH(_int_bit_ormask)
01CC 6A00      00554         CLRF    r0x07
01CE 2200      00555         ADDWFC  r0x07, F
01D0 0E00      00556         MOVLW   UPPER(_int_bit_ormask)
01D2 6A00      00557         CLRF    r0x08
01D4 2200      00558         ADDWFC  r0x08, F
01D6 C000 FFF6 00559         MOVFF   r0x06, TBLPTRL
01DA C000 FFF7 00560         MOVFF   r0x07, TBLPTRH
01DE C000 FFF8 00561         MOVFF   r0x08, TBLPTRU
01E2 0009      00562         TBLRD*+ 
01E4 CFF5 F000 00563         MOVFF   TABLAT, r0x06
01E8 0009      00564         TBLRD*+ 
01EA CFF5 F000 00565         MOVFF   TABLAT, r0x07
01EE 5000      00566         MOVF    r0x06, W
01F0 1400      00567         ANDWF   r0x02, W
01F2 6E00      00568         MOVWF   r0x08
01F4 5000      00569         MOVF    r0x07, W
01F6 1400      00570         ANDWF   r0x03, W
01F8 6E00      00571         MOVWF   r0x09
01FA 5000      00572         MOVF    r0x08, W
01FC 1000      00573         IORWF   r0x09, W
01FE E000      00574         BZ      _00296_DS_
               00575 ;       .line   245; main.c     (current_preset[current_bus_num].inputs ^ int_bit_ormask[value]):
0200 5000      00576         MOVF    r0x06, W
0202 1800      00577         XORWF   r0x02, W
0204 6E00      00578         MOVWF   r0x08
0206 5000      00579         MOVF    r0x07, W
0208 1800      00580         XORWF   r0x03, W
020A 6E00      00581         MOVWF   r0x09
020C D000      00582         BRA     _00297_DS_
020E           00583 _00296_DS_:
               00584 ;       .line   246; main.c     (current_preset[current_bus_num].inputs | int_bit_ormask[value]);
020E 5000      00585         MOVF    r0x06, W
0210 1000      00586         IORWF   r0x02, W
0212 6E00      00587         MOVWF   r0x08
0214 5000      00588         MOVF    r0x07, W
0216 1000      00589         IORWF   r0x03, W
0218 6E00      00590         MOVWF   r0x09
021A           00591 _00297_DS_:
021A C000 FFE1 00592         MOVFF   r0x04, FSR0L
021E C000 FFE2 00593         MOVFF   r0x05, FSR0H
0222 C000 FFE6 00594         MOVFF   r0x08, POSTINC0
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0226 C000 FFE7 00595         MOVFF   r0x09, INDF0
               00596 ; ;multiply lit val:0x10 by variable r0x01 and store in r0x02
               00597 ; ;Unrolled 8 X 8 multiplication
               00598 ; ;FIXME: the function does not support result==WREG
022A           00599 _00310_DS_:
               00600 ;       .line   250; main.c     for(chn_out=0;chn_out<16;chn_out++){
022A 5000      00601         MOVF    r0x01, W
022C 0D10      00602         MULLW   0x10
022E CFF3 F000 00603         MOVFF   PRODL, r0x02
0232 CFF4 F000 00604         MOVFF   PRODH, r0x03
0236 0E00      00605         MOVLW   LOW(_midi_inout_map)
0238 2600      00606         ADDWF   r0x02, F
023A 0E00      00607         MOVLW   HIGH(_midi_inout_map)
023C 2200      00608         ADDWFC  r0x03, F
023E 6A00      00609         CLRF    r0x04
0240 6A00      00610         CLRF    r0x05
0242 6A00      00611         CLRF    r0x06
0244           00612 _00280_DS_:
0244 0E10      00613         MOVLW   0x10
0246 5C00      00614         SUBWF   r0x05, W
0248 B0D8      00615         BTFSC   STATUS, 0
024A D000      00616         BRA     _00283_DS_
               00617 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x07
               00618 ; ;Unrolled 8 X 8 multiplication
               00619 ; ;FIXME: the function does not support result==WREG
024C 0000      00620         BANKSEL _current_bus_num
               00621 ;       .line   251; main.c     if(current_preset[current_bus_num].outputs & int_bit_ormask[chn_out])//this is a bus output
024E 5100      00622         MOVF    _current_bus_num, W, B
0250 0D04      00623         MULLW   0x04
0252 CFF3 F000 00624         MOVFF   PRODL, r0x07
0256 0E00      00625         MOVLW   LOW(_current_preset)
0258 2600      00626         ADDWF   r0x07, F
025A 0E00      00627         MOVLW   HIGH(_current_preset)
025C 6A00      00628         CLRF    r0x08
025E 2200      00629         ADDWFC  r0x08, F
0260 0E02      00630         MOVLW   0x02
0262 2600      00631         ADDWF   r0x07, F
0264 B0D8      00632         BTFSC   STATUS, 0
0266 2A00      00633         INCF    r0x08, F
0268 C000 FFE1 00634         MOVFF   r0x07, FSR0L
026C C000 FFE2 00635         MOVFF   r0x08, FSR0H
0270 CFE6 F000 00636         MOVFF   POSTINC0, r0x07
0274 CFE7 F000 00637         MOVFF   INDF0, r0x08
0278 0E00      00638         MOVLW   LOW(_int_bit_ormask)
027A 2400      00639         ADDWF   r0x06, W
027C 6E00      00640         MOVWF   r0x09
027E 6A00      00641         CLRF    r0x0a
0280 0E00      00642         MOVLW   HIGH(_int_bit_ormask)
0282 2200      00643         ADDWFC  r0x0a, F
0284 6A00      00644         CLRF    r0x0b
0286 0E00      00645         MOVLW   UPPER(_int_bit_ormask)
0288 2200      00646         ADDWFC  r0x0b, F
028A C000 FFF6 00647         MOVFF   r0x09, TBLPTRL
028E C000 FFF7 00648         MOVFF   r0x0a, TBLPTRH
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0292 C000 FFF8 00649         MOVFF   r0x0b, TBLPTRU
0296 0009      00650         TBLRD*+ 
0298 CFF5 F000 00651         MOVFF   TABLAT, r0x09
029C 0009      00652         TBLRD*+ 
029E CFF5 F000 00653         MOVFF   TABLAT, r0x0a
02A2 5000      00654         MOVF    r0x09, W
02A4 1600      00655         ANDWF   r0x07, F
02A6 5000      00656         MOVF    r0x0a, W
02A8 1600      00657         ANDWF   r0x08, F
02AA 5000      00658         MOVF    r0x07, W
02AC 1000      00659         IORWF   r0x08, W
02AE E000      00660         BZ      _00282_DS_
               00661 ;       .line   252; main.c     midi_inout_map[value][i++] = chn_out;
02B0 C000 F000 00662         MOVFF   r0x04, r0x07
02B4 2A00      00663         INCF    r0x04, F
02B6 5000      00664         MOVF    r0x02, W
02B8 2600      00665         ADDWF   r0x07, F
02BA 5000      00666         MOVF    r0x03, W
02BC 6A00      00667         CLRF    r0x08
02BE 2200      00668         ADDWFC  r0x08, F
02C0 C000 FFE1 00669         MOVFF   r0x07, FSR0L
02C4 C000 FFE2 00670         MOVFF   r0x08, FSR0H
02C8 C000 FFE7 00671         MOVFF   r0x05, INDF0
02CC           00672 _00282_DS_:
               00673 ;       .line   250; main.c     for(chn_out=0;chn_out<16;chn_out++){
02CC 2A00      00674         INCF    r0x06, F
02CE 2A00      00675         INCF    r0x06, F
02D0 2A00      00676         INCF    r0x05, F
02D2 D000      00677         BRA     _00280_DS_
02D4           00678 _00283_DS_:
               00679 ;       .line   254; main.c     midi_inout_map[value][i] = -1;
02D4 5000      00680         MOVF    r0x04, W
02D6 2600      00681         ADDWF   r0x02, F
02D8 6AE8      00682         CLRF    WREG
02DA 2200      00683         ADDWFC  r0x03, F
02DC C000 FFE1 00684         MOVFF   r0x02, FSR0L
02E0 C000 FFE2 00685         MOVFF   r0x03, FSR0H
02E4 0EFF      00686         MOVLW   0xff
02E6 6EE7      00687         MOVWF   INDF0
               00688 ;       .line   255; main.c     break;                  
02E8 D000      00689         BRA     _00279_DS_
02EA           00690 _00264_DS_:
               00691 ;       .line   257; main.c     if (MIOS_DIN_PinGet(0x03)){//set/unset output chanel
02EA 0E03      00692         MOVLW   0x03
02EC EC00 F000 00693         CALL    _MIOS_DIN_PinGet
02F0 6E00      00694         MOVWF   r0x02
02F2 5000      00695         MOVF    r0x02, W
02F4 B4D8      00696         BTFSC   STATUS, 2
02F6 D000      00697         BRA     _00266_DS_
               00698 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
               00699 ; ;Unrolled 8 X 8 multiplication
               00700 ; ;FIXME: the function does not support result==WREG
02F8 0000      00701         BANKSEL _current_bus_num
               00702 ;       .line   258; main.c     current_preset[current_bus_num].outputs = 
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
02FA 5100      00703         MOVF    _current_bus_num, W, B
02FC 0D04      00704         MULLW   0x04
02FE CFF3 F000 00705         MOVFF   PRODL, r0x02
0302 0E00      00706         MOVLW   LOW(_current_preset)
0304 2600      00707         ADDWF   r0x02, F
0306 0E00      00708         MOVLW   HIGH(_current_preset)
0308 6A00      00709         CLRF    r0x03
030A 2200      00710         ADDWFC  r0x03, F
030C 0E02      00711         MOVLW   0x02
030E 2600      00712         ADDWF   r0x02, F
0310 B0D8      00713         BTFSC   STATUS, 0
0312 2A00      00714         INCF    r0x03, F
               00715 ;       .line   259; main.c     (current_preset[current_bus_num].outputs==int_bit_ormask[value]) ? 
0314 C000 FFE1 00716         MOVFF   r0x02, FSR0L
0318 C000 FFE2 00717         MOVFF   r0x03, FSR0H
031C CFE6 F000 00718         MOVFF   POSTINC0, r0x04
0320 CFE7 F000 00719         MOVFF   INDF0, r0x05
               00720 ; ;multiply lit val:0x02 by variable r0x01 and store in r0x06
               00721 ; ;Unrolled 8 X 8 multiplication
               00722 ; ;FIXME: the function does not support result==WREG
0324 90D8      00723         BCF     STATUS, 0
0326 3400      00724         RLCF    r0x01, W
0328 6E00      00725         MOVWF   r0x06
032A 0E00      00726         MOVLW   LOW(_int_bit_ormask)
032C 2600      00727         ADDWF   r0x06, F
032E 0E00      00728         MOVLW   HIGH(_int_bit_ormask)
0330 6A00      00729         CLRF    r0x07
0332 2200      00730         ADDWFC  r0x07, F
0334 0E00      00731         MOVLW   UPPER(_int_bit_ormask)
0336 6A00      00732         CLRF    r0x08
0338 2200      00733         ADDWFC  r0x08, F
033A C000 FFF6 00734         MOVFF   r0x06, TBLPTRL
033E C000 FFF7 00735         MOVFF   r0x07, TBLPTRH
0342 C000 FFF8 00736         MOVFF   r0x08, TBLPTRU
0346 0009      00737         TBLRD*+ 
0348 CFF5 F000 00738         MOVFF   TABLAT, r0x06
034C 0009      00739         TBLRD*+ 
034E CFF5 F000 00740         MOVFF   TABLAT, r0x07
0352 5000      00741         MOVF    r0x04, W
0354 1800      00742         XORWF   r0x06, W
0356 E100      00743         BNZ     _00331_DS_
0358 5000      00744         MOVF    r0x05, W
035A 1800      00745         XORWF   r0x07, W
035C E000      00746         BZ      _00332_DS_
035E           00747 _00331_DS_:
035E D000      00748         BRA     _00298_DS_
0360           00749 _00332_DS_:
               00750 ;       .line   260; main.c     0x0000 :int_bit_ormask[value];
0360 6A00      00751         CLRF    r0x04
0362 6A00      00752         CLRF    r0x05
0364 D000      00753         BRA     _00299_DS_
0366           00754 _00298_DS_:
0366 C000 F000 00755         MOVFF   r0x06, r0x04
036A C000 F000 00756         MOVFF   r0x07, r0x05
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
036E           00757 _00299_DS_:
036E C000 FFE1 00758         MOVFF   r0x02, FSR0L
0372 C000 FFE2 00759         MOVFF   r0x03, FSR0H
0376 C000 FFE6 00760         MOVFF   r0x04, POSTINC0
037A C000 FFE7 00761         MOVFF   r0x05, INDF0
037E D000      00762         BRA     _00319_DS_
               00763 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
               00764 ; ;Unrolled 8 X 8 multiplication
               00765 ; ;FIXME: the function does not support result==WREG
0380           00766 _00266_DS_:
0380 0000      00767         BANKSEL _current_bus_num
               00768 ;       .line   263; main.c     current_preset[current_bus_num].outputs = 
0382 5100      00769         MOVF    _current_bus_num, W, B
0384 0D04      00770         MULLW   0x04
0386 CFF3 F000 00771         MOVFF   PRODL, r0x02
038A 0E00      00772         MOVLW   LOW(_current_preset)
038C 2600      00773         ADDWF   r0x02, F
038E 0E00      00774         MOVLW   HIGH(_current_preset)
0390 6A00      00775         CLRF    r0x03
0392 2200      00776         ADDWFC  r0x03, F
0394 0E02      00777         MOVLW   0x02
0396 2600      00778         ADDWF   r0x02, F
0398 B0D8      00779         BTFSC   STATUS, 0
039A 2A00      00780         INCF    r0x03, F
               00781 ;       .line   264; main.c     (current_preset[current_bus_num].outputs & int_bit_ormask[value])?
039C C000 FFE1 00782         MOVFF   r0x02, FSR0L
03A0 C000 FFE2 00783         MOVFF   r0x03, FSR0H
03A4 CFE6 F000 00784         MOVFF   POSTINC0, r0x04
03A8 CFE7 F000 00785         MOVFF   INDF0, r0x05
               00786 ; ;multiply lit val:0x02 by variable r0x01 and store in r0x01
               00787 ; ;Unrolled 8 X 8 multiplication
               00788 ; ;FIXME: the function does not support result==WREG
03AC 90D8      00789         BCF     STATUS, 0
03AE 3600      00790         RLCF    r0x01, F
03B0 0E00      00791         MOVLW   LOW(_int_bit_ormask)
03B2 2600      00792         ADDWF   r0x01, F
03B4 0E00      00793         MOVLW   HIGH(_int_bit_ormask)
03B6 6A00      00794         CLRF    r0x06
03B8 2200      00795         ADDWFC  r0x06, F
03BA 0E00      00796         MOVLW   UPPER(_int_bit_ormask)
03BC 6A00      00797         CLRF    r0x07
03BE 2200      00798         ADDWFC  r0x07, F
03C0 C000 FFF6 00799         MOVFF   r0x01, TBLPTRL
03C4 C000 FFF7 00800         MOVFF   r0x06, TBLPTRH
03C8 C000 FFF8 00801         MOVFF   r0x07, TBLPTRU
03CC 0009      00802         TBLRD*+ 
03CE CFF5 F000 00803         MOVFF   TABLAT, r0x01
03D2 0009      00804         TBLRD*+ 
03D4 CFF5 F000 00805         MOVFF   TABLAT, r0x06
03D8 5000      00806         MOVF    r0x01, W
03DA 1400      00807         ANDWF   r0x04, W
03DC 6E00      00808         MOVWF   r0x07
03DE 5000      00809         MOVF    r0x06, W
03E0 1400      00810         ANDWF   r0x05, W
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
03E2 6E00      00811         MOVWF   r0x08
03E4 5000      00812         MOVF    r0x07, W
03E6 1000      00813         IORWF   r0x08, W
03E8 E000      00814         BZ      _00300_DS_
               00815 ;       .line   265; main.c     (current_preset[current_bus_num].outputs ^ int_bit_ormask[value]):
03EA 5000      00816         MOVF    r0x01, W
03EC 1800      00817         XORWF   r0x04, W
03EE 6E00      00818         MOVWF   r0x07
03F0 5000      00819         MOVF    r0x06, W
03F2 1800      00820         XORWF   r0x05, W
03F4 6E00      00821         MOVWF   r0x08
03F6 D000      00822         BRA     _00301_DS_
03F8           00823 _00300_DS_:
               00824 ;       .line   266; main.c     (current_preset[current_bus_num].outputs | int_bit_ormask[value]);
03F8 5000      00825         MOVF    r0x01, W
03FA 1000      00826         IORWF   r0x04, W
03FC 6E00      00827         MOVWF   r0x07
03FE 5000      00828         MOVF    r0x06, W
0400 1000      00829         IORWF   r0x05, W
0402 6E00      00830         MOVWF   r0x08
0404           00831 _00301_DS_:
0404 C000 FFE1 00832         MOVFF   r0x02, FSR0L
0408 C000 FFE2 00833         MOVFF   r0x03, FSR0H
040C C000 FFE6 00834         MOVFF   r0x07, POSTINC0
0410 C000 FFE7 00835         MOVFF   r0x08, INDF0
0414           00836 _00319_DS_:
               00837 ;       .line   269; main.c     for(chn_in=0;chn_in<16;chn_in++){
0414 6A00      00838         CLRF    r0x01
0416 6A00      00839         CLRF    r0x02
0418 6A00      00840         CLRF    r0x03
041A 6A00      00841         CLRF    r0x04
041C 6A00      00842         CLRF    r0x05
041E 6A00      00843         CLRF    r0x06
0420           00844 _00288_DS_:
0420 0E10      00845         MOVLW   0x10
0422 5C00      00846         SUBWF   r0x01, W
0424 B0D8      00847         BTFSC   STATUS, 0
0426 D000      00848         BRA     _00279_DS_
               00849 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x07
               00850 ; ;Unrolled 8 X 8 multiplication
               00851 ; ;FIXME: the function does not support result==WREG
0428 0000      00852         BANKSEL _current_bus_num
               00853 ;       .line   270; main.c     if(current_preset[current_bus_num].inputs & int_bit_ormask[chn_in]){//this is a bus input
042A 5100      00854         MOVF    _current_bus_num, W, B
042C 0D04      00855         MULLW   0x04
042E CFF3 F000 00856         MOVFF   PRODL, r0x07
0432 0E00      00857         MOVLW   LOW(_current_preset)
0434 2400      00858         ADDWF   r0x07, W
0436 6E00      00859         MOVWF   r0x08
0438 6A00      00860         CLRF    r0x09
043A 0E00      00861         MOVLW   HIGH(_current_preset)
043C 2200      00862         ADDWFC  r0x09, F
043E C000 FFE1 00863         MOVFF   r0x08, FSR0L
0442 C000 FFE2 00864         MOVFF   r0x09, FSR0H
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0446 CFE6 F000 00865         MOVFF   POSTINC0, r0x08
044A CFE7 F000 00866         MOVFF   INDF0, r0x09
044E 0E00      00867         MOVLW   LOW(_int_bit_ormask)
0450 2400      00868         ADDWF   r0x06, W
0452 6E00      00869         MOVWF   r0x0a
0454 6A00      00870         CLRF    r0x0b
0456 0E00      00871         MOVLW   HIGH(_int_bit_ormask)
0458 2200      00872         ADDWFC  r0x0b, F
045A 6A00      00873         CLRF    r0x0c
045C 0E00      00874         MOVLW   UPPER(_int_bit_ormask)
045E 2200      00875         ADDWFC  r0x0c, F
0460 C000 FFF6 00876         MOVFF   r0x0a, TBLPTRL
0464 C000 FFF7 00877         MOVFF   r0x0b, TBLPTRH
0468 C000 FFF8 00878         MOVFF   r0x0c, TBLPTRU
046C 0009      00879         TBLRD*+ 
046E CFF5 F000 00880         MOVFF   TABLAT, r0x0a
0472 0009      00881         TBLRD*+ 
0474 CFF5 F000 00882         MOVFF   TABLAT, r0x0b
0478 5000      00883         MOVF    r0x0a, W
047A 1600      00884         ANDWF   r0x08, F
047C 5000      00885         MOVF    r0x0b, W
047E 1600      00886         ANDWF   r0x09, F
0480 5000      00887         MOVF    r0x08, W
0482 1000      00888         IORWF   r0x09, W
0484 B4D8      00889         BTFSC   STATUS, 2
0486 D000      00890         BRA     _00290_DS_
               00891 ;       .line   272; main.c     for(chn_out=0;chn_out<16;chn_out++){
0488 0E00      00892         MOVLW   LOW(_midi_inout_map)
048A 2400      00893         ADDWF   r0x02, W
048C 6E00      00894         MOVWF   r0x08
048E 0E00      00895         MOVLW   HIGH(_midi_inout_map)
0490 2000      00896         ADDWFC  r0x03, W
0492 6E00      00897         MOVWF   r0x09
0494 0E00      00898         MOVLW   LOW(_current_preset)
0496 2600      00899         ADDWF   r0x07, F
0498 0E00      00900         MOVLW   HIGH(_current_preset)
049A 6A00      00901         CLRF    r0x0a
049C 2200      00902         ADDWFC  r0x0a, F
049E 0E02      00903         MOVLW   0x02
04A0 2600      00904         ADDWF   r0x07, F
04A2 B0D8      00905         BTFSC   STATUS, 0
04A4 2A00      00906         INCF    r0x0a, F
04A6 6A00      00907         CLRF    r0x0b
04A8 6A00      00908         CLRF    r0x0c
04AA 6A00      00909         CLRF    r0x0d
04AC           00910 _00284_DS_:
04AC 0E10      00911         MOVLW   0x10
04AE 5C00      00912         SUBWF   r0x0c, W
04B0 E200      00913         BC      _00287_DS_
               00914 ;       .line   273; main.c     if(current_preset[current_bus_num].outputs & int_bit_ormask[chn_out])//this is a bus output
04B2 C000 FFE1 00915         MOVFF   r0x07, FSR0L
04B6 C000 FFE2 00916         MOVFF   r0x0a, FSR0H
04BA CFE6 F000 00917         MOVFF   POSTINC0, r0x0e
04BE CFE7 F000 00918         MOVFF   INDF0, r0x0f
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
04C2 0E00      00919         MOVLW   LOW(_int_bit_ormask)
04C4 2400      00920         ADDWF   r0x0d, W
04C6 6E00      00921         MOVWF   r0x10
04C8 6A00      00922         CLRF    r0x11
04CA 0E00      00923         MOVLW   HIGH(_int_bit_ormask)
04CC 2200      00924         ADDWFC  r0x11, F
04CE 6A00      00925         CLRF    r0x12
04D0 0E00      00926         MOVLW   UPPER(_int_bit_ormask)
04D2 2200      00927         ADDWFC  r0x12, F
04D4 C000 FFF6 00928         MOVFF   r0x10, TBLPTRL
04D8 C000 FFF7 00929         MOVFF   r0x11, TBLPTRH
04DC C000 FFF8 00930         MOVFF   r0x12, TBLPTRU
04E0 0009      00931         TBLRD*+ 
04E2 CFF5 F000 00932         MOVFF   TABLAT, r0x10
04E6 0009      00933         TBLRD*+ 
04E8 CFF5 F000 00934         MOVFF   TABLAT, r0x11
04EC 5000      00935         MOVF    r0x10, W
04EE 1600      00936         ANDWF   r0x0e, F
04F0 5000      00937         MOVF    r0x11, W
04F2 1600      00938         ANDWF   r0x0f, F
04F4 5000      00939         MOVF    r0x0e, W
04F6 1000      00940         IORWF   r0x0f, W
04F8 E000      00941         BZ      _00286_DS_
               00942 ;       .line   274; main.c     midi_inout_map[chn_in][i++] = chn_out;
04FA C000 F000 00943         MOVFF   r0x0b, r0x0e
04FE 2A00      00944         INCF    r0x0b, F
0500 5000      00945         MOVF    r0x08, W
0502 2600      00946         ADDWF   r0x0e, F
0504 5000      00947         MOVF    r0x09, W
0506 6A00      00948         CLRF    r0x0f
0508 2200      00949         ADDWFC  r0x0f, F
050A C000 FFE1 00950         MOVFF   r0x0e, FSR0L
050E C000 FFE2 00951         MOVFF   r0x0f, FSR0H
0512 C000 FFE7 00952         MOVFF   r0x0c, INDF0
0516           00953 _00286_DS_:
               00954 ;       .line   272; main.c     for(chn_out=0;chn_out<16;chn_out++){
0516 2A00      00955         INCF    r0x0d, F
0518 2A00      00956         INCF    r0x0d, F
051A 2A00      00957         INCF    r0x0c, F
051C D000      00958         BRA     _00284_DS_
051E           00959 _00287_DS_:
               00960 ;       .line   276; main.c     midi_inout_map[chn_in][i] = -1;
051E 0E00      00961         MOVLW   LOW(_midi_inout_map)
0520 2400      00962         ADDWF   r0x04, W
0522 6E00      00963         MOVWF   r0x07
0524 0E00      00964         MOVLW   HIGH(_midi_inout_map)
0526 2000      00965         ADDWFC  r0x05, W
0528 6E00      00966         MOVWF   r0x08
052A 5000      00967         MOVF    r0x07, W
052C 2600      00968         ADDWF   r0x0b, F
052E 5000      00969         MOVF    r0x08, W
0530 6A00      00970         CLRF    r0x09
0532 2200      00971         ADDWFC  r0x09, F
0534 C000 FFE1 00972         MOVFF   r0x0b, FSR0L
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0538 C000 FFE2 00973         MOVFF   r0x09, FSR0H
053C 0EFF      00974         MOVLW   0xff
053E 6EE7      00975         MOVWF   INDF0
0540           00976 _00290_DS_:
               00977 ;       .line   269; main.c     for(chn_in=0;chn_in<16;chn_in++){
0540 0E10      00978         MOVLW   0x10
0542 2600      00979         ADDWF   r0x02, F
0544 B0D8      00980         BTFSC   STATUS, 0
0546 2A00      00981         INCF    r0x03, F
0548 0E10      00982         MOVLW   0x10
054A 2600      00983         ADDWF   r0x04, F
054C B0D8      00984         BTFSC   STATUS, 0
054E 2A00      00985         INCF    r0x05, F
0550 2A00      00986         INCF    r0x06, F
0552 2A00      00987         INCF    r0x06, F
0554 2A00      00988         INCF    r0x01, F
0556 D000      00989         BRA     _00288_DS_
0558           00990 _00278_DS_:
               00991 ;       .line   282; main.c     else if(pin < 4){
0558 0E04      00992         MOVLW   0x04
055A 5C00      00993         SUBWF   r0x00, W
055C E200      00994         BC      _00279_DS_
               00995 ;       .line   283; main.c     current_screen_num = pin;
055E C000 F000 00996         MOVFF   r0x00, _current_screen_num
0562 0000      00997         BANKSEL _current_screen_num
               00998 ;       .line   284; main.c     MIOS_EEPROM_Write(0x00, current_screen_num);
0564 5100      00999         MOVF    _current_screen_num, W, B
0566 6EED      01000         MOVWF   POSTDEC1
0568 0E00      01001         MOVLW   0x00
056A EC00 F000 01002         CALL    _MIOS_EEPROM_Write
056E 2AE9      01003         INCF    FSR1L, F
               01004 ;       .line   285; main.c     if(pin < 2){//start init request countdown
0570 0E02      01005         MOVLW   0x02
0572 5C00      01006         SUBWF   r0x00, W
0574 E200      01007         BC      _00279_DS_
0576 0000      01008         BANKSEL _timer_ticks_count
               01009 ;       .line   286; main.c     timer_ticks_count = 0;                  
0578 6B00      01010         CLRF    _timer_ticks_count, B
               01011 ;       .line   287; main.c     MIOS_TIMER_Init(0x03,0xffff);
057A 0EFF      01012         MOVLW   0xff
057C 6EED      01013         MOVWF   POSTDEC1
057E 0EFF      01014         MOVLW   0xff
0580 6EED      01015         MOVWF   POSTDEC1
0582 0E03      01016         MOVLW   0x03
0584 EC00 F000 01017         CALL    _MIOS_TIMER_Init
0588 0E02      01018         MOVLW   0x02
058A 26E9      01019         ADDWF   FSR1L, F
058C           01020 _00279_DS_:
               01021 ;       .line   290; main.c     screen_init();
058C EC00 F000 01022         CALL    _screen_init
0590           01023 _00292_DS_:
0590 CFEC F000 01024         MOVFF   PREINC1, r0x12
0594 CFEC F000 01025         MOVFF   PREINC1, r0x11
0598 CFEC F000 01026         MOVFF   PREINC1, r0x10
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
059C CFEC F000 01027         MOVFF   PREINC1, r0x0f
05A0 CFEC F000 01028         MOVFF   PREINC1, r0x0e
05A4 CFEC F000 01029         MOVFF   PREINC1, r0x0d
05A8 CFEC F000 01030         MOVFF   PREINC1, r0x0c
05AC CFEC F000 01031         MOVFF   PREINC1, r0x0b
05B0 CFEC F000 01032         MOVFF   PREINC1, r0x0a
05B4 CFEC F000 01033         MOVFF   PREINC1, r0x09
05B8 CFEC F000 01034         MOVFF   PREINC1, r0x08
05BC CFEC F000 01035         MOVFF   PREINC1, r0x07
05C0 CFEC F000 01036         MOVFF   PREINC1, r0x06
05C4 CFEC F000 01037         MOVFF   PREINC1, r0x05
05C8 CFEC F000 01038         MOVFF   PREINC1, r0x04
05CC CFEC F000 01039         MOVFF   PREINC1, r0x03
05D0 CFEC F000 01040         MOVFF   PREINC1, r0x02
05D4 CFEC F000 01041         MOVFF   PREINC1, r0x01
05D8 CFEC F000 01042         MOVFF   PREINC1, r0x00
05DC CFEC FFD9 01043         MOVFF   PREINC1, FSR2L
05E0 0012      01044         RETURN  
               01045 
               01046 ; ; Starting pCode block
               01047 S_main__MPROC_NotifyReceivedEvnt        code
0000           01048 _MPROC_NotifyReceivedEvnt:
               01049 ;       .line   204; main.c     void MPROC_NotifyReceivedEvnt(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
0000 CFD9 FFED 01050         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 01051         MOVFF   FSR1L, FSR2L
0008 C000 FFED 01052         MOVFF   r0x00, POSTDEC1
000C C000 FFED 01053         MOVFF   r0x01, POSTDEC1
0010 C000 FFED 01054         MOVFF   r0x02, POSTDEC1
0014 C000 FFED 01055         MOVFF   r0x03, POSTDEC1
0018 C000 FFED 01056         MOVFF   r0x04, POSTDEC1
001C C000 FFED 01057         MOVFF   r0x05, POSTDEC1
0020 C000 FFED 01058         MOVFF   r0x06, POSTDEC1
0024 C000 FFED 01059         MOVFF   r0x07, POSTDEC1
0028 6E00      01060         MOVWF   r0x00
002A 0E02      01061         MOVLW   0x02
002C CFDB F000 01062         MOVFF   PLUSW2, r0x01
0030 0E03      01063         MOVLW   0x03
0032 CFDB F000 01064         MOVFF   PLUSW2, r0x02
               01065 ;       .line   206; main.c     unsigned char evnt_type = evnt0 & 0xf0;
0036 0EF0      01066         MOVLW   0xf0
0038 1400      01067         ANDWF   r0x00, W
003A 6E00      01068         MOVWF   r0x03
               01069 ;       .line   207; main.c     unsigned char in_chn = evnt0 & 0x0f;
003C 0E0F      01070         MOVLW   0x0f
003E 1600      01071         ANDWF   r0x00, F
               01072 ;       .line   208; main.c     unsigned char evnt2_send = !(evnt_type == 0xc0 || evnt_type == 0xd0);
0040 5000      01073         MOVF    r0x03, W
0042 0AC0      01074         XORLW   0xc0
0044 E000      01075         BZ      _00233_DS_
0046 5000      01076         MOVF    r0x03, W
0048 0AD0      01077         XORLW   0xd0
004A E000      01078         BZ      _00233_DS_
004C 6A00      01079         CLRF    r0x04
004E D000      01080         BRA     _00234_DS_
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0050           01081 _00233_DS_:
0050 0E01      01082         MOVLW   0x01
0052 6E00      01083         MOVWF   r0x04
0054           01084 _00234_DS_:
0054 5000      01085         MOVF    r0x04, W
0056 80D8      01086         BSF     STATUS, 0
0058 66E8      01087         TSTFSZ  WREG
005A 90D8      01088         BCF     STATUS, 0
005C 6A00      01089         CLRF    r0x04
005E 3600      01090         RLCF    r0x04, F
               01091 ;       .line   209; main.c     for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
0060 6A00      01092         CLRF    r0x05
0062           01093 _00226_DS_:
0062 0E10      01094         MOVLW   0x10
0064 5C00      01095         SUBWF   r0x05, W
0066 E200      01096         BC      _00230_DS_
               01097 ; ;multiply lit val:0x10 by variable r0x00 and store in r0x06
               01098 ; ;Unrolled 8 X 8 multiplication
               01099 ; ;FIXME: the function does not support result==WREG
0068 5000      01100         MOVF    r0x00, W
006A 0D10      01101         MULLW   0x10
006C CFF3 F000 01102         MOVFF   PRODL, r0x06
0070 CFF4 F000 01103         MOVFF   PRODH, r0x07
0074 0E00      01104         MOVLW   LOW(_midi_inout_map)
0076 2600      01105         ADDWF   r0x06, F
0078 0E00      01106         MOVLW   HIGH(_midi_inout_map)
007A 2200      01107         ADDWFC  r0x07, F
007C 5000      01108         MOVF    r0x05, W
007E 2600      01109         ADDWF   r0x06, F
0080 6AE8      01110         CLRF    WREG
0082 2200      01111         ADDWFC  r0x07, F
0084 C000 FFE1 01112         MOVFF   r0x06, FSR0L
0088 C000 FFE2 01113         MOVFF   r0x07, FSR0H
008C CFE7 F000 01114         MOVFF   INDF0, r0x06
0090 5000      01115         MOVF    r0x06, W
0092 0AFF      01116         XORLW   0xff
0094 E000      01117         BZ      _00230_DS_
               01118 ;       .line   210; main.c     MIOS_MIDI_TxBufferPut(evnt_type+midi_inout_map[in_chn][i]);
0096 5000      01119         MOVF    r0x03, W
0098 2600      01120         ADDWF   r0x06, F
009A 5000      01121         MOVF    r0x06, W
009C EC00 F000 01122         CALL    _MIOS_MIDI_TxBufferPut
               01123 ;       .line   211; main.c     MIOS_MIDI_TxBufferPut(evnt1);
00A0 5000      01124         MOVF    r0x01, W
00A2 EC00 F000 01125         CALL    _MIOS_MIDI_TxBufferPut
               01126 ;       .line   212; main.c     if(evnt2_send)
00A6 5000      01127         MOVF    r0x04, W
00A8 E000      01128         BZ      _00228_DS_
               01129 ;       .line   213; main.c     MIOS_MIDI_TxBufferPut(evnt2);
00AA 5000      01130         MOVF    r0x02, W
00AC EC00 F000 01131         CALL    _MIOS_MIDI_TxBufferPut
00B0           01132 _00228_DS_:
               01133 ;       .line   209; main.c     for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
00B0 2A00      01134         INCF    r0x05, F
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00B2 D000      01135         BRA     _00226_DS_
00B4           01136 _00230_DS_:
00B4 CFEC F000 01137         MOVFF   PREINC1, r0x07
00B8 CFEC F000 01138         MOVFF   PREINC1, r0x06
00BC CFEC F000 01139         MOVFF   PREINC1, r0x05
00C0 CFEC F000 01140         MOVFF   PREINC1, r0x04
00C4 CFEC F000 01141         MOVFF   PREINC1, r0x03
00C8 CFEC F000 01142         MOVFF   PREINC1, r0x02
00CC CFEC F000 01143         MOVFF   PREINC1, r0x01
00D0 CFEC F000 01144         MOVFF   PREINC1, r0x00
00D4 CFEC FFD9 01145         MOVFF   PREINC1, FSR2L
00D8 0012      01146         RETURN  
               01147 
               01148 ; ; Starting pCode block
               01149 S_main__MPROC_NotifyReceivedByte        code
0000           01150 _MPROC_NotifyReceivedByte:
               01151 ;       .line   173; main.c     void MPROC_NotifyReceivedByte(unsigned char byte) __wparam{
0000 CFD9 FFED 01152         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 01153         MOVFF   FSR1L, FSR2L
0008 C000 FFED 01154         MOVFF   r0x00, POSTDEC1
000C C000 FFED 01155         MOVFF   r0x01, POSTDEC1
0010 6E00      01156         MOVWF   r0x00
               01157 ;       .line   176; main.c     if(byte >= 0xf0){//system status byte
0012 0EF0      01158         MOVLW   0xf0
0014 5C00      01159         SUBWF   r0x00, W
0016 70D8      01160         BTG     STATUS, 0
0018 6A00      01161         CLRF    r0x01
001A 3600      01162         RLCF    r0x01, F
001C 5000      01163         MOVF    r0x01, W
001E A4D8      01164         BTFSS   STATUS, 2
0020 D000      01165         BRA     _00205_DS_
               01166 ;       .line   177; main.c     MIOS_MIDI_TxBufferPut(byte);
0022 5000      01167         MOVF    r0x00, W
0024 EC00 F000 01168         CALL    _MIOS_MIDI_TxBufferPut
               01169 ;       .line   179; main.c     switch(byte){
0028 5000      01170         MOVF    r0x01, W
002A E100      01171         BNZ     _00198_DS_
002C 0EF4      01172         MOVLW   0xf4
002E 5C00      01173         SUBWF   r0x00, W
0030 E200      01174         BC      _00198_DS_
0032 0E10      01175         MOVLW   0x10
0034 2400      01176         ADDWF   r0x00, W
0036 6E00      01177         MOVWF   r0x01
0038 C000 FFED 01178         MOVFF   r0x02, POSTDEC1
003C C000 FFED 01179         MOVFF   r0x03, POSTDEC1
0040 6A00      01180         CLRF    r0x03
0042 3400      01181         RLCF    r0x01, W
0044 3600      01182         RLCF    r0x03, F
0046 34E8      01183         RLCF    WREG, W
0048 3600      01184         RLCF    r0x03, F
004A 0BFC      01185         ANDLW   0xfc
004C 6E00      01186         MOVWF   r0x02
004E 0E00      01187         MOVLW   UPPER(_00217_DS_)
0050 6EFB      01188         MOVWF   PCLATU
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0052 0E00      01189         MOVLW   HIGH(_00217_DS_)
0054 6EFA      01190         MOVWF   PCLATH
0056 0E00      01191         MOVLW   LOW(_00217_DS_)
0058 2600      01192         ADDWF   r0x02, F
005A 5000      01193         MOVF    r0x03, W
005C 22FA      01194         ADDWFC  PCLATH, F
005E B0D8      01195         BTFSC   STATUS, 0
0060 2AFB      01196         INCF    PCLATU, F
0062 5000      01197         MOVF    r0x02, W
0064 CFEC F000 01198         MOVFF   PREINC1, r0x03
0068 CFEC F000 01199         MOVFF   PREINC1, r0x02
006C 6EF9      01200         MOVWF   PCL
006E           01201 _00217_DS_:
006E EF00 F000 01202         GOTO    _00197_DS_
0072 EF00 F000 01203         GOTO    _00195_DS_
0076 EF00 F000 01204         GOTO    _00196_DS_
007A EF00 F000 01205         GOTO    _00195_DS_
007E           01206 _00195_DS_:
               01207 ;       .line   182; main.c     fx_status = 1;
007E 0E01      01208         MOVLW   0x01
0080 0000      01209         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
0082 6F00      01210         MOVWF   _MPROC_NotifyReceivedByte_fx_status_1_1, B
               01211 ;       .line   183; main.c     break;  
0084 D000      01212         BRA     _00207_DS_
0086           01213 _00196_DS_:
               01214 ;       .line   185; main.c     fx_status = 2;                          
0086 0E02      01215         MOVLW   0x02
0088 0000      01216         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
008A 6F00      01217         MOVWF   _MPROC_NotifyReceivedByte_fx_status_1_1, B
               01218 ;       .line   186; main.c     break;
008C D000      01219         BRA     _00207_DS_
008E           01220 _00197_DS_:
               01221 ;       .line   188; main.c     fx_status = 0xff;
008E 0EFF      01222         MOVLW   0xff
0090 0000      01223         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
0092 6F00      01224         MOVWF   _MPROC_NotifyReceivedByte_fx_status_1_1, B
               01225 ;       .line   189; main.c     break;
0094 D000      01226         BRA     _00207_DS_
0096           01227 _00198_DS_:
0096 0000      01228         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
               01229 ;       .line   191; main.c     fx_status = 0;
0098 6B00      01230         CLRF    _MPROC_NotifyReceivedByte_fx_status_1_1, B
               01231 ;       .line   192; main.c     }   
009A D000      01232         BRA     _00207_DS_
009C           01233 _00205_DS_:
009C 0000      01234         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
               01235 ;       .line   194; main.c     else if(fx_status){
009E 5100      01236         MOVF    _MPROC_NotifyReceivedByte_fx_status_1_1, W, B
00A0 E000      01237         BZ      _00207_DS_
               01238 ;       .line   195; main.c     MIOS_MIDI_TxBufferPut(byte);
00A2 5000      01239         MOVF    r0x00, W
00A4 EC00 F000 01240         CALL    _MIOS_MIDI_TxBufferPut
00A8 0000      01241         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
               01242 ;       .line   196; main.c     if(fx_status!=0xff)
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00AA 5100      01243         MOVF    _MPROC_NotifyReceivedByte_fx_status_1_1, W, B
00AC 0AFF      01244         XORLW   0xff
00AE E000      01245         BZ      _00207_DS_
00B0           01246 _00219_DS_:
00B0 0000      01247         BANKSEL _MPROC_NotifyReceivedByte_fx_status_1_1
               01248 ;       .line   197; main.c     fx_status--;
00B2 0700      01249         DECF    _MPROC_NotifyReceivedByte_fx_status_1_1, F, B
00B4           01250 _00207_DS_:
00B4 CFEC F000 01251         MOVFF   PREINC1, r0x01
00B8 CFEC F000 01252         MOVFF   PREINC1, r0x00
00BC CFEC FFD9 01253         MOVFF   PREINC1, FSR2L
00C0 0012      01254         RETURN  
               01255 
               01256 ; ; Starting pCode block
               01257 S_main__Timer   code
0000           01258 _Timer:
               01259 ;       .line   147; main.c     void Timer(void) __wparam{
0000 C000 FFED 01260         MOVFF   r0x00, POSTDEC1
0004 0000      01261         BANKSEL _timer_ticks_count
               01262 ;       .line   149; main.c     if(++timer_ticks_count >= init_request_ticks){
0006 2B00      01263         INCF    _timer_ticks_count, F, B
0008 0E3C      01264         MOVLW   0x3c
               01265 ; removed redundant BANKSEL
000A 5D00      01266         SUBWF   _timer_ticks_count, W, B
000C E300      01267         BNC     _00178_DS_
               01268 ; removed redundant BANKSEL
               01269 ;       .line   150; main.c     if(timer_ticks_count == init_request_ticks){
000E 5100      01270         MOVF    _timer_ticks_count, W, B
0010 0A3C      01271         XORLW   0x3c
0012 E100      01272         BNZ     _00170_DS_
               01273 ;       .line   151; main.c     preset_init();//inits the current preset
0014 EC00 F000 01274         CALL    _preset_init
0018 0000      01275         BANKSEL _current_preset_num
               01276 ;       .line   152; main.c     if(!current_preset_num){//page is preset.. 
001A 5100      01277         MOVF    _current_preset_num, W, B
001C E100      01278         BNZ     _00165_DS_
               01279 ;       .line   153; main.c     for(i=0;i<16;i++)//inits all presets on bankstick(store reset preset)
001E 6A00      01280         CLRF    r0x00
0020           01281 _00174_DS_:
0020 0E10      01282         MOVLW   0x10
0022 5C00      01283         SUBWF   r0x00, W
0024 E200      01284         BC      _00166_DS_
               01285 ;       .line   154; main.c     store_preset(i);
0026 5000      01286         MOVF    r0x00, W
0028 EC00 F000 01287         CALL    _store_preset
               01288 ;       .line   153; main.c     for(i=0;i<16;i++)//inits all presets on bankstick(store reset preset)
002C 2A00      01289         INCF    r0x00, F
002E D000      01290         BRA     _00174_DS_
0030           01291 _00165_DS_:
0030 0000      01292         BANKSEL _current_preset_num
               01293 ;       .line   157; main.c     store_preset(current_preset_num);//store the current (reset) preset
0032 5100      01294         MOVF    _current_preset_num, W, B
0034 EC00 F000 01295         CALL    _store_preset
0038           01296 _00166_DS_:
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01297 ;       .line   159; main.c     MIOS_DOUT_SRSet(0x01,0xff);
0038 0EFF      01298         MOVLW   0xff
003A 6EED      01299         MOVWF   POSTDEC1
003C 0E01      01300         MOVLW   0x01
003E EC00 F000 01301         CALL    _MIOS_DOUT_SRSet
0042 2AE9      01302         INCF    FSR1L, F
               01303 ;       .line   160; main.c     MIOS_DOUT_SRSet(0x02,0xff);
0044 0EFF      01304         MOVLW   0xff
0046 6EED      01305         MOVWF   POSTDEC1
0048 0E02      01306         MOVLW   0x02
004A EC00 F000 01307         CALL    _MIOS_DOUT_SRSet
004E 2AE9      01308         INCF    FSR1L, F
0050 D000      01309         BRA     _00178_DS_
0052           01310 _00170_DS_:
               01311 ;       .line   162; main.c     else if(timer_ticks_count >= init_request_ticks+init_ledflash_ticks){
0052 0E43      01312         MOVLW   0x43
0054 0000      01313         BANKSEL _timer_ticks_count
0056 5D00      01314         SUBWF   _timer_ticks_count, W, B
0058 E300      01315         BNC     _00178_DS_
               01316 ;       .line   163; main.c     MIOS_TIMER_Stop();//stops the init request countdown
005A EC00 F000 01317         CALL    _MIOS_TIMER_Stop
               01318 ;       .line   164; main.c     screen_init();
005E EC00 F000 01319         CALL    _screen_init
0062           01320 _00178_DS_:
0062 CFEC F000 01321         MOVFF   PREINC1, r0x00
0066 0012      01322         RETURN  
               01323 
               01324 ; ; Starting pCode block
               01325 S_main__Init    code
0000           01326 _Init:
               01327 ;       .line   130; main.c     MIOS_SRIO_UpdateFrqSet(1); // ms
0000 0E01      01328         MOVLW   0x01
0002 EC00 F000 01329         CALL    _MIOS_SRIO_UpdateFrqSet
               01330 ;       .line   131; main.c     MIOS_SRIO_NumberSet(3);//need 20 inputs / outputs 
0006 0E03      01331         MOVLW   0x03
0008 EC00 F000 01332         CALL    _MIOS_SRIO_NumberSet
               01333 ;       .line   132; main.c     MIOS_SRIO_DebounceSet(10);
000C 0E0A      01334         MOVLW   0x0a
000E EC00 F000 01335         CALL    _MIOS_SRIO_DebounceSet
               01336 ;       .line   133; main.c     MIOS_BANKSTICK_CtrlSet(0x00);//stick 0, verify enabled
0012 0E00      01337         MOVLW   0x00
0014 EC00 F000 01338         CALL    _MIOS_BANKSTICK_CtrlSet
               01339 ;       .line   135; main.c     current_screen_num = MIOS_EEPROM_Read(0x00);
0018 0E00      01340         MOVLW   0x00
001A EC00 F000 01341         CALL    _MIOS_EEPROM_Read
001E 0000      01342         BANKSEL _current_screen_num
0020 6F00      01343         MOVWF   _current_screen_num, B
               01344 ;       .line   136; main.c     current_preset_num = MIOS_EEPROM_Read(0x01);
0022 0E01      01345         MOVLW   0x01
0024 EC00 F000 01346         CALL    _MIOS_EEPROM_Read
0028 0000      01347         BANKSEL _current_preset_num
002A 6F00      01348         MOVWF   _current_preset_num, B
               01349 ;       .line   137; main.c     current_bus_num = MIOS_EEPROM_Read(0x02);
002C 0E02      01350         MOVLW   0x02
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
002E EC00 F000 01351         CALL    _MIOS_EEPROM_Read
0032 0000      01352         BANKSEL _current_bus_num
0034 6F00      01353         MOVWF   _current_bus_num, B
0036 0000      01354         BANKSEL _current_preset_num
               01355 ;       .line   138; main.c     load_preset(current_preset_num);
0038 5100      01356         MOVF    _current_preset_num, W, B
003A EC00 F000 01357         CALL    _load_preset
               01358 ;       .line   140; main.c     screen_init();
003E EC00 F000 01359         CALL    _screen_init
0042 0012      01360         RETURN  
               01361 
               01362 ; ; Starting pCode block
               01363 S_main__preset_init     code
0000           01364 _preset_init:
               01365 ;       .line   115; main.c     void preset_init(void) __wparam{
0000 C000 FFED 01366         MOVFF   r0x00, POSTDEC1
0004 C000 FFED 01367         MOVFF   r0x01, POSTDEC1
0008 C000 FFED 01368         MOVFF   r0x02, POSTDEC1
000C C000 FFED 01369         MOVFF   r0x03, POSTDEC1
0010 C000 FFED 01370         MOVFF   r0x04, POSTDEC1
0014 C000 FFED 01371         MOVFF   r0x05, POSTDEC1
0018 C000 FFED 01372         MOVFF   r0x06, POSTDEC1
001C C000 FFED 01373         MOVFF   r0x07, POSTDEC1
0020 C000 FFED 01374         MOVFF   r0x08, POSTDEC1
0024 C000 FFED 01375         MOVFF   r0x09, POSTDEC1
0028 C000 FFED 01376         MOVFF   r0x0a, POSTDEC1
002C C000 FFED 01377         MOVFF   r0x0b, POSTDEC1
               01378 ;       .line   117; main.c     for(i=0;i<16;i++){
0030 6A00      01379         CLRF    r0x00
0032 6A00      01380         CLRF    r0x01
0034 6A00      01381         CLRF    r0x02
0036 6A00      01382         CLRF    r0x03
0038 6A00      01383         CLRF    r0x04
003A           01384 _00152_DS_:
003A 0E10      01385         MOVLW   0x10
003C 5C00      01386         SUBWF   r0x00, W
003E B0D8      01387         BTFSC   STATUS, 0
0040 D000      01388         BRA     _00155_DS_
               01389 ;       .line   118; main.c     current_preset[i].inputs = current_preset[i].outputs = int_bit_ormask[i];
0042 0E00      01390         MOVLW   LOW(_current_preset)
0044 2400      01391         ADDWF   r0x01, W
0046 6E00      01392         MOVWF   r0x05
0048 6A00      01393         CLRF    r0x06
004A 0E00      01394         MOVLW   HIGH(_current_preset)
004C 2200      01395         ADDWFC  r0x06, F
004E 0E00      01396         MOVLW   LOW(_current_preset)
0050 2400      01397         ADDWF   r0x01, W
0052 6E00      01398         MOVWF   r0x07
0054 6A00      01399         CLRF    r0x08
0056 0E00      01400         MOVLW   HIGH(_current_preset)
0058 2200      01401         ADDWFC  r0x08, F
005A 0E02      01402         MOVLW   0x02
005C 2600      01403         ADDWF   r0x07, F
005E B0D8      01404         BTFSC   STATUS, 0
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0060 2A00      01405         INCF    r0x08, F
0062 0E00      01406         MOVLW   LOW(_int_bit_ormask)
0064 2400      01407         ADDWF   r0x02, W
0066 6E00      01408         MOVWF   r0x09
0068 6A00      01409         CLRF    r0x0a
006A 0E00      01410         MOVLW   HIGH(_int_bit_ormask)
006C 2200      01411         ADDWFC  r0x0a, F
006E 6A00      01412         CLRF    r0x0b
0070 0E00      01413         MOVLW   UPPER(_int_bit_ormask)
0072 2200      01414         ADDWFC  r0x0b, F
0074 C000 FFF6 01415         MOVFF   r0x09, TBLPTRL
0078 C000 FFF7 01416         MOVFF   r0x0a, TBLPTRH
007C C000 FFF8 01417         MOVFF   r0x0b, TBLPTRU
0080 0009      01418         TBLRD*+ 
0082 CFF5 F000 01419         MOVFF   TABLAT, r0x09
0086 0009      01420         TBLRD*+ 
0088 CFF5 F000 01421         MOVFF   TABLAT, r0x0a
008C C000 FFE1 01422         MOVFF   r0x07, FSR0L
0090 C000 FFE2 01423         MOVFF   r0x08, FSR0H
0094 C000 FFE6 01424         MOVFF   r0x09, POSTINC0
0098 C000 FFE7 01425         MOVFF   r0x0a, INDF0
009C C000 FFE1 01426         MOVFF   r0x05, FSR0L
00A0 C000 FFE2 01427         MOVFF   r0x06, FSR0H
00A4 C000 FFE6 01428         MOVFF   r0x09, POSTINC0
00A8 C000 FFE7 01429         MOVFF   r0x0a, INDF0
               01430 ;       .line   119; main.c     midi_inout_map[i][0]=i;
00AC 0E00      01431         MOVLW   LOW(_midi_inout_map)
00AE 2400      01432         ADDWF   r0x03, W
00B0 6E00      01433         MOVWF   r0x05
00B2 0E00      01434         MOVLW   HIGH(_midi_inout_map)
00B4 2000      01435         ADDWFC  r0x04, W
00B6 6E00      01436         MOVWF   r0x06
00B8 C000 FFE1 01437         MOVFF   r0x05, FSR0L
00BC C000 FFE2 01438         MOVFF   r0x06, FSR0H
00C0 C000 FFE7 01439         MOVFF   r0x00, INDF0
               01440 ;       .line   120; main.c     midi_inout_map[i][0]=-1;//terminate             
00C4 C000 FFE1 01441         MOVFF   r0x05, FSR0L
00C8 C000 FFE2 01442         MOVFF   r0x06, FSR0H
00CC 0EFF      01443         MOVLW   0xff
00CE 6EE7      01444         MOVWF   INDF0
               01445 ;       .line   117; main.c     for(i=0;i<16;i++){
00D0 0E04      01446         MOVLW   0x04
00D2 2600      01447         ADDWF   r0x01, F
00D4 2A00      01448         INCF    r0x02, F
00D6 2A00      01449         INCF    r0x02, F
00D8 0E10      01450         MOVLW   0x10
00DA 2600      01451         ADDWF   r0x03, F
00DC B0D8      01452         BTFSC   STATUS, 0
00DE 2A00      01453         INCF    r0x04, F
00E0 2A00      01454         INCF    r0x00, F
00E2 D000      01455         BRA     _00152_DS_
00E4           01456 _00155_DS_:
00E4 0000      01457         BANKSEL _current_preset_num
               01458 ;       .line   122; main.c     store_preset(current_preset_num);       
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00E6 5100      01459         MOVF    _current_preset_num, W, B
00E8 EC00 F000 01460         CALL    _store_preset
00EC CFEC F000 01461         MOVFF   PREINC1, r0x0b
00F0 CFEC F000 01462         MOVFF   PREINC1, r0x0a
00F4 CFEC F000 01463         MOVFF   PREINC1, r0x09
00F8 CFEC F000 01464         MOVFF   PREINC1, r0x08
00FC CFEC F000 01465         MOVFF   PREINC1, r0x07
0100 CFEC F000 01466         MOVFF   PREINC1, r0x06
0104 CFEC F000 01467         MOVFF   PREINC1, r0x05
0108 CFEC F000 01468         MOVFF   PREINC1, r0x04
010C CFEC F000 01469         MOVFF   PREINC1, r0x03
0110 CFEC F000 01470         MOVFF   PREINC1, r0x02
0114 CFEC F000 01471         MOVFF   PREINC1, r0x01
0118 CFEC F000 01472         MOVFF   PREINC1, r0x00
011C 0012      01473         RETURN  
               01474 
               01475 ; ; Starting pCode block
               01476 S_main__screen_init     code
0000           01477 _screen_init:
               01478 ;       .line   85; main.c      void screen_init(void) __wparam{
0000 C000 FFED 01479         MOVFF   r0x00, POSTDEC1
0004 C000 FFED 01480         MOVFF   r0x01, POSTDEC1
0008 0000      01481         BANKSEL _current_screen_num
               01482 ;       .line   87; main.c      MIOS_DOUT_SRSet(0x00,MIOS_HLP_GetBitORMask(current_screen_num));
000A 5100      01483         MOVF    _current_screen_num, W, B
000C EC00 F000 01484         CALL    _MIOS_HLP_GetBitORMask
0010 6E00      01485         MOVWF   r0x00
0012 5000      01486         MOVF    r0x00, W
0014 6EED      01487         MOVWF   POSTDEC1
0016 0E00      01488         MOVLW   0x00
0018 EC00 F000 01489         CALL    _MIOS_DOUT_SRSet
001C 2AE9      01490         INCF    FSR1L, F
               01491 ;       .line   89; main.c      MIOS_DOUT_SRSet(0x01,0x00);
001E 0E00      01492         MOVLW   0x00
0020 6EED      01493         MOVWF   POSTDEC1
0022 0E01      01494         MOVLW   0x01
0024 EC00 F000 01495         CALL    _MIOS_DOUT_SRSet
0028 2AE9      01496         INCF    FSR1L, F
               01497 ;       .line   90; main.c      MIOS_DOUT_SRSet(0x02,0x00);
002A 0E00      01498         MOVLW   0x00
002C 6EED      01499         MOVWF   POSTDEC1
002E 0E02      01500         MOVLW   0x02
0030 EC00 F000 01501         CALL    _MIOS_DOUT_SRSet
0034 2AE9      01502         INCF    FSR1L, F
               01503 ;       .line   91; main.c      switch(current_screen_num){
0036 0E04      01504         MOVLW   0x04
0038 0000      01505         BANKSEL _current_screen_num
003A 5D00      01506         SUBWF   _current_screen_num, W, B
003C B0D8      01507         BTFSC   STATUS, 0
003E D000      01508         BRA     _00141_DS_
0040 C000 FFED 01509         MOVFF   r0x02, POSTDEC1
0044 C000 FFED 01510         MOVFF   r0x03, POSTDEC1
0048 6A00      01511         CLRF    r0x03
               01512 ; removed redundant BANKSEL
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004A 3500      01513         RLCF    _current_screen_num, W, B
004C 3600      01514         RLCF    r0x03, F
004E 34E8      01515         RLCF    WREG, W
0050 3600      01516         RLCF    r0x03, F
0052 0BFC      01517         ANDLW   0xfc
0054 6E00      01518         MOVWF   r0x02
0056 0E00      01519         MOVLW   UPPER(_00147_DS_)
0058 6EFB      01520         MOVWF   PCLATU
005A 0E00      01521         MOVLW   HIGH(_00147_DS_)
005C 6EFA      01522         MOVWF   PCLATH
005E 0E00      01523         MOVLW   LOW(_00147_DS_)
0060 2600      01524         ADDWF   r0x02, F
0062 5000      01525         MOVF    r0x03, W
0064 22FA      01526         ADDWFC  PCLATH, F
0066 B0D8      01527         BTFSC   STATUS, 0
0068 2AFB      01528         INCF    PCLATU, F
006A 5000      01529         MOVF    r0x02, W
006C CFEC F000 01530         MOVFF   PREINC1, r0x03
0070 CFEC F000 01531         MOVFF   PREINC1, r0x02
0074 6EF9      01532         MOVWF   PCL
0076           01533 _00147_DS_:
0076 EF00 F000 01534         GOTO    _00130_DS_
007A EF00 F000 01535         GOTO    _00134_DS_
007E EF00 F000 01536         GOTO    _00138_DS_
0082 EF00 F000 01537         GOTO    _00139_DS_
0086           01538 _00130_DS_:
               01539 ;       .line   93; main.c      if(current_preset_num < 8)                      
0086 0E08      01540         MOVLW   0x08
0088 0000      01541         BANKSEL _current_preset_num
008A 5D00      01542         SUBWF   _current_preset_num, W, B
008C E200      01543         BC      _00132_DS_
008E 0000      01544         BANKSEL _current_screen_num
               01545 ;       .line   94; main.c      MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_screen_num));
0090 5100      01546         MOVF    _current_screen_num, W, B
0092 EC00 F000 01547         CALL    _MIOS_HLP_GetBitORMask
0096 6E00      01548         MOVWF   r0x00
0098 5000      01549         MOVF    r0x00, W
009A 6EED      01550         MOVWF   POSTDEC1
009C 0E01      01551         MOVLW   0x01
009E EC00 F000 01552         CALL    _MIOS_DOUT_SRSet
00A2 2AE9      01553         INCF    FSR1L, F
00A4 D000      01554         BRA     _00141_DS_
00A6           01555 _00132_DS_:
               01556 ;       .line   96; main.c      MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_screen_num-8));                              
00A6 0EF8      01557         MOVLW   0xf8
00A8 0000      01558         BANKSEL _current_screen_num
00AA 2500      01559         ADDWF   _current_screen_num, W, B
00AC 6E00      01560         MOVWF   r0x00
00AE 5000      01561         MOVF    r0x00, W
00B0 EC00 F000 01562         CALL    _MIOS_HLP_GetBitORMask
00B4 6E00      01563         MOVWF   r0x00
00B6 5000      01564         MOVF    r0x00, W
00B8 6EED      01565         MOVWF   POSTDEC1
00BA 0E02      01566         MOVLW   0x02
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00BC EC00 F000 01567         CALL    _MIOS_DOUT_SRSet
00C0 2AE9      01568         INCF    FSR1L, F
               01569 ;       .line   97; main.c      break;
00C2 D000      01570         BRA     _00141_DS_
00C4           01571 _00134_DS_:
               01572 ;       .line   99; main.c      if(current_bus_num < 8)                 
00C4 0E08      01573         MOVLW   0x08
00C6 0000      01574         BANKSEL _current_bus_num
00C8 5D00      01575         SUBWF   _current_bus_num, W, B
00CA E200      01576         BC      _00136_DS_
               01577 ; removed redundant BANKSEL
               01578 ;       .line   100; main.c     MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_bus_num));
00CC 5100      01579         MOVF    _current_bus_num, W, B
00CE EC00 F000 01580         CALL    _MIOS_HLP_GetBitORMask
00D2 6E00      01581         MOVWF   r0x00
00D4 5000      01582         MOVF    r0x00, W
00D6 6EED      01583         MOVWF   POSTDEC1
00D8 0E01      01584         MOVLW   0x01
00DA EC00 F000 01585         CALL    _MIOS_DOUT_SRSet
00DE 2AE9      01586         INCF    FSR1L, F
00E0 D000      01587         BRA     _00141_DS_
00E2           01588 _00136_DS_:
               01589 ;       .line   102; main.c     MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_bus_num-8));                                                 
00E2 0EF8      01590         MOVLW   0xf8
00E4 0000      01591         BANKSEL _current_bus_num
00E6 2500      01592         ADDWF   _current_bus_num, W, B
00E8 6E00      01593         MOVWF   r0x00
00EA 5000      01594         MOVF    r0x00, W
00EC EC00 F000 01595         CALL    _MIOS_HLP_GetBitORMask
00F0 6E00      01596         MOVWF   r0x00
00F2 5000      01597         MOVF    r0x00, W
00F4 6EED      01598         MOVWF   POSTDEC1
00F6 0E02      01599         MOVLW   0x02
00F8 EC00 F000 01600         CALL    _MIOS_DOUT_SRSet
00FC 2AE9      01601         INCF    FSR1L, F
               01602 ;       .line   103; main.c     break;
00FE D000      01603         BRA     _00141_DS_
               01604 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
               01605 ; ;Unrolled 8 X 8 multiplication
               01606 ; ;FIXME: the function does not support result==WREG
0100           01607 _00138_DS_:
0100 0000      01608         BANKSEL _current_bus_num
               01609 ;       .line   105; main.c     MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].inputs & 0x00ff));
0102 5100      01610         MOVF    _current_bus_num, W, B
0104 0D04      01611         MULLW   0x04
0106 CFF3 F000 01612         MOVFF   PRODL, r0x00
010A 0E00      01613         MOVLW   LOW(_current_preset)
010C 2600      01614         ADDWF   r0x00, F
010E 0E00      01615         MOVLW   HIGH(_current_preset)
0110 6A00      01616         CLRF    r0x01
0112 2200      01617         ADDWFC  r0x01, F
0114 C000 FFE1 01618         MOVFF   r0x00, FSR0L
0118 C000 FFE2 01619         MOVFF   r0x01, FSR0H
011C CFE6 F000 01620         MOVFF   POSTINC0, r0x00
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0120 CFE7 F000 01621         MOVFF   INDF0, r0x01
0124 6A00      01622         CLRF    r0x01
0126 5000      01623         MOVF    r0x00, W
0128 6EED      01624         MOVWF   POSTDEC1
012A 0E01      01625         MOVLW   0x01
012C EC00 F000 01626         CALL    _MIOS_DOUT_SRSet
0130 2AE9      01627         INCF    FSR1L, F
               01628 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
               01629 ; ;Unrolled 8 X 8 multiplication
               01630 ; ;FIXME: the function does not support result==WREG
0132 0000      01631         BANKSEL _current_bus_num
               01632 ;       .line   106; main.c     MIOS_DOUT_SRSet(0x02,(unsigned char)(current_preset[current_bus_num].inputs >>8 & 0x00ff));
0134 5100      01633         MOVF    _current_bus_num, W, B
0136 0D04      01634         MULLW   0x04
0138 CFF3 F000 01635         MOVFF   PRODL, r0x00
013C 0E00      01636         MOVLW   LOW(_current_preset)
013E 2600      01637         ADDWF   r0x00, F
0140 0E00      01638         MOVLW   HIGH(_current_preset)
0142 6A00      01639         CLRF    r0x01
0144 2200      01640         ADDWFC  r0x01, F
0146 C000 FFE1 01641         MOVFF   r0x00, FSR0L
014A C000 FFE2 01642         MOVFF   r0x01, FSR0H
014E CFE6 F000 01643         MOVFF   POSTINC0, r0x00
0152 CFE7 F000 01644         MOVFF   INDF0, r0x01
0156 5000      01645         MOVF    r0x01, W
0158 6E00      01646         MOVWF   r0x00
015A 6A00      01647         CLRF    r0x01
015C 6A00      01648         CLRF    r0x01
015E 5000      01649         MOVF    r0x00, W
0160 6EED      01650         MOVWF   POSTDEC1
0162 0E02      01651         MOVLW   0x02
0164 EC00 F000 01652         CALL    _MIOS_DOUT_SRSet
0168 2AE9      01653         INCF    FSR1L, F
               01654 ;       .line   107; main.c     break;
016A D000      01655         BRA     _00141_DS_
               01656 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
               01657 ; ;Unrolled 8 X 8 multiplication
               01658 ; ;FIXME: the function does not support result==WREG
016C           01659 _00139_DS_:
016C 0000      01660         BANKSEL _current_bus_num
               01661 ;       .line   109; main.c     MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].outputs & 0x00ff));
016E 5100      01662         MOVF    _current_bus_num, W, B
0170 0D04      01663         MULLW   0x04
0172 CFF3 F000 01664         MOVFF   PRODL, r0x00
0176 0E00      01665         MOVLW   LOW(_current_preset)
0178 2600      01666         ADDWF   r0x00, F
017A 0E00      01667         MOVLW   HIGH(_current_preset)
017C 6A00      01668         CLRF    r0x01
017E 2200      01669         ADDWFC  r0x01, F
0180 0E02      01670         MOVLW   0x02
0182 2600      01671         ADDWF   r0x00, F
0184 B0D8      01672         BTFSC   STATUS, 0
0186 2A00      01673         INCF    r0x01, F
0188 C000 FFE1 01674         MOVFF   r0x00, FSR0L
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
018C C000 FFE2 01675         MOVFF   r0x01, FSR0H
0190 CFE6 F000 01676         MOVFF   POSTINC0, r0x00
0194 CFE7 F000 01677         MOVFF   INDF0, r0x01
0198 6A00      01678         CLRF    r0x01
019A 5000      01679         MOVF    r0x00, W
019C 6EED      01680         MOVWF   POSTDEC1
019E 0E01      01681         MOVLW   0x01
01A0 EC00 F000 01682         CALL    _MIOS_DOUT_SRSet
01A4 2AE9      01683         INCF    FSR1L, F
               01684 ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
               01685 ; ;Unrolled 8 X 8 multiplication
               01686 ; ;FIXME: the function does not support result==WREG
01A6 0000      01687         BANKSEL _current_bus_num
               01688 ;       .line   110; main.c     MIOS_DOUT_SRSet(0x02,(unsigned char)(current_preset[current_bus_num].outputs >>8 & 0x00ff));
01A8 5100      01689         MOVF    _current_bus_num, W, B
01AA 0D04      01690         MULLW   0x04
01AC CFF3 F000 01691         MOVFF   PRODL, r0x00
01B0 0E00      01692         MOVLW   LOW(_current_preset)
01B2 2600      01693         ADDWF   r0x00, F
01B4 0E00      01694         MOVLW   HIGH(_current_preset)
01B6 6A00      01695         CLRF    r0x01
01B8 2200      01696         ADDWFC  r0x01, F
01BA 0E02      01697         MOVLW   0x02
01BC 2600      01698         ADDWF   r0x00, F
01BE B0D8      01699         BTFSC   STATUS, 0
01C0 2A00      01700         INCF    r0x01, F
01C2 C000 FFE1 01701         MOVFF   r0x00, FSR0L
01C6 C000 FFE2 01702         MOVFF   r0x01, FSR0H
01CA CFE6 F000 01703         MOVFF   POSTINC0, r0x00
01CE CFE7 F000 01704         MOVFF   INDF0, r0x01
01D2 5000      01705         MOVF    r0x01, W
01D4 6E00      01706         MOVWF   r0x00
01D6 6A00      01707         CLRF    r0x01
01D8 6A00      01708         CLRF    r0x01
01DA 5000      01709         MOVF    r0x00, W
01DC 6EED      01710         MOVWF   POSTDEC1
01DE 0E02      01711         MOVLW   0x02
01E0 EC00 F000 01712         CALL    _MIOS_DOUT_SRSet
01E4 2AE9      01713         INCF    FSR1L, F
01E6           01714 _00141_DS_:
               01715 ;       .line   111; main.c     }
01E6 CFEC F000 01716         MOVFF   PREINC1, r0x01
01EA CFEC F000 01717         MOVFF   PREINC1, r0x00
01EE 0012      01718         RETURN  
               01719 
               01720 ; ; Starting pCode block
               01721 S_main__load_preset     code
0000           01722 _load_preset:
               01723 ;       .line   67; main.c      void load_preset(unsigned char num) __wparam{
0000 CFD9 FFED 01724         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 01725         MOVFF   FSR1L, FSR2L
0008 C000 FFED 01726         MOVFF   r0x00, POSTDEC1
000C C000 FFED 01727         MOVFF   r0x01, POSTDEC1
0010 C000 FFED 01728         MOVFF   r0x02, POSTDEC1
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0014 C000 FFED 01729         MOVFF   r0x03, POSTDEC1
0018 C000 FFED 01730         MOVFF   r0x04, POSTDEC1
001C C000 FFED 01731         MOVFF   r0x05, POSTDEC1
0020 C000 FFED 01732         MOVFF   r0x06, POSTDEC1
0024 C000 FFED 01733         MOVFF   r0x07, POSTDEC1
0028 C000 FFED 01734         MOVFF   r0x08, POSTDEC1
002C C000 FFED 01735         MOVFF   r0x09, POSTDEC1
0030 C000 FFED 01736         MOVFF   r0x0a, POSTDEC1
0034 C000 FFED 01737         MOVFF   r0x0b, POSTDEC1
0038 C000 FFED 01738         MOVFF   r0x0c, POSTDEC1
003C C000 FFED 01739         MOVFF   r0x0d, POSTDEC1
0040 C000 FFED 01740         MOVFF   r0x0e, POSTDEC1
0044 C000 FFED 01741         MOVFF   r0x0f, POSTDEC1
0048 C000 FFED 01742         MOVFF   r0x10, POSTDEC1
004C C000 FFED 01743         MOVFF   r0x11, POSTDEC1
0050 C000 FFED 01744         MOVFF   r0x12, POSTDEC1
0054 C000 FFED 01745         MOVFF   r0x13, POSTDEC1
0058 C000 FFED 01746         MOVFF   r0x14, POSTDEC1
005C C000 FFED 01747         MOVFF   r0x15, POSTDEC1
0060 6E00      01748         MOVWF   r0x00
               01749 ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
               01750 ; ;Unrolled 8 X 8 multiplication
               01751 ; ;FIXME: the function does not support result==WREG
               01752 ;       .line   69; main.c      MIOS_BANKSTICK_ReadPage(num*64, @current_preset);       
0062 5000      01753         MOVF    r0x00, W
0064 0D40      01754         MULLW   0x40
0066 CFF3 F000 01755         MOVFF   PRODL, r0x00
006A CFF4 F000 01756         MOVFF   PRODH, r0x01
006E 0E00      01757         MOVLW   HIGH(_current_preset)
0070 6E00      01758         MOVWF   r0x03
0072 0E00      01759         MOVLW   LOW(_current_preset)
0074 6E00      01760         MOVWF   r0x02
0076 0E80      01761         MOVLW   0x80
0078 6E00      01762         MOVWF   r0x04
007A 5000      01763         MOVF    r0x04, W
007C 6EED      01764         MOVWF   POSTDEC1
007E 5000      01765         MOVF    r0x03, W
0080 6EED      01766         MOVWF   POSTDEC1
0082 5000      01767         MOVF    r0x02, W
0084 6EED      01768         MOVWF   POSTDEC1
0086 5000      01769         MOVF    r0x01, W
0088 6EED      01770         MOVWF   POSTDEC1
008A 5000      01771         MOVF    r0x00, W
008C EC00 F000 01772         CALL    _MIOS_BANKSTICK_ReadPage
0090 0E04      01773         MOVLW   0x04
0092 26E9      01774         ADDWF   FSR1L, F
               01775 ;       .line   71; main.c      for(bus=0;bus<16;bus++){
0094 6A00      01776         CLRF    r0x00
0096 6A00      01777         CLRF    r0x01
0098           01778 _00121_DS_:
0098 0E10      01779         MOVLW   0x10
009A 5C00      01780         SUBWF   r0x00, W
009C B0D8      01781         BTFSC   STATUS, 0
009E D000      01782         BRA     _00125_DS_
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01783 ;       .line   72; main.c      for(chn_in=0;chn_in<16;chn_in++){
00A0 0E00      01784         MOVLW   LOW(_current_preset)
00A2 2400      01785         ADDWF   r0x01, W
00A4 6E00      01786         MOVWF   r0x02
00A6 6A00      01787         CLRF    r0x03
00A8 0E00      01788         MOVLW   HIGH(_current_preset)
00AA 2200      01789         ADDWFC  r0x03, F
00AC 6A00      01790         CLRF    r0x04
00AE 6A00      01791         CLRF    r0x05
00B0 6A00      01792         CLRF    r0x06
00B2 6A00      01793         CLRF    r0x07
00B4 6A00      01794         CLRF    r0x08
00B6 6A00      01795         CLRF    r0x09
00B8           01796 _00117_DS_:
00B8 0E10      01797         MOVLW   0x10
00BA 5C00      01798         SUBWF   r0x04, W
00BC B0D8      01799         BTFSC   STATUS, 0
00BE D000      01800         BRA     _00123_DS_
               01801 ;       .line   73; main.c      if(current_preset[bus].inputs & int_bit_ormask[chn_in]){                                
00C0 C000 FFE1 01802         MOVFF   r0x02, FSR0L
00C4 C000 FFE2 01803         MOVFF   r0x03, FSR0H
00C8 CFE6 F000 01804         MOVFF   POSTINC0, r0x0a
00CC CFE7 F000 01805         MOVFF   INDF0, r0x0b
00D0 0E00      01806         MOVLW   LOW(_int_bit_ormask)
00D2 2400      01807         ADDWF   r0x09, W
00D4 6E00      01808         MOVWF   r0x0c
00D6 6A00      01809         CLRF    r0x0d
00D8 0E00      01810         MOVLW   HIGH(_int_bit_ormask)
00DA 2200      01811         ADDWFC  r0x0d, F
00DC 6A00      01812         CLRF    r0x0e
00DE 0E00      01813         MOVLW   UPPER(_int_bit_ormask)
00E0 2200      01814         ADDWFC  r0x0e, F
00E2 C000 FFF6 01815         MOVFF   r0x0c, TBLPTRL
00E6 C000 FFF7 01816         MOVFF   r0x0d, TBLPTRH
00EA C000 FFF8 01817         MOVFF   r0x0e, TBLPTRU
00EE 0009      01818         TBLRD*+ 
00F0 CFF5 F000 01819         MOVFF   TABLAT, r0x0c
00F4 0009      01820         TBLRD*+ 
00F6 CFF5 F000 01821         MOVFF   TABLAT, r0x0d
00FA 5000      01822         MOVF    r0x0c, W
00FC 1600      01823         ANDWF   r0x0a, F
00FE 5000      01824         MOVF    r0x0d, W
0100 1600      01825         ANDWF   r0x0b, F
0102 5000      01826         MOVF    r0x0a, W
0104 1000      01827         IORWF   r0x0b, W
0106 B4D8      01828         BTFSC   STATUS, 2
0108 D000      01829         BRA     _00119_DS_
               01830 ;       .line   75; main.c      for(chn_out=0;chn_out<16;chn_out++){
010A 0E00      01831         MOVLW   LOW(_midi_inout_map)
010C 2400      01832         ADDWF   r0x05, W
010E 6E00      01833         MOVWF   r0x0a
0110 0E00      01834         MOVLW   HIGH(_midi_inout_map)
0112 2000      01835         ADDWFC  r0x06, W
0114 6E00      01836         MOVWF   r0x0b
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0116 0E00      01837         MOVLW   LOW(_current_preset)
0118 2400      01838         ADDWF   r0x01, W
011A 6E00      01839         MOVWF   r0x0c
011C 6A00      01840         CLRF    r0x0d
011E 0E00      01841         MOVLW   HIGH(_current_preset)
0120 2200      01842         ADDWFC  r0x0d, F
0122 0E02      01843         MOVLW   0x02
0124 2600      01844         ADDWF   r0x0c, F
0126 B0D8      01845         BTFSC   STATUS, 0
0128 2A00      01846         INCF    r0x0d, F
012A 6A00      01847         CLRF    r0x0e
012C 6A00      01848         CLRF    r0x0f
012E 6A00      01849         CLRF    r0x10
0130           01850 _00113_DS_:
0130 0E10      01851         MOVLW   0x10
0132 5C00      01852         SUBWF   r0x0f, W
0134 E200      01853         BC      _00116_DS_
               01854 ;       .line   76; main.c      if(current_preset[bus].outputs & int_bit_ormask[chn_out])
0136 C000 FFE1 01855         MOVFF   r0x0c, FSR0L
013A C000 FFE2 01856         MOVFF   r0x0d, FSR0H
013E CFE6 F000 01857         MOVFF   POSTINC0, r0x11
0142 CFE7 F000 01858         MOVFF   INDF0, r0x12
0146 0E00      01859         MOVLW   LOW(_int_bit_ormask)
0148 2400      01860         ADDWF   r0x10, W
014A 6E00      01861         MOVWF   r0x13
014C 6A00      01862         CLRF    r0x14
014E 0E00      01863         MOVLW   HIGH(_int_bit_ormask)
0150 2200      01864         ADDWFC  r0x14, F
0152 6A00      01865         CLRF    r0x15
0154 0E00      01866         MOVLW   UPPER(_int_bit_ormask)
0156 2200      01867         ADDWFC  r0x15, F
0158 C000 FFF6 01868         MOVFF   r0x13, TBLPTRL
015C C000 FFF7 01869         MOVFF   r0x14, TBLPTRH
0160 C000 FFF8 01870         MOVFF   r0x15, TBLPTRU
0164 0009      01871         TBLRD*+ 
0166 CFF5 F000 01872         MOVFF   TABLAT, r0x13
016A 0009      01873         TBLRD*+ 
016C CFF5 F000 01874         MOVFF   TABLAT, r0x14
0170 5000      01875         MOVF    r0x13, W
0172 1600      01876         ANDWF   r0x11, F
0174 5000      01877         MOVF    r0x14, W
0176 1600      01878         ANDWF   r0x12, F
0178 5000      01879         MOVF    r0x11, W
017A 1000      01880         IORWF   r0x12, W
017C E000      01881         BZ      _00115_DS_
               01882 ;       .line   77; main.c      midi_inout_map[chn_in][i++] = chn_out;
017E C000 F000 01883         MOVFF   r0x0e, r0x11
0182 2A00      01884         INCF    r0x0e, F
0184 5000      01885         MOVF    r0x0a, W
0186 2600      01886         ADDWF   r0x11, F
0188 5000      01887         MOVF    r0x0b, W
018A 6A00      01888         CLRF    r0x12
018C 2200      01889         ADDWFC  r0x12, F
018E C000 FFE1 01890         MOVFF   r0x11, FSR0L
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0192 C000 FFE2 01891         MOVFF   r0x12, FSR0H
0196 C000 FFE7 01892         MOVFF   r0x0f, INDF0
019A           01893 _00115_DS_:
               01894 ;       .line   75; main.c      for(chn_out=0;chn_out<16;chn_out++){
019A 2A00      01895         INCF    r0x10, F
019C 2A00      01896         INCF    r0x10, F
019E 2A00      01897         INCF    r0x0f, F
01A0 D000      01898         BRA     _00113_DS_
01A2           01899 _00116_DS_:
               01900 ;       .line   79; main.c      midi_inout_map[chn_in][i] = -1;//terminate list
01A2 0E00      01901         MOVLW   LOW(_midi_inout_map)
01A4 2400      01902         ADDWF   r0x07, W
01A6 6E00      01903         MOVWF   r0x0a
01A8 0E00      01904         MOVLW   HIGH(_midi_inout_map)
01AA 2000      01905         ADDWFC  r0x08, W
01AC 6E00      01906         MOVWF   r0x0b
01AE 5000      01907         MOVF    r0x0a, W
01B0 2600      01908         ADDWF   r0x0e, F
01B2 5000      01909         MOVF    r0x0b, W
01B4 6A00      01910         CLRF    r0x0c
01B6 2200      01911         ADDWFC  r0x0c, F
01B8 C000 FFE1 01912         MOVFF   r0x0e, FSR0L
01BC C000 FFE2 01913         MOVFF   r0x0c, FSR0H
01C0 0EFF      01914         MOVLW   0xff
01C2 6EE7      01915         MOVWF   INDF0
01C4           01916 _00119_DS_:
               01917 ;       .line   72; main.c      for(chn_in=0;chn_in<16;chn_in++){
01C4 0E10      01918         MOVLW   0x10
01C6 2600      01919         ADDWF   r0x05, F
01C8 B0D8      01920         BTFSC   STATUS, 0
01CA 2A00      01921         INCF    r0x06, F
01CC 0E10      01922         MOVLW   0x10
01CE 2600      01923         ADDWF   r0x07, F
01D0 B0D8      01924         BTFSC   STATUS, 0
01D2 2A00      01925         INCF    r0x08, F
01D4 2A00      01926         INCF    r0x09, F
01D6 2A00      01927         INCF    r0x09, F
01D8 2A00      01928         INCF    r0x04, F
01DA D000      01929         BRA     _00117_DS_
01DC           01930 _00123_DS_:
               01931 ;       .line   71; main.c      for(bus=0;bus<16;bus++){
01DC 0E04      01932         MOVLW   0x04
01DE 2600      01933         ADDWF   r0x01, F
01E0 2A00      01934         INCF    r0x00, F
01E2 D000      01935         BRA     _00121_DS_
01E4           01936 _00125_DS_:
01E4 CFEC F000 01937         MOVFF   PREINC1, r0x15
01E8 CFEC F000 01938         MOVFF   PREINC1, r0x14
01EC CFEC F000 01939         MOVFF   PREINC1, r0x13
01F0 CFEC F000 01940         MOVFF   PREINC1, r0x12
01F4 CFEC F000 01941         MOVFF   PREINC1, r0x11
01F8 CFEC F000 01942         MOVFF   PREINC1, r0x10
01FC CFEC F000 01943         MOVFF   PREINC1, r0x0f
0200 CFEC F000 01944         MOVFF   PREINC1, r0x0e
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0204 CFEC F000 01945         MOVFF   PREINC1, r0x0d
0208 CFEC F000 01946         MOVFF   PREINC1, r0x0c
020C CFEC F000 01947         MOVFF   PREINC1, r0x0b
0210 CFEC F000 01948         MOVFF   PREINC1, r0x0a
0214 CFEC F000 01949         MOVFF   PREINC1, r0x09
0218 CFEC F000 01950         MOVFF   PREINC1, r0x08
021C CFEC F000 01951         MOVFF   PREINC1, r0x07
0220 CFEC F000 01952         MOVFF   PREINC1, r0x06
0224 CFEC F000 01953         MOVFF   PREINC1, r0x05
0228 CFEC F000 01954         MOVFF   PREINC1, r0x04
022C CFEC F000 01955         MOVFF   PREINC1, r0x03
0230 CFEC F000 01956         MOVFF   PREINC1, r0x02
0234 CFEC F000 01957         MOVFF   PREINC1, r0x01
0238 CFEC F000 01958         MOVFF   PREINC1, r0x00
023C CFEC FFD9 01959         MOVFF   PREINC1, FSR2L
0240 0012      01960         RETURN  
               01961 
               01962 ; ; Starting pCode block
               01963 S_main__store_preset    code
0000           01964 _store_preset:
               01965 ;       .line   63; main.c      void store_preset(unsigned char num) __wparam{
0000 CFD9 FFED 01966         MOVFF   FSR2L, POSTDEC1
0004 CFE9 FFD9 01967         MOVFF   FSR1L, FSR2L
0008 C000 FFED 01968         MOVFF   r0x00, POSTDEC1
000C C000 FFED 01969         MOVFF   r0x01, POSTDEC1
0010 C000 FFED 01970         MOVFF   r0x02, POSTDEC1
0014 C000 FFED 01971         MOVFF   r0x03, POSTDEC1
0018 C000 FFED 01972         MOVFF   r0x04, POSTDEC1
001C 6E00      01973         MOVWF   r0x00
               01974 ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
               01975 ; ;Unrolled 8 X 8 multiplication
               01976 ; ;FIXME: the function does not support result==WREG
               01977 ;       .line   64; main.c      MIOS_BANKSTICK_WritePage(num*64, @current_preset);
001E 5000      01978         MOVF    r0x00, W
0020 0D40      01979         MULLW   0x40
0022 CFF3 F000 01980         MOVFF   PRODL, r0x00
0026 CFF4 F000 01981         MOVFF   PRODH, r0x01
002A 0E00      01982         MOVLW   HIGH(_current_preset)
002C 6E00      01983         MOVWF   r0x03
002E 0E00      01984         MOVLW   LOW(_current_preset)
0030 6E00      01985         MOVWF   r0x02
0032 0E80      01986         MOVLW   0x80
0034 6E00      01987         MOVWF   r0x04
0036 5000      01988         MOVF    r0x04, W
0038 6EED      01989         MOVWF   POSTDEC1
003A 5000      01990         MOVF    r0x03, W
003C 6EED      01991         MOVWF   POSTDEC1
003E 5000      01992         MOVF    r0x02, W
0040 6EED      01993         MOVWF   POSTDEC1
0042 5000      01994         MOVF    r0x01, W
0044 6EED      01995         MOVWF   POSTDEC1
0046 5000      01996         MOVF    r0x00, W
0048 EC00 F000 01997         CALL    _MIOS_BANKSTICK_WritePage
004C 0E04      01998         MOVLW   0x04
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004E 26E9      01999         ADDWF   FSR1L, F
0050 CFEC F000 02000         MOVFF   PREINC1, r0x04
0054 CFEC F000 02001         MOVFF   PREINC1, r0x03
0058 CFEC F000 02002         MOVFF   PREINC1, r0x02
005C CFEC F000 02003         MOVFF   PREINC1, r0x01
0060 CFEC F000 02004         MOVFF   PREINC1, r0x00
0064 CFEC FFD9 02005         MOVFF   PREINC1, FSR2L
0068 0012      02006         RETURN  
               02007 
               02008 ; ; Starting pCode block for Ival
               02009         code
0000           02010 _int_bit_ormask:
0000 0001 0002 02011         DB      0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00
0004 0004 0008
0008 0010 0020
000C 0040 0080 02012         DB      0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08
0010 0100 0200
0014 0400 0800
0018 1000 2000 02013         DB      0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80
001C 4000 8000
               02014 
               02015 
               02016 ; Statistics:
               02017 ; code size:     3618 (0x0e22) bytes ( 2.76%)
               02018 ;                1809 (0x0711) words
               02019 ; udata size:     320 (0x0140) bytes (25.00%)
               02020 ; access size:     22 (0x0016) bytes
               02021 
               02022 
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

FSR0H                             00000FE2
FSR0L                             00000FE1
FSR1L                             00000FE9
FSR2L                             00000FD9
INDF0                             00000FE7
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FED
POSTINC0                          00000FE6
PREINC1                           00000FEC
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
TABLAT                            00000FF5
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
WREG                              00000FE8
_00113_DS_                        00000130
_00115_DS_                        0000019A
_00116_DS_                        000001A2
_00117_DS_                        000000B8
_00119_DS_                        000001C4
_00121_DS_                        00000098
_00123_DS_                        000001DC
_00125_DS_                        000001E4
_00130_DS_                        00000086
_00132_DS_                        000000A6
_00134_DS_                        000000C4
_00136_DS_                        000000E2
_00138_DS_                        00000100
_00139_DS_                        0000016C
_00141_DS_                        000001E6
_00147_DS_                        00000076
_00152_DS_                        0000003A
_00155_DS_                        000000E4
_00165_DS_                        00000030
_00166_DS_                        00000038
_00170_DS_                        00000052
_00174_DS_                        00000020
_00178_DS_                        00000062
_00195_DS_                        0000007E
_00196_DS_                        00000086
_00197_DS_                        0000008E
_00198_DS_                        00000096
_00205_DS_                        0000009C
_00207_DS_                        000000B4
_00217_DS_                        0000006E
_00219_DS_                        000000B0
_00226_DS_                        00000062
_00228_DS_                        000000B0
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00230_DS_                        000000B4
_00233_DS_                        00000050
_00234_DS_                        00000054
_00255_DS_                        00000068
_00256_DS_                        000000CA
_00257_DS_                        000000E8
_00258_DS_                        000000FE
_00260_DS_                        00000194
_00264_DS_                        000002EA
_00266_DS_                        00000380
_00278_DS_                        00000558
_00279_DS_                        0000058C
_00280_DS_                        00000244
_00282_DS_                        000002CC
_00283_DS_                        000002D4
_00284_DS_                        000004AC
_00286_DS_                        00000516
_00287_DS_                        0000051E
_00288_DS_                        00000420
_00290_DS_                        00000540
_00292_DS_                        00000590
_00294_DS_                        0000017A
_00295_DS_                        00000182
_00296_DS_                        0000020E
_00297_DS_                        0000021A
_00298_DS_                        00000366
_00299_DS_                        0000036E
_00300_DS_                        000003F8
_00301_DS_                        00000404
_00310_DS_                        0000022A
_00319_DS_                        00000414
_00327_DS_                        000000BA
_00328_DS_                        00000172
_00329_DS_                        00000174
_00331_DS_                        0000035E
_00332_DS_                        00000360
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
_ADCON1bits                       00000000
_ADRESH                           00000000
_ADRESL                           00000000
_AIN_NotifyChange                 00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
_CCP2CONbits                      00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
_DIN_NotifyToggle                 00000000
_DISPLAY_Init                     00000000
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_DISPLAY_Tick                     00000000
_EEADR                            00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EEDATA                           00000000
_ENC_NotifyChange                 00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_INDF0                            00000000
_INDF1                            00000000
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_Init                             00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LVDCON                           00000000
_LVDCONbits                       00000000
_MIOS_BANKSTICK_CtrlSet           00000000
_MIOS_BANKSTICK_ReadPage          00000000
_MIOS_BANKSTICK_WritePage         00000000
_MIOS_BOX_CFG0                    00000000
_MIOS_BOX_CFG1                    00000000
_MIOS_BOX_STAT                    00000000
_MIOS_DIN_PinGet                  00000000
_MIOS_DOUT_SRSet                  00000000
_MIOS_EEPROM_Read                 00000000
_MIOS_EEPROM_Write                00000000
_MIOS_ENC_PIN_TABLE               00000000
_MIOS_HLP_GetBitORMask            00000000
_MIOS_MIDI_TxBufferPut            00000000
_MIOS_MPROC_EVENT_TABLE           00000000
_MIOS_PARAMETER1                  00000000
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MIOS_PARAMETER2                  00000000
_MIOS_PARAMETER3                  00000000
_MIOS_SRIO_DebounceSet            00000000
_MIOS_SRIO_NumberSet              00000000
_MIOS_SRIO_UpdateFrqSet           00000000
_MIOS_TIMER_Init                  00000000
_MIOS_TIMER_Stop                  00000000
_MPROC_NotifyFoundEvent           00000000
_MPROC_NotifyReceivedByte         00000000
_MPROC_NotifyReceivedByte_fx_status_1_1  00000004
_MPROC_NotifyReceivedEvnt         00000000
_MPROC_NotifyTimeout              00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
_PIE2                             00000000
_PIE2bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
_PIR2                             00000000
_PIR2bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PRODH                            00000000
_PRODL                            00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCSTA                            00000000
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_RCSTAbits                        00000000
_SPBRG                            00000000
_SR_Service_Finish                00000000
_SR_Service_Prepare               00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_TABLAT                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TXREG                            00000000
_TXSTA                            00000000
_TXSTAbits                        00000000
_Tick                             00000000
_Timer                            00000000
_WDTCON                           00000000
gpasm-0.13.4 beta               _output/main__mios-gpasm-tmp.asm9-16-2008  06:43:12          PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_WDTCONbits                       00000000
_WREG                             00000000
__18F452                          00000001
_current_bus_num                  00000002
_current_preset                   00000000
_current_preset_num               00000001
_current_screen_num               00000000
_int_bit_ormask                   00000000
_load_preset                      00000000
_midi_inout_map                   00000000
_mios_enc_pin_table               00000000
_mios_mproc_event_table           00000000
_preset_init                      00000000
_screen_init                      00000000
_store_preset                     00000000
_timer_ticks_count                00000003
r0x00                             00000010
r0x01                             00000011
r0x02                             00000012
r0x03                             00000013
r0x04                             00000014
r0x05                             00000015
r0x06                             00000016
r0x07                             00000017
r0x08                             00000018
r0x09                             00000019
r0x0a                             0000001A
r0x0b                             0000001B
r0x0c                             0000001C
r0x0d                             0000001D
r0x0e                             0000001E
r0x0f                             0000001F
r0x10                             00000020
r0x11                             00000021
r0x12                             00000022
r0x13                             00000023
r0x14                             00000024
r0x15                             00000025


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

