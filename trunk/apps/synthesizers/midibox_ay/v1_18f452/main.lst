gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;; =========================================================================
               00002 ;; main.asm
               00003 ;;
               00004 ;;                              MidiBox AY 3 8912 
               00005 ;;                                  V1.00 RC1
               00006 ; ==========================================================================
               00007 
               00008 ;; -------------------------------------------------------------------------
               00009 ;; APPLICATION: MIDIBOX AY 3 8912
               00010 ;; V1.00.pre01 (asm) / [17.09.2009]
               00011 ;; CORE8, PIC 18F452 
               00012 ;; For more Information see the MIDIbox AY 3 8912 Project Page:
               00013 ;; http://www.midibox.org/dokuwiki/midibox_ay_3_8912
               00014 ;; -------------------------------------------------------------------------
               00015 
               00016 ;; TO DO:
               00017 ;; * FORMATING BANKSTICK ROUTINE [F] @ MAIN MENU1
               00018 ;; * READ PATCH DATA from BANKSTICK
               00019 ;; * WRITE PATCH DATA from BANKSTICK
               00020 ;;   ==> WRITE_ALL_FX_PATCH_DATA_TO_BANKSTICK
               00021 
               00022 
               00023 ;; ---[MIOS header file ]---
               00024 #include "mios.h"
               00001 ;
               00002 ; MIOS Definitions file
               00003 ;
               00004 ; ==========================================================================
               00005 ;
               00006 ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
               00007 ;  Licensed for personal non-commercial use only.
               00008 ;  All other rights reserved.
               00009 ; 
               00010 ; ==========================================================================
               00011 
               00012  
               00013 ;; ==========================================================================
               00014 ;;  Assembler directives & device specific include file
               00015 ;;
               00016 ;;  Natively supported devices are listed here.
               00017 ;;  Some basic defines are added which characterize the derivative to
               00018 ;;  simplify dependencies within MIOS source code
               00019 ;; ==========================================================================
               00020 
               00021 #ifdef __18F452
               00022         LIST R=DEC
               00023 #include <p18f452.inc>
               00001         LIST
               00002 ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
               00983         LIST
0000           00024 #define PIC_DERIVATIVE_CODE_SIZE        0x08000
0000           00025 #define PIC_DERIVATIVE_RAM_SIZE         0x600
0000           00026 #define PIC_DERIVATIVE_EEPROM_SIZE      0x100
0000           00027 #define PIC_DERIVATIVE_IRQ_WORKAROUND   0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0000           00028 #define PIC_DERIVATIVE_NEW_ADC          0
0000           00029 #define PIC_DERIVATIVE_CMCON_INIT       0
0000           00030 #define PIC_DERIVATIVE_T08BIT_INVERTED  0
0000           00031 #define PIC_DERIVATIVE_SET_LCD_4BIT     0
               00032 #endif
               00033 
               00034 #ifdef __18F4620
               00035         LIST R=DEC
               00036 #include <p18f4620.inc>
               00037 #define PIC_DERIVATIVE_CODE_SIZE        0x10000
               00038 #define PIC_DERIVATIVE_RAM_SIZE         0xf80
               00039 #define PIC_DERIVATIVE_EEPROM_SIZE      0x400
               00040 #define PIC_DERIVATIVE_IRQ_WORKAROUND   1
               00041 #define PIC_DERIVATIVE_NEW_ADC          1
               00042 #define PIC_DERIVATIVE_CMCON_INIT       1
               00043 #define PIC_DERIVATIVE_T08BIT_INVERTED  1
               00044 #define PIC_DERIVATIVE_SET_LCD_4BIT     0
               00045 #endif
               00046         
               00047 #ifdef __18F4520
               00048         LIST R=DEC
               00049 #include <p18f4520.inc>
               00050 #define PIC_DERIVATIVE_CODE_SIZE        0x08000
               00051 #define PIC_DERIVATIVE_RAM_SIZE         0x600
               00052 #define PIC_DERIVATIVE_EEPROM_SIZE      0x100
               00053 #define PIC_DERIVATIVE_IRQ_WORKAROUND   1
               00054 #define PIC_DERIVATIVE_NEW_ADC          1
               00055 #define PIC_DERIVATIVE_CMCON_INIT       1
               00056 #define PIC_DERIVATIVE_T08BIT_INVERTED  0
               00057 #define PIC_DERIVATIVE_SET_LCD_4BIT     0
               00058 #endif
               00059 
               00060 #ifdef __18F4682
               00061         LIST R=DEC
               00062 #include <p18f4682.inc>
               00063 #define PIC_DERIVATIVE_CODE_SIZE        0x14000
               00064 #define PIC_DERIVATIVE_RAM_SIZE         0xd00
               00065 #define PIC_DERIVATIVE_EEPROM_SIZE      0x400
               00066 #define PIC_DERIVATIVE_IRQ_WORKAROUND   0
               00067 #define PIC_DERIVATIVE_NEW_ADC          1
               00068 #define PIC_DERIVATIVE_CMCON_INIT       1
               00069 #define PIC_DERIVATIVE_T08BIT_INVERTED  0
               00070 #define PIC_DERIVATIVE_SET_LCD_4BIT     1
               00071 #endif
               00072 
               00073 #ifdef __18F4685
               00074         LIST R=DEC
               00075 #include <p18f4685.inc>
               00076 #define PIC_DERIVATIVE_CODE_SIZE        0x18000
               00077 #define PIC_DERIVATIVE_RAM_SIZE         0xd00
               00078 #define PIC_DERIVATIVE_EEPROM_SIZE      0x400
               00079 #define PIC_DERIVATIVE_IRQ_WORKAROUND   0
               00080 #define PIC_DERIVATIVE_NEW_ADC          1
               00081 #define PIC_DERIVATIVE_CMCON_INIT       1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00082 #define PIC_DERIVATIVE_T08BIT_INVERTED  0
               00083 #define PIC_DERIVATIVE_SET_LCD_4BIT     1
               00084 #endif
               00085 
               00086 ;; ==========================================================================
               00087 ;;  General constants
               00088 ;; ==========================================================================
               00089 
               00090 ;; used by MIOS_MIDI_Interface*
  00000000     00091 MIOS_MIDI_INTERFACE_COMMON      EQU     0x00
  00000001     00092 MIOS_MIDI_INTERFACE_TO_HOST     EQU     0x01
               00093 
               00094 ;; used by MIOS_MIDI_Merger*
  00000000     00095 MIOS_MIDI_MERGER_DISABLED       EQU     0x00
  00000001     00096 MIOS_MIDI_MERGER_ENABLED        EQU     0x01
  00000002     00097 MIOS_MIDI_MERGER_MBLINK_EP      EQU     0x02
  00000003     00098 MIOS_MIDI_MERGER_MBLINK_FP      EQU     0x03
               00099 
               00100 ;; used by MIOS_ENC_PIN_TABLE
  00000000     00101 MIOS_ENC_MODE_NON_DETENTED      EQU     0x00
  00000080     00102 MIOS_ENC_MODE_DETENTED          EQU     0x80
  00000080     00103 MIOS_ENC_MODE_DETENTED1         EQU     0x80
  00000081     00104 MIOS_ENC_MODE_DETENTED2         EQU     0x81
  00000082     00105 MIOS_ENC_MODE_DETENTED3         EQU     0x82
               00106 
               00107 ;; used by MIOS_ENC_Speed*
  00000000     00108 MIOS_ENC_SPEED_SLOW             EQU     0
  00000001     00109 MIOS_ENC_SPEED_NORMAL           EQU     1
  00000002     00110 MIOS_ENC_SPEED_FAST             EQU     2
               00111 
               00112 ;; used by MIOS_LCD_Type*
  00000000     00113 MIOS_LCD_TYPE_CLCD              EQU     0x00
  00000001     00114 MIOS_LCD_TYPE_GLCD0             EQU     0x01
  00000002     00115 MIOS_LCD_TYPE_GLCD1             EQU     0x02
  00000003     00116 MIOS_LCD_TYPE_GLCD2             EQU     0x03
  00000004     00117 MIOS_LCD_TYPE_GLCD3             EQU     0x04
  00000005     00118 MIOS_LCD_TYPE_GLCD4             EQU     0x05
  00000006     00119 MIOS_LCD_TYPE_MLCD              EQU     0x06
  00000007     00120 MIOS_LCD_TYPE_GLCD_CUSTOM       EQU     0x07
               00121 
               00122 ;; location of default 5x8 font for graphical displays
  00007CFC     00123 MIOS_GLCD_FONT                  EQU     0x7cfc
               00124 
               00125 ;; general config flags (never overwrite this flags directly!!!)
  00000000     00126 MIOS_BOX_CFG0_LCD_TYPE0         EQU 0   ; selects LCD type, bit 0
  00000001     00127 MIOS_BOX_CFG0_LCD_TYPE1         EQU 1   ; selects LCD type, bit 1
  00000002     00128 MIOS_BOX_CFG0_LCD_TYPE2         EQU 2   ; selects LCD type, bit 2
  00000003     00129 MIOS_BOX_CFG0_USE_GLCD          EQU 3   ; if 1, graphical LCD is connected
  00000004     00130 MIOS_BOX_CFG0_MERGER            EQU 4   ; if 1, MIDI merger is enabled
  00000005     00131 MIOS_BOX_CFG0_MBLINK            EQU 5   ; if 1, MIDIbox Link is enabled
  00000006     00132 MIOS_BOX_CFG0_TO_HOST           EQU 6   ; if 1, MIDI interface will run with 38400 baud instead of 31250
  00000007     00133 MIOS_BOX_CFG0_20MHz             EQU 7   ; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
               00134 
  00000000     00135 MIOS_BOX_CFG1_BS_A0             EQU 0   ; A0 of BankStick (never change the bit position)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000001     00136 MIOS_BOX_CFG1_BS_A1             EQU 1   ; A1 of BankStick (never change the bit position)
  00000002     00137 MIOS_BOX_CFG1_BS_A2             EQU 2   ; A2 of BankStick (never change the bit position)
  00000003     00138 MIOS_BOX_CFG1_BS_DIS_VERIFY     EQU 3   ; if 1, writes to the BankStick will not be verified
  00000004     00139 MIOS_BOX_CFG1_IIC_STRETCH_CLK   EQU 4   ; if 1, IIC clock stretching enabled
               00140 
               00141 ;; general status flags (never overwrite this flags directly!!!)
  00000000     00142 MIOS_BOX_STAT_BS_AVAILABLE      EQU 0   ; if 1, BankStick is available
  00000001     00143 MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
  00000002     00144 MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
  00000003     00145 MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
  00000004     00146 MIOS_BOX_STAT_AUTOREPEAT        EQU 4   ; if 1, start the auto-repeat handler
  00000005     00147 MIOS_BOX_STAT_MLCD_TRANSFER     EQU 5   ; if 1, a transfer to the MLCD has been started
  00000006     00148 MIOS_BOX_STAT_FERR              EQU 6   ; if 1, a frame error happened during MIDI receive
               00149 
               00150 ;; ==========================================================================
               00151 ;;  MIOS Special Function Registers
               00152 ;; ==========================================================================
               00153 
  00000000     00154 MIOS_BOX_CFG0   EQU     0x000
  00000001     00155 MIOS_BOX_CFG1   EQU     0x001
  00000002     00156 MIOS_BOX_STAT   EQU     0x002
  00000003     00157 MIOS_PARAMETER1 EQU     0x003
  00000004     00158 MIOS_PARAMETER2 EQU     0x004
  00000005     00159 MIOS_PARAMETER3 EQU     0x005
               00160 
               00161 ;; ==========================================================================
               00162 ;;  temporary registers for main programs
               00163 ;; ==========================================================================
  00000006     00164 TMP1            EQU     0x006
  00000007     00165 TMP2            EQU     0x007
  00000008     00166 TMP3            EQU     0x008
  00000009     00167 TMP4            EQU     0x009
  0000000A     00168 TMP5            EQU     0x00a
               00169 
               00170 ;; ==========================================================================
               00171 ;;  temporary registers for IRQs
               00172 ;; ==========================================================================
  0000000B     00173 IRQ_TMP1        EQU     0x00b
  0000000C     00174 IRQ_TMP2        EQU     0x00c
  0000000D     00175 IRQ_TMP3        EQU     0x00d
  0000000E     00176 IRQ_TMP4        EQU     0x00e
  0000000F     00177 IRQ_TMP5        EQU     0x00f
               00178 
               00179 ;; ==========================================================================
               00180 ;;  free memory space for user application:
               00181 ;; ==========================================================================
               00182         ;; 0x010-0x37f
               00183 
               00184 ;; ==========================================================================
               00185 ;;  MIOS System Registers -- not defined here -- 
               00186 ;;  never use these memory locations!
               00187 ;; ==========================================================================
               00188         ;; 0x380-0x6ff
               00189 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00190 ;; ==========================================================================
               00191 ;;  MIOS System Registers for custom LCD driver
               00192 ;; ==========================================================================
  00000570     00193 MIOS_GLCD_BUFFER        EQU     0x570   ; note: the buffer must be located at ...0-...7
  00000578     00194 MIOS_LCD_OPTION1        EQU     0x578   ; contains the first LCD option given by MIOS_LCD_TypeSet
  00000579     00195 MIOS_LCD_OPTION2        EQU     0x579   ; contains the second LCD option given by MIOS_LCD_TypeSet
  0000057A     00196 MIOS_LCD_CURSOR_POS     EQU     0x57a   ; the current cursor pos of characters (GLCD: multiplied by width)
  0000057B     00197 MIOS_GLCD_GCURSOR_X     EQU     0x57b   ; for GLCDs: the current X position of graphical cursor
  0000057C     00198 MIOS_GLCD_GCURSOR_Y     EQU     0x57c   ; for GLCDs: the current Y position of graphical cursor
  0000057D     00199 MIOS_GLCD_FONT_WIDTH    EQU     0x57d   ; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
  0000057E     00200 MIOS_GLCD_FONT_HEIGHT   EQU     0x57e   ; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
  0000057F     00201 MIOS_GLCD_FONT_X0       EQU     0x57f   ; for GLCDs: the first byte within a char entry
  00000580     00202 MIOS_GLCD_FONT_OFFSET   EQU     0x580   ; for GLCDs: the byte offset between the characters
  00000581     00203 MIOS_GLCD_FONT_PTRL     EQU     0x581   ; for GLCDs: pointer to the character table, low-byte
  00000582     00204 MIOS_GLCD_FONT_PTRH     EQU     0x582   ; for GLCDs: pointer to the character table, high-byte
  00000583     00205 MIOS_LCD_TIMEOUT0       EQU     0x583   ; can be used for timeout loops
  00000584     00206 MIOS_LCD_TIMEOUT1       EQU     0x584   ; can be used for timeout loops
  00000585     00207 MIOS_GLCD_TMP1          EQU     0x585   ; can be used as temporary buffer
  00000586     00208 MIOS_GLCD_TMP2          EQU     0x586   ; can be used as temporary buffer
  00000587     00209 MIOS_GLCD_TMP3          EQU     0x587   ; can be used as temporary buffer
  00000588     00210 MIOS_GLCD_TMP4          EQU     0x588   ; can be used as temporary buffer
  00000589     00211 MIOS_LCD_Y0_OFFSET      EQU     0x589   ; Y0 offset of LCD
  0000058A     00212 MIOS_LCD_Y1_OFFSET      EQU     0x58a   ; Y1 offset of LCD
  0000058B     00213 MIOS_LCD_Y2_OFFSET      EQU     0x58b   ; Y2 offset of LCD
  0000058C     00214 MIOS_LCD_Y3_OFFSET      EQU     0x58c   ; Y3 offset of LCD
  0000058D     00215 MIOS_LCD_CURSOR_POS_REAL EQU    0x58d   ; unmapped cursor position which has been set with MIOS_LCD_CursorSet
  0000058E     00216 MIOS_GLCD_FONT_PTRU     EQU     0x58e   ; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
               00025 
               00026 ;; ---[useful macros ]---
               00027 #include "macros.h"
               00001 ;
               00002 ; Macro Definitions
               00003 ;
               00004 ; ==========================================================================
               00005 ;
               00006 ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
               00007 ;  Licensed for personal non-commercial use only.
               00008 ;  All other rights reserved.
               00009 ; 
               00010 ; ==========================================================================
               00011 
               00012 BRA_IFSET       MACRO   reg, bit, reg_a, label
               00013         btfsc   reg, bit, reg_a
               00014         bra     label
               00015         ENDM
               00016 
               00017 
               00018 BRA_IFCLR       MACRO   reg, bit, reg_a, label
               00019         btfss   reg, bit, reg_a
               00020         bra     label
               00021         ENDM
               00022 
               00023 GOTO_IFSET      MACRO   reg, bit, reg_a, label
               00024         btfsc   reg, bit, reg_a
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00025         goto    label
               00026         ENDM
               00027 
               00028 
               00029 GOTO_IFCLR      MACRO   reg, bit, reg_a, label
               00030         btfss   reg, bit, reg_a
               00031         goto    label
               00032         ENDM
               00033 
               00034 CALL_IFSET      MACRO   reg, bit, reg_a, label
               00035         btfsc   reg, bit, reg_a
               00036         call    label
               00037         ENDM
               00038 
               00039 
               00040 CALL_IFCLR      MACRO   reg, bit, reg_a, label
               00041         btfss   reg, bit, reg_a
               00042         call    label
               00043         ENDM
               00044 
               00045 RCALL_IFSET     MACRO   reg, bit, reg_a, label
               00046         btfsc   reg, bit, reg_a
               00047         rcall   label
               00048         ENDM
               00049 
               00050 
               00051 RCALL_IFCLR     MACRO   reg, bit, reg_a, label
               00052         btfss   reg, bit, reg_a
               00053         rcall   label
               00054         ENDM
               00055 
               00056 ;; ==========================================================================
               00057 
               00058 IRQ_DISABLE MACRO
               00059         bcf     INTCON, GIE
               00060         ENDM
               00061 
               00062 IRQ_ENABLE MACRO
               00063         bsf     INTCON, GIE
               00064         ENDM
               00065 
               00066 ;; ==========================================================================
               00067 
               00068 TABLE_ADDR_FULL MACRO addr
               00069         movlw   LOW(addr)               ; store Lo Byte
               00070         movwf   TBLPTRL
               00071         movlw   HIGH(addr)              ; store Hi Byte
               00072         movwf   TBLPTRH
               00073         movlw   UPPER(addr)             ; store upper Byte
               00074         movwf   TBLPTRU
               00075         ENDM
               00076         
               00077 TABLE_ADDR MACRO addr
               00078         movlw   LOW(addr)               ; store Lo Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00079         movwf   TBLPTRL
               00080         movlw   HIGH(addr)              ; store Hi Byte
               00081         movwf   TBLPTRH
               00082 #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
               00083         movlw   UPPER(addr)             ; store Upper Byte
               00084         movwf   TBLPTRU
               00085 #endif
               00086         ENDM
               00087         
               00088 TABLE_H MACRO   addr
               00089         movlw   HIGH(addr)              ; store Hi Byte
               00090         movwf   TBLPTRH
               00091         ENDM
               00092 
               00093 TABLE_L MACRO   addr
               00094         movlw   LOW(addr)               ; store Lo Byte
               00095         movwf   TBLPTRL
               00096         ENDM
               00097 
               00098 TABLE_ADD_W MACRO
               00099         addwf   TBLPTRL, F
               00100         movlw   0x00
               00101         addwfc  TBLPTRH, F
               00102 #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
               00103         movlw   0x00
               00104         addwfc  TBLPTRU, F
               00105 #endif
               00106         ENDM
               00107 
               00108 TABLE_ADDR_MUL_W MACRO addr, multiplicator
               00109         mullw   multiplicator
               00110         movlw   LOW(addr)
               00111         addwf   PRODL, W
               00112         movwf   TBLPTRL
               00113         movlw   HIGH(addr)
               00114         addwfc  PRODH, W
               00115         movwf   TBLPTRH
               00116 #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
               00117         clrf    TBLPTRU
               00118         movlw   UPPER(addr)
               00119         addwfc  TBLPTRU, F
               00120 #endif
               00121         ENDM
               00122 
               00123 ;; ==========================================================================
               00124 
               00125 JUMPTABLE_2BYTES MACRO max_value
               00126         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
               00127         skpnc
               00128         movlw   -(max_value)
               00129         addlw   max_value
               00130         call    MIOS_HLP_GetIndex_2bytes
               00131         ENDM
               00132 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00133 JUMPTABLE_2BYTES_UNSECURE MACRO
               00134         call    MIOS_HLP_GetIndex_2bytes
               00135         ENDM
               00136 
               00137 JUMPTABLE_4BYTES MACRO max_value
               00138         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
               00139         skpnc
               00140         return
               00141         addlw   (max_value)
               00142         call    MIOS_HLP_GetIndex_4bytes
               00143         ENDM
               00144 
               00145 JUMPTABLE_4BYTES_UNSECURE MACRO
               00146         call    MIOS_HLP_GetIndex_4bytes
               00147         ENDM
               00148 
               00149 ;; ==========================================================================
               00150 
               00151 TWOBYTE_ENTRY MACRO low_byte, high_byte
               00152         dw      (high_byte << 8) | (low_byte)
               00153         ENDM
               00154 
               00155 ;; ==========================================================================
               00156 
0000           00157 #define skpnz   btfsc   STATUS, Z 
0000           00158 #define skpz    btfss   STATUS, Z 
0000           00159 #define skpndc  btfsc   STATUS, DC 
0000           00160 #define skpdc   btfss   STATUS, DC
0000           00161 #define skpnc   btfsc   STATUS, C
0000           00162 #define skpc    btfss   STATUS, C
0000           00163 #define clrc    bcf     STATUS, C
0000           00164 #define setc    bsf     STATUS, C
0000           00165 #define clrz    bcf     STATUS, Z
0000           00166 #define setz    bsf     STATUS, Z
0000           00167 #define rrf     rrcf    
0000           00168 #define rlf     rlcf
               00169 
               00170 rgoto   MACRO   label
               00171         bra     label
               00172         ENDM
               00173 
               00174 SET_BSR MACRO   reg
               00175         movlb   HIGH(reg)
               00176         ENDM
               00177 
               00178 ;; ==========================================================================
               00179 
               00180 FONT_ENTRY MACRO width, height, x0, char_offset
               00181         dw      ((height) << 8) | (width), ((char_offset) << 8) | (x0)
               00182         ENDM
               00183 
               00184 ;; ==========================================================================
               00185 
               00186 STRING MACRO length, pos, str
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00187         da      ((length) << 8) | (pos), str
               00188         ENDM
               00189 
               00190 ;; ==========================================================================
               00191 
               00192 ;; ===========[MB AY MACROS]=================================================
               00193 
               00028 
               00029 ;; ---[vectors to MIOS functions (never change!) ]---
               00030 #include "mios_vectors.inc"
  00002C00     00001 MIOS_MIDI_BeginStream                   EQU     0x2c00
  00002C04     00002 MIOS_MIDI_DeviceIDAutoSet               EQU     0x2c04
  00002C08     00003 MIOS_MIDI_DeviceIDGet                   EQU     0x2c08
  00002C0C     00004 MIOS_MIDI_DeviceIDSet                   EQU     0x2c0c
  00002C10     00005 MIOS_MIDI_EndStream                     EQU     0x2c10
  00002C14     00006 MIOS_MIDI_Init                          EQU     0x2c14
  00002C18     00007 MIOS_MIDI_InterfaceAutoSet              EQU     0x2c18
  00002C1C     00008 MIOS_MIDI_InterfaceGet                  EQU     0x2c1c
  00002C20     00009 MIOS_MIDI_InterfaceSet                  EQU     0x2c20
  00002C24     00010 MIOS_MIDI_MergerGet                     EQU     0x2c24
  00002C28     00011 MIOS_MIDI_MergerSet                     EQU     0x2c28
  00002C2C     00012 MIOS_MIDI_RxBufferFree                  EQU     0x2c2c
  00002C30     00013 MIOS_MIDI_RxBufferGet                   EQU     0x2c30
  00002C34     00014 MIOS_MIDI_RxBufferPut                   EQU     0x2c34
  00002C38     00015 MIOS_MIDI_RxBufferUsed                  EQU     0x2c38
  00002C3C     00016 MIOS_MIDI_TxBufferFlush                 EQU     0x2c3c
  00002C40     00017 MIOS_MIDI_TxBufferFree                  EQU     0x2c40
  00002C44     00018 MIOS_MIDI_TxBufferGet                   EQU     0x2c44
  00002C48     00019 MIOS_MIDI_TxBufferPut                   EQU     0x2c48
  00002C4C     00020 MIOS_MIDI_TxBufferUsed                  EQU     0x2c4c
  00002C50     00021 MIOS_MPROC_MergerDisable                EQU     0x2c50
  00002C54     00022 MIOS_MPROC_MergerEnable                 EQU     0x2c54
  00002C58     00023 MIOS_MPROC_MergerGet                    EQU     0x2c58
  00002C5C     00024 MIOS_AIN_DeadbandGet                    EQU     0x2c5c
  00002C60     00025 MIOS_AIN_DeadbandSet                    EQU     0x2c60
  00002C64     00026 MIOS_AIN_Muxed                          EQU     0x2c64
  00002C68     00027 MIOS_AIN_NumberGet                      EQU     0x2c68
  00002C6C     00028 MIOS_AIN_NumberSet                      EQU     0x2c6c
  00002C70     00029 MIOS_AIN_Pin7bitGet                     EQU     0x2c70
  00002C74     00030 MIOS_AIN_PinGet                         EQU     0x2c74
  00002C78     00031 MIOS_AIN_PinLSBGet                      EQU     0x2c78
  00002C7C     00032 MIOS_AIN_PinMSBGet                      EQU     0x2c7c
  00002C80     00033 MIOS_AIN_UnMuxed                        EQU     0x2c80
  00002C84     00034 MIOS_MF_PWM_DutyCycleDownGet            EQU     0x2c84
  00002C88     00035 MIOS_MF_PWM_DutyCycleDownSet            EQU     0x2c88
  00002C8C     00036 MIOS_MF_PWM_DutyCycleUpGet              EQU     0x2c8c
  00002C90     00037 MIOS_MF_PWM_DutyCycleUpSet              EQU     0x2c90
  00002C94     00038 MIOS_MF_DeadbandGet                     EQU     0x2c94
  00002C98     00039 MIOS_MF_DeadbandSet                     EQU     0x2c98
  00002C9C     00040 MIOS_MF_Disable                         EQU     0x2c9c
  00002CA0     00041 MIOS_MF_Enable                          EQU     0x2ca0
  00002CA4     00042 MIOS_MF_FaderMove                       EQU     0x2ca4
  00002CA8     00043 MIOS_MF_SuspendDisable                  EQU     0x2ca8
  00002CAC     00044 MIOS_MF_SuspendEnable                   EQU     0x2cac
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00002CB0     00045 MIOS_MF_SuspendGet                      EQU     0x2cb0
  00002CB4     00046 MIOS_DIN_PinGet                         EQU     0x2cb4
  00002CB8     00047 MIOS_DIN_SRGet                          EQU     0x2cb8
  00002CBC     00048 MIOS_DOUT_PinGet                        EQU     0x2cbc
  00002CC0     00049 MIOS_DOUT_PinSet                        EQU     0x2cc0
  00002CC4     00050 MIOS_DOUT_PinSet0                       EQU     0x2cc4
  00002CC8     00051 MIOS_DOUT_PinSet1                       EQU     0x2cc8
  00002CCC     00052 MIOS_DOUT_SRGet                         EQU     0x2ccc
  00002CD0     00053 MIOS_DOUT_SRSet                         EQU     0x2cd0
  00002CD4     00054 MIOS_ENC_Abs7bitAdd                     EQU     0x2cd4
  00002CD8     00055 MIOS_ENC_Abs7bitGet                     EQU     0x2cd8
  00002CDC     00056 MIOS_ENC_Abs7bitSet                     EQU     0x2cdc
  00002CE0     00057 MIOS_ENC_NumberGet                      EQU     0x2ce0
  00002CE4     00058 MIOS_ENC_SpeedGet                       EQU     0x2ce4
  00002CE8     00059 MIOS_ENC_SpeedSet                       EQU     0x2ce8
  00002CEC     00060 MIOS_SRIO_NumberGet                     EQU     0x2cec
  00002CF0     00061 MIOS_SRIO_NumberSet                     EQU     0x2cf0
  00002CF4     00062 MIOS_SRIO_TS_SensitivityGet             EQU     0x2cf4
  00002CF8     00063 MIOS_SRIO_TS_SensitivitySet             EQU     0x2cf8
  00002CFC     00064 MIOS_SRIO_UpdateFrqGet                  EQU     0x2cfc
  00002D00     00065 MIOS_SRIO_UpdateFrqSet                  EQU     0x2d00
  00002D04     00066 MIOS_LCD_Clear                          EQU     0x2d04
  00002D08     00067 MIOS_LCD_Cmd                            EQU     0x2d08
  00002D0C     00068 MIOS_LCD_CursorGet                      EQU     0x2d0c
  00002D10     00069 MIOS_LCD_CursorSet                      EQU     0x2d10
  00002D14     00070 MIOS_LCD_Data                           EQU     0x2d14
  00002D18     00071 MIOS_LCD_Init                           EQU     0x2d18
  00002D1C     00072 MIOS_LCD_PrintBCD1                      EQU     0x2d1c
  00002D20     00073 MIOS_LCD_PrintBCD2                      EQU     0x2d20
  00002D24     00074 MIOS_LCD_PrintBCD3                      EQU     0x2d24
  00002D28     00075 MIOS_LCD_PrintChar                      EQU     0x2d28
  00002D2C     00076 MIOS_LCD_PrintHex1                      EQU     0x2d2c
  00002D30     00077 MIOS_LCD_PrintHex2                      EQU     0x2d30
  00002D34     00078 MIOS_LCD_PrintMessage                   EQU     0x2d34
  00002D38     00079 MIOS_LCD_PrintPreconfString             EQU     0x2d38
  00002D3C     00080 MIOS_LCD_PrintString                    EQU     0x2d3c
  00002D40     00081 MIOS_LCD_TypeAutoSet                    EQU     0x2d40
  00002D44     00082 MIOS_LCD_TypeGet                        EQU     0x2d44
  00002D48     00083 MIOS_LCD_TypeSet                        EQU     0x2d48
  00002D4C     00084 MIOS_LCD_YAddressGet                    EQU     0x2d4c
  00002D50     00085 MIOS_LCD_YAddressSet                    EQU     0x2d50
  00002D54     00086 MIOS_GLCD_FontInit                      EQU     0x2d54
  00002D58     00087 MIOS_GLCD_GCursorGet                    EQU     0x2d58
  00002D5C     00088 MIOS_GLCD_GCursorSet                    EQU     0x2d5c
  00002D60     00089 MIOS_EEPROM_Read                        EQU     0x2d60
  00002D64     00090 MIOS_EEPROM_Write                       EQU     0x2d64
  00002D68     00091 MIOS_FLASH_Read                         EQU     0x2d68
  00002D6C     00092 MIOS_FLASH_Write                        EQU     0x2d6c
  00002D70     00093 MIOS_BANKSTICK_Read                     EQU     0x2d70
  00002D74     00094 MIOS_BANKSTICK_Write                    EQU     0x2d74
  00002D78     00095 MIOS_TIMER_Init                         EQU     0x2d78
  00002D7C     00096 MIOS_TIMER_Start                        EQU     0x2d7c
  00002D80     00097 MIOS_TIMER_Stop                         EQU     0x2d80
  00002D84     00098 MIOS_HLP_AddressFromTable               EQU     0x2d84
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00002D88     00099 MIOS_HLP_GetBitANDMask                  EQU     0x2d88
  00002D8C     00100 MIOS_HLP_GetBitORMask                   EQU     0x2d8c
  00002D90     00101 MIOS_HLP_GetIndex_2bytes                EQU     0x2d90
  00002D94     00102 MIOS_HLP_GetIndex_4bytes                EQU     0x2d94
  00002D98     00103 MIOS_HLP_IndirectJump                   EQU     0x2d98
  00002D9C     00104 MIOS_Delay                              EQU     0x2d9c
  00002DA0     00105 MIOS_GPCounterGet                       EQU     0x2da0
  00002DA4     00106 MIOS_Reset                              EQU     0x2da4
  00002DA8     00107 MIOS_SystemResume                       EQU     0x2da8
  00002DAC     00108 MIOS_SystemSuspend                      EQU     0x2dac
  00002DB0     00109 MIOS_UserResume                         EQU     0x2db0
  00002DB4     00110 MIOS_UserSuspend                        EQU     0x2db4
  00002DB8     00111 MIOS_HLP_16bitAddSaturate               EQU     0x2db8
  00002DBC     00112 MIOS_DIN_PinAutoRepeatEnable            EQU     0x2dbc
  00002DC0     00113 MIOS_DIN_PinAutoRepeatDisable           EQU     0x2dc0
  00002DC4     00114 MIOS_DIN_PinAutoRepeatGet               EQU     0x2dc4
  00002DC8     00115 MIOS_CLCD_SpecialCharInit               EQU     0x2dc8
  00002DCC     00116 MIOS_CLCD_SpecialCharsInit              EQU     0x2dcc
  00002DD0     00117 MIOS_AIN_DynamicPrioSet                 EQU     0x2dd0
  00002DD4     00118 MIOS_AIN_DynamicPrioGet                 EQU     0x2dd4
  00002DD8     00119 MIOS_AIN_LastPinsGet                    EQU     0x2dd8
  00002DDC     00120 MIOS_BANKSTICK_CtrlSet                  EQU     0x2ddc
  00002DE0     00121 MIOS_BANKSTICK_CtrlGet                  EQU     0x2de0
  00002DE4     00122 MIOS_BANKSTICK_WritePage                EQU     0x2de4
  00002DE8     00123 MIOS_HLP_Dec2BCD                        EQU     0x2de8
  00002DEC     00124 MIOS_LCD_PrintBCD4                      EQU     0x2dec
  00002DF0     00125 MIOS_LCD_PrintBCD5                      EQU     0x2df0
  00002DF4     00126 MIOS_LCD_MessageStart                   EQU     0x2df4
  00002DF8     00127 MIOS_LCD_MessageStop                    EQU     0x2df8
  00002DFC     00128 MIOS_MF_PWM_PeriodGet                   EQU     0x2dfc
  00002E00     00129 MIOS_MF_PWM_PeriodSet                   EQU     0x2e00
  00002E04     00130 MIOS_IIC_Start                          EQU     0x2e04
  00002E08     00131 MIOS_IIC_Stop                           EQU     0x2e08
  00002E0C     00132 MIOS_IIC_ByteSend                       EQU     0x2e0c
  00002E10     00133 MIOS_IIC_ByteReceive                    EQU     0x2e10
  00002E14     00134 MIOS_IIC_AckSend                        EQU     0x2e14
  00002E18     00135 MIOS_IIC_NakSend                        EQU     0x2e18
  00002E1C     00136 MIOS_IIC_CtrlSet                        EQU     0x2e1c
  00002E20     00137 MIOS_IIC_CtrlGet                        EQU     0x2e20
  00002E24     00138 MIOS_SRIO_DebounceSet                   EQU     0x2e24
  00002E28     00139 MIOS_SRIO_DebounceGet                   EQU     0x2e28
  00002E2C     00140 MIOS_MF_TouchDetectionReset             EQU     0x2e2c
  00002E30     00141 MIOS_BANKSTICK_ReadPage                 EQU     0x2e30
  00002E34     00142 MIOS_EEPROM_ReadPage                    EQU     0x2e34
  00002E38     00143 MIOS_EEPROM_WritePage                   EQU     0x2e38
  00002E3C     00144 MIOS_TIMER_ReInit                       EQU     0x2e3c
  00002E40     00145 MIOS_RESERVED_144                       EQU     0x2e40
  00002E44     00146 MIOS_RESERVED_145                       EQU     0x2e44
  00002E48     00147 MIOS_RESERVED_146                       EQU     0x2e48
  00002E4C     00148 MIOS_RESERVED_147                       EQU     0x2e4c
  00002E50     00149 MIOS_RESERVED_148                       EQU     0x2e50
  00002E54     00150 MIOS_RESERVED_149                       EQU     0x2e54
  00002E58     00151 MIOS_RESERVED_150                       EQU     0x2e58
  00002E5C     00152 MIOS_RESERVED_151                       EQU     0x2e5c
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00002E60     00153 MIOS_RESERVED_152                       EQU     0x2e60
  00002E64     00154 MIOS_RESERVED_153                       EQU     0x2e64
  00002E68     00155 MIOS_RESERVED_154                       EQU     0x2e68
  00002E6C     00156 MIOS_RESERVED_155                       EQU     0x2e6c
  00002E70     00157 MIOS_RESERVED_156                       EQU     0x2e70
  00002E74     00158 MIOS_RESERVED_157                       EQU     0x2e74
  00002E78     00159 MIOS_RESERVED_158                       EQU     0x2e78
  00002E7C     00160 MIOS_RESERVED_159                       EQU     0x2e7c
  00002E80     00161 MIOS_RESERVED_160                       EQU     0x2e80
  00002E84     00162 MIOS_RESERVED_161                       EQU     0x2e84
  00002E88     00163 MIOS_RESERVED_162                       EQU     0x2e88
  00002E8C     00164 MIOS_RESERVED_163                       EQU     0x2e8c
  00002E90     00165 MIOS_RESERVED_164                       EQU     0x2e90
  00002E94     00166 MIOS_RESERVED_165                       EQU     0x2e94
  00002E98     00167 MIOS_RESERVED_166                       EQU     0x2e98
  00002E9C     00168 MIOS_RESERVED_167                       EQU     0x2e9c
  00002EA0     00169 MIOS_RESERVED_168                       EQU     0x2ea0
  00002EA4     00170 MIOS_RESERVED_169                       EQU     0x2ea4
  00002EA8     00171 MIOS_RESERVED_170                       EQU     0x2ea8
  00002EAC     00172 MIOS_RESERVED_171                       EQU     0x2eac
  00002EB0     00173 MIOS_RESERVED_172                       EQU     0x2eb0
  00002EB4     00174 MIOS_RESERVED_173                       EQU     0x2eb4
  00002EB8     00175 MIOS_RESERVED_174                       EQU     0x2eb8
  00002EBC     00176 MIOS_RESERVED_175                       EQU     0x2ebc
  00002EC0     00177 MIOS_RESERVED_176                       EQU     0x2ec0
  00002EC4     00178 MIOS_RESERVED_177                       EQU     0x2ec4
  00002EC8     00179 MIOS_RESERVED_178                       EQU     0x2ec8
  00002ECC     00180 MIOS_RESERVED_179                       EQU     0x2ecc
  00002ED0     00181 MIOS_RESERVED_180                       EQU     0x2ed0
  00002ED4     00182 MIOS_RESERVED_181                       EQU     0x2ed4
  00002ED8     00183 MIOS_RESERVED_182                       EQU     0x2ed8
  00002EDC     00184 MIOS_RESERVED_183                       EQU     0x2edc
  00002EE0     00185 MIOS_RESERVED_184                       EQU     0x2ee0
  00002EE4     00186 MIOS_RESERVED_185                       EQU     0x2ee4
  00002EE8     00187 MIOS_RESERVED_186                       EQU     0x2ee8
  00002EEC     00188 MIOS_RESERVED_187                       EQU     0x2eec
  00002EF0     00189 MIOS_RESERVED_188                       EQU     0x2ef0
  00002EF4     00190 MIOS_RESERVED_189                       EQU     0x2ef4
  00002EF8     00191 MIOS_RESERVED_190                       EQU     0x2ef8
  00002EFC     00192 MIOS_RESERVED_191                       EQU     0x2efc
  00002F00     00193 MIOS_RESERVED_192                       EQU     0x2f00
  00002F04     00194 MIOS_RESERVED_193                       EQU     0x2f04
  00002F08     00195 MIOS_RESERVED_194                       EQU     0x2f08
  00002F0C     00196 MIOS_RESERVED_195                       EQU     0x2f0c
  00002F10     00197 MIOS_RESERVED_196                       EQU     0x2f10
  00002F14     00198 MIOS_RESERVED_197                       EQU     0x2f14
  00002F18     00199 MIOS_RESERVED_198                       EQU     0x2f18
  00002F1C     00200 MIOS_RESERVED_199                       EQU     0x2f1c
  00002F20     00201 MIOS_RESERVED_200                       EQU     0x2f20
  00002F24     00202 MIOS_RESERVED_201                       EQU     0x2f24
  00002F28     00203 MIOS_RESERVED_202                       EQU     0x2f28
  00002F2C     00204 MIOS_RESERVED_203                       EQU     0x2f2c
  00002F30     00205 MIOS_RESERVED_204                       EQU     0x2f30
  00002F34     00206 MIOS_RESERVED_205                       EQU     0x2f34
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00002F38     00207 MIOS_RESERVED_206                       EQU     0x2f38
  00002F3C     00208 MIOS_RESERVED_207                       EQU     0x2f3c
  00002F40     00209 MIOS_RESERVED_208                       EQU     0x2f40
  00002F44     00210 MIOS_RESERVED_209                       EQU     0x2f44
  00002F48     00211 MIOS_RESERVED_210                       EQU     0x2f48
  00002F4C     00212 MIOS_RESERVED_211                       EQU     0x2f4c
  00002F50     00213 MIOS_RESERVED_212                       EQU     0x2f50
  00002F54     00214 MIOS_RESERVED_213                       EQU     0x2f54
  00002F58     00215 MIOS_RESERVED_214                       EQU     0x2f58
  00002F5C     00216 MIOS_RESERVED_215                       EQU     0x2f5c
  00002F60     00217 MIOS_RESERVED_216                       EQU     0x2f60
  00002F64     00218 MIOS_RESERVED_217                       EQU     0x2f64
  00002F68     00219 MIOS_RESERVED_218                       EQU     0x2f68
  00002F6C     00220 MIOS_RESERVED_219                       EQU     0x2f6c
  00002F70     00221 MIOS_RESERVED_220                       EQU     0x2f70
  00002F74     00222 MIOS_RESERVED_221                       EQU     0x2f74
  00002F78     00223 MIOS_RESERVED_222                       EQU     0x2f78
  00002F7C     00224 MIOS_RESERVED_223                       EQU     0x2f7c
  00002F80     00225 MIOS_RESERVED_224                       EQU     0x2f80
  00002F84     00226 MIOS_RESERVED_225                       EQU     0x2f84
  00002F88     00227 MIOS_RESERVED_226                       EQU     0x2f88
  00002F8C     00228 MIOS_RESERVED_227                       EQU     0x2f8c
  00002F90     00229 MIOS_RESERVED_228                       EQU     0x2f90
  00002F94     00230 MIOS_RESERVED_229                       EQU     0x2f94
  00002F98     00231 MIOS_RESERVED_230                       EQU     0x2f98
  00002F9C     00232 MIOS_RESERVED_231                       EQU     0x2f9c
  00002FA0     00233 MIOS_RESERVED_232                       EQU     0x2fa0
  00002FA4     00234 MIOS_RESERVED_233                       EQU     0x2fa4
  00002FA8     00235 MIOS_RESERVED_234                       EQU     0x2fa8
  00002FAC     00236 MIOS_RESERVED_235                       EQU     0x2fac
  00002FB0     00237 MIOS_RESERVED_236                       EQU     0x2fb0
  00002FB4     00238 MIOS_RESERVED_237                       EQU     0x2fb4
  00002FB8     00239 MIOS_RESERVED_238                       EQU     0x2fb8
  00002FBC     00240 MIOS_RESERVED_239                       EQU     0x2fbc
  00002FC0     00241 MIOS_RESERVED_240                       EQU     0x2fc0
  00002FC4     00242 MIOS_RESERVED_241                       EQU     0x2fc4
  00002FC8     00243 MIOS_RESERVED_242                       EQU     0x2fc8
  00002FCC     00244 MIOS_RESERVED_243                       EQU     0x2fcc
  00002FD0     00245 MIOS_RESERVED_244                       EQU     0x2fd0
  00002FD4     00246 MIOS_RESERVED_245                       EQU     0x2fd4
  00002FD8     00247 MIOS_RESERVED_246                       EQU     0x2fd8
  00002FDC     00248 MIOS_RESERVED_247                       EQU     0x2fdc
  00002FE0     00249 MIOS_RESERVED_248                       EQU     0x2fe0
  00002FE4     00250 MIOS_RESERVED_249                       EQU     0x2fe4
  00002FE8     00251 MIOS_RESERVED_250                       EQU     0x2fe8
  00002FEC     00252 MIOS_RESERVED_251                       EQU     0x2fec
  00002FF0     00253 MIOS_RESERVED_252                       EQU     0x2ff0
  00002FF4     00254 MIOS_RESERVED_253                       EQU     0x2ff4
  00002FF8     00255 MIOS_RESERVED_254                       EQU     0x2ff8
  00002FFC     00256 MIOS_RESERVED_255                       EQU     0x2ffc
               00031 
               00032 ;; ---[user hooks (never change!) ]---
               00033 #include "user_vectors.inc"
               00001 ;
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00002 ; User vectortable - contains user hooks to MIOS
               00003 ;
               00004 ; ==========================================================================
               00005 ;
               00006 ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
               00007 ;  Licensed for personal non-commercial use only.
               00008 ;  All other rights reserved.
               00009 ; 
               00010 ; ==========================================================================
               00011 
               00012         ;; never change the origin or the order of entries!
3000           00013         org     0x3000
3000           00014 _User_Init
3000 EF0C F03F 00015         goto    USER_Init
3004           00016 _USER_Tick
3004 EF1F F03F 00017         goto    USER_Tick
3008           00018 _USER_Timer
3008 EF26 F03F 00019         goto    USER_Timer
300C           00020 _USER_MPROC_DebugTrigger
300C EF29 F03F 00021         goto    USER_MPROC_DebugTrigger
3010           00022 _USER_DISPLAY_Init
3010 EF2A F03F 00023         goto    USER_DISPLAY_Init
3014           00024 _USER_DISPLAY_Tick
3014 EF2E F03F 00025         goto    USER_DISPLAY_Tick
3018           00026 _USER_SR_Service_Prepare
3018 EF3D F03F 00027         goto    USER_SR_Service_Prepare
301C           00028 _USER_SR_Service_Finish
301C EF40 F03F 00029         goto    USER_SR_Service_Finish
3020           00030 _USER_DIN_NotifyToggle
3020 EF39 F03F 00031         goto    USER_DIN_NotifyToggle
3024           00032 _USER_ENC_NotifyChange
3024 EF3C F03F 00033         goto    USER_ENC_NotifyChange
3028           00034 _USER_AIN_NotifyChange
3028 EF43 F03F 00035         goto    USER_AIN_NotifyChange
302C           00036 _USER_MPROC_NotifyReceivedByte
302C EF36 F03F 00037         goto    USER_MPROC_NotifyReceivedByte
3030           00038 _USER_MPROC_NotifyTimeout
3030 EF35 F03F 00039         goto    USER_MPROC_NotifyTimeout
3034           00040 _USER_MPROC_NotifyReceivedEvent
3034 EF31 F03F 00041         goto    USER_MPROC_NotifyReceivedEvent
3038           00042 _USER_MPROC_NotifyFoundEvent
3038 EF34 F03F 00043         goto    USER_MPROC_NotifyFoundEvent
303C           00044 _USER_LCD_Init
303C EF80 F019 00045         goto    USER_LCD_Init
3040           00046 _USER_LCD_Clear
3040 EF81 F019 00047         goto    USER_LCD_Clear
3044           00048 _USER_LCD_CursorSet
3044 EF82 F019 00049         goto    USER_LCD_CursorSet
3048           00050 _USER_LCD_PrintChar
3048 EF83 F019 00051         goto    USER_LCD_PrintChar
304C           00052 _USER_MIDI_NotifyRx
304C EF38 F03F 00053         goto    USER_MIDI_NotifyRx
3050           00054 _USER_MIDI_NotifyTx
3050 EF37 F03F 00055         goto    USER_MIDI_NotifyTx
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3054           00056 _USER_LCD_Data
3054 EF84 F019 00057         goto    USER_LCD_Data
3058           00058 _USER_LCD_Cmd
3058 EF85 F019 00059         goto    USER_LCD_Cmd
305C           00060 _USER_LCD_SpecialCharInit
305C EF86 F019 00061         goto    USER_LCD_SpecialCharInit
3060           00062 USER_RESERVED_25
3060 0012      00063         return
3062 0000      00064         nop
3064           00065 USER_RESERVED_26
3064 0012      00066         return
3066 0000      00067         nop
3068           00068 USER_RESERVED_27
3068 0012      00069         return
306A 0000      00070         nop
306C           00071 USER_RESERVED_28
306C 0012      00072         return
306E 0000      00073         nop
3070           00074 USER_RESERVED_29
3070 0012      00075         return
3072 0000      00076         nop
3074           00077 USER_RESERVED_30
3074 0012      00078         return
3076 0000      00079         nop
3078           00080 USER_RESERVED_31
3078 0012      00081         return
307A 0000      00082         nop
307C           00083 USER_RESERVED_32
307C 0012      00084         return
307E 0000      00085         nop
               00034 
               00035 ;; ==========================================================================
               00036 ;;  General Application Settings
               00037 ;; ==========================================================================
               00038 
               00039 ;; ---[include applicaion files]----------
               00040 #include "app_include.inc"
               00001 ;; --------------
               00002 
               00003 ;; app_include.inc
               00004 ;; ========================================================================
               00005 
               00006 ;; ---[variables used by application ]---
               00007 #include "app_defines.h"
               00001 ; app_defines.h
               00002 ; Specific Defines, 
               00003 ; constants and variables 
               00004 ; of the MIOS Application
               00005 ; MidiBox AY 8912
               00006 ; lemonhorse (2009)
               00007 ; All rights by TK
               00008 ; 
               00009 ; ==========================================================================
               00010 ;; MEMO:
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00011 ;; free memory for user applications:   
               00012 ;; YOU CAN USE          => 0x010-0x37f
               00013 ;; BUT DON'T USE        => 0x080-0x0FF [SFR's] 
               00014 ; ==========================================================================
               00015 ;
               00016 
               00017 ;; =========================================================================
               00018 ;; ======================[START: ACCESS RAM AREA]===========================
               00019 ;; =========================================================================
               00020 ;; ----------[ACESS RAM - RAM BANK0 [[0x010] to [0x07f]]--------------------
               00021 ;; -------------------------------------------------------------------------
               00022 ;; USER_DISPLAY_TICK
               00023 ;; => LCD Display Update
               00024 ;; =========================================
               00025 ; bit 0 will be set to request a display update
  00000010     00026 DISPLAY_UPDATE_REQ                              EQU     0x010
               00027 
               00028 ;; used by midi_evnt.inc
               00029 ;; =========================================
  00000011     00030 MIDI_EVNT0                                      EQU     0x011 ;; @ midi_functions.inc
  00000012     00031 MIDI_EVNT1                                      EQU     0x012 ;; @ midi_functions.inc
  00000013     00032 MIDI_EVNT_VALUE                                 EQU     0x013 ;; @ midi_functions.inc
               00033 
               00034 ;; used by sm_simple.inc
  00000014     00035 SM_BUTTON_COLUMN                                EQU     0x014
  00000015     00036 SM_BUTTON_ROW                                   EQU     0x015
  00000016     00037 SM_BUTTON_VALUE                                 EQU     0x016
  00000017     00038 SM_SELECTED_COLUMN                              EQU     0x017
  00000018     00039 SM_BUTTON_COLUMN_CTR                            EQU     0x018
               00040 
               00041 
               00042 ;; ------------------------------------
               00043 ;;    APPLICATION WORKING REGISTERS
               00044 ;; ------------------------------------
               00045 ;; ----------------------------------------------------------------------------------------------
               00046 ;; These Regs are used to check the last 
               00047 ;; *note off* midi event == the last *note on* midi event @ Tone a|b|c
               00048 ;; if so, switch off tone a|b|c if *not* - ignore the note off event
  0000001B     00049 CURRENT_MIDI_EVENT_NOTE_ON_OFF_A                EQU     0x01B   ;; => note_on.inc, note_off.inc
  0000001C     00050 CURRENT_MIDI_EVENT_NOTE_ON_OFF_B                EQU     0x01C   ;; => note_on.inc, note_off.inc
  0000001D     00051 CURRENT_MIDI_EVENT_NOTE_ON_OFF_C                EQU     0x01D   ;; => note_on.inc, note_off.inc
               00052                                                                 ;; @ main_menu_functions.inc
               00053 ;; ----------------------------------------------------------------------------------------------
  0000001E     00054 TUNE_COARSE_TEMP                                EQU     0x01E   ; [TO DO] Fx Call for +/- Tune
  0000001F     00055 TUNE_FINE_TEMP                                  EQU     0x01F   ; [TO DO] Fx Call for +/- Tune
               00056 ;; ----------------------------------------------------------------------------------------------       
  00000020     00057 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH            EQU     0x020   ; FUNCTION: 
               00058                                                                 ; USER SWITCH TONE/NOISE ABC ON/OFF 
               00059                                                                 ; FILTER FOR AY REG 7 (NOTE ON / OFF)
               00060 ;; ----------------------------------------------------------------------------------------------
  00000021     00061 MIDI_EVNT_CHANNEL                               EQU     0x021   ;; MIDI CHANNEL @ midi_functions.inc
               00062 ;; ----------------------------------------------------------------------------------------------
  00000022     00063 AY_TONE_ABC_MIDI_ON_OFF                         EQU     0x022   ;; FOR MIDI NOTE ON NOTE OFF SWITCHING
               00064                                                                 ;; @midi_functions.inc
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00065 ;; ----------------------------------------------------------------------------------------------
  00000023     00066 AY_TONE_A_TUNE_FINE_USER                        EQU     0x023 ; => midi_functions.inc, main + submenu
  00000024     00067 AY_TONE_B_TUNE_FINE_USER                        EQU     0x024 ; => midi_functions.inc, main + submenu
  00000025     00068 AY_TONE_C_TUNE_FINE_USER                        EQU     0x025 ; => midi_functions.inc, main + submenu
  00000026     00069 AY_TONE_A_TUNE_COARSE_USER                      EQU     0x026 ; => midi_functions.inc, main + submenu
  00000027     00070 AY_TONE_B_TUNE_COARSE_USER                      EQU     0x027 ; => midi_functions.inc, main + submenu
  00000028     00071 AY_TONE_C_TUNE_COARSE_USER                      EQU     0x028 ; => midi_functions.inc, main + submenu
               00072 ;; ----------------------------------------------------------------------------------------------
  00000029     00073 AY_TONE_A_TUNE_FINE_MIDI                        EQU     0x029 ; => midi_evnt_pipeline.inc
  0000002A     00074 AY_TONE_B_TUNE_FINE_MIDI                        EQU     0x02A ; => midi_evnt_pipeline.inc
  0000002B     00075 AY_TONE_C_TUNE_FINE_MIDI                        EQU     0x02B ; => midi_evnt_pipeline.inc
  0000002C     00076 AY_TONE_A_TUNE_COARSE_MIDI                      EQU     0x02C ; => midi_evnt_pipeline.inc
  0000002D     00077 AY_TONE_B_TUNE_COARSE_MIDI                      EQU     0x02D ; => midi_evnt_pipeline.inc
  0000002E     00078 AY_TONE_C_TUNE_COARSE_MIDI                      EQU     0x02E ; => midi_evnt_pipeline.inc
               00079 ;; ----------------------------------------------------------------------------------------------
  0000002F     00080 AY_DETUNE_TEMP                                  EQU     0x02F ; => midi_evnt_pipeline.inc
               00081 ;; ----------------------------------------------------------------------------------------------
  00000030     00082 AY_TONE_A_MIDI_CHANNEL_USER                     EQU     0x030 ; => midi_functions.inc, main + submenu
  00000031     00083 AY_TONE_B_MIDI_CHANNEL_USER                     EQU     0x031 ; => midi_functions.inc, main + submenu
  00000032     00084 AY_TONE_C_MIDI_CHANNEL_USER                     EQU     0x032 ; => midi_functions.inc, main + submenu
               00085 ;; ----------------------------------------------------------------------------------------------
  00000033     00086 AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF          EQU     0x033 ; SWITCH: Velocity to ABC / NOISE PERIOD
               00087                                               ; => midi_evnt_pipeline.inc
               00088                                               ; => MAIN/SUB MENU 7
               00089                                               ; => sub_menu_key_minus_menu_7.inc
               00090                                               ; => etc.
               00091                                               ; BIT 0 = SET => VELOCITY to VOL. TONE A ON
               00092                                               ; BIT 1 = SET => VELOCITY to VOL. TONE B ON
               00093                                               ; BIT 2 = SET => VELOCITY to VOL. TONE C ON
               00094                                               ; BIT 3 = SET => VELOCITY to NOISE PERIOD ON
               00095                                               ; BIT 4 - 
               00096                                               ; BIT 5 = SET => SWITCH ON VELOCITY TONE A
               00097                                               ; BIT 6 = SET => SWITCH ON VELOCITY TONE B
               00098                                               ; BIT 7 = SET => SWITCH ON VELOCITY TONE C
               00099 ;; ----------------------------------------------------------------------------------------------
  00000034     00100 AY_MIDI_VELOCITY_TO_VOLUME                      EQU     0x034 ; => midi_evnt_pipeline.inc
               00101                                               ;; Ergebnis der Umrechnung
               00102                                               ;; VON MIDI VELOCITY WERT
               00103                                               ;; ZUM VOLUME AY REG WERT
               00104                                               ;; 0-127 => 0-15
               00105                                               ;; => MIDI_EVNT_VALUE/8
               00106 ;; ----------------------------------------------------------------------------------------------
  00000035     00107 AY_MIDI_VELOCITY_TO_NOISE_PERIOD                EQU     0x035 ; => midi_evnt_pipeline.inc
               00108                                               ;; Ergebnis der Umrechnung
               00109                                               ;; VON MIDI VELOCITY WERT
               00110                                               ;; ZUM NOISE RATE AY REG WERT
               00111                                               ;; 0-127 => 0-31
               00112                                               ;; => MIDI_EVNT_VALUE/4
               00113 ;; ----------------------------------------------------------------------------------------------
  00000036     00114 AY_R6_NOISE_PERIOD_REVERSE_VALUE                EQU     0x036 ; => LABEL_AY_MENU_MIX_NOISE_PERIOD, FX Func
               00115 ;; ----------------------------------------------------------------------------------------------
  00000037     00116 MIDI_CC_VALUE                                   EQU     0x037 ;; => midi_controller.inc
               00117 ;; ----------------------------------------------------------------------------------------------
  00000038     00118 MIDI_EVENT_CHANGE_FLAG                          EQU     0x038 ;; => user_tick_lcd_redraw.inc + CC Handling
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00119 ;; ----------------------------------------------------------------------------------------------
               00120 ;; ay_sr.inc - Shift Register Service Routine 
               00121 ;; MBHP CORE: AY Chip SERIAL COMMUNICATION
               00122 ;; ----------------------------------------------------------------------------------
  00000039     00123 AY_REG_ADDRESS                                  EQU     0x039   ;; => AY CHIP REG ADRESS BYTE
  0000003A     00124 AY_REG_DATA                                     EQU     0x03A   ;; => AY CHIP DATA BYTE
               00125 ;; ----------------------------------------------------------------------------------
               00126 
               00127 ;; see => user_tick_key_repeat.inc
               00128 ;; -------------------------------------------------------------
  0000003B     00129 C64_KEY_AUTO_REPEAT_GENERAL_COUNTER             EQU     0x03B ;; 
  0000003C     00130 FIRST_KEY_STRIKE_CYCLE_COUNTER                  EQU     0x03C ;; 
  0000003D     00131 KEY_AUTO_REPEAT_COUNTER                         EQU     0x03D ;; 
               00132 ;; --------------------------------------------------------------
               00133 
               00134 ;; ------------------[PATCH NUMBER (BANKSTICK, PIC EEPROM)]-----------------------------
               00135 ;;                       PATCH MENU / MAIN MENU 1
  0000003E     00136 CURREND_PATCH_NR                                EQU     0x03E   ;; 0 = INT (PIC EEPROM PATCH)
               00137                                                                 ;; 1 - 128 (BANK STICK PATCHES)
  0000007C     00138 BROWSE_PATCH_NR                                 EQU     0x07C   ;; (!!! ADR !!!) FOR BROWSING PATCHES
  0000007D     00139 PATCH_MENU_STATE_FLAGS                          EQU     0x07D   ;; (!!! ADR !!!) PATCH MENU (INT, B.STICK, WRITE, LOAD, FORMAT)
               00140                                                                 ;; BIT0 = 1 = BANKSTICK 1 FOUND
               00141                                                                 ;; BIT0 = 0 = NO BANKSTICK 1 FOUND
               00142                                                                 ;; BIT1 = 1 = BANKSTICK 1 browsed PATCH FORMATED, OK
               00143                                                                 ;; BIT1 = 0 = BANKSTICK 1 browsed PATCH NOT FORMATED
               00144                                                                 ;; BIT2 = 1 = browsed PATCH = INTERNAL (PIC EEPROM)
               00145                                                                 ;; BIT2 = 0 = browsed PATCH = BANKSTICK (1-128)
  0000007E     00146 FORMAT_BANKSTICK_CYCLE_COUNTER                  EQU     0x07E   ;; (!!! ADR !!!)
  0000003F     00147 CURREND_PATCH_DATA_BYTE_TEMP                    EQU     0x03F   ;; 
  0000007F     00148 BANKSTICK_LOW_BYTE_ADR_COUNTER                  EQU     0x07F   ;; !!! (see above) !!!
               00149 
               00150 ;;-------------------------------------[ CC ]-------------------------------------------
               00151 ;; midi controller
  00000040     00152 AY_CC_6_TMP                                     EQU     0x040 ;; => midi_controller.inc
  00000041     00153 AY_CC_7_TMP                                     EQU     0x041 ;; => midi_controller.inc
  00000042     00154 AY_CC_8_TMP                                     EQU     0x042 ;; => midi_controller.inc
  00000043     00155 AY_CC_9_TMP                                     EQU     0x043 ;; => midi_controller.inc
               00156 
               00157 ;;---------------------------------------------
               00158 ;; pitch bend
  00000044     00159 AY_TONE_A_TUNE_PITCH_BEND                       EQU     0x044   ;; => midi_event_pitch_wheel.inc
  00000045     00160 AY_TONE_B_TUNE_PITCH_BEND                       EQU     0x045   ;; => midi_event_pitch_wheel.inc
  00000046     00161 AY_TONE_C_TUNE_PITCH_BEND                       EQU     0x046   ;; => midi_event_pitch_wheel.inc
  00000047     00162 AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP       EQU     0x047   ;; => midi_event_pitch_wheel.inc
               00163                                                                 ;; PITCH BEND TEMP FOR
               00164                                                                 ;; AY_TONE_A_TUNE_COASE_MIDI
  00000048     00165 AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP       EQU     0x048 
  00000049     00166 AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP       EQU     0x049 
               00167 
  0000004A     00168 AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP         EQU     0x04A   ;; => midi_event_pitch_wheel.inc
               00169                                                                 ;; PITCH BEND TEMP FOR
               00170                                                                 ;; AY_TONE_A_TUNE_FINE_MIDI
  0000004B     00171 AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP         EQU     0x04B
  0000004C     00172 AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP         EQU     0x04C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00173 
               00174 
               00175 ;;-----------------------------------------------------------
               00176 ;; Fx REGISTER => MAIN MENU [Fx] = Main Menu 8
               00177 
  0000004D     00178 FX_USER_ON_OFF_ABC                              EQU     0x04D
               00179                                                 ;; ON OFF FX @ TONE A|B|C
               00180                                                 ;; BIT 0 => FX ON (SET) @ TONE A
               00181                                                 ;; BIT 1 => FX ON (SET) @ TONE B
               00182                                                 ;; BIT 2 => FX ON (SET) @ TONE C
               00183 
  0000004E     00184 Fx_MIDI_NOTE_ON_OR_OFF                          EQU     0x04E
               00185                                                 ;; BIT 0 => MIDI NOTE ON (SET) @ TONE A
               00186                                                 ;; BIT 1 => MIDI NOTE ON (SET) @ TONE B
               00187                                                 ;; BIT 2 => MIDI NOTE ON (SET) @ TONE C
               00188                                                 ;; BIT 3 => Reserved
               00189                                                 ;; BIT 4 => Reserved
               00190                                                 ;; BIT 5 => Reserved
               00191                                                 ;; BIT 6 => Reserved
               00192                                                 ;; BIT 7 => Reserved
               00193 
  0000004F     00194 FX_POS_CURREND                                  EQU     0x04F
               00195                                                 ;; CURREND POS OF Fx Table (ROW)
               00196                                                 ;; Fx Tab ROW Pointer
               00197 
  00000050     00198 FX_FUNCTION_CURREND                             EQU     0x050
               00199                                                 ;; Fx FUNCTIONS
               00200                                                 ;; Fx = 0 => DO x
               00201                                                 ;; FX = 1 => DO y
               00202                                                 ;; FX = 2 => DO z
               00203                                                 ;; etc.
               00204                                                 
  00000051     00205 FX_DATA_CURREND                                 EQU     0x051
               00206                                                 ;; USED for WRITING DATA TO AN AY CHIP REG.
               00207                                                 ;; Corresponding to FX_FUNCTION_X
               00208                                                 
               00209 
  00000052     00210 FX_TIME_PRE_EXECUTION_CURREND                   EQU     0x052
               00211                                                 ;; TIME PERIOD TO THE NEXT FX POS.
               00212                                                 ;; EXECUTION
               00213 
  00000053     00214 FX_TIMER                                        EQU     0x053
               00215                                                 ;; Triggert (inc +1) by timer0 overflow
               00216 
  00000054     00217 FX_MIDI_NOTE_ON_SESSION                         EQU     0x054
               00218                                                 ;; EVERY NOTE ON @ [A|B|C] GENERATES A NEW
               00219                                                 ;; SESSION NUMBER (with inc FX_SESSION) FOR A
               00220                                                 ;; NEW FX SESSION. EVERY TIME THERE IS
               00221                                                 ;; A NEW FX SESSION NUMBER THE "FX POS"
               00222                                                 ;; WILL BE SET TO 1 (A RESET OF FX POS WILL TAKE PLACE)
               00223 
  00000055     00224 FX_PIPELINE_SESSION                             EQU     0x055   
               00225 
  00000056     00226 FX_NOP_ON_OFF                                   EQU     0x056
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00227                                                 ;; = 0 = Fx NOP IS OF (FX OPERATION IS ON)
               00228                                                 ;; > 0 = Fx NOP IS ON (FX OPERATION IS OFF)
               00229 
  00000057     00230 FX_FILTER                                       EQU     0x057
               00231 
  00000058     00232 Fx_TEMP                                         EQU     0x058
               00233 
  00000059     00234 Fx_Note_On_1_tune_fine                          EQU     0x059
  0000005A     00235 Fx_Note_On_1_tune_coarse                        EQU     0x05A
               00236 
  0000005B     00237 Fx_Note_On_2_tune_fine                          EQU     0x05B
  0000005C     00238 Fx_Note_On_2_tune_coarse                        EQU     0x05C
               00239 
  0000005D     00240 Fx_Note_On_3_tune_fine                          EQU     0x05D
  0000005E     00241 Fx_Note_On_3_tune_coarse                        EQU     0x05E
  0000005F     00242 Fx_PATCH_DATA_TMP                               EQU     0x05F
  00000060     00243 Fx_LOAD_WRITE_ADR_COUNTER_TMP                   EQU     0x060
               00244 
  00000061     00245 FX_POS_SESSION_CURREND                          EQU     0x061
  00000062     00246 FX_FUNCTION_SESSION_CURREND                     EQU     0x062
  00000063     00247 FX_TIME_PRE_EXECUTION_SESSION_CURREND           EQU     0x063
  0000007B     00248 FX_DATA_SESSION_CURREND                         EQU     0x07B ;; [(!!ADR!!!)]
               00249 
               00250 
               00251 ;; ===========================================
               00252 ;; -------[AY-3-8912 SHADOW REGISTERS]-------
               00253 ;; ==========================================
               00254 ;; NOTE (!): 
               00255 ;; IN SOME DATASHEETS OF THE AY 3 8912/8910  
               00256 ;; THE AY REGISTERS ARE *OCTAL* 
  00000064     00257 AY_R0_CH_A_FINE_TUNE                    EQU     0x064 ;; 0x00 to 0xFF
  00000065     00258 AY_R1_CH_A_COARSE_TUNE                  EQU     0x065 ;; 0x00 to 0x0F
  00000066     00259 AY_R2_CH_B_FINE_TUNE                    EQU     0x066 ;; 0x00 to 0xFF
  00000067     00260 AY_R3_CH_B_COARSE_TUNE                  EQU     0x067 ;; 0x00 to 0x0F
  00000068     00261 AY_R4_CH_C_FINE_TUNE                    EQU     0x068 ;; 0x00 to 0xFF
  00000069     00262 AY_R5_CH_C_COARSE_TUNE                  EQU     0x069 ;; 0x00 to 0x0F
  0000006A     00263 AY_R6_NOISE_PERIOD                      EQU     0x06a ;; 0x00 to 0x1F
  0000006B     00264 AY_R7_ENABLE_ABC_NOISE_IO               EQU     0x06b ;; 0x00 to 0xFF
               00265   ;; -------[AY_R7_ENABLE_ABC_NOISE_IO ASSIGNMENT]------------------
               00266   ;; >>> | BIT7  | BIT6  | BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0 |
               00267   ;; -------------------------------------------------------------
               00268   ;; >>> | MODE  | MODE  | NOISE| NOISE| NOISE| TONE | TONE | TONE |
               00269   ;; >>> | IOB   | IOA   | CH C | CH B | CH A | CH C | CH B | CH A |
               00270   ;; >>> | /IN   | /IN   | /ON  | /ON  | /ON  | /ON  | /ON  | /ON  |
               00271   ;; >>> | OUT   | OUT   | OFF  | OFF  | OFF  | OFF  | OFF  | OFF  |
               00272   ;; ---------------------------------------------------------------
               00273   ;; HEX.| 0x80  | 0x40  | 0x20 | 0x10 | 0x08 | 0x04 | 0x02 | 0x01 |
               00274   ;; ---------------------------------------------------------------
               00275   ;; DEC.| D128  | D064  | D032 | D016 | D008 | D004 | D002 | D001 |
               00276   ;; ---------------------------------------------------------------
               00277   ;; 
               00278   ;; EXAMPLES FOR AY_R7_ENABLE_ABC_NOISE_IO VALUES:
               00279   ;; ---------------------------------------------- 
               00280   ;; 1) 0x00 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00281   ;; => IOA=INPUT, IOB=INPUT,
               00282   ;; => NOISE CHANNEL A B C IS SWITCHED ON
               00283   ;; => TONE CHANNEL A B C IS SWITCHED ON
               00284   ;; ------------------------------------------------------------
               00285   ;; >>> | BIT7 | BIT6 | BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0 |
               00286   ;; -------------------------------------------------------------
               00287   ;; >>> | MODE | MODE | NOISE| NOISE| NOISE| TONE | TONE | TONE |
               00288   ;; >>> | IOB  | IOA  | CH C | CH B | CH A | CH C | CH B | CH A |
               00289   ;; >>> | /IN  | /IN  | /ON  | /ON  | /ON  | /ON  | /ON  | /ON  |
               00290   ;; >>> | OUT  | OUT  | OFF  | OFF  | OFF  | OFF  | OFF  | OFF  |
               00291   ;; -------------------------------------------------------------
               00292   ;; BIN.|  0   |   0  |  0   |   0  |  0   |   0  |   0  |   0  |
               00293   ;; -------------------------------------------------------------
               00294   ;; HEX.|  -   |   -  |  -   |   -  |  -   |   -  |   -  |   -  | = 0x00
               00295   ;; -------------------------------------------------------------
               00296   ;; DEC.|  -   |   -  |  -   |   -  |  -   |   -  |   -  |   -  | = D000
               00297   ;; -------------------------------------------------------------
               00298   ;;
               00299   ;; 2) 0x40 (BIT 6 IS SET)
               00300   ;; => IOA = OUTPUT, IOB = INPUT, 
               00301   ;; => NOISE CH. A B C IS SWITCHED ON, 
               00302   ;; => TONE CH. A B C IS SWITCHED ON
               00303   ;; >>> | BIT7 | BIT6 | BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0 |
               00304   ;; ------------------------------------------------------------
               00305   ;; >>> | MODE | MODE | NOISE| NOISE| NOISE| TONE | TONE | TONE |
               00306   ;; >>> | IOB  | IOA  | CH C | CH B | CH A | CH C | CH B | CH A |
               00307   ;; >>> | /IN  | /IN  | /ON  | /ON  | /ON  | /ON  | /ON  | /ON  |
               00308   ;; >>> | OUT  | OUT  | OFF  | OFF  | OFF  | OFF  | OFF  | OFF  |
               00309   ;; -------------------------------------------------------------
               00310   ;; BIN.|  0   |   1  |  0   |   0  |  0   |   0  |   0  |   0  |
               00311   ;; -------------------------------------------------------------
               00312   ;; HEX.|  -   | 0x40 |  -   |  -   |  -   |   -  |   -  |   -  | = 0x40
               00313   ;; -------------------------------------------------------------
               00314   ;; DEC.|  -   | D064 |  -   |  -   |  -   |   -  |   -  |  -   | = D064
               00315   ;; -------------------------------------------------------------
               00316   ;;  
               00317   ;; 3) 0x78 (D120)
               00318   ;; => IOA=OUTPUT (BIT6 IS SET), IOB=INPUT (BIT7 IS NOT SET), 
               00319   ;; => NOISE OF CH A B C IS SWITCHED OFF (BIT: 3,4,5 IS SET))
               00320   ;; => TONE CH. A B C IS SWITCHED OFF  
               00321   ;; BIN | BIT7 | BIT6 | BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0 |
               00322   ;; -------------------------------------------------------------
               00323   ;; >>> | MODE | MODE | NOISE| NOISE| NOISE| TONE | TONE | TONE |
               00324   ;; >>> | IOB  | IOA  | CH C | CH B | CH A | CH C | CH B | CH A |
               00325   ;; >>> | /IN  | /IN  | /ON  | /ON  | /ON  | /ON  | /ON  | /ON  |
               00326   ;; >>> | OUT  | OUT  | OFF  | OFF  | OFF  | OFF  | OFF  | OFF  |
               00327   ;; -------------------------------------------------------------
               00328   ;; >>> |  0   |   1   |  1   |   1  |  1   |   0  |   0  |  0  |
               00329   ;; -------------------------------------------------------------
               00330   ;; HEX.|  -   | 0x40  | 0x20 | 0x10 | 0x08 |   -  |   -  |  -  | = 0x78
               00331   ;; -------------------------------------------------------------
               00332   ;; DEC.|  -   | D064  | D032 | D016 | D008 |   -  |   -  |   - | = D120
               00333   ;; -------------------------------------------------------------
               00334   ;;
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00335   ;; 4) 0x78 (D120)
               00336   ;; => IOA=OUTPUT, IOB=INPUT
               00337   ;; => NOISE CH C ON, NOISE CH B OFF (BIT 4 IS SET), NOISE CH A ON,
               00338   ;; => TONE CH. A ON, TONE CH B ON TONE CH C OFF (BIT2 IS SET)   
               00339   ;; BIN | BIT7 | BIT6 | BIT5 | BIT4 | BIT3 | BIT2 | BIT1 | BIT0 |
               00340   ;; -------------------------------------------------------------
               00341   ;; >>> | MODE | MODE | NOISE| NOISE| NOISE| TONE | TONE | TONE |
               00342   ;; >>> | IOB  | IOA  | CH C | CH B | CH A | CH C | CH B | CH A |
               00343   ;; >>> | /IN  | /IN  | /ON  | /ON  | /ON  | /ON  | /ON  | /ON  |
               00344   ;; >>> | OUT  | OUT  | OFF  | OFF  | OFF  | OFF  | OFF  | OFF  |
               00345   ;; -------------------------------------------------------------
               00346   ;; >>> |  0   |   1   |  0   |   1  |  0  |   1  |   0  |   0  |
               00347   ;; -------------------------------------------------------------
               00348   ;; HEX.|  -   | 0x40  |  -   | 0x10 |  -  | 0x04 |   -  |   -  | = 0x54
               00349   ;; -------------------------------------------------------------
               00350   ;; DEC.|  -   | D064  |  -   | D016 |  -  | D004 |   -  |   -  | = D084
               00351   ;; -------------------------------------------------------------
               00352   
               00353   
               00354 
  0000006C     00355 AY_R8_CH_A_AMPLITUDE                    EQU     0x06c ; 0x00 to 0x1F (D031)  / OCTAL R10 (!)
               00356   ;; THE AMPLITUDE (VOLUME) OF THE CH. A SIGNAL GENERATED BY 
               00357   ;; THE D/A CONVERTER IS DETERMINED BY THE CONTENS OF THE LOWER BITS OF REGISTER 8
               00358   ;;
               00359   ;; >>> | BIT7 | BIT6 |BIT5|   BIT4   | BIT3 | BIT2 | BIT1 |  BIT0 |
               00360   ;; ----------------------------------------------------------------
               00361   ;; >>> | ---- | ---- |----|    M     | L3   | L2   | L1   | L0    |
               00362   ;; >>> | ---- | ---- |----|AMPLITUDE | VOL. | VOL. | VOL. | VOLUME|
               00363   ;; >>> | ---- | ---- |----|MODE=>R13 | BIT 3| BIT 2| BIT 1| BIT 0 |
               00364   ;; ----------------------------------------------------------------
               00365   ;; HEX.| ---- | ---- |----|   0x10   | 0x08 | 0x04 | 0x02 | 0x01  |
               00366   ;; ----------------------------------------------------------------
               00367   ;; DEC.| ---- | ---- |----|   D016   | D008 | D004 | D002 | D001  |
               00368   ;; ----------------------------------------------------------------
               00369   ;; VOLUME => 0x00 to 0x0F (DEC. 000 to 015)
               00370   ;; IF BIT4 IS SET => THE ENVELOPE SHAPE/CYCLE IS DEFINED BY REGISTER 13
               00371   ;; (OCTAL R15 (!)) SEE DATASHEET FOR DETAILS
               00372    
  0000006D     00373 AY_R9_CH_B_AMPLITUDE                    EQU     0x06d ; 0x00 to 0x1F (D031) / OCTAL R11 (!)
               00374   ;; THE AMPLITUDE OF THE SIGNAS (CH. B) GENERATED BY 
               00375   ;; THE D/A CONVERTER (ONE EACH FOR CHANNELS A, B, C) IS DETERMINED
               00376   ;; BY THE CONTENS OF THE LOWER BITS OF REGISTER 8,9 AND 10 
               00377   ;; (REGISTER *OCTAL* 10,11 AND 12(ACCORDING TO SOME PDF DATASHEETS)): 
               00378   ;;
               00379   ;; >>> | BIT7 | BIT6 |BIT5|   BIT4   | BIT3 | BIT2 | BIT1 |  BIT0 |
               00380   ;; ----------------------------------------------------------------
               00381   ;; >>> | ---- | ---- |----|    M     | L3   | L2   | L1   | L0    |
               00382   ;; >>> | ---- | ---- |----|AMPLITUDE | VOL. | VOL. | VOL. | VOLUME|
               00383   ;; >>> | ---- | ---- |----|MODE=>R13 | BIT 3| BIT 2| BIT 1| BIT 0 |
               00384   ;; ----------------------------------------------------------------
               00385   ;; HEX.| ---- | ---- |----|   0x10   | 0x08 | 0x04 | 0x02 | 0x01  |
               00386   ;; ----------------------------------------------------------------
               00387   ;; DEC.| ---- | ---- |----|   D016   | D008 | D004 | D002 | D001  |
               00388   ;; ----------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00389   ;; VOLUME => 0x00 to 0x0F (DEC. 000 to 015)
               00390   ;; IF BIT4 IS SET => THE ENVELOPE SHAPE/CYCLE IS DEFINED BY REGISTER 13
               00391   ;; (OCTAL R15 (!)) SEE DATASHEET FOR DETAILS
               00392 
  0000006E     00393 AY_R10_CH_C_AMPLITUDE                   EQU     0x06E ; 0x00 to 0x1F (D031) / OCTAL R12 (!)
               00394   ;; THE AMPLITUDE OF THE SIGNAL (CH. C) GENERATED BY EACH
               00395   ;; OF THE 3 D/A CONVERTERS (ONE EACH FOR CHANNELS A, B, C) IS DETERMINED
               00396   ;; BY THE CONTENS OF THE LOWER BITS OF REGISTER 8,9 AND 10 
               00397   ;; (REGISTER *OCTAL* 10,11 AND 12(ACCORDING TO SOME PDF DATASHEETS)): 
               00398   ;;
               00399   ;; >>> | BIT7 | BIT6 |BIT5|   BIT4   | BIT3 | BIT2 | BIT1 |  BIT0 |
               00400   ;; ----------------------------------------------------------------
               00401   ;; >>> | ---- | ---- |----|    M     | L3   | L2   | L1   | L0    |
               00402   ;; >>> | ---- | ---- |----|AMPLITUDE | VOL. | VOL. | VOL. | VOLUME|
               00403   ;; >>> | ---- | ---- |----|MODE=>R13 | BIT 3| BIT 2| BIT 1| BIT 0 |
               00404   ;; ----------------------------------------------------------------
               00405   ;; HEX.| ---- | ---- |----|   0x10   | 0x08 | 0x04 | 0x02 | 0x01  |
               00406   ;; ----------------------------------------------------------------
               00407   ;; DEC.| ---- | ---- |----|   D016   | D008 | D004 | D002 | D001  |
               00408   ;; ----------------------------------------------------------------
               00409   ;; VOLUME => 0x00 to 0x0F (DEC. 000 to 015)
               00410   ;; IF BIT4 IS SET => THE ENVELOPE SHAPE/CYCLE IS DEFINED BY REGISTER 13
               00411   ;; (OCTAL R15 (!)) SEE DATASHEET FOR DETAILS
               00412 
               00413 
               00414 
  0000006F     00415 AY_R11_ENV_PERIOD_FINE                  EQU     0x06f ; (RANGE 0x00 to 0xFF)        / OCTAL R13 (!)
  00000070     00416 AY_R12_ENV_PERIOD_COARSE                EQU     0x070 ; (RANGE 0x00 to 0xFF)        / OCTAL R14 (!)
               00417   ;; THE FREQUENCY OF THE ENVELOPE IS OPTAINED BY FIRST COUTING DOWN
               00418   ;; THE INPUT CLOCK BY 256, THEN BY FURTHER COUNTING DOWN THE RESULT
               00419   ;; BY THE PROGRAMMED 16BIT (SEE BIT 0-15) ENVELOPE PERIOD VALUE
               00420   ;; R11 => BIT 0-7
               00421   ;; R12 => BIT 8-15
               00422 
  00000071     00423 AY_R13_ENV_SHAPE_CYCLE                  EQU     0x071 ; 0x00 to 0x0F (D015) / OCTAL R15 (!)
               00424   ;; THE RELATIVE SHAPE AND CYCLE PATTERN REGISTER
               00425   ;; CH A,B,C ENVELOVE REGISTER IF "AMPLITUDE MODE" *BIT 4*
               00426   ;; @ REGISTER 10 or 11 or 12 (OCTAL 12,13,14) is SET
               00427   ;; FOR DETAILS OF THE GRAPHIC REPRESENTATION SEE AY-3-8912 DATASHEET
               00428   ;;
               00429   ;; >>> | BIT7 | BIT6 |BIT5 | BIT4 | BIT3 | BIT2 | BIT1 |  BIT0 |
               00430   ;; -------------------------------------------------------------
               00431   ;; >>> | ---- | ---- |---- | ---- | ENV. | ENV. | ENV. |  ENV. |
               00432   ;; >>> | ---- | ---- |---- | ---- |  B3  |  B2  |  B1  |  B0   |
               00433   ;; >>> | ---- | ---- |---- | ---- |CONTI-|ATTACK|ALTER-|  B0   |
               00434   ;; >>> | ---- | ---- |---- | ---- |  NUE |      | NATE | HOLD  |
               00435   ;; -------------------------------------------------------------
               00436   ;; HEX.| ---- | ---- |---- | ---- | 0x08 | 0x04 | 0x02 | 0x01  |
               00437   ;; -------------------------------------------------------------
               00438   ;; DEC.| ---- | ---- |---- | ---- | D008 | D004 | D002 | D001  |
               00439   ;; -------------------------------------------------------------
               00440 
               00441 
  00000072     00442 AY_R14_AY_PORTA_DATA                    EQU     0x072 ;; OCTAL R16 (!)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00443   ;; NOTE: R15 = I/O PORT B (NOT IMPLEMENTED IN AY 3 8912)
               00444 
               00445 
               00446 
               00447 ;; APPLICATION WORKING REGISTERS 
               00448 ;; =============================================
               00449   
  00000073     00450 SWITCH_BETWEEN_MAIN_AND_SUBMENU         EQU     0x073   ;; => MAIN - SUB MENU SWITCH 
               00451                                                         
               00452                                                                       
  00000074     00453 CURRENT_MAIN_MENU                       EQU     0x074 ;; => CURRENT main menu (INDICATES WHITCH MAIN MENU IS ACTIVE)
               00454                                                       ;; SWITCHED @ keyb_decoding.inc
               00455                                                       ;; SEE LABEL_AY_DECODE_KEYBOARD_BUTTON_MAINMENU
               00456 
  00000075     00457 AY_SUB_MENUE_KEY_SWITCH                 EQU     0x075   ;; => C64 KEYBOARD KEY (VALUE) - JUMP-SWITCH to sub menu (x)
               00458 
  00000076     00459 SM_DRIVER_KEYBOARD_KEY                  EQU     0x076   ;; @ keyb_decoding.inc [C64 Keyboard KEY value]
               00460                                                         ;; from the 8x8 scan matrix driver
               00461 
  00000077     00462 SM_KEYB_KEY_STATE                       EQU     0x077   ;; => 0 = PRESSED
               00463                                                         ;; => 1 = DEPRESSED
               00464                                                         ;; @ sm_simple_c64keyb.inc
               00465                                                         ;; =>SM_NotifyToggle
               00466                                                         ;; + many subfunctions
               00467                                                         
  00000078     00468 SM_KEYB_KEY_GATE                        EQU     0x078   ;; sm_simple_c64keyb.inc
               00469                                                         ;; =>SM_NotifyToggle
               00470 
               00471 
  00000079     00472 AY_KEYB_SPECIAL_KEY_TOGGLE              EQU     0x079   ;; FOR SPECIAL KEY HANDLING
               00473                                                         ;; ------------------------
               00474                                                         ;; BIT0 = SHIFT KEY:
               00475                                                         ;; SET  = KEY PRESSED
               00476                                                         ;; CLR  = KEY DEPRESSED
               00477                                                         ;; BIT0 = SHIFT
               00478                                                         ;; --------
               00479                                                         ;; BIT 1 @ constant_key_pressing.inc
               00480                                                         ;; => ONE LOOP DELAY BIT
               00481                                                         ;; --------
               00482                                                         ;; BIT 2 - 7 NC YET
               00483 
               00484 ;; -----------------------------------------------------------------------------------------
               00485 ;; Envelope Shape Pointer (Env. Shape Help Reg.)
  0000007A     00486 ENV_SHAPE_0_15_to_1_8_TRANSLATOR                EQU     0x07A
               00487 ;; FX_DATA_SESSION_CURREND                      EQU     0x07B ;; !!! (see above) !!!
               00488 
               00489 ;; -----------------------------------------------------------------------------------------
               00490 ;; BROWSE_PATCH_NR                              EQU     0x07C ;; !!! (see above) !!!
               00491 ;; PATCH_MENU_STATE_FLAGS                       EQU     0x07D ;; !!! (see above) !!!
               00492 ;; FORMAT_BANKSTICK_CYCLE_COUNTER               EQU     0x07E ;; !!! (see above) !!!
               00493 ;; BANKSTICK_LOW_BYTE_ADR_COUNTER               EQU     0x07F ;; !!! (see above) !!!
               00494 
               00495 ;; =========================================================================
               00496 ;; ======================[END: ACCESS RAM AREA]===========================
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00497 ;; =========================================================================
               00498 
               00499 
               00500 
               00501 ;; ---[!SFR!]----------------------------------------------------------
               00502 ;; DO NOT USE 0x080 - 0x0ff => SFR's
               00503 ;; ---[!SFR!]----------------------------------------------------------
               00504 
               00505 
               00506 ;; =========================================================================
               00507 ;; ======================[START: RAM BANK1]=================================
               00508 ;; =========================================================================
               00509 ;; ----------------------------------[BSR1]---------------------------------
               00510 ;; -------------------------------------------------------------------------
               00511 
               00512 ;; ---------[SM DRIVER]-------------------
               00513 ;; [0x100 - 0x10f in use by the sm driver]
  00000100     00514 SM_ROW0_VALUE           EQU     0x100
  00000101     00515 SM_ROW1_VALUE           EQU     0x101
  00000102     00516 SM_ROW2_VALUE           EQU     0x102
  00000103     00517 SM_ROW3_VALUE           EQU     0x103
  00000104     00518 SM_ROW4_VALUE           EQU     0x104
  00000105     00519 SM_ROW5_VALUE           EQU     0x105
  00000106     00520 SM_ROW6_VALUE           EQU     0x106
  00000107     00521 SM_ROW7_VALUE           EQU     0x107
               00522 
  00000108     00523 SM_ROW0_CHANGED         EQU     0x108
  00000109     00524 SM_ROW1_CHANGED         EQU     0x109
  0000010A     00525 SM_ROW2_CHANGED         EQU     0x10a
  0000010B     00526 SM_ROW3_CHANGED         EQU     0x10b
  0000010C     00527 SM_ROW4_CHANGED         EQU     0x10c
  0000010D     00528 SM_ROW5_CHANGED         EQU     0x10d
  0000010E     00529 SM_ROW6_CHANGED         EQU     0x10e
  0000010F     00530 SM_ROW7_CHANGED         EQU     0x10f
               00531 
               00532 ;; ---------------------------------------
               00533 ;; FREE: 0x10F - 0x1FF
               00534 ;; ---------------------------------------
               00535 
               00536 
               00537 
               00538 ;; =========================================================================
               00539 ;; ======================[START: RAM BANK2]=================================
               00540 ;; ----------------------------[BSR2]---------------------------------------
               00541 ;; AREA: 0x200 - 0x2ff
               00542 ;; -------------------------------------------------------------------------
               00543 ;; EDITING MODE POINTER IN MAIN MENU - print "*" or ":" @ POS X on LCD 
  00000200     00544 AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO         EQU     0x200   ;; used by main - and /submenu functions
  00000201     00545 AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE           EQU     0x201   ;; used by main - and /submenu functions
  00000202     00546 AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE          EQU     0x202   ;; used by main - and /submenu functions
  00000203     00547 AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE          EQU     0x203   ;; used by main - and /submenu functions
  00000204     00548 AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE           EQU     0x204   ;; used by main - and /submenu functions
  00000205     00549 AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG        EQU     0x205   ;; used by main - and /submenu functions
  00000206     00550 AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG    EQU     0x206   ;; used by main - and /submenu functions
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000207     00551 AY_LCD_COURSER_POS_MAIN_MENU_FX                 EQU     0x207   ;; used by main - and /submenu functions
               00552 
               00553 ;; -----------------[Fx Function and Function data Registers]----------------
  00000220     00554 FX_FUNCTION_POS0                                EQU     0x220
  00000221     00555 FX_FUNCTION_POS1                                EQU     0x221
  00000222     00556 FX_FUNCTION_POS2                                EQU     0x222
  00000223     00557 FX_FUNCTION_POS3                                EQU     0x223
  00000224     00558 FX_FUNCTION_POS4                                EQU     0x224
  00000225     00559 FX_FUNCTION_POS5                                EQU     0x225
  00000226     00560 FX_FUNCTION_POS6                                EQU     0x226
  00000227     00561 FX_FUNCTION_POS7                                EQU     0x227
  00000228     00562 FX_FUNCTION_POS8                                EQU     0x228
  00000229     00563 FX_FUNCTION_POS9                                EQU     0x229
  0000022A     00564 FX_FUNCTION_POS10                               EQU     0x22A
  0000022B     00565 FX_FUNCTION_POS11                               EQU     0x22B
  0000022C     00566 FX_FUNCTION_POS12                               EQU     0x22C
  0000022D     00567 FX_FUNCTION_POS13                               EQU     0x22D
  0000022E     00568 FX_FUNCTION_POS14                               EQU     0x22E
  0000022F     00569 FX_FUNCTION_POS15                               EQU     0x22F
  00000230     00570 FX_FUNCTION_POS16                               EQU     0x230
  00000231     00571 FX_FUNCTION_POS17                               EQU     0x231
  00000232     00572 FX_FUNCTION_POS18                               EQU     0x232
  00000233     00573 FX_FUNCTION_POS19                               EQU     0x233
  00000234     00574 FX_FUNCTION_POS20                               EQU     0x234
  00000235     00575 FX_FUNCTION_POS21                               EQU     0x235
  00000236     00576 FX_FUNCTION_POS22                               EQU     0x236
  00000237     00577 FX_FUNCTION_POS23                               EQU     0x237
  00000238     00578 FX_FUNCTION_POS24                               EQU     0x238
  00000239     00579 FX_FUNCTION_POS25                               EQU     0x239
  0000023A     00580 FX_FUNCTION_POS26                               EQU     0x23A
  0000023B     00581 FX_FUNCTION_POS27                               EQU     0x23B
  0000023C     00582 FX_FUNCTION_POS28                               EQU     0x23C
  0000023D     00583 FX_FUNCTION_POS29                               EQU     0x23D
  0000023E     00584 FX_FUNCTION_POS30                               EQU     0x23E
  0000023F     00585 FX_FUNCTION_POS31                               EQU     0x23F
               00586 
  00000240     00587 FX_FUNCTION_DATA_POS0                           EQU     0x240
  00000241     00588 FX_FUNCTION_DATA_POS1                           EQU     0x241
  00000242     00589 FX_FUNCTION_DATA_POS2                           EQU     0x242
  00000243     00590 FX_FUNCTION_DATA_POS3                           EQU     0x243
  00000244     00591 FX_FUNCTION_DATA_POS4                           EQU     0x244
  00000245     00592 FX_FUNCTION_DATA_POS5                           EQU     0x245
  00000246     00593 FX_FUNCTION_DATA_POS6                           EQU     0x246
  00000247     00594 FX_FUNCTION_DATA_POS7                           EQU     0x247
  00000248     00595 FX_FUNCTION_DATA_POS8                           EQU     0x248
  00000249     00596 FX_FUNCTION_DATA_POS9                           EQU     0x249
  0000024A     00597 FX_FUNCTION_DATA_POS10                          EQU     0x24A
  0000024B     00598 FX_FUNCTION_DATA_POS11                          EQU     0x24B
  0000024C     00599 FX_FUNCTION_DATA_POS12                          EQU     0x24C
  0000024D     00600 FX_FUNCTION_DATA_POS13                          EQU     0x24D
  0000024E     00601 FX_FUNCTION_DATA_POS14                          EQU     0x24E
  0000024F     00602 FX_FUNCTION_DATA_POS15                          EQU     0x24F
  00000250     00603 FX_FUNCTION_DATA_POS16                          EQU     0x250
  00000251     00604 FX_FUNCTION_DATA_POS17                          EQU     0x251
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000252     00605 FX_FUNCTION_DATA_POS18                          EQU     0x252
  00000253     00606 FX_FUNCTION_DATA_POS19                          EQU     0x253
  00000254     00607 FX_FUNCTION_DATA_POS20                          EQU     0x254
  00000255     00608 FX_FUNCTION_DATA_POS21                          EQU     0x255
  00000256     00609 FX_FUNCTION_DATA_POS22                          EQU     0x256
  00000257     00610 FX_FUNCTION_DATA_POS23                          EQU     0x257
  00000258     00611 FX_FUNCTION_DATA_POS24                          EQU     0x258
  00000259     00612 FX_FUNCTION_DATA_POS25                          EQU     0x259
  0000025A     00613 FX_FUNCTION_DATA_POS26                          EQU     0x25A
  0000025B     00614 FX_FUNCTION_DATA_POS27                          EQU     0x25B
  0000025C     00615 FX_FUNCTION_DATA_POS28                          EQU     0x25C
  0000025D     00616 FX_FUNCTION_DATA_POS29                          EQU     0x25D
  0000025E     00617 FX_FUNCTION_DATA_POS30                          EQU     0x25E
  0000025F     00618 FX_FUNCTION_DATA_POS31                          EQU     0x25F
               00619 
  00000260     00620 FX_FUNCTION_TIME_POS0                           EQU     0x260
  00000261     00621 FX_FUNCTION_TIME_POS1                           EQU     0x261
  00000262     00622 FX_FUNCTION_TIME_POS2                           EQU     0x262
  00000263     00623 FX_FUNCTION_TIME_POS3                           EQU     0x263
  00000264     00624 FX_FUNCTION_TIME_POS4                           EQU     0x264
  00000265     00625 FX_FUNCTION_TIME_POS5                           EQU     0x265
  00000266     00626 FX_FUNCTION_TIME_POS6                           EQU     0x266
  00000267     00627 FX_FUNCTION_TIME_POS7                           EQU     0x267
  00000268     00628 FX_FUNCTION_TIME_POS8                           EQU     0x268
  00000269     00629 FX_FUNCTION_TIME_POS9                           EQU     0x269
  0000026A     00630 FX_FUNCTION_TIME_POS10                          EQU     0x26A
  0000026B     00631 FX_FUNCTION_TIME_POS11                          EQU     0x26B
  0000026C     00632 FX_FUNCTION_TIME_POS12                          EQU     0x26C
  0000026D     00633 FX_FUNCTION_TIME_POS13                          EQU     0x26D
  0000026E     00634 FX_FUNCTION_TIME_POS14                          EQU     0x26E
  0000026F     00635 FX_FUNCTION_TIME_POS15                          EQU     0x26F
  00000270     00636 FX_FUNCTION_TIME_POS16                          EQU     0x270
  00000271     00637 FX_FUNCTION_TIME_POS17                          EQU     0x271
  00000272     00638 FX_FUNCTION_TIME_POS18                          EQU     0x272
  00000273     00639 FX_FUNCTION_TIME_POS19                          EQU     0x273
  00000274     00640 FX_FUNCTION_TIME_POS20                          EQU     0x274
  00000275     00641 FX_FUNCTION_TIME_POS21                          EQU     0x275
  00000276     00642 FX_FUNCTION_TIME_POS22                          EQU     0x276
  00000277     00643 FX_FUNCTION_TIME_POS23                          EQU     0x277
  00000278     00644 FX_FUNCTION_TIME_POS24                          EQU     0x278
  00000279     00645 FX_FUNCTION_TIME_POS25                          EQU     0x279
  0000027A     00646 FX_FUNCTION_TIME_POS26                          EQU     0x27A
  0000027B     00647 FX_FUNCTION_TIME_POS27                          EQU     0x27B
  0000027C     00648 FX_FUNCTION_TIME_POS28                          EQU     0x27C
  0000027D     00649 FX_FUNCTION_TIME_POS29                          EQU     0x27D
  0000027E     00650 FX_FUNCTION_TIME_POS30                          EQU     0x27E
  0000027F     00651 FX_FUNCTION_TIME_POS31                          EQU     0x27F
               00652 
               00653 
               00654 ;; =========================================================================
               00655 ;; =============================[START: RAM BANK3]==========================
               00656 ;; ---------------------------------[BSR3]----------------------------------
               00657 ;; internal eeprom patch
  00000300     00658 PATCH_NAME_ASC_KEY                              EQU     0x300   ;; SAVED CURREND ASC VALUE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000301     00659 PATCH_NAME_ASC_POS                              EQU     0x301   ;; SAVED CURREND CURSOR POS PATCH NAME
  00000302     00660 FREE_RAM_0x302                                  EQU     0x302
               00661 
  00000303     00662 PATCH_NAME_ASC_0                                EQU     0x303   ;; CURREND PATCH NAME
  00000304     00663 PATCH_NAME_ASC_1                                EQU     0x304   ;; CURREND PATCH NAME
  00000305     00664 PATCH_NAME_ASC_2                                EQU     0x305   ;; CURREND PATCH NAME
  00000306     00665 PATCH_NAME_ASC_3                                EQU     0x306   ;; CURREND PATCH NAME
  00000307     00666 PATCH_NAME_ASC_4                                EQU     0x307   ;; CURREND PATCH NAME
  00000308     00667 PATCH_NAME_ASC_5                                EQU     0x308   ;; CURREND PATCH NAME
  00000309     00668 PATCH_NAME_ASC_6                                EQU     0x309   ;; CURREND PATCH NAME
  0000030A     00669 PATCH_NAME_ASC_7                                EQU     0x30A   ;; CURREND PATCH NAME
               00670 
  0000030B     00671 FREE_RAM_0x30B                                  EQU     0x30B
  0000030C     00672 FREE_RAM_0x30C                                  EQU     0x30C
  0000030D     00673 FREE_RAM_0x30D                                  EQU     0x30D
  0000030E     00674 FREE_RAM_0x30E                                  EQU     0x30E
  0000030F     00675 FREE_RAM_0x30F                                  EQU     0x30F
               00676 
  00000310     00677 BROWSED_PATCH_NAME_ASC_0                        EQU     0x310   ;; BROWSEND PATCH NAME
  00000311     00678 BROWSED_PATCH_NAME_ASC_1                        EQU     0x311   ;; BROWSEND PATCH NAME
  00000312     00679 BROWSED_PATCH_NAME_ASC_2                        EQU     0x312   ;; BROWSEND PATCH NAME
  00000313     00680 BROWSED_PATCH_NAME_ASC_3                        EQU     0x313   ;; BROWSEND PATCH NAME
  00000314     00681 BROWSED_PATCH_NAME_ASC_4                        EQU     0x314   ;; BROWSEND PATCH NAME
  00000315     00682 BROWSED_PATCH_NAME_ASC_5                        EQU     0x315   ;; BROWSEND PATCH NAME
  00000316     00683 BROWSED_PATCH_NAME_ASC_6                        EQU     0x316   ;; BROWSEND PATCH NAME
  00000317     00684 BROWSED_PATCH_NAME_ASC_7                        EQU     0x317   ;; BROWSEND PATCH NAME
               00685 
               00686 
               00687 
               00688 
               00689 ;; -------------------------------------------------------------------------
               00690 ;; BSR3 / RAM_BANK3
               00691 ;; 0x300 - 0x37F [0x380 - 0x3FF is reserved for MIOS!] 
               00692 ;; -------------------------------------------------------------------------
               00693 
               00694 ;; ---------------------------[RAM END]--------------------------------------
               00695 ;; --------------------------------------------------------------------------
               00696 
               00697 ;; ----------------------------------------------------------
               00698 ;; ##########################################################
               00699 ;; # MIDIBox AY APPLICATION CONST DEF                       #
               00700 ;; ##########################################################
               00701 
               00702 ;; POS0 ROW 1 to 4 - @ LCD (4x16) 
3080           00703 #define LCD_ROW1                                        0x00    ; Pos.0 @ LCD Row1
3080           00704 #define LCD_ROW2                                        0x40    ; Pos.0 @ LCD Row2 
3080           00705 #define LCD_ROW3                                        0x10    ; Pos.0 @ LCD Row3 
3080           00706 #define LCD_ROW4                                        0x50    ; Pos.0 @ LCD Row4
               00707 
               00708 ;; AY CHIP SHADOW REGISTERS CONST DEF
               00709 ;; ------------------------
3080           00710 #define AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE            0x00
3080           00711 #define AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE   0x01
3080           00712 #define AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE     0x02
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3080           00713 #define AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE   0x03
3080           00714 #define AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE     0x04
3080           00715 #define AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE        0x05
3080           00716 #define AY_CHIP_ADR_06_NOISE_PERIOD                     0x06
3080           00717 #define AY_CHIP_ADR_07_TONE_NOISE_ON_OFF                0x07
3080           00718 #define AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF    0x08
3080           00719 #define AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF    0x09
3080           00720 #define AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF    0x0A
3080           00721 #define AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE             0x0B
3080           00722 #define AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE           0x0C
3080           00723 #define AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE         0x0D
3080           00724 #define AY_CHIP_ADR_14_IO_PORT_A_DATA                   0x0E
3080           00725 #define AY_CHIP_ADR_15_IO_PORT_B_DATA                   0x0F
               00726 
               00727 
               00728 ;; MAIN MENU CONST.
               00729 ;; -----------------
3080           00730 #define MAIN_MENU_ON_VIA_0      0x00    ;; GO MAIN MENU ROUTINE FIRST (DO NOT CHANGE!)
3080           00731 #define INI_START_UP_MAIN_MENU  0x00    ;; SHOW MAIN MENU 0 after Startup
3080           00732 #define MAIN_MENU_00            0x00    ;; MAIN MENU SWITCH
3080           00733 #define MAIN_MENU_01            0x01    ;; PATCH LOAD / WRITE
3080           00734 #define MAIN_MENU_02            0x02    ;; ABC (DE) TUNE
3080           00735 #define MAIN_MENU_03            0x03    ;; TONE/NOISE/FX ABC - MIXER
3080           00736 #define MAIN_MENU_04            0x04    ;; TONE ABC AMPLITUDE
3080           00737 #define MAIN_MENU_05            0x05    ;; ENVELOPE
3080           00738 #define MAIN_MENU_06            0x06    ;; MIDI CHANNEL CONFIG
3080           00739 #define MAIN_MENU_07            0x07    ;; VELOCITY CONFIG
3080           00740 #define MAIN_MENU_08            0x08    ;; Fx EDITOR
               00741 
               00742 
               00743 ;; SUB MENU (MAIN MENU SUB FUNCTIONS) CONST DEF
3080           00744 #define INI_SUB_MENU            0x00    ;; (Do not Change)
               00745 
               00746 
               00747 ;; MENU POS - ACTIVE ITEM CONST DEF
               00748 ;; --------------------------------
3080           00749 #define MENU_ITEM_POS0_NOT_VALID        0x00
3080           00750 #define MENU_ITEM_POS1                  0x01
3080           00751 #define MENU_ITEM_POS2                  0x02
3080           00752 #define MENU_ITEM_POS3                  0x03
3080           00753 #define MENU_ITEM_POS4                  0x04
3080           00754 #define MENU_ITEM_POS5                  0x05
3080           00755 #define MENU_ITEM_POS6                  0x06
               00756 
               00757 
               00758 ;; CUORSER POS CONST DEF
3080           00759 #define INI_COURSER_POS         0x01    ;; (Do not Change, POS 0 is NOT VALID!)
               00760 
               00761 
               00762 ;; :::::::::::::: C64 KYBOARD :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
               00763 ;; JUSTAGE FOR THE AUTOREPEAT-C64-KEYBOAD FUNCTION @ [+]/[-]
               00764 ;; @ user_tick_key_repeat.inc
               00765 ;; RANGE: 0 = Fast / 255 = Slow
3080           00766 #define C64_KEY_AUTO_REPEAT_GENERAL_TIME                0x5F    ;; ADJUST general AUTO KEY REPEAT TEMPO HERE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3080           00767 #define FIRST_KEY_STRIKE_CYCLE_TIME                     0x8F    ;; ADJUST the "first key strike" delay time here
3080           00768 #define KEY_AUTO_REPEAT_TIME                            0x0F    ;; ADJUST the AUTO REPEAT TIME here
               00769 
               00770 ;; KEYBOARD KEYS @ SUB MENU ROUTINES CONST DEF
3080           00771 #define PLUS_SUBMENU_KEY_VALUE                          0x03    ;; see also keyb_decoding.inc
3080           00772 #define MINUS_SUBMENU_KEY_VALUE                         0x04    ;; see also keyb_decoding.inc
               00773 
               00774 ;; KEY STATES CONST DEF
3080           00775 #define KEY_PRESSED_STATE_0                             0x00
3080           00776 #define FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1             1       ;; user_tick_key_repeat.inc
               00777 
               00778 
               00779 ;; -------------- PATCH -------------------------------------
               00780 ;;          EEPROM / BANKSTICK
               00781 ;; ----------------------------------------------------------
3080           00782 #define EEPROM_ADR_FINGERPRINT                          0x00    ;; ADRESS FINGERPRINT @ INT PATCH (EEPROM)
3080           00783 #define BANKSTICK_ADR_FINGERPRINT                       0x00    ;; ADRESS FINGERPRINT @ INT PATCH (BANKSTICK)
3080           00784 #define PIC_INT_EEPROM_FINGERPRINT                      0x12    ;; Fingerprint Patch PIC EEPROM (Fingerprint = Formatted)
3080           00785 #define BANKSTICK_PATCH_FINGERPRINT                     0x88    ;; Fingerprint Patch BANKSTICK (Fingerprint = Formatted)
               00786 ;; ----------------------------------------------------------
               00787 ;; ==> For PATCH_MENU_STATE_FLAGS       
               00788 ;;      ;; BIT0 = 1 = BANKSTICK 1 FOUND
               00789 ;;      ;; BIT0 = 0 = NO BANKSTICK 1 FOUND
               00790 ;;      ;; BIT1 = 1 = BANKSTICK 1 CURREND PATCH FORMATED, OK
               00791 ;;      ;; BIT1 = 0 = BANKSTICK 1 CURREND PATCH NOT FORMATED
               00792 ;;      ;; BIT2 = 1 = CURREND PATCH = BANKSTICK (1-128)
               00793 ;;      ;; BIT2 = 0 = CURREND PATCH = INTERNAL (PIC EEPROM)
               00794 ;;      ;; (BIT3-7 NOT USED YET)
3080           00795 #define BIT0_BANKSTICK_FOUND                            0
3080           00796 #define BIT1_BANKSTICK_SELECTED_PATCH_FORMATED          1
3080           00797 #define BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL       2
3080           00798 #define BIT3_SELECTED_PATCH_FORMAT_BANKSTICK            3
               00799 ;; ------------------------------------------------------------
3080           00800 #define BANKSTICK_MAX_PATCH_NUMBER                      127
               00801 
               00802 ;; ------------------------------------------------------------
               00803 ;;          Patch - CONST DEF
               00804 ;; ------------------------------------------------------------
               00805 ;; ==> patch_name_writing.inc
               00806 ;; CHECK PATCH_NAME_ASC_KEY > 0x2F ([0x30 = "0" in ASC CODE]) ?
3080           00807 #define PATCH_NAME_ASC_CODE_0_MINUS1                    0x2F    
               00808 ;; CHECK IF PATCH_NAME_ASC_KEY IS < 0x3A [0x39 = "9" (ASC)] ?
3080           00809 #define PATCH_NAME_ASC_CODE_9_PLUS1                     0x3A    
               00810 ;; CHECK IF PATCH_NAME_ASC_KEY IS > 0x40 [0x41 = "A" (ASC)] ?
3080           00811 #define PATCH_NAME_ASC_CODE_A_MINUS1                    0x40
               00812 ;; CHECK IF PATCH_NAME_ASC_KEY IS < 0x5B [0x5A = "Z" (ASC)] ?
3080           00813 #define PATCH_NAME_ASC_CODE_Z_PLUS1                     0x5B
               00814 ;; CHECK IF PATCH_NAME_ASC_KEY IS == 0x5F [SPACE KEY "_" for LCD] ?
3080           00815 #define PATCH_NAME_ASC_CODE_SPACE_KEY                   0x5F    
3080           00816 #define PATCH_NAME_ASC_CODE_DEL_KEY                     0x14    
3080           00817 #define PATCH_NAME_CURSOR_RIGHT_KEY                     0x1D    
3080           00818 #define PATCH_NAME_CURSOR_LEFT_KEY                      0x9D    
3080           00819 #define PATCH_NAME_CURSOR_POS_MAX                       0x07    
3080           00820 #define PATCH_NUMBER_VALUE_MAX                          0x7F    
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00821 
               00822 
               00823 
               00824 ;; :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
               00825 
               00826 ;; TONE ABC ON/OFF
               00827 ;; NOISE ABC ON/OFF
               00828 ;; -----------------------------
3080           00829 #define BIT0_TONE_A_ON_OFF      0
3080           00830 #define BIT1_TONE_B_ON_OFF      1
3080           00831 #define BIT2_TONE_C_ON_OFF      2
3080           00832 #define BIT3_NOISE_A_ON_OFF     3
3080           00833 #define BIT4_NOISE_B_ON_OFF     4
3080           00834 #define BIT5_NOISE_C_ON_OFF     5
               00835 
               00836 
               00837 
               00838 ;; VELOCITY BIT - VELOCITY @ TONE ABC / VELOCITY @ NOISE | CONST DEF
               00839 ;; ---------------------------------------------------------------------------------------------------------------------
               00840 ;; MEMO
               00841 ;; VELOCITY => NOISE PERIOD:
               00842 ;; VELOCITY           => NOISE PERID is OFF     ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=0, BIT5=0,BIT6=0,BIT7=0
               00843 ;; VELOCITY of TONE A => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=1,BIT6=0,BIT7=0 
               00844 ;; VELOCITY of TONE B => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=0,BIT6=1,BIT7=0 
               00845 ;; VELOCITY of TONE C => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=0,BIT6=0,BIT7=1 
               00846 ;; ----------------------------------------------------------------------------------------------------------------------
3080           00847 #define BIT0_VELOCITY_ON_OFF_TONE_A     0
3080           00848 #define BIT1_VELOCITY_ON_OFF_TONE_B     1
3080           00849 #define BIT2_VELOCITY_ON_OFF_TONE_C     2
3080           00850 #define BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF    3
3080           00851 #define BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF  5
3080           00852 #define BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF  6
3080           00853 #define BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF  7
               00854 ;; VELOCITY BIT TONE / NOISE ABC
               00855 ;; ----------------------------------------------------------------------
3080           00856 #define BIT5_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_A_ON_OFF          5
3080           00857 #define BIT6_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_B_ON_OFF          6
3080           00858 #define BIT7_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_C_ON_OFF          7
               00859 
               00860 ;; ENVELOPE MODE ON / OFF (BIT4 @ TONE ABC)
               00861 ;; ----------------------------------------
3080           00862 #define BIT4_ENVELOPE_ON_OFF            4
3080           00863 #define ENVELOPE_SHAPE_MAX_VALUE_8      0x08
               00864 
               00865 ;; FX ON/OFF @ TONE ABC
               00866 ;; -----------------------------
3080           00867 #define BIT0_FX_ON_OFF_TONE_A   0
3080           00868 #define BIT1_FX_ON_OFF_TONE_B   1
3080           00869 #define BIT2_FX_ON_OFF_TONE_C   2
               00870 
               00871 
               00872 ;; USER DETUNE INI
3080           00873 #define INI_TUNE_FINE_USER              0x80; INITIAL VALUE = 128 (0 on LCD!)
3080           00874 #define INI_TUNE_COARSE_USER            0x07 ; INITIAL VALUE = 7  (0 on LCD!)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00875 
               00876 ;; DETUNE ABC
               00877 ;; ----------
3080           00878 #define PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06     0x06
3080           00879 #define PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F     0x7F
3080           00880 #define OFFSET_COARSE_TUNE_IS_7                 0x07
3080           00881 #define OFFSET_FINE_TUNE_IS_128                 0x80
3080           00882 #define PLUS_1_CARRY_BIT_KILLER                 0x01
               00883 
               00884 ;; TUNE @ TONE ABC
               00885 ;; MIN / MAX VALUE
               00886 ;; ---------------
               00887 ;; LOWEST TUNE - MAX VALUE
3080           00888 #define COARSE_TUNE_MAX_VALUE_B00001111         0x0F    ;; dec 15, hex 0x0F, B00001111
3080           00889 #define COARSE_TUNE_MAX_MINUS_1_B00001110       0x0E    ;; dec 14, hex 0x0E, B00001110
3080           00890 #define FINE_TUNE_MAX_VALUE_B11010010           0xD2    ;; dec 210, hex 0xD2, B11010010
               00891 ;; HIGHEST TUNE - MIN VALUE
3080           00892 #define COARSE_TUNE_MIN_VALUE_B00000000         0x00 ;; dec 0, hex 0x00, B00000000
3080           00893 #define FINE_TUNE_MIN_VALUE_B00001010           0x0A ;; dec 10, hex 0x0A, B00001010
               00894 ;; MAX VALUE - NOISE PERIOD
3080           00895 #define NOISE_PERIOD_MAX_VALUE                  0x1F ;; dec 31; bin 0001 1111
               00896 ;; MAX VOLUME TONE ABC
3080           00897 #define VOLUME_ABC_MAX_VALUE                    0x0F ;; dec 15; bin 0000 1111
               00898 
               00899 
               00900 ;; NIBBLE
               00901 ;; A BYTE WITH BIT 0 to 3 SET 
               00902 ;; ------------------------
3080           00903 #define NIBBLE_B00001111                        0x0F ;; dec 15, hex 0x0F, B00001111 
               00904 
               00905 
               00906 ;; Fx Option Const
               00907 ;; PIC Fx RAM AREA      : 0x220 to  0x280 (DEC 544-640)
               00908 ;; Fx EEPROM AREA       : 0x20  to  0x80
               00909 ;; Fx BANKSTICK AREA    : 0x1D  to  0x7C
               00910 ;; --------------------------
3080           00911 #define SELECT_Fx_RAM_BANK                              0x02    ;; Fx DATA IS LOCATED @ RAM BANK 2
               00912 ;; --------------------------
3080           00913 #define RAM_OFFSET_FX_FUNCTION                          0x20    ;; PIC RAM PATCH: Fx Func. Area OFFSET
3080           00914 #define EEPROM_OFFSET_FX_FUNCTION                       0x20    ;; EEPROM INT PATCH: Fx Func. Area OFFSET
3080           00915 #define BANKSTICK_PATCH_OFFSET_FX_FUNCTION              0x1D    ;; BANKSTICK PATCH : Fx Func. Area OFFSET
               00916 ;; --------------------------
3080           00917 #define RAM_OFFSET_FX_DATA                              0x40    ;; PIC RAM PATCH: Fx DATA Area OFFSET
3080           00918 #define EEPROM_OFFSET_FX_DATA                           0x40    ;; PIC EEPROM INT PATCH: Fx DATA Area OFFSET
3080           00919 #define BANKSTICK_OFFSET_FX_DATA                        0x3D    ;; BANKSTICK PATCH     : Fx DATA Area OFFSET
               00920 ;; --------------------------
3080           00921 #define RAM_OFFSET_FX_TIME_PRE_EXECUTION                0x60    ;; PIC RAM PATCH: Fx TIME Area OFFSET
3080           00922 #define EEPROM_OFFSET_FX_TIME_PRE_EXECUTION             0x60    ;; PIC EEPROM INT PATCH: Fx TIME Area OFFSET
3080           00923 #define BANKSTICK_OFFSET_FX_TIME_PRE_EXECUTION          0x5D    ;; BANKSTICK PATCH     : Fx TIME Area OFFSET
               00924 ;; --------------------------
3080           00925 #define FX_POS_MAX_31                                   0x1F    ;; 31 dec.(=> fx_pipeline.inc)
3080           00926 #define FX_POS_MAX_PLUS1                                0x20    ;; Fx Pos Max +1 = 32
3080           00927 #define Fx_DELAY_TIME_MAX                               0xC8    ;; 200 dec
3080           00928 #define FX_FUNCTIONS_MAX                                0x29    ;; MAX Number of Fx Functions
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3080           00929 #define FX_FUNCTIONS_MAX_PULS_1                         0x2A    ;; MAX Number of Fx Functions +1
3080           00930 #define FX_POS_MAX                                      0x1F    ;; Fx Pos Max = 31
               00931 
               00932 
               00933 ;; CS - LEDs
               00934 ;; see @ dout_calls.inc
               00935 ;; ---------
3080           00936 #define LED_ToneA               0x08
3080           00937 #define LED_ToneB               0x09
3080           00938 #define LED_ToneC               0x0A
3080           00939 #define LED_NoiseA              0x0B
3080           00940 #define LED_NoiseB              0x0C
3080           00941 #define LED_NoiseC              0x0D
3080           00942 #define LED_EnvelopeModeA       0x0E
3080           00943 #define LED_EnvelopeModeB       0x0F
3080           00944 #define LED_EnvelopeModeC       0x10
3080           00945 #define LED_Fx_A                0x11
3080           00946 #define LED_Fx_B                0x12
3080           00947 #define LED_Fx_C                0x13
3080           00948 #define LED_Envelope_Shape_1    0x14
3080           00949 #define LED_Envelope_Shape_2    0x15
3080           00950 #define LED_Envelope_Shape_3    0x16
3080           00951 #define LED_Envelope_Shape_4    0x17
3080           00952 #define LED_Envelope_Shape_5    0x18
3080           00953 #define LED_Envelope_Shape_6    0x19
3080           00954 #define LED_Envelope_Shape_7    0x1A
3080           00955 #define LED_Envelope_Shape_8    0x1B
               00956 
               00957 
               00958 ;; LCD
3080           00959 #define PLUS_POS_Fx             5
               00960 
               00961 ;; MIDI / USER
               00962 ;; =================================
3080           00963 #define INI_MIOS_MIDI_MERGER_ON_OFF             0x01    ;; [ENABLED] | (1 = ENABLED, 0 = DISABLED)
               00964 ;; MIDI CH int. [0-15]
               00965 ;; MIDI CH ext. [1-16]
3080           00966 #define MIDI_CH_PLUS_1_OFFSETT                  0x01
3080           00967 #define INI_TONE_A_MIDI_CHANNEL_USER            0x00 ; INITIAL VALUE = 0 = MIDI CH. 1 on LCD
3080           00968 #define INI_TONE_B_MIDI_CHANNEL_USER            0x01 ; INITIAL VALUE = 1 = MIDI CH. 2 on LCD
3080           00969 #define INI_TONE_C_MIDI_CHANNEL_USER            0x02 ; INITIAL VALUE = 2 = MIDI CH. 3 on LCD
               00970 ;; MIDI SWITCH ABC TONE/NOISE ON OF
3080           00971 #define INI_MIDI_ALL_OFF                        0x3F    ; INITIAL VALUE = BIN 00 111 111
               00972                                                         ; AY REG 07     =     IO CBA CBA
               00973                                                         ;               =     BA
               00974                                                         ;               =        NOISE
               00975                                                         ;               =            TONE
               00976                                                         ; ABC = 1 = TONE OFF
3080           00977 #define INI_USER_TONE_ABC_NOISE_ABC_ON_OFF      0xF8    ;; USER SETTING
               00978                                                         ;; HEX 0xF8
               00979                                                         ;; BIN 11 111 000
               00980                                                         ;;        CBA CBA
               00981                                                         ;;        NOI TONE
3080           00982 #define INI_VELOCITY_TO_ACB_NOISE_PERIOD        0x07    ;; VELOCITY TO ABC VOLUME = ON
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00983                                                         ;; VELOCITY TO NOISE PERIOD = OFF
               00984                                                         ;; BIN 0000 0111 
               00985                                                         ;;           CBA = ON (VELOCITY @ TONE A/B/C = 1 on / 0 = OFF)
               00986                                                         ;;NOISE:
               00987                                                         ;;NOISE  ON (BIT3 SET) VELOCITY
               00988                                                         ;;NOISE  OFF(BIT3 CLEAR) VELOCITY
               00989                                                         ;;[FOR DETAILS SEE abowe: => "VELOCITY BIT TONE / NOISE ABC"]
3080           00990 #define INI_FX_USER_ON_OFF_ABC                  0x00    ;; After Startup: All Fx = OFF
               00991                                                         ;; USER: FX ABC off (See MAIN MENU 3 / Mixer)
               00992                                                         ;; BIT0 = A (SET = ON / CLR = OFF)
               00993                                                         ;; BIT1 = B (SET = ON / CLR = OFF)
               00994                                                         ;; BIT2 = C (SET = ON / CLR = OFF)
3080           00995 #define MIDI_FILTER_ALL_OFF                     0x3F    ; BIN 00111111 (Do not change)
               00996 
               00997 
               00998                                                         
               00999 
               01000 ;; CC MAX (MIDI Controller 1-29)
3080           01001 #define CC_MAX_VALUE_29         0x1D    ;; 0x1D = 29
               01002 
               01003 ;; MIDI CC
3080           01004 #define CC22_VALUE_1            0x01
3080           01005 #define CC22_VALUE_2            0x02
3080           01006 #define CC22_VALUE_3            0x03
               01007 
               01008 ;; MIDI PITCH BEND
3080           01009 #define CC_30_PITCH_BEND        0x1E    ;; 30 dec
3080           01010 #define CHK_POS_NEG_VIA_63      0x3F    ;; 64-1 (63 dec)
3080           01011 #define CLEAR_OFFSET_128        0x80    ;; 128
               01012 
               01013 ;; SWITCH: MAIN MENU <-> SUB MENU
3080           01014 #define SWITCH_MAIN_MENU_OFF_SUB_MENU_ON_0x01   0x01
               01015 
               01016 ;; LCD START SCREEN TIME (STARTUP)
3080           01017 #define START_SCREEN_TIME       0x12
               01018 
               01019 
               01020 ;; INI VALUES FOR AY REGISTER
3080           01021 #define INI_REG0_FINE_TUNE_A                    0x40
3080           01022 #define INI_REG1_COARSE_TUNE_A                  0x01
3080           01023 #define INI_REG2_FINE_TUNE_B                    0x42
3080           01024 #define INI_REG3_COARSE_TUNE_B                  0x09
3080           01025 #define INI_REG4_FINE_TUNE_C                    0x44
3080           01026 #define INI_REG5_COARSE_TUNE_C                  0x02
3080           01027 #define INI_REG6_NOISE_PERIOD                   0x04
               01028 ;; SET AY REGISTER 07 = 0xF8 = BIN 1111 1000 [TONE ABC ON / NOISE ABC OFF, IO AB OUT]
3080           01029 #define INI_REG7_TONE_ABC_NOISE_ABC_IO_AB       0xF8
               01030 ;; VOLUME TONE A = 12 (BIT0-BIT3) , CLEAR BIT4 ENVELOPE=OFF
               01031 ;; DEC 12, HEX 0x0C, BIN 0000 1100:
3080           01032 #define INI_REG8_VOLUME_A_ENVELOPE_ON_OFF       0x0C    
3080           01033 #define INI_REG9_VOLUME_B_ENVELOPE_ON_OFF       0x0C    
3080           01034 #define INI_REG10_VOLUME_C_ENVELOPE_ON_OFF      0x0C
3080           01035 #define INI_REG11_ENVELOPE_FINE                 0x0F    ; DEC 15 [0-255]
3080           01036 #define INI_REG12_ENVELOPE_COARSE               0x0F    ; DEC 15 [0-255]
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3080           01037 #define INI_REG13_ENVELOPE_SHAPE                0x01    ; ENV. SHAPE = 1
3080           01038 #define INI_REG14_IO_A                          0xAA    ; IO A NOT IN USE YET
3080           01039 #define INI_REG15_IO_B                          0x00    ; IO B NOT IN USE 
               01040 
               01041 
               01042 
               01043 
               01044 
               00008 
               00009 ; ==========================================================================
               00010 
               00011 ;; ---[configuration table for MIDI processor and rotary encoders ]---
               00012 #include "mios_tables.inc"
               00001 ;
               00002 ; Configuration Tables for MIOS Application
               00003 ;
               00004 ;
               00005 ; ==========================================================================
               00006 
3080           00007         org     0x3080          ; never change the origin!
               00008 
               00009 ;; --------------------------------------------------------------------------
               00010 ;; The MIDI Trigger table maps incoming MIDI events to control elements
               00011 ;; (pots/faders, encoders, buttons, LEDs, ...)
               00012 ;; 
               00013 ;; After the MIOS MIDI processor (MPROC) has received a complete event, it
               00014 ;; searches in this table for a matching entry and calls USER_MPROC_NotifyFoundEvent
               00015 ;; with the table index in WREG and the MIDI event in MIOS_PARAMETER[123]
               00016 ;; 
               00017 ;; Note also that the MIDI processor stops scanning the table after
               00018 ;; the first MT_EOT entry
               00019 ;; 
               00020 ;; Note2: never change the origin (memory location) of this table!
               00021 ;; 
               00022 ;; Optionally this table can also be used to define events, which should be
               00023 ;; transmitted (Example: see example_ain64_din128_dout128), so that incoming
               00024 ;; and outgoing events are located at one place
               00025 ;; 
               00026 ;; The table *must* contain 256 entries. Unused entries should be filled with
               00027 ;; MT_EOT.
               00028 ;; --------------------------------------------------------------------------
               00029 
               00030         ;; MIDI Trigger entry structure
               00031 MT_ENTRY MACRO event_0, event_1
               00032         dw      (event_1 << 8) | event_0
               00033         ENDM
               00034 
               00035 MT_EOT  MACRO
               00036         dw      0xffff
               00037         ENDM
               00038 
               00039 
3080           00040 MIOS_MPROC_EVENT_TABLE
               00041         ;; entry 0x00-0x0f
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00042         MT_EOT
3080 FFFF          M         dw      0xffff
               00043         MT_EOT
3082 FFFF          M         dw      0xffff
               00044         MT_EOT
3084 FFFF          M         dw      0xffff
               00045         MT_EOT
3086 FFFF          M         dw      0xffff
               00046         MT_EOT
3088 FFFF          M         dw      0xffff
               00047         MT_EOT
308A FFFF          M         dw      0xffff
               00048         MT_EOT
308C FFFF          M         dw      0xffff
               00049         MT_EOT
308E FFFF          M         dw      0xffff
               00050         MT_EOT
3090 FFFF          M         dw      0xffff
               00051         MT_EOT
3092 FFFF          M         dw      0xffff
               00052         MT_EOT
3094 FFFF          M         dw      0xffff
               00053         MT_EOT
3096 FFFF          M         dw      0xffff
               00054         MT_EOT
3098 FFFF          M         dw      0xffff
               00055         MT_EOT
309A FFFF          M         dw      0xffff
               00056         MT_EOT
309C FFFF          M         dw      0xffff
               00057         MT_EOT
309E FFFF          M         dw      0xffff
               00058 
               00059         ;; entry 0x10-0x1f      
               00060         MT_EOT
30A0 FFFF          M         dw      0xffff
               00061         MT_EOT
30A2 FFFF          M         dw      0xffff
               00062         MT_EOT
30A4 FFFF          M         dw      0xffff
               00063         MT_EOT
30A6 FFFF          M         dw      0xffff
               00064         MT_EOT
30A8 FFFF          M         dw      0xffff
               00065         MT_EOT
30AA FFFF          M         dw      0xffff
               00066         MT_EOT
30AC FFFF          M         dw      0xffff
               00067         MT_EOT
30AE FFFF          M         dw      0xffff
               00068         MT_EOT
30B0 FFFF          M         dw      0xffff
               00069         MT_EOT
30B2 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00070         MT_EOT
30B4 FFFF          M         dw      0xffff
               00071         MT_EOT
30B6 FFFF          M         dw      0xffff
               00072         MT_EOT
30B8 FFFF          M         dw      0xffff
               00073         MT_EOT
30BA FFFF          M         dw      0xffff
               00074         MT_EOT
30BC FFFF          M         dw      0xffff
               00075         MT_EOT
30BE FFFF          M         dw      0xffff
               00076 
               00077         ;; entry 0x20-0x2f
               00078         MT_EOT
30C0 FFFF          M         dw      0xffff
               00079         MT_EOT
30C2 FFFF          M         dw      0xffff
               00080         MT_EOT
30C4 FFFF          M         dw      0xffff
               00081         MT_EOT
30C6 FFFF          M         dw      0xffff
               00082         MT_EOT
30C8 FFFF          M         dw      0xffff
               00083         MT_EOT
30CA FFFF          M         dw      0xffff
               00084         MT_EOT
30CC FFFF          M         dw      0xffff
               00085         MT_EOT
30CE FFFF          M         dw      0xffff
               00086         MT_EOT
30D0 FFFF          M         dw      0xffff
               00087         MT_EOT
30D2 FFFF          M         dw      0xffff
               00088         MT_EOT
30D4 FFFF          M         dw      0xffff
               00089         MT_EOT
30D6 FFFF          M         dw      0xffff
               00090         MT_EOT
30D8 FFFF          M         dw      0xffff
               00091         MT_EOT
30DA FFFF          M         dw      0xffff
               00092         MT_EOT
30DC FFFF          M         dw      0xffff
               00093         MT_EOT
30DE FFFF          M         dw      0xffff
               00094         
               00095         ;; entry 0x30-0x3f
               00096         MT_EOT
30E0 FFFF          M         dw      0xffff
               00097         MT_EOT
30E2 FFFF          M         dw      0xffff
               00098         MT_EOT
30E4 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00099         MT_EOT
30E6 FFFF          M         dw      0xffff
               00100         MT_EOT
30E8 FFFF          M         dw      0xffff
               00101         MT_EOT
30EA FFFF          M         dw      0xffff
               00102         MT_EOT
30EC FFFF          M         dw      0xffff
               00103         MT_EOT
30EE FFFF          M         dw      0xffff
               00104         MT_EOT
30F0 FFFF          M         dw      0xffff
               00105         MT_EOT
30F2 FFFF          M         dw      0xffff
               00106         MT_EOT
30F4 FFFF          M         dw      0xffff
               00107         MT_EOT
30F6 FFFF          M         dw      0xffff
               00108         MT_EOT
30F8 FFFF          M         dw      0xffff
               00109         MT_EOT
30FA FFFF          M         dw      0xffff
               00110         MT_EOT
30FC FFFF          M         dw      0xffff
               00111         MT_EOT
30FE FFFF          M         dw      0xffff
               00112         
               00113         ;; entry 0x40-0x4f
               00114         MT_EOT
3100 FFFF          M         dw      0xffff
               00115         MT_EOT
3102 FFFF          M         dw      0xffff
               00116         MT_EOT
3104 FFFF          M         dw      0xffff
               00117         MT_EOT
3106 FFFF          M         dw      0xffff
               00118         MT_EOT
3108 FFFF          M         dw      0xffff
               00119         MT_EOT
310A FFFF          M         dw      0xffff
               00120         MT_EOT
310C FFFF          M         dw      0xffff
               00121         MT_EOT
310E FFFF          M         dw      0xffff
               00122         MT_EOT
3110 FFFF          M         dw      0xffff
               00123         MT_EOT
3112 FFFF          M         dw      0xffff
               00124         MT_EOT
3114 FFFF          M         dw      0xffff
               00125         MT_EOT
3116 FFFF          M         dw      0xffff
               00126         MT_EOT
3118 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00127         MT_EOT
311A FFFF          M         dw      0xffff
               00128         MT_EOT
311C FFFF          M         dw      0xffff
               00129         MT_EOT
311E FFFF          M         dw      0xffff
               00130         
               00131         ;; entry 0x50-0x5f
               00132         MT_EOT
3120 FFFF          M         dw      0xffff
               00133         MT_EOT
3122 FFFF          M         dw      0xffff
               00134         MT_EOT
3124 FFFF          M         dw      0xffff
               00135         MT_EOT
3126 FFFF          M         dw      0xffff
               00136         MT_EOT
3128 FFFF          M         dw      0xffff
               00137         MT_EOT
312A FFFF          M         dw      0xffff
               00138         MT_EOT
312C FFFF          M         dw      0xffff
               00139         MT_EOT
312E FFFF          M         dw      0xffff
               00140         MT_EOT
3130 FFFF          M         dw      0xffff
               00141         MT_EOT
3132 FFFF          M         dw      0xffff
               00142         MT_EOT
3134 FFFF          M         dw      0xffff
               00143         MT_EOT
3136 FFFF          M         dw      0xffff
               00144         MT_EOT
3138 FFFF          M         dw      0xffff
               00145         MT_EOT
313A FFFF          M         dw      0xffff
               00146         MT_EOT
313C FFFF          M         dw      0xffff
               00147         MT_EOT
313E FFFF          M         dw      0xffff
               00148                 
               00149         ;; entry 0x60-0x6f
               00150         MT_EOT
3140 FFFF          M         dw      0xffff
               00151         MT_EOT
3142 FFFF          M         dw      0xffff
               00152         MT_EOT
3144 FFFF          M         dw      0xffff
               00153         MT_EOT
3146 FFFF          M         dw      0xffff
               00154         MT_EOT
3148 FFFF          M         dw      0xffff
               00155         MT_EOT
314A FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00156         MT_EOT
314C FFFF          M         dw      0xffff
               00157         MT_EOT
314E FFFF          M         dw      0xffff
               00158         MT_EOT
3150 FFFF          M         dw      0xffff
               00159         MT_EOT
3152 FFFF          M         dw      0xffff
               00160         MT_EOT
3154 FFFF          M         dw      0xffff
               00161         MT_EOT
3156 FFFF          M         dw      0xffff
               00162         MT_EOT
3158 FFFF          M         dw      0xffff
               00163         MT_EOT
315A FFFF          M         dw      0xffff
               00164         MT_EOT
315C FFFF          M         dw      0xffff
               00165         MT_EOT
315E FFFF          M         dw      0xffff
               00166 
               00167         ;; entry 0x70-0x7f
               00168         MT_EOT
3160 FFFF          M         dw      0xffff
               00169         MT_EOT
3162 FFFF          M         dw      0xffff
               00170         MT_EOT
3164 FFFF          M         dw      0xffff
               00171         MT_EOT
3166 FFFF          M         dw      0xffff
               00172         MT_EOT
3168 FFFF          M         dw      0xffff
               00173         MT_EOT
316A FFFF          M         dw      0xffff
               00174         MT_EOT
316C FFFF          M         dw      0xffff
               00175         MT_EOT
316E FFFF          M         dw      0xffff
               00176         MT_EOT
3170 FFFF          M         dw      0xffff
               00177         MT_EOT
3172 FFFF          M         dw      0xffff
               00178         MT_EOT
3174 FFFF          M         dw      0xffff
               00179         MT_EOT
3176 FFFF          M         dw      0xffff
               00180         MT_EOT
3178 FFFF          M         dw      0xffff
               00181         MT_EOT
317A FFFF          M         dw      0xffff
               00182         MT_EOT
317C FFFF          M         dw      0xffff
               00183         MT_EOT
317E FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00184 
               00185         ;; entry 0x80-0x8f
               00186         MT_EOT
3180 FFFF          M         dw      0xffff
               00187         MT_EOT
3182 FFFF          M         dw      0xffff
               00188         MT_EOT
3184 FFFF          M         dw      0xffff
               00189         MT_EOT
3186 FFFF          M         dw      0xffff
               00190         MT_EOT
3188 FFFF          M         dw      0xffff
               00191         MT_EOT
318A FFFF          M         dw      0xffff
               00192         MT_EOT
318C FFFF          M         dw      0xffff
               00193         MT_EOT
318E FFFF          M         dw      0xffff
               00194         MT_EOT
3190 FFFF          M         dw      0xffff
               00195         MT_EOT
3192 FFFF          M         dw      0xffff
               00196         MT_EOT
3194 FFFF          M         dw      0xffff
               00197         MT_EOT
3196 FFFF          M         dw      0xffff
               00198         MT_EOT
3198 FFFF          M         dw      0xffff
               00199         MT_EOT
319A FFFF          M         dw      0xffff
               00200         MT_EOT
319C FFFF          M         dw      0xffff
               00201         MT_EOT
319E FFFF          M         dw      0xffff
               00202 
               00203         ;; entry 0x90-0x9f
               00204         MT_EOT
31A0 FFFF          M         dw      0xffff
               00205         MT_EOT
31A2 FFFF          M         dw      0xffff
               00206         MT_EOT
31A4 FFFF          M         dw      0xffff
               00207         MT_EOT
31A6 FFFF          M         dw      0xffff
               00208         MT_EOT
31A8 FFFF          M         dw      0xffff
               00209         MT_EOT
31AA FFFF          M         dw      0xffff
               00210         MT_EOT
31AC FFFF          M         dw      0xffff
               00211         MT_EOT
31AE FFFF          M         dw      0xffff
               00212         MT_EOT
31B0 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00213         MT_EOT
31B2 FFFF          M         dw      0xffff
               00214         MT_EOT
31B4 FFFF          M         dw      0xffff
               00215         MT_EOT
31B6 FFFF          M         dw      0xffff
               00216         MT_EOT
31B8 FFFF          M         dw      0xffff
               00217         MT_EOT
31BA FFFF          M         dw      0xffff
               00218         MT_EOT
31BC FFFF          M         dw      0xffff
               00219         MT_EOT
31BE FFFF          M         dw      0xffff
               00220 
               00221         ;; entry 0xa0-0xaf
               00222         MT_EOT
31C0 FFFF          M         dw      0xffff
               00223         MT_EOT
31C2 FFFF          M         dw      0xffff
               00224         MT_EOT
31C4 FFFF          M         dw      0xffff
               00225         MT_EOT
31C6 FFFF          M         dw      0xffff
               00226         MT_EOT
31C8 FFFF          M         dw      0xffff
               00227         MT_EOT
31CA FFFF          M         dw      0xffff
               00228         MT_EOT
31CC FFFF          M         dw      0xffff
               00229         MT_EOT
31CE FFFF          M         dw      0xffff
               00230         MT_EOT
31D0 FFFF          M         dw      0xffff
               00231         MT_EOT
31D2 FFFF          M         dw      0xffff
               00232         MT_EOT
31D4 FFFF          M         dw      0xffff
               00233         MT_EOT
31D6 FFFF          M         dw      0xffff
               00234         MT_EOT
31D8 FFFF          M         dw      0xffff
               00235         MT_EOT
31DA FFFF          M         dw      0xffff
               00236         MT_EOT
31DC FFFF          M         dw      0xffff
               00237         MT_EOT
31DE FFFF          M         dw      0xffff
               00238 
               00239         ;; entry 0xb1-0xbf
               00240         MT_EOT
31E0 FFFF          M         dw      0xffff
               00241         MT_EOT
31E2 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00242         MT_EOT
31E4 FFFF          M         dw      0xffff
               00243         MT_EOT
31E6 FFFF          M         dw      0xffff
               00244         MT_EOT
31E8 FFFF          M         dw      0xffff
               00245         MT_EOT
31EA FFFF          M         dw      0xffff
               00246         MT_EOT
31EC FFFF          M         dw      0xffff
               00247         MT_EOT
31EE FFFF          M         dw      0xffff
               00248         MT_EOT
31F0 FFFF          M         dw      0xffff
               00249         MT_EOT
31F2 FFFF          M         dw      0xffff
               00250         MT_EOT
31F4 FFFF          M         dw      0xffff
               00251         MT_EOT
31F6 FFFF          M         dw      0xffff
               00252         MT_EOT
31F8 FFFF          M         dw      0xffff
               00253         MT_EOT
31FA FFFF          M         dw      0xffff
               00254         MT_EOT
31FC FFFF          M         dw      0xffff
               00255         MT_EOT
31FE FFFF          M         dw      0xffff
               00256 
               00257         ;; entry 0xc0-0xcf
               00258         MT_EOT
3200 FFFF          M         dw      0xffff
               00259         MT_EOT
3202 FFFF          M         dw      0xffff
               00260         MT_EOT
3204 FFFF          M         dw      0xffff
               00261         MT_EOT
3206 FFFF          M         dw      0xffff
               00262         MT_EOT
3208 FFFF          M         dw      0xffff
               00263         MT_EOT
320A FFFF          M         dw      0xffff
               00264         MT_EOT
320C FFFF          M         dw      0xffff
               00265         MT_EOT
320E FFFF          M         dw      0xffff
               00266         MT_EOT
3210 FFFF          M         dw      0xffff
               00267         MT_EOT
3212 FFFF          M         dw      0xffff
               00268         MT_EOT
3214 FFFF          M         dw      0xffff
               00269         MT_EOT
3216 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00270         MT_EOT
3218 FFFF          M         dw      0xffff
               00271         MT_EOT
321A FFFF          M         dw      0xffff
               00272         MT_EOT
321C FFFF          M         dw      0xffff
               00273         MT_EOT
321E FFFF          M         dw      0xffff
               00274 
               00275         ;; entry 0xd0-0xdf
               00276         MT_EOT
3220 FFFF          M         dw      0xffff
               00277         MT_EOT
3222 FFFF          M         dw      0xffff
               00278         MT_EOT
3224 FFFF          M         dw      0xffff
               00279         MT_EOT
3226 FFFF          M         dw      0xffff
               00280         MT_EOT
3228 FFFF          M         dw      0xffff
               00281         MT_EOT
322A FFFF          M         dw      0xffff
               00282         MT_EOT
322C FFFF          M         dw      0xffff
               00283         MT_EOT
322E FFFF          M         dw      0xffff
               00284         MT_EOT
3230 FFFF          M         dw      0xffff
               00285         MT_EOT
3232 FFFF          M         dw      0xffff
               00286         MT_EOT
3234 FFFF          M         dw      0xffff
               00287         MT_EOT
3236 FFFF          M         dw      0xffff
               00288         MT_EOT
3238 FFFF          M         dw      0xffff
               00289         MT_EOT
323A FFFF          M         dw      0xffff
               00290         MT_EOT
323C FFFF          M         dw      0xffff
               00291         MT_EOT
323E FFFF          M         dw      0xffff
               00292 
               00293         ;; entry 0xe0-0xef
               00294         MT_EOT
3240 FFFF          M         dw      0xffff
               00295         MT_EOT
3242 FFFF          M         dw      0xffff
               00296         MT_EOT
3244 FFFF          M         dw      0xffff
               00297         MT_EOT
3246 FFFF          M         dw      0xffff
               00298         MT_EOT
3248 FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00299         MT_EOT
324A FFFF          M         dw      0xffff
               00300         MT_EOT
324C FFFF          M         dw      0xffff
               00301         MT_EOT
324E FFFF          M         dw      0xffff
               00302         MT_EOT
3250 FFFF          M         dw      0xffff
               00303         MT_EOT
3252 FFFF          M         dw      0xffff
               00304         MT_EOT
3254 FFFF          M         dw      0xffff
               00305         MT_EOT
3256 FFFF          M         dw      0xffff
               00306         MT_EOT
3258 FFFF          M         dw      0xffff
               00307         MT_EOT
325A FFFF          M         dw      0xffff
               00308         MT_EOT
325C FFFF          M         dw      0xffff
               00309         MT_EOT
325E FFFF          M         dw      0xffff
               00310 
               00311         ;; entry 0xf0-0xff
               00312         MT_EOT
3260 FFFF          M         dw      0xffff
               00313         MT_EOT
3262 FFFF          M         dw      0xffff
               00314         MT_EOT
3264 FFFF          M         dw      0xffff
               00315         MT_EOT
3266 FFFF          M         dw      0xffff
               00316         MT_EOT
3268 FFFF          M         dw      0xffff
               00317         MT_EOT
326A FFFF          M         dw      0xffff
               00318         MT_EOT
326C FFFF          M         dw      0xffff
               00319         MT_EOT
326E FFFF          M         dw      0xffff
               00320         MT_EOT
3270 FFFF          M         dw      0xffff
               00321         MT_EOT
3272 FFFF          M         dw      0xffff
               00322         MT_EOT
3274 FFFF          M         dw      0xffff
               00323         MT_EOT
3276 FFFF          M         dw      0xffff
               00324         MT_EOT
3278 FFFF          M         dw      0xffff
               00325         MT_EOT
327A FFFF          M         dw      0xffff
               00326         MT_EOT
327C FFFF          M         dw      0xffff
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00327         MT_EOT
327E FFFF          M         dw      0xffff
               00328 
               00329 
               00330 
               00331 ;; ==========================================================================
               00332  
3280           00333         org     0x3280          ; never change the origin!
               00334  
               00335 ;; --------------------------------------------------------------------------
               00336 ;; In this table DIN pins have to be assigned to rotary encoders for the
               00337 ;; MIOS_ENC driver 
               00338 ;; 
               00339 ;; up to 64 entries are provided
               00340 ;; 
               00341 ;; The table must be terminated with an ENC_EOT entry. Unused entries should
               00342 ;; be filled with ENC_EOT
               00343 ;; 
               00344 ;; ENC_ENTRY provides following parameters
               00345 ;;    o first parameter: number of shift register - 1, 2, 3, ... 16
               00346 ;;    o second parameter: number of pin; since two pins are necessary
               00347 ;;      for each encoder, an even number is expected: 0, 2, 4 or 6
               00348 ;;    o the third parameter contains the encoder mode:
               00349 ;;      either MIOS_ENC_MODE_NON_DETENTED
               00350 ;;          or MIOS_ENC_MODE_DETENTED
               00351 ;;          or MIOS_ENC_MODE_DETENTED2
               00352 ;;          or MIOS_ENC_MODE_DETENTED3
               00353 
               00354 ;; Configuration Examples:
               00355 ;;    ENC_ENTRY  1,  0,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 0 and 1 of SR 1
               00356 ;;    ENC_ENTRY  1,  2,  MIOS_ENC_MODE_DETENTED        ; detented encoder at pin 2 and 3 of SR 1
               00357 ;;    ENC_ENTRY  9,  6,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 6 and 7 of SR 9
               00358 ;; --------------------------------------------------------------------------
               00359  
               00360 ; ; ; ;; encoder entry structure
               00361 ; ; ; ENC_ENTRY MACRO sr, din_0, mode
               00362 ; ; ;   dw      (mode << 8) | (din_0 + 8*(sr-1))
               00363 ; ; ;   ENDM    
               00364 ; ; ; 
               00365 ; ; ; ENC_EOT   MACRO
               00366 ; ; ;   dw      0xffff
               00367 ; ; ;   ENDM
               00368 ; ; ;  
               00369 ; ; ; MIOS_ENC_PIN_TABLE
               00370 ; ; ; ;; encoders 1-16
               00371 ; ; ; ;;        SR              Pin  Mode
               00372 ;;;;;;;;ENC_EOT
               00373 ; ; ;   ENC_EOT
               00374 ; ; ;   ENC_EOT
               00375 ; ; ;   ENC_EOT
               00376 ; ; ;   ENC_EOT
               00377 ; ; ;   ENC_EOT
               00378 ; ; ;   ENC_EOT
               00379 ; ; ;   ENC_EOT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00380 ; ; ;   ENC_EOT
               00381 ; ; ;   ENC_EOT
               00382 ; ; ;   ENC_EOT
               00383 ; ; ;   ENC_EOT
               00384 ; ; ;   ENC_EOT
               00385 ; ; ;   ENC_EOT
               00386 ; ; ;   ENC_EOT
               00387 ; ; ;   ENC_EOT
               00388 ; ; ; 
               00389 ; ; ;   ;; encoders 17-32
               00390 ; ; ;   ENC_EOT
               00391 ; ; ;   ENC_EOT
               00392 ; ; ;   ENC_EOT
               00393 ; ; ;   ENC_EOT
               00394 ; ; ;   ENC_EOT
               00395 ; ; ;   ENC_EOT
               00396 ; ; ;   ENC_EOT
               00397 ; ; ;   ENC_EOT
               00398 ; ; ;   ENC_EOT
               00399 ; ; ;   ENC_EOT
               00400 ; ; ;   ENC_EOT
               00401 ; ; ;   ENC_EOT
               00402 ; ; ;   ENC_EOT
               00403 ; ; ;   ENC_EOT
               00404 ; ; ;   ENC_EOT
               00405 ; ; ;   ENC_EOT
               00406 ; ; ; 
               00407 ; ; ;   ;; encoders 33-48
               00408 ; ; ;   ENC_EOT
               00409 ; ; ;   ENC_EOT
               00410 ; ; ;   ENC_EOT
               00411 ; ; ;   ENC_EOT
               00412 ; ; ;   ENC_EOT
               00413 ; ; ;   ENC_EOT
               00414 ; ; ;   ENC_EOT
               00415 ; ; ;   ENC_EOT
               00416 ; ; ;   ENC_EOT
               00417 ; ; ;   ENC_EOT
               00418 ; ; ;   ENC_EOT
               00419 ; ; ;   ENC_EOT
               00420 ; ; ;   ENC_EOT
               00421 ; ; ;   ENC_EOT
               00422 ; ; ;   ENC_EOT
               00423 ; ; ;   ENC_EOT
               00424 ; ; ; 
               00425 ; ; ;   ;; encoders 49-64
               00426 ; ; ;   ENC_EOT
               00427 ; ; ;   ENC_EOT
               00428 ; ; ;   ENC_EOT
               00429 ; ; ;   ENC_EOT
               00430 ; ; ;   ENC_EOT
               00431 ; ; ;   ENC_EOT
               00432 ; ; ;   ENC_EOT
               00433 ; ; ;   ENC_EOT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00434 ; ; ;   ENC_EOT
               00435 ; ; ;   ENC_EOT
               00436 ; ; ;   ENC_EOT
               00437 ; ; ;   ENC_EOT
               00438 ; ; ;   ENC_EOT
               00439 ; ; ;   ENC_EOT
               00440 ; ; ;   ENC_EOT
               00441 ; ; ;   ENC_EOT
               00442 
3300           00443         org     0x3300          ; never change the origin!
               00013 
               00014 ;; ---[Custom LCD driver ]---
               00015 #include "app_lcd.inc"
               00001 ;
               00002 ; MIOS Custom LCD Driver Skeleton
               00003 ;
               00004 ; ==========================================================================
               00005 ;
               00006 ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
               00007 ;  Licensed for personal non-commercial use only.
               00008 ;  All other rights reserved.
               00009 ; 
               00010 ; ==========================================================================
               00011 
               00012 ;; --------------------------------------------------------------------------
               00013 ;;  Following system variables are given by MIOS and can be directly 
               00014 ;;  accessed by the driver. The addresses are defined in mios.h and
               00015 ;;  should not be changed
               00016 ;; 
               00017 ;;  MIOS_GLCD_BUFFER         a 8 byte buffer for data transfers
               00018 ;;  MIOS_LCD_OPTION1         contains the first LCD option given by MIOS_LCD_TypeSet
               00019 ;;  MIOS_LCD_OPTION2         contains the second LCD option given by MIOS_LCD_TypeSet
               00020 ;;  MIOS_LCD_CURSOR_POS      the current cursor pos of characters (GLCD: multiplied by width)
               00021 ;;  MIOS_GLCD_GCURSOR_X      for GLCDs: the current X position of graphical cursor
               00022 ;;  MIOS_GLCD_GCURSOR_Y      for GLCDs: the current Y position of graphical cursor
               00023 ;;  MIOS_GLCD_FONT_WIDTH     for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
               00024 ;;  MIOS_GLCD_FONT_HEIGHT    for GLCDs: the fontheight given by MIOS_GLCD_FontInit
               00025 ;;  MIOS_GLCD_FONT_X0        for GLCDs: the first byte within a char entry
               00026 ;;  MIOS_GLCD_FONT_OFFSET    for GLCDs: the byte offset between the characters
               00027 ;;  MIOS_GLCD_FONT_PTRL      for GLCDs: pointer to the character table, low-byte
               00028 ;;  MIOS_GLCD_FONT_PTRH      for GLCDs: pointer to the character table, high-byte
               00029 ;;  MIOS_LCD_TIMEOUT0        can be used for timeout loops
               00030 ;;  MIOS_LCD_TIMEOUT1        can be used for timeout loops
               00031 ;;  MIOS_GLCD_TMP1           can be used as temporary buffer
               00032 ;;  MIOS_GLCD_TMP2           can be used as temporary buffer
               00033 ;;  MIOS_GLCD_TMP3           can be used as temporary buffer
               00034 ;;  MIOS_GLCD_TMP4           can be used as temporary buffer
               00035 ;;  MIOS_LCD_Y0_OFFSET       Y0 offset of LCD
               00036 ;;  MIOS_LCD_Y1_OFFSET       Y1 offset of LCD
               00037 ;;  MIOS_LCD_Y2_OFFSET       Y2 offset of LCD
               00038 ;;  MIOS_LCD_Y3_OFFSET       Y3 offset of LCD
               00039 ;;  MIOS_LCD_CURSOR_POS_REAL unmapped cursor position which has been set with MIOS_LCD_CursorSet
               00040 ;; 
               00041 ;;  Note: the addresses are located in an upper bank and therefore have to
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00042 ;;        be accessed with the BANKED flag. Also the BSR has to be justified
               00043 ;;        before using the registers
               00044 ;;  Example:
               00045 ;;      SET_BSR MIOS_LCD_OPTION1        ; sets BSR to the bank where MIOS_LCD_*
               00046 ;;                                      ; has been located. You don't need to
               00047 ;;                                      ; change the BSR for the other LCD registers
               00048 ;;      movf    MIOS_LCD_OPTION1, W, BANKED     ; get LCD option #1
               00049 ;; 
               00050 ;;  Important: to allow a proper interaction with MIOS applications, you are
               00051 ;;  only allowed to modify MIOS_PARAMETER[123], the mutliplication registers
               00052 ;;  and FSR1. You are not allowed to change TMP[1-5] or FSR0
               00053 ;;  if you need some temporary registers, use the given addresses above or
               00054 ;;  locate them to addresses which are not used by the application
               00055 ;; --------------------------------------------------------------------------
               00056         
               00057 ;; --------------------------------------------------------------------------
               00058 ;;  This function is called by MIOS when the custom LCD should be initialized
               00059 ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
               00060 ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
               00061 ;;  Out: -
               00062 ;; --------------------------------------------------------------------------
3300           00063 USER_LCD_Init
3300 0012      00064         return
               00065 
               00066 ;; --------------------------------------------------------------------------
               00067 ;;  This function is called by MIOS when the custom LCD should be cleared
               00068 ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
               00069 ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
               00070 ;;  Out: -
               00071 ;; --------------------------------------------------------------------------
3302           00072 USER_LCD_Clear
3302 0012      00073         return
               00074 
               00075 ;; --------------------------------------------------------------------------
               00076 ;;  This function is called by MIOS when the cursor should be changed
               00077 ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
               00078 ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
               00079 ;;       MIOS_GLCD_CURSOR_X - horizontal cursor position (for GLCDs)
               00080 ;;       MIOS_GLCD_CURSOR_X - vertical cursor position   (for GLCDs)
               00081 ;;       MIOS_LCD_CURSOR    - character cursor position  (for CLCDs)
               00082 ;;  Out: -
               00083 ;; --------------------------------------------------------------------------
3304           00084 USER_LCD_CursorSet
3304 0012      00085         return
               00086 
               00087 ;; --------------------------------------------------------------------------
               00088 ;;  This function is called by MIOS when a character should be print
               00089 ;;  In:  WREG - character
               00090 ;;       all other MIOS_*LCD_* registers
               00091 ;;  Out: GLCDs should justify the X/Y cursor position
               00092 ;; --------------------------------------------------------------------------
3306           00093 USER_LCD_PrintChar
3306 0012      00094         return
               00095 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00096 ;; --------------------------------------------------------------------------
               00097 ;;  FUNCTION: USER_LCD_Data
               00098 ;;  DESCRIPTION: sends a data value to the LCD display.<BR>
               00099 ;;  On CLCDs: branch directly to USER_LCD_PrintChar<BR>
               00100 ;;  On GLCDs: ignore this function!
               00101 ;;  IN:  data which should be sent
               00102 ;;  OUT: -
               00103 ;;  NOTE: see the custom_lcd_example for further details
               00104 ;; --------------------------------------------------------------------------
3308           00105 USER_LCD_Data
3308 0012      00106         return
               00107 
               00108 ;; --------------------------------------------------------------------------
               00109 ;;  FUNCTION: USER_LCD_Cmd
               00110 ;;  DESCRIPTION: sends a command to the LCD display.<BR>
               00111 ;;  On CLCDs: use this function to decode the HD44780 commands if required<BR>
               00112 ;;  On GLCDs: ignore this function!
               00113 ;;  IN:  command which should be sent
               00114 ;;  OUT: -
               00115 ;;  NOTE: see the custom_lcd_example for further details
               00116 ;; --------------------------------------------------------------------------
330A           00117 USER_LCD_Cmd
330A 0012      00118         return
               00119 
               00120 ;; --------------------------------------------------------------------------
               00121 ;;  FUNCTION: USER_LCD_SpecialCharInit
               00122 ;;  DESCRIPTION: see MIOS_CLCD_SpecialCharInit
               00123 ;;  IN:  number of special character (0-7) in WREG
               00124 ;;       pointer to special char pattern in TBLPTR (consists of 8
               00125 ;;          entries for every character-line)
               00126 ;;  OUT: TBLPTR has to be set to next table entry (TBLPTR+=8)
               00127 ;;  NOTE: see the custom_lcd_example for further details
               00128 ;; --------------------------------------------------------------------------
330C           00129 USER_LCD_SpecialCharInit
330C 0012      00130         return
               00016 
               00017 ;; ---[8x8 Scan Matrix functions (C64 KEYBOARD DRIVER BY TK)]---
               00018 #include "sm_simple_c64keyb.inc"
               00001 ; $Id: sm_simple.inc 326 2008-05-03 21:20:32Z tk $
               00002 ; Scan Matrix Driver, simple version
               00003 ; Alias sm_simple_c64keyb.inc - driver for the C64 Keyboard
               00004 ; 
               00005 ; This driver scans a matrix of up to 8x8 buttons/keys
               00006 ; by using one DOUT and one DIN shift register
               00007 ; 
               00008 ; This include file provides following functions:
               00009 ;
               00010 ;    o SM_Init:         initializes the scan matrix
               00011 ;                       should be called from USER_Init
               00012 ;
               00013 ;    o SM_PrepareCol:   prepares the DOUT register to drive a column
               00014 ;                       should be called from USER_SR_Service_Prepare
               00015 ;
               00016 ;    o SM_GetRow:       gets the DIN values of the selected column
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00017 ;                       should be called from USER_SR_Service_Finish
               00018 ;
               00019 ;    o SM_ButtonHandler: to be called from USER_Tick
               00020 ;
               00021 ;    o SM_NotifyToggle: called from SM_ButtonHandler on button changes
               00022 ;
               00023 ;
               00024 ; Define the shift register which drives the column here
               00025 ; we are counting from zero! The first DOUT register is 0x00, the second 0x01, etc...
330E           00026 #define SM_COLUMN_DOUT  0x00
               00027 ;
               00028 ; Define the shift register which gets the row values here
               00029 ; we are counting from zero! The first DIN register is 0x00, the second 0x01, etc...
330E           00030 #define SM_ROW_DIN      0x00
               00031 ;
               00032 ; set this constant to 1 if the colums/rows are swapped (means: the cathodes and
               00033 ; not the anodes of the diodes are connected together)
330E           00034 #define SM_SWAP_CR      0
               00035 ;
               00036 ; ==========================================================================
               00037 ;
               00038 ;  Copyright 2004 Thorsten Klose (tk@midibox.org)
               00039 ;  Licensed for personal non-commercial use only.
               00040 ;  All other rights reserved.
               00041 ; 
               00042 ; ==========================================================================
               00043 
               00044 ;; --------------------------------------------------------------------------
               00045 ;;  FUNCTION: SM_Init
               00046 ;;  DESCRIPTION: This function initializes the scan matrix.
               00047 ;;  It should be called from USER_Init
               00048 ;;  IN:   -
               00049 ;;  OUT:  -
               00050 ;;  USES: BSR
               00051 ;; --------------------------------------------------------------------------
330E           00052 SM_Init
               00053         ;; set button value to initial value (1) of all 64 buttons
330E EE01 F000 00054         lfsr    FSR0, SM_ROW0_VALUE
3312 0E08      00055         movlw   0x08
3314 6E06      00056         movwf   TMP1
3316           00057 SM_Init_Loop1
3316 68EE      00058         setf    POSTINC0
3318 2E06      00059         decfsz  TMP1, F
               00060         rgoto   SM_Init_Loop1
331A D7FD          M         bra     label
               00061 
               00062         ;; clear "changed" status of all 64 buttons
331C EE01 F008 00063         lfsr    FSR0, SM_ROW0_CHANGED
3320 0E08      00064         movlw   0x08
3322 6E06      00065         movwf   TMP1
3324           00066 SM_Init_Loop2
3324 6AEE      00067         clrf    POSTINC0
3326 2E06      00068         decfsz  TMP1, F
               00069         rgoto   SM_Init_Loop2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3328 D7FD          M         bra     label
               00070         
               00071         ;; select first column
332A 0E00      00072         movlw   0x00
332C ECC4 F016 00073         call    MIOS_HLP_GetBitANDMask  ; (inverted 1 of 8 code)
3330 6E03      00074         movwf   MIOS_PARAMETER1
3332 0E00      00075         movlw   SM_COLUMN_DOUT
3334 EC68 F016 00076         call    MIOS_DOUT_SRSet
               00077 
               00078         ;; remember that this column has been selected
               00079         SET_BSR SM_SELECTED_COLUMN
3338 0100          M         movlb   HIGH(reg)
333A 6B17      00080         clrf    SM_SELECTED_COLUMN, BANKED
               00081 
333C 0012      00082         return
               00083 
               00084 ;; --------------------------------------------------------------------------
               00085 ;;  FUNCTION: SM_PrepareCol
               00086 ;;  DESCRIPTION: This function prepares the DOUT register to drive a column
               00087 ;;  It should be called from USER_SR_Service_Prepare
               00088 ;;  IN:   -
               00089 ;;  OUT:  -
               00090 ;;  USES: BSR
               00091 ;; --------------------------------------------------------------------------
               00092 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00093 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
               00094 ;; --------------------------------------------------------------------------
333E           00095 SM_PrepareCol
               00096         ;; select next DOUT register
               00097 
               00098         ;; (current column + 1) & 0x07
               00099         SET_BSR SM_SELECTED_COLUMN
333E 0100          M         movlb   HIGH(reg)
3340 2917      00100         incf    SM_SELECTED_COLUMN, W, BANKED   ; (* see note below)
3342 0B07      00101         andlw   0x07
3344 ECC4 F016 00102         call    MIOS_HLP_GetBitANDMask  ; (inverted 1 of 8 code)
3348 6E03      00103         movwf   MIOS_PARAMETER1
334A 0E00      00104         movlw   SM_COLUMN_DOUT
334C EC68 F016 00105         call    MIOS_DOUT_SRSet
               00106 
               00107         ;; (*) note: the incremented "selected column" value won't be saved here, but
               00108         ;; after SM_GetRow has been executed. 
               00109         ;; Why?
               00110         ;; because the new DOUT value will be "visible" after the DIN chain has
               00111         ;; been captured by the SRIO driver, therefore the column which has been
               00112         ;; selected here will be visible during the upper next scan
3350 0012      00113         return
               00114 
               00115 ;; --------------------------------------------------------------------------
               00116 ;;  FUNCTION: SM_GetRow
               00117 ;;  DESCRIPTION: This function gets the DIN values of the selected column
               00118 ;;  It should be called from USER_SR_Service_Finish
               00119 ;;  IN:   -
               00120 ;;  OUT:  -
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00121 ;;  USES: -
               00122 ;; --------------------------------------------------------------------------
               00123 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00124 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
               00125 ;; --------------------------------------------------------------------------
3352           00126 SM_GetRow
               00127         ;; determine changes and save new value in SW_ROWx_VALUE depending on selected column
3352 0E00      00128         movlw   SM_ROW_DIN
3354 EC5C F016 00129         call    MIOS_DIN_SRGet
3358 EE21 F000 00130         lfsr    FSR2, SM_ROW0_VALUE
               00131         SET_BSR SM_SELECTED_COLUMN      
335C 0100          M         movlb   HIGH(reg)
335E 5117      00132         movf    SM_SELECTED_COLUMN, W, BANKED
3360 CFDB F00B 00133         movff   PLUSW2, IRQ_TMP1
3364 C003 FFDB 00134         movff   MIOS_PARAMETER1, PLUSW2
               00135 
               00136         ;; old value in IRQ_TMP1
               00137         ;; new value in MIOS_PARAMETER1
               00138         ;; select SM_ROWx_CHANGED register
3368 EE21 F008 00139         lfsr    FSR2, SM_ROW0_CHANGED
336C 5117      00140         movf    SM_SELECTED_COLUMN, W, BANKED
336E 26D9      00141         addwf   FSR2L, F
               00142 
               00143         ;; changes are: IRQ_TMP1 xor MIOS_PARAMETER1
3370 500B      00144         movf    IRQ_TMP1, W
3372 1803      00145         xorwf   MIOS_PARAMETER1, W
               00146 
               00147         ;; OR the result to the already notified changes (if they has not been zeroed by the ButtonHandler)
3374 12DF      00148         iorwf   INDF2, F
               00149 
               00150         ;; increment column, wrap at 8
3376 2917      00151         incf    SM_SELECTED_COLUMN, W, BANKED
3378 0B07      00152         andlw   0x07
337A 6F17      00153         movwf   SM_SELECTED_COLUMN, BANKED
               00154         
337C 0012      00155         return
               00156 
               00157 ;; --------------------------------------------------------------------------
               00158 ;;  FUNCTION: SM_ButtonHandler
               00159 ;;  DESCRIPTION: This function should be called from USER_Tick (in the
               00160 ;;  mainprogram) to ask for button changes. Events (change from 0->1 or
               00161 ;;  from 1->0) will be notified via the SM_NotifyToggle hook
               00162 ;;  which behaves similar to the USER_DIN_NotifyToggle hook provided by
               00163 ;;  MIOS itself
               00164 ;; 
               00165 ;;  IN:   -
               00166 ;;  OUT:  -
               00167 ;;  USES: -
               00168 ;; --------------------------------------------------------------------------
337E           00169 SM_ButtonHandler
               00170         SET_BSR SM_BUTTON_COLUMN_CTR
337E 0100          M         movlb   HIGH(reg)
3380 6B18      00171         clrf    SM_BUTTON_COLUMN_CTR, BANKED
3382           00172 SM_ButtonHandler_Loop
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3382 EE01 F008 00173         lfsr    FSR0, SM_ROW0_CHANGED
3386 5118      00174         movf    SM_BUTTON_COLUMN_CTR, W, BANKED
3388 26E9      00175         addwf   FSR0L, F
338A 50EF      00176         movf    INDF0, W
338C E010      00177         bz      SM_ButtonHandler_Loop_Next
               00178         RCALL_IFSET INDF0, 0, ACCESS, SM_NotifyToggle_Pin0      ; fastest solution...
338E B0EF          M         btfsc   reg, bit, reg_a
3390 D813          M         rcall   label
               00179         RCALL_IFSET INDF0, 1, ACCESS, SM_NotifyToggle_Pin1
3392 B2EF          M         btfsc   reg, bit, reg_a
3394 D814          M         rcall   label
               00180         RCALL_IFSET INDF0, 2, ACCESS, SM_NotifyToggle_Pin2
3396 B4EF          M         btfsc   reg, bit, reg_a
3398 D815          M         rcall   label
               00181         RCALL_IFSET INDF0, 3, ACCESS, SM_NotifyToggle_Pin3
339A B6EF          M         btfsc   reg, bit, reg_a
339C D816          M         rcall   label
               00182         RCALL_IFSET INDF0, 4, ACCESS, SM_NotifyToggle_Pin4
339E B8EF          M         btfsc   reg, bit, reg_a
33A0 D817          M         rcall   label
               00183         RCALL_IFSET INDF0, 5, ACCESS, SM_NotifyToggle_Pin5
33A2 BAEF          M         btfsc   reg, bit, reg_a
33A4 D818          M         rcall   label
               00184         RCALL_IFSET INDF0, 6, ACCESS, SM_NotifyToggle_Pin6
33A6 BCEF          M         btfsc   reg, bit, reg_a
33A8 D819          M         rcall   label
               00185         RCALL_IFSET INDF0, 7, ACCESS, SM_NotifyToggle_Pin7
33AA BEEF          M         btfsc   reg, bit, reg_a
33AC D81A          M         rcall   label
33AE           00186 SM_ButtonHandler_Loop_Next
33AE 2B18      00187         incf    SM_BUTTON_COLUMN_CTR, F, BANKED
33B0 0E07      00188         movlw   0x08-1          ; (8 columns)
33B2 6518      00189         cpfsgt  SM_BUTTON_COLUMN_CTR, BANKED
               00190         rgoto SM_ButtonHandler_Loop
33B4 D7E6          M         bra     label
33B6 0012      00191         return
               00192 
               00193         ;; ---
               00194 
33B8           00195 SM_NotifyToggle_Pin0
33B8 90EF      00196         bcf     INDF0, 0                        ; clear "changed" flag
33BA 0E00      00197         movlw   0x00
               00198         rgoto   SM_NotifyToggle_Pin_Cont
33BC D014          M         bra     label
33BE           00199 SM_NotifyToggle_Pin1
33BE 92EF      00200         bcf     INDF0, 1                        ; clear "changed" flag
33C0 0E01      00201         movlw   0x01
               00202         rgoto   SM_NotifyToggle_Pin_Cont
33C2 D011          M         bra     label
33C4           00203 SM_NotifyToggle_Pin2
33C4 94EF      00204         bcf     INDF0, 2                        ; clear "changed" flag
33C6 0E02      00205         movlw   0x02
               00206         rgoto   SM_NotifyToggle_Pin_Cont
33C8 D00E          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
33CA           00207 SM_NotifyToggle_Pin3
33CA 96EF      00208         bcf     INDF0, 3                        ; clear "changed" flag
33CC 0E03      00209         movlw   0x03
               00210         rgoto   SM_NotifyToggle_Pin_Cont
33CE D00B          M         bra     label
33D0           00211 SM_NotifyToggle_Pin4
33D0 98EF      00212         bcf     INDF0, 4                        ; clear "changed" flag
33D2 0E04      00213         movlw   0x04
               00214         rgoto   SM_NotifyToggle_Pin_Cont
33D4 D008          M         bra     label
33D6           00215 SM_NotifyToggle_Pin5
33D6 9AEF      00216         bcf     INDF0, 5                        ; clear "changed" flag
33D8 0E05      00217         movlw   0x05
               00218         rgoto   SM_NotifyToggle_Pin_Cont
33DA D005          M         bra     label
33DC           00219 SM_NotifyToggle_Pin6
33DC 9CEF      00220         bcf     INDF0, 6                        ; clear "changed" flag
33DE 0E06      00221         movlw   0x06
               00222         rgoto   SM_NotifyToggle_Pin_Cont
33E0 D002          M         bra     label
33E2           00223 SM_NotifyToggle_Pin7
33E2 9EEF      00224         bcf     INDF0, 7                        ; clear "changed" flag
33E4 0E07      00225         movlw   0x07
               00226         ;;      rgoto   SM_NotifyToggle_Pin_Cont
33E6           00227 SM_NotifyToggle_Pin_Cont
33E6 6F15      00228         movwf   SM_BUTTON_ROW, BANKED
               00229 
               00230         ;; store pin value in SM_BUTTON_VALUE
33E8 EE01 F000 00231         lfsr    FSR0, SM_ROW0_VALUE
33EC 5118      00232         movf    SM_BUTTON_COLUMN_CTR, W, BANKED
33EE 26E9      00233         addwf   FSR0L, F
33F0 5115      00234         movf    SM_BUTTON_ROW, W, BANKED
33F2 ECC6 F016 00235         call    MIOS_HLP_GetBitORMask
33F6 14EF      00236         andwf   INDF0, W
33F8 A4D8      00237         skpz
33FA 0E01      00238         movlw   0x01
33FC 6E16      00239         movwf   SM_BUTTON_VALUE
               00240 
               00241         ;; for compatibility with USER_DIN_NotifyToggle:
               00242         ;; save button value in MIOS_PARAMETER2
33FE 6E04      00243         movwf   MIOS_PARAMETER2
               00244         ;; save button number (0x00-0xff) in MIOS_PARAMETER1
               00245         ;; if more than 256 buttons are connected, use SM_BUTTON_COLUMN and SM_BUTTON_ROW to determine the number
               00246 #if SM_SWAP_CR
               00247         movf    SM_BUTTON_COLUMN_CTR, W, BANKED
               00248         movwf   SM_BUTTON_COLUMN, BANKED
               00249         movf    SM_BUTTON_ROW, W, BANKED
               00250         mullw   0x08
               00251         movf    PRODL, W
               00252         addwf   SM_BUTTON_COLUMN, W, BANKED     
               00253 #else
3400 5118      00254         movf    SM_BUTTON_COLUMN_CTR, W, BANKED
3402 6F14      00255         movwf   SM_BUTTON_COLUMN, BANKED
3404 0D08      00256         mullw   0x08
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3406 50F3      00257         movf    PRODL, W
3408 2515      00258         addwf   SM_BUTTON_ROW, W, BANKED
               00259 #endif
               00260 
340A 6E03      00261         movwf   MIOS_PARAMETER1
               00262         ;; call hook
340C EC0E F01A 00263         call    SM_NotifyToggle
               00264 
3410 EE01 F008 00265         lfsr    FSR0, SM_ROW0_CHANGED   ; fix FSR0 if it has been overwritten
               00266         SET_BSR SM_BUTTON_COLUMN_CTR
3414 0100          M         movlb   HIGH(reg)
3416 5118      00267         movf    SM_BUTTON_COLUMN_CTR, W, BANKED
3418 26E9      00268         addwf   FSR0L, F
341A 0012      00269         return
               00270 
               00271 
               00272 ;; --------------------------------------------------------------------------
               00273 ;;  FUNCTION: SM_NotifyToggle
               00274 ;;  DESCRIPTION: This function is NOT called by MIOS, but by the scan matrix
               00275 ;;  handler when a pin of the scan matrix has been toggled
               00276 ;;  IN: Button number in WREG and MIOS_PARAMETER1
               00277 ;;      Column in SM_BUTTON_COLUMN
               00278 ;;      Row in SM_BUTTON_ROW
               00279 ;;      Button value MIOS_PARAMETER2:
               00280 ;;        - 1 if button has been released (=5V)
               00281 ;;        - 0 if button has been pressed (=0V)
               00282 ;;  OUT:  -
               00283 ;;  ISR: no
               00284 ;; --------------------------------------------------------------------------
341C           00285 SM_NotifyToggle
               00286         
               00287         ;; MEMO by TK: here you could also branch directly to USER_DIN_NotifyToggle in order
               00288         ;; to emulate buttons which are connected on the common way to the shift registers
               00289         ;;
               00290         ;; 
               00291         ;; MEMO: A BUTTON HAS BEEN PRESSED 
               00292         ;; We branch directly to SM_C64_KEY_NotifyToggle
               00293         ;;
               00294         ;; Button number (0x00-0xff) in MIOS_PARAMETER1
               00295         ;; Button value  (0x00-0x01) in MIOS_PARAMETER2
               00296         ;; 1) WRITE BUTTON NUMBER to SM_DRIVER_KEYBOARD_KEY
               00297         ;; 2) WRITE Button value
               00298         ;; => 0 = BUTTON IS PRESSED
               00299         ;; => 1 = BUTTON IS DEPRESSED (!)
               00300         ;; TO AY_KEY_STATE
               00301         ;; BOTH USED @ sub_menu_functions.inc etc.
341C C003 F076 00302         movff   MIOS_PARAMETER1, SM_DRIVER_KEYBOARD_KEY
3420 C004 F077 00303         movff   MIOS_PARAMETER2, SM_KEYB_KEY_STATE
               00304                 
               00305                 ;; => main.asm
3424 EF3A F03F 00306                 goto SM_C64_KEY_NotifyToggle
               00307 
               00308                 
               00309 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00019 
               00020 ;; --------[start screen]--------------
               00021 #include "start_screen.inc"
               00001 ;; start_screen.inc
               00002 ;; V0.1
               00003 
3428           00004 AY_START_SCREEN
               00005 ;; SHOW MIDIBOX USER THE LCD START SCREEN
               00006                 TABLE_ADDR TEXT_AY_START_SCREEN_ROW1
3428 0EBA          M         movlw   LOW(addr)               ; store Lo Byte
342A 6EF6          M         movwf   TBLPTRL
342C 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
342E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
3430 EC9E F016 00007                 call    MIOS_LCD_PrintString
               00008 
               00009                 TABLE_ADDR TEXT_AY_START_SCREEN_ROW2
3434 0EC4          M         movlw   LOW(addr)               ; store Lo Byte
3436 6EF6          M         movwf   TBLPTRL
3438 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
343A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
343C EC9E F016 00010                 call    MIOS_LCD_PrintString
               00011 
               00012                 TABLE_ADDR TEXT_AY_START_SCREEN_ROW3
3440 0ED0          M         movlw   LOW(addr)               ; store Lo Byte
3442 6EF6          M         movwf   TBLPTRL
3444 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
3446 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
3448 EC9E F016 00013                 call    MIOS_LCD_PrintString
               00014                 
               00015                 TABLE_ADDR TEXT_AY_START_SCREEN_ROW4
344C 0EE2          M         movlw   LOW(addr)               ; store Lo Byte
344E 6EF6          M         movwf   TBLPTRL
3450 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
3452 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
3454 EC9E F016 00016                 call    MIOS_LCD_PrintString
               00017 
               00018 
               00019                 ;; request a display update
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3458 8010      00020                 bsf     DISPLAY_UPDATE_REQ, 0
               00021 
               00022 
               00023                 
               00024                         ;; WAIT THAT THE USER CAN READ THE START SCREEN
               00025                         ;; wait for exact 255 ms
345A 6AE8      00026                         clrw
345C 6E03      00027                         movwf MIOS_PARAMETER1                   
               00028 
345E           00029 AY_START_SCREEN_SHOW_TIME               
               00030                                 
               00031                         ;; wait for exact 255 ms
345E 0EFF      00032                         movlw        255
3460 ECCE F016 00033                         call        MIOS_Delay
               00034                 
               00035                 
3464 2A03      00036                         incf MIOS_PARAMETER1, F
               00037                                 
               00038                                 ;; MIDIBOX AY START SCREEN TIME 
3466 0E12      00039                                 movlw START_SCREEN_TIME ;; Adjust @ app_defines.h
3468 6203      00040                                 cpfseq  MIOS_PARAMETER1
               00041                                         
               00042                                         ;; WAIT                                                                         
               00043                                         rgoto AY_START_SCREEN_SHOW_TIME
346A D7F9          M         bra     label
               00044                                         
               00045                                         ;; EXIT START SCREEN NOW
346C 0012      00022 
               00023 
               00024 ;; ----[NOTE ON to AY TONE FREQ Hz CONVERSATION]----------------------------
               00025 #include "note_to_hz.inc"
               00001 ;; ----------------------
               00002 ;; # note_to_hz.inc     #
               00003 ;; ----------------------
               00004 
               00005 ;; THERE WAS A *Note On* MIDI Event
               00006 ;; JUMPED IN HERE FROM => note_on.inc
               00007 
               00008 
               00009 ;; --------------------------------------------------------------------------------------
               00010 ;; BACKGROUND: MIDIBox AY 3 8912 MIDI to Hz Chart (MIDI Note On Value to Hz conversation)
               00011 ;; fT = AY Chip Tone frequency [Frequency (Hz)]
               00012 ;; fCLOCK = input clock frequency [2Mhz Crystal = 2.000.000 Hz]
               00013 ;; TP = Decimal equivalent of the Tone Period bit 0 to 11 (12bit Coarse Tune + Fine Tune)
               00014 ;; MIDI Note 0: TP = (2.000.000Hz) / (16x(8,1757989156 Hz))
               00015 ;; ...
               00016 ;; See => http://www.midibox.org/dokuwiki/doku.php?id=mb_ay_3_8912_-_midi_to_hz_chart
               00017 ;; --------------------------------------------------------------------------------------
               00018 
346E           00019 MIDI_EVNT_IS_9x_NOTE_ON_WRITE_TUNE_VALUES
               00020         ;; FUNCTION:
               00021         ;; WRITE THE TUNE VALUES
               00022         ;; COASE TUNE TO MIOS_PARAMETER1
               00023         ;; FINE  TUNE TO MIOS_PARAMETER2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00024       
               00025       ;; FIRST:
               00026       ;; WRITE THE *NOTE ON VALUE* TO W REG
346E 5012      00027       movf     MIDI_EVNT1, W
               00028                 ; Determine the Table Address
               00029                 ; for the corresponding *Note On MIDI Event*
               00030                 ; // See => Macro Definitions (macros.h)
               00031                 ; // MACRO: TABLE_ADDR_MUL_W  addr (tablename), multiplicator
               00032                 TABLE_ADDR_MUL_W TABLE_NOTE_TO_HZ, 2
3470 0D02          M         mullw   multiplicator
3472 0E8E          M         movlw   LOW(addr)
3474 24F3          M         addwf   PRODL, W
3476 6EF6          M         movwf   TBLPTRL
3478 0E34          M         movlw   HIGH(addr)
347A 20F4          M         addwfc  PRODH, W
347C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         clrf    TBLPTRU
                   M         movlw   UPPER(addr)
                   M         addwfc  TBLPTRU, F
                   M #endif
               00033                          
               00034                         ; Table Read with post-increment
347E 0009      00035                         tblrd*+ 
               00036                         ; WRITE THE *COARSE* VALUE
               00037                         ; transfer table entry (coarse) to MIOS_PARAMETER1
3480 CFF5 F003 00038                         movff    TABLAT, MIOS_PARAMETER1
               00039                         
               00040                         ; Table Read with post-increment
3484 0009      00041                         tblrd*+
               00042                         ; WRITE THE *FINE* VALUE
               00043                         ; transfer table entry (fine) to MIOS_PARAMETER2
3486 CFF5 F004 00044                         movff    TABLAT, MIOS_PARAMETER2
               00045 
               00046                                 ;; NOW WE STORED THE [MIDI NOTE ON TO AY CHIP Hz VALUES] 
               00047                                 ;; IN MIOS_PARAMETER1 (coarse) and MIOS_PARAMETER2 (fine)
               00048                                 ;; GO ON WITH *NOTE ON* PROCESSING
               00049                                 ;; NEXT STEP => JUMP TO note_on_pipeline_a.inc
348A EFCD F036 00050                                 goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_TONE_A_B_C
               00051  
               00052 
               00053 
               00054 
               00055 ;; -------------[MIDIBox AY 3 8912 MIDI to Hz TABLE]-------------------------
               00056 
               00057 ;; -----------------------------------------------------------
               00058 ;; MIDI NOTE ON (0 to 127) to 12bit AY 3 8912 REG CONVERSATION 
               00059 ;; VALUES: COARSE REG (4bit), FINE REG (8bit)
               00060 ;; FORMAT: db (COARSE REG VALUE), (FINE REG VALUE) 
               00061 ;; -----------------------------------------------------------
               00062 
348E           00063 TABLE_NOTE_TO_HZ
348E D20F      00064    db 0x0F,0xD2 ;; Note On Value = 0 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
3490 D20F      00065    db 0x0F,0xD2 ;; Note On Value = 1 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3492 D20F      00066    db 0x0F,0xD2 ;; Note On Value = 2 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
3494 D20F      00067    db 0x0F,0xD2 ;; Note On Value = 3 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
3496 D20F      00068    db 0x0F,0xD2 ;; Note On Value = 4 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
3498 D20F      00069    db 0x0F,0xD2 ;; Note On Value = 5 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
349A D20F      00070    db 0x0F,0xD2 ;; Note On Value = 6 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
349C D20F      00071    db 0x0F,0xD2 ;; Note On Value = 7 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
349E D20F      00072    db 0x0F,0xD2 ;; Note On Value = 8 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34A0 D20F      00073    db 0x0F,0xD2 ;; Note On Value = 9 - INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34A2 D20F      00074    db 0x0F,0xD2 ;; Note On Value = 10- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34A4 D20F      00075    db 0x0F,0xD2 ;; Note On Value = 11- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34A6 D20F      00076    db 0x0F,0xD2 ;; Note On Value = 12- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34A8 D20F      00077    db 0x0F,0xD2 ;; Note On Value = 13- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34AA D20F      00078    db 0x0F,0xD2 ;; Note On Value = 14- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34AC D20F      00079    db 0x0F,0xD2 ;; Note On Value = 15- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34AE D20F      00080    db 0x0F,0xD2 ;; Note On Value = 16- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34B0 D20F      00081    db 0x0F,0xD2 ;; Note On Value = 17- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34B2 D20F      00082    db 0x0F,0xD2 ;; Note On Value = 18- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34B4 D20F      00083    db 0x0F,0xD2 ;; Note On Value = 19- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34B6 D20F      00084    db 0x0F,0xD2 ;; Note On Value = 20- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34B8 D20F      00085    db 0x0F,0xD2 ;; Note On Value = 21- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34BA D20F      00086    db 0x0F,0xD2 ;; Note On Value = 22- INVALID 4 BIT COARSE TUNE (HEX FF-10) - Note On Value = 23 - B1 (substitution)
34BC D20F      00087    db 0x0F,0xD2 ;; Note On Value = 23 - B1
34BE EE0E      00088    db 0x0E,0xEE ;; Note On Value = 24 - C1
34C0 180E      00089    db 0x0E,0x18 ;; Note On Value = 25 - Db
34C2 4D0D      00090    db 0x0D,0x4D ;; Note On Value = 26 - D1
34C4 8E0C      00091    db 0x0C,0x8E ;; Note On Value = 27 - Dis1
34C6 DA0B      00092    db 0x0B,0xDA ;; Note On Value = 28 - E1
34C8 2F0B      00093    db 0x0B,0x2F ;; Note On Value = 29 - F1
34CA 8F0A      00094    db 0x0A,0x8F ;; Note On Value = 30 - Fis1
34CC F709      00095    db 0x09,0xF7 ;; Note On Value = 31 - G1
34CE 6809      00096    db 0x09,0x68 ;; etc.
34D0 E108      00097    db 0x08,0xE1
34D2 6108      00098    db 0x08,0x61
34D4 E907      00099    db 0x07,0xE9
34D6 7707      00100    db 0x07,0x77
34D8 0C07      00101    db 0x07,0x0C
34DA A706      00102    db 0x06,0xA7
34DC 4706      00103    db 0x06,0x47
34DE ED05      00104    db 0x05,0xED
34E0 9805      00105    db 0x05,0x98
34E2 4705      00106    db 0x05,0x47
34E4 FC04      00107    db 0x04,0xFC
34E6 B404      00108    db 0x04,0xB4
34E8 7004      00109    db 0x04,0x70
34EA 3104      00110    db 0x04,0x31
34EC F403      00111    db 0x03,0xF4
34EE BC03      00112    db 0x03,0xBC
34F0 8603      00113    db 0x03,0x86
34F2 5303      00114    db 0x03,0x53
34F4 2403      00115    db 0x03,0x24
34F6 F602      00116    db 0x02,0xF6
34F8 CC02      00117    db 0x02,0xCC
34FA A402      00118    db 0x02,0xA4
34FC 7E02      00119    db 0x02,0x7E
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
34FE 5A02      00120    db 0x02,0x5A
3500 3802      00121    db 0x02,0x38
3502 1802      00122    db 0x02,0x18
3504 FA01      00123    db 0x01,0xFA
3506 DE01      00124    db 0x01,0xDE
3508 C301      00125    db 0x01,0xC3
350A AA01      00126    db 0x01,0xAA
350C 9201      00127    db 0x01,0x92 ;; Note On Value = 63 - Eb
350E 7B01      00128    db 0x01,0x7B ;; Note On Value = 64 - E
3510 6601      00129    db 0x01,0x66
3512 5201      00130    db 0x01,0x52
3514 3F01      00131    db 0x01,0x3F
3516 2D01      00132    db 0x01,0x2D
3518 1C01      00133    db 0x01,0x1C
351A 0C01      00134    db 0x01,0x0C
351C FD00      00135    db 0x00,0xFD
351E EF00      00136    db 0x00,0xEF
3520 E100      00137    db 0x00,0xE1
3522 D500      00138    db 0x00,0xD5
3524 C900      00139    db 0x00,0xC9
3526 BE00      00140    db 0x00,0xBE
3528 B300      00141    db 0x00,0xB3
352A A900      00142    db 0x00,0xA9
352C 9F00      00143    db 0x00,0x9F
352E 9600      00144    db 0x00,0x96
3530 8E00      00145    db 0x00,0x8E
3532 8600      00146    db 0x00,0x86
3534 7F00      00147    db 0x00,0x7F
3536 7800      00148    db 0x00,0x78
3538 7100      00149    db 0x00,0x71
353A 6A00      00150    db 0x00,0x6A
353C 6400      00151    db 0x00,0x64
353E 5F00      00152    db 0x00,0x5F
3540 5900      00153    db 0x00,0x59
3542 5400      00154    db 0x00,0x54
3544 5000      00155    db 0x00,0x50
3546 4B00      00156    db 0x00,0x4B
3548 4700      00157    db 0x00,0x47
354A 4300      00158    db 0x00,0x43
354C 3F00      00159    db 0x00,0x3F
354E 3C00      00160    db 0x00,0x3C
3550 3800      00161    db 0x00,0x38
3552 3500      00162    db 0x00,0x35
3554 3200      00163    db 0x00,0x32
3556 2F00      00164    db 0x00,0x2F
3558 2D00      00165    db 0x00,0x2D
355A 2A00      00166    db 0x00,0x2A
355C 2800      00167    db 0x00,0x28
355E 2600      00168    db 0x00,0x26
3560 2400      00169    db 0x00,0x24
3562 2200      00170    db 0x00,0x22
3564 2000      00171    db 0x00,0x20
3566 1E00      00172    db 0x00,0x1E
3568 1C00      00173    db 0x00,0x1C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
356A 1B00      00174    db 0x00,0x1B
356C 1900      00175    db 0x00,0x19
356E 1800      00176    db 0x00,0x18
3570 1600      00177    db 0x00,0x16
3572 1500      00178    db 0x00,0x15
3574 1400      00179    db 0x00,0x14
3576 1300      00180    db 0x00,0x13
3578 1200      00181    db 0x00,0x12
357A 1100      00182    db 0x00,0x11
357C 1000      00183    db 0x00,0x10
357E 0F00      00184    db 0x00,0x0F
3580 0E00      00185    db 0x00,0x0E
3582 0D00      00186    db 0x00,0x0D
3584 0D00      00187    db 0x00,0x0D
3586 0C00      00188    db 0x00,0x0C
3588 0B00      00189    db 0x00,0x0B
358A 0B00      00190    db 0x00,0x0B
358C 0A00      00191    db 0x00,0x0A ;; NOTE ON value = 127 - G
               00192 
               00193 
               00194 ;; -----------------------[end]------------------------------
               00195 
               00196 
               00026 
               00027 ;; ----[APPLICATION VARIABLES, ETC. INI]------------------------------------------
               00028 #include "midibox_ay_ini.inc"
               00001 ;; midibox_ay_ini.inc
               00002 ;; function: initialisation of application variables etc. 
               00003 
358E           00004 INIT_VARIABLES
               00005 ;; JUMPED IN HERE FROM USER_Init (main.asm)
               00006 
               00007 ;; ----------------------------------------------------------
               00008 ;;  SETTING THE AY 3 8912 (SHADOW) REGISTERS AFTER STARTUP
               00009 ;;  Initialize the AY REGISTERS 0 to 14
               00010 ;;  AND SETUP AY APPLICATION WORKING REGISTER
               00011 ;;  Initialize the AY DOUT LED's CS
               00012 ;; ----------------------------------------------------------
               00013 
               00014 ;; -----[SET AY 3 8912 REGISTERS TO STARTUP DEFAULT VALUES]--------- 
               00015 ;; -----------------------------------------------------------------
               00016 ; AY ADRESS     => AY_REG_ADDRESS [8BIT, DEC. 0-16, HEX 0x00 - 0x10]
               00017 ; AY DATA       => AY_REG_DATA  [8BIT, DEC. 0-255, HEX 0x00 - 0xFF]
               00018         
               00019         ;; AY REG 0 - TONE PERIOD FINE CH A [8BIT]
358E 0E00      00020         movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE; ADRESS => AY REGISTER
3590 6E39      00021         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00022         ;; DEFINE AY REG DEFAULT VALUE HERE
3592 0E40      00023         movlw INI_REG0_FINE_TUNE_A      ; 8 BIT DATA FOR AY REG 0  
3594 6E64      00024         movwf AY_R0_CH_A_FINE_TUNE      ; WRITE => AY SHADOW REGISTER
3596 6E3A      00025         movwf AY_REG_DATA               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00026         
3598 ECAA F01B 00027                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE   
               00028 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00029 
               00030         
               00031         ;; AY REG 1 - TONE PERIOD COASE CH A [4BIT]
359C 0E01      00032         movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE; ADRESS => AY REGISTER
359E 6E39      00033         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00034         ;; DEFINE AY REG DEFAULT VALUE HERE
35A0 0E01      00035         movlw INI_REG1_COARSE_TUNE_A    ; THE 4BIT VALUE OF THE AY REG DATA [0x00 - 0x0F]
35A2 6E65      00036         movwf AY_R1_CH_A_COARSE_TUNE    ; WRITE => AY SHADOW REGISTER
35A4 6E3A      00037         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00038         
35A6 ECAA F01B 00039                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00040 
               00041 
               00042         ;; AY REG 2 - TONE PERIOD FINE CH B [8BIT]
35AA 0E02      00043         movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE; ADRESS => AY REGISTER
35AC 6E39      00044         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00045         ;; DEFINE AY REG DEFAULT VALUE HERE
35AE 0E42      00046         movlw INI_REG2_FINE_TUNE_B      ; 8 BIT DATA
35B0 6E66      00047         movwf AY_R2_CH_B_FINE_TUNE      ; WRITE => AY SHADOW REGISTER
35B2 6E3A      00048         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00049         
35B4 ECAA F01B 00050                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE   
               00051 
               00052                 
               00053         
               00054         ;; AY REG 3 - TONE PERIOD COASE CH B [4BIT]
35B8 0E03      00055         movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE; ADRESS => AY REGISTER
35BA 6E39      00056         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00057         ;; DEFINE AY REG DEFAULT VALUE HERE
35BC 0E09      00058         movlw INI_REG3_COARSE_TUNE_B    ; 4 BIT DATA
35BE 6E67      00059         movwf AY_R3_CH_B_COARSE_TUNE    ; WRITE => AY SHADOW REGISTER
35C0 6E3A      00060         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00061         
35C2 ECAA F01B 00062                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00063 
               00064 
               00065         ;; AY REG 4 - TONE PERIOD FINE CH C [8BIT]
35C6 0E04      00066         movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE; ADRESS => AY REGISTER
35C8 6E39      00067         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00068         ;; DEFINE AY REG DEFAULT VALUE HERE
35CA 0E44      00069         movlw INI_REG4_FINE_TUNE_C      ; 8 BIT DATA
35CC 6E68      00070         movwf AY_R4_CH_C_FINE_TUNE      ; WRITE => AY SHADOW REGISTER
35CE 6E3A      00071         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00072         
35D0 ECAA F01B 00073                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE   
               00074                 
               00075         
               00076         
               00077         ;; AY REG 5 - TONE PERIOD COASE CH C [4BIT]
35D4 0E05      00078         movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE; ADRESS => AY REGISTER
35D6 6E39      00079         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00080         ;; DEFINE AY REG DEFAULT VALUE HERE
35D8 0E02      00081         movlw INI_REG5_COARSE_TUNE_C    ; 4 BIT DATA
35DA 6E69      00082         movwf AY_R5_CH_C_COARSE_TUNE    ; WRITE => AY SHADOW REGISTER
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
35DC 6E3A      00083         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00084         
35DE ECAA F01B 00085                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00086                 
               00087 
               00088         ;; AY REG 6 - NOISE PERIOD [5BIT]
35E2 0E06      00089         movlw AY_CHIP_ADR_06_NOISE_PERIOD; ADRESS => AY REGISTER
35E4 6E39      00090         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00091         ;; DEFINE AY REG DEFAULT VALUE HERE
35E6 0E04      00092         movlw INI_REG6_NOISE_PERIOD     ; [0-31] 5 BIT DATA [BIN xxx1 1111]
35E8 6E6A      00093         movwf AY_R6_NOISE_PERIOD        ; WRITE => AY SHADOW REGISTER
35EA 6E3A      00094         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00095         
35EC ECAA F01B 00096                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00097                 
               00098 
               00099 
               00100         ;; AY REG 7
               00101         ;; TONE ABC ON/OFF
               00102         ;; MIX NOISE TO TONE ABC 
               00103         ;; [IO PORT A (+B): NOT IN USE YET] 
35F0 0E07      00104         movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF; REG 7 => AY ENABLE IOA, TONE CH ABC, NOISE ABC
               00105                                         ; SEE NOTES @ APP_DEFINES.H => AY_R7_ENABLE_ABC_NOISE_IO
35F2 6E39      00106         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00107 
35F4 0EF8      00108         movlw INI_REG7_TONE_ABC_NOISE_ABC_IO_AB                 
35F6 6E6B      00109         movwf AY_R7_ENABLE_ABC_NOISE_IO ; WRITE INI VALUE TO => AY SHADOW REGISTER 7
               00110 
               00111                 ;; TONE ABC is ON but there is NO MIDI NOTE On EVENT YET SO:
               00112                 ;; MIDIFILTER ALL OFF
35F8 0E3F      00113                 movlw MIDI_FILTER_ALL_OFF               ; BIN 00111111
               00114                 ;; OR AY SHADOW REGISTER7 with MIDI FILTER VALUE [ALL OFF]
35FA 106B      00115                 iorwf AY_R7_ENABLE_ABC_NOISE_IO, W      ; BIN 11111000 (AY_R7_ENABLE_ABC_NOISE_IO)
               00116                                                         ; BIN 00111111  
               00117                                                         ; =   11111111 ([TONE ABC OFF / NOISE ABC OFF]) 
               00118         ;; WRITE REGISTER7 [with MIDI FILTER] to AY REGISTER7
35FC 6E3A      00119         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00120         
35FE ECAA F01B 00121                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00122                 
               00123 
               00124         ;; AY REG 8 - THE AMPLITUDE OF THE CH. A SIGNAL
3602 0E08      00125         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF; REG 8 
3604 6E39      00126         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00127         ;; DEFINE AY REG DEFAULT VALUE HERE
3606 0E0C      00128         movlw INI_REG8_VOLUME_A_ENVELOPE_ON_OFF
3608 6E6C      00129         movwf AY_R8_CH_A_AMPLITUDE      ; WRITE => AY SHADOW REGISTER 8
360A 6E3A      00130         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00131         
360C ECAA F01B 00132                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00133 
               00134 
               00135         ;; AY REG 9 - THE AMPLITUDE OF THE CH. B SIGNAL
3610 0E09      00136         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF; REG 9 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3612 6E39      00137         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00138         ;; DEFINE AY REG DEFAULT VALUE HERE
3614 0E0C      00139         movlw INI_REG9_VOLUME_B_ENVELOPE_ON_OFF
3616 6E6D      00140         movwf AY_R9_CH_B_AMPLITUDE      ; WRITE => AY SHADOW REGISTER 9
3618 6E3A      00141         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00142         
361A ECAA F01B 00143                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00144 
               00145 
               00146         ;; AY REG 10 - THE AMPLITUDE OF THE CH. C SIGNAL
361E 0E0A      00147         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF; REG 10 
3620 6E39      00148         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00149         ;; DEFINE AY REG DEFAULT VALUE HERE
3622 0E0C      00150         movlw INI_REG10_VOLUME_C_ENVELOPE_ON_OFF
3624 6E6E      00151         movwf AY_R10_CH_C_AMPLITUDE     ; WRITE => AY SHADOW REGISTER 10
3626 6E3A      00152         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00153         
3628 ECAA F01B 00154                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00155 
               00156 
               00157         ;; AY REG 11 - FREQUENCY OF THE ENVELOPE (FINE)
362C 0E0B      00158         movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE; REG 11
362E 6E39      00159         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00160         ;; DEFINE AY REG DEFAULT VALUE HERE
3630 0E0F      00161         movlw INI_REG11_ENVELOPE_FINE
3632 6E6F      00162         movwf AY_R11_ENV_PERIOD_FINE    ; WRITE => AY SHADOW REGISTER 11
3634 6E3A      00163         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00164         
3636 ECAA F01B 00165                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00166 
               00167 
               00168 
               00169         ;; AY REG 12 - FREQUENCY OF THE ENVELOPE (COASE)
363A 0E0C      00170         movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE; REG 12
363C 6E39      00171         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00172         ;; DEFINE AY REG DEFAULT VALUE HERE
363E 0E0F      00173         movlw INI_REG12_ENVELOPE_COARSE
3640 6E70      00174         movwf AY_R12_ENV_PERIOD_COARSE  ; WRITE => AY SHADOW REGISTER 12
3642 6E3A      00175         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00176         
3644 ECAA F01B 00177                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00178         
               00179         
               00180         ;; AY REG 13 - ENVELOPE SHAPE (+ENVELOPE CYCLE)
               00181         ;; IF "AMPLITUDE MODE" *BIT 5* IS SET @ TONE ABC
               00182         ;; FOR DETAILS SEE AY-3-8912 DATASHEET
3648 0E0D      00183         movlw AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE; REG 13
364A 6E39      00184         movwf AY_REG_ADDRESS    ; ADDRESS FOR => AY_SR_Write
               00185         ;; DEFINE AY REG DEFAULT VALUE HERE
364C 0E01      00186         movlw INI_REG13_ENVELOPE_SHAPE
364E 6E71      00187         movwf AY_R13_ENV_SHAPE_CYCLE    ; WRITE => AY SHADOW REGISTER 13
3650 6E3A      00188         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00189         
3652 ECAA F01B 00190                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00191 
               00192         
               00193         ;; AY REG 14 - WRITE BIN '10101010' TO AY PORT A
3656 0E0E      00194         movlw AY_CHIP_ADR_14_IO_PORT_A_DATA; REG 14 => AY PORT A ADRESS
3658 6E39      00195         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00196         ;; DEFINE AY REG DEFAULT VALUE HERE
365A 0EAA      00197         movlw INI_REG14_IO_A            ; WRITE BIN '10101010' TO AY PORT A
365C 6E72      00198         movwf AY_R14_AY_PORTA_DATA      ; WRITE => AY SHADOW REGISTER 14 
365E 6E3A      00199         movwf AY_REG_DATA               ; FOR => AY_SR_Write
               00200         
3660 ECAA F01B 00201                 call LABEL_AY_SR_Write  
               00202 
               00203 
               00204 ;; --------------------------------------------------------------------------
               00205 ;;  SET ENVELOPE SHAPE
               00206 ;;  Initialize the AY DOUT LED's
               00207 ;; --------------------------------------------------------------------------
               00208         
3664 EC73 F03E 00209         call LED_ToneA_on
3668 EC7B F03E 00210         call LED_ToneB_on
366C EC83 F03E 00211         call LED_ToneC_on
               00212         
               00213         ;; ENVELOPE SHAPE       
3670 0E01      00214         movlw INI_REG13_ENVELOPE_SHAPE
3672 6E7A      00215         movwf ENV_SHAPE_0_15_to_1_8_TRANSLATOR
3674 ECD3 F03E 00216         call LED_Envelope_Shape_1_on
               00217         
               00218 
               00219 ;; --------------------------------------------------------------------------
               00220 ;;  Initialize the AY WORKING REGISTER
               00221 ;; --------------------------------------------------------------------------
               00222         
               00223         ;; THE MAIN MENU / SUB MENU SWITCH
               00224         ;; 0 = MAIN MENU (INITIAL)
               00225         ;; (1 = SUB MENU )
3678 0E00      00226         movlw   MAIN_MENU_ON_VIA_0
367A 6E73      00227         movwf   SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00228 
               00229         ;; THE MAIN MENU SWITCH
               00230         ;; INITIAL MAIN MENU = 0
367C 0E00      00231         movlw   INI_START_UP_MAIN_MENU
367E 6E74      00232         movwf   CURRENT_MAIN_MENU
               00233         
               00234         ;; THE SUB MENU SWITCH
               00235         ;; INITIAL SUB MENU SWITCH = 0
3680 0E00      00236         movlw   INI_SUB_MENU 
3682 6E75      00237         movwf   AY_SUB_MENUE_KEY_SWITCH
               00238 
               00239         ;; INITAL VALUES LCD MAIN MENU COURSER POSITION
3684 0E01      00240         movlw   INI_COURSER_POS 
3686 6E03      00241         movwf   MIOS_PARAMETER1
3688 C003 F200 00242         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
368C C003 F201 00243         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
3690 C003 F202 00244         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3694 C003 F203 00245         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE
3698 C003 F204 00246         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
369C C003 F205 00247         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG
36A0 C003 F206 00248         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
36A4 C003 F207 00249         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_FX
               00250         
               00251         
36A8 0E80      00252         movlw   INI_TUNE_FINE_USER
36AA 6E23      00253         movwf   AY_TONE_A_TUNE_FINE_USER 
36AC 6E24      00254         movwf   AY_TONE_B_TUNE_FINE_USER 
36AE 6E25      00255         movwf   AY_TONE_C_TUNE_FINE_USER 
               00256         
36B0 0E07      00257         movlw   INI_TUNE_COARSE_USER
36B2 6E26      00258         movwf   AY_TONE_A_TUNE_COARSE_USER
36B4 6E27      00259         movwf   AY_TONE_B_TUNE_COARSE_USER
36B6 6E28      00260         movwf   AY_TONE_C_TUNE_COARSE_USER
               00261         
36B8 0E00      00262         movlw   INI_TONE_A_MIDI_CHANNEL_USER
36BA 6E30      00263         movwf   AY_TONE_A_MIDI_CHANNEL_USER
               00264         
36BC 0E01      00265         movlw   INI_TONE_B_MIDI_CHANNEL_USER
36BE 6E31      00266         movwf   AY_TONE_B_MIDI_CHANNEL_USER
               00267         
36C0 0E02      00268         movlw   INI_TONE_C_MIDI_CHANNEL_USER
36C2 6E32      00269         movwf   AY_TONE_C_MIDI_CHANNEL_USER
               00270 
               00271         ;; MIDI SWITCH ABC TONE/NOISE ON OF
36C4 0E3F      00272         movlw   INI_MIDI_ALL_OFF        
               00273                         ; INITIAL VALUE = BIN 00 111 111
               00274                         ; AY REG 07     =     IO CBA CBA
               00275                         ;               =     BA
               00276                         ;               =        NOISE
               00277                         ;               =            TONE
36C6 6E22      00278         movwf   AY_TONE_ABC_MIDI_ON_OFF
               00279         
               00280         ;; THE USER SWITCH FOR TONE/NOISE ABC ON/OFF
36C8 0EF8      00281         movlw INI_USER_TONE_ABC_NOISE_ABC_ON_OFF
36CA 6E20      00282         movwf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH      
               00283         
               00284         ;; ALL SPECIAL KEYS OFF
36CC 6A79      00285         clrf AY_KEYB_SPECIAL_KEY_TOGGLE
               00286 
               00287         ;; VELOCITY TO TONE A C B AND NOISE RATE ON/OFF
36CE 0E07      00288         movlw INI_VELOCITY_TO_ACB_NOISE_PERIOD
36D0 6E33      00289         movwf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF
               00290         
               00291         ;; => midi_evnt_pipeline.inc
36D2 6A34      00292         clrf AY_MIDI_VELOCITY_TO_VOLUME
36D4 6A35      00293         clrf AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00294         
               00295         
               00296         ;; midi_controller.inc
               00297         ;; CC HAndling
36D6 6A38      00298         clrf MIDI_EVENT_CHANGE_FLAG
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00299         
               00300         ;; -----------[PATCH]----------------------------------
               00301         ;; MIDIBOX AY BANKSTICK = 1 (INTERNAL: BANKSTICK 0)
36D8 0E00      00302         movlw       0x00
36DA ECEE F016 00303         call        MIOS_BANKSTICK_CtrlSet  ;; Select BankStick1
               00304         
               00305         ;; patch_name_writing.inc
               00306         ;; WRITE "........" for PATCHNAME @ LCD
               00307         ;; 8x PATCH KEY ASC
36DE 0E2E      00308         movlw   "."
36E0 6E03      00309         movwf   MIOS_PARAMETER1
36E2 C003 F303 00310         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_0
36E6 C003 F304 00311         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_1
36EA C003 F305 00312         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_2
36EE C003 F306 00313         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_3
36F2 C003 F307 00314         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_4
36F6 C003 F308 00315         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_5
36FA C003 F309 00316         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_6
36FE C003 F30A 00317         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_7
               00318         
               00319         ;; POS1 PATCH NAME [POS1=0,...POS8=7]
3702 6A03      00320         clrf    MIOS_PARAMETER1
3704 C003 F301 00321         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_POS
               00322         
               00323         ;; PATCH NUMBER, STAE, ETC.
3708 6A3E      00324         clrf    CURREND_PATCH_NR        ;; INITIAL PATCH NUMBER = 0 = INT (PIC EEPROM)
370A 6A7D      00325         clrf    PATCH_MENU_STATE_FLAGS  ;; See PATCH_MENU_STATE_FLAGS @ CONST DEF       
370C 6A7E      00326         clrf    FORMAT_BANKSTICK_CYCLE_COUNTER  ;; See patch_write.inc  
               00327         
               00328         ;; USER: FX ABC off (See MAIN MENU 3 / Mixer)
               00329         ;; BIT0 = A (SET = ON / CLR = OFF)
               00330         ;; BIT1 = B (SET = ON / CLR = OFF)
               00331         ;; BIT2 = C (SET = ON / CLR = OFF)
370E 0E00      00332         movlw INI_FX_USER_ON_OFF_ABC
3710 6E4D      00333         movwf FX_USER_ON_OFF_ABC
               00334         
               00335         ;; RESET Fx 
3712 6A4E      00336         clrf Fx_MIDI_NOTE_ON_OR_OFF
3714 6A53      00337         clrf FX_TIMER
3716 6A50      00338         clrf FX_FUNCTION_CURREND
3718 6A51      00339         clrf FX_DATA_CURREND
371A 6A52      00340         clrf FX_TIME_PRE_EXECUTION_CURREND
371C 6A4F      00341         clrf FX_POS_CURREND
371E 6A56      00342         clrf FX_NOP_ON_OFF
3720 6A61      00343         clrf FX_POS_SESSION_CURREND     
3722 6A62      00344         clrf FX_FUNCTION_SESSION_CURREND                
3724 6A63      00345         clrf FX_TIME_PRE_EXECUTION_SESSION_CURREND
               00346         
               00347         ;; C64 KEYS (user_tick_key_repeat.inc)
3726 6A79      00348         clrf    AY_KEYB_SPECIAL_KEY_TOGGLE
3728 8279      00349         bsf     AY_KEYB_SPECIAL_KEY_TOGGLE, FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1 ;; = SET (DO NOT CHANGE)
372A 6A3B      00350         clrf    C64_KEY_AUTO_REPEAT_GENERAL_COUNTER
372C 6A3D      00351         clrf    KEY_AUTO_REPEAT_COUNTER
               00352         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00353         
               00354                 ;; exit here
372E 0012      00355                 return
               00356 
               00357         
               00358 ;; ------------------------------------------------------------------------------
               00359 ;; ------------------------------------------------------------------------------
               00360 
               00361 
3730           00362 INIT_MIDI_CONF
               00363         ;; SET the MIDIbox AY Merger ON or OFF
               00364         ;; MEANS [MIDI DATA:IN] => [MIDI DATA:OUT]
3730 0E01      00365         movlw       INI_MIOS_MIDI_MERGER_ON_OFF
3732 EC14 F016 00366         call        MIOS_MIDI_MergerSet
               00367                 ;; exit here
3736 0012      00368                 return
               00369 
               00370 ;; ------------------------------------------------------------------------------
               00371 
3738           00372 INIT_TIMER0
               00373 ;; JUMPED IN HERE FROM USER_Init
               00374 
               00375          ;; TIMER0 is used as a MIDIBox AY Fx timer
               00376          ;; initialize (reset) timer0
               00377          
               00378          ;; ensure that timer0 interrupt not enabled!
               00379          ;; because the PIC based MIOS doesn't allow to add interrupt handlers 
3738 9AF2      00380         bcf     INTCON, T0IE
               00381         
               00382         ;; reset timer0 overflow (interrupt flag)
373A 94F2      00383         bcf     INTCON, T0IF
               00384 
               00385         ;; ====[timer0 MEMO]======================================================
               00386         ;;  Bit 0 – 2     Timer prescale
               00387         ;;  Bit 3         Timer prescale assignment.  0=use prescal, 1=no prescale
               00388         ;;  Bit 4         Timer edge source (used only when counting)
               00389         ;;  Bit 5         Timer Source.  0=Internal, 1=Transitions on IO port 17
               00390         ;;  Bit 6         Timer mode.  0=16 bit mode, 1=8 bit mode
               00391         ;;  Bit 7         Timer On/Off.  0=Off, 1=On
               00392         ;;  ======================================================================
               00393         ;; -----------------------------------------
               00394         ;; SETUP timer0 for for MIDIBox AY Fx Option 
               00395         ;; ------------------------------------------
               00396         ;; set to 16bit counter (BIT 6 = Clear), 
               00397         ;; use internal clock source (BIT 5 = Clear), 
               00398         ;; Ext. Clck adjust (Bit 4 = Clear) [nicht relevant, da int. Tacktquelle]
               00399         ;; PSA (Vorteiler) BIT3 (= clear | Clear=on [slower] / SET=off [faster]) 
               00400         ;; timer0 Prescaler [BIT 2,1,0]:
               00401         ;; 000 = timer0/2 -> fast (this is what we need here :)
               00402         ;; 001 = timer0/4
               00403         ;; 010 = timer0/8
               00404         ;; 011 = timer0/16
               00405         ;; 100 = timer0/32
               00406         ;; 101 = timer0/64
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00407         ;; 110 = timer0/128
               00408         ;; 111 = timer0/256 - slow
373C 0E00      00409         movlw   B'00000000'
373E 6ED5      00410         movwf   T0CON
               00411         
               00412         ;; start timer0
3740 8ED5      00413         bsf     T0CON, TMR0ON           
               00414 
               00415                 ;; EXIT HERE
3742 0012      00416                 return
               00417 
               00418 
3744           00419 INIT_USER_Timer
               00420 ;; JUMPED IN HERE FROM USER_Init
               00421 
               00422         ;; initialize the USER_Timer
               00423         ;; #########################
               00424         ;; The resolution of the timer is 100nS with Prescaler 1:1, 
               00425         ;; 200nS with 1:2, 
               00426         ;; 400nS with 1:4, 
               00427         ;; 800nS with 1:8. 
               00428         ;; The period (number of clocks) is specified as 16 bit value.
               00429         ;; prescaler value in WREG:
               00430         ;; 0x00: 1:1
               00431         ;; 0x01: 1:2
               00432         ;; 0x02: 1:4
               00433         ;; 0x03: 1:8
               00434         ;; number of ticks (low-byte) in MIOS_PARAMETER1
               00435         ;; number of ticks (high-byte) in MIOS_PARAMETER2
               00436 
               00437         ;; we want to setup the timer with a frequency of 500 Hz = 2 mS
               00438         ;; prescaler 1:1 should be used
               00439         ;; calculate the required number of clocks for this period:
               00440         ;; clocks = period / 100 nS = 2 mS / 100 nS = 20000
               00441         ;; calculate low and high byte:
               00442         ;;    low byte  = period & 0xff
               00443         ;;    high byte = period >> 8
               00444         ;;    therefore:
3744 0E20      00445         movlw        20000 & 0xff
3746 6E03      00446         movwf        MIOS_PARAMETER1
3748 0E4E      00447         movlw        20000 >> 8
374A 6E04      00448         movwf        MIOS_PARAMETER2
374C 0E00      00449         movlw        0x00
374E ECBC F016 00450         call  MIOS_TIMER_Init
               00451 
               00452         ;; now the USER_Timer function is called every 2 mS!
               00453                 
               00454                 ;; EXIT HERE
3752 0012      00029 
               00030 ;; ---[simplifies the handling with MIDI events ]---
               00031 ;; NOTE: NOT USED YET
               00032 ;; #include "midi_evnt.inc"
               00033 
               00034 ;; ----[INTERCONNECTION TO THE AY CHIP]----
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00035 #include "ay_sr.inc"
               00001 ; ay_sr.inc - Shift Register Service Routine
               00002 ;
               00003 ; FUNCTION:
               00004 ; CORE -> AY Chip SERIAL COMMUNICATION
               00005 ; this is the {MBHP CORE writes a byte data to the AY 3 8912 SOUND CHIP BOARD} ROUTINE 
               00006 ;
               00007 ; AY_SR.INC FUNCTIONS IN DETAIL:
               00008 ; 1) AY_SR_Write:
               00009 ;       a) AY ADRESS    => AY_REG_ADDRESS  [8BIT, DEC. 0-16, HEX 0x00-0x10]
               00010 ;       b) AY DATA      => AY_REG_DATA     [8BIT, DEC. 0-255, HEX 0x00-0xFF]
               00011 ;
               00012 ;  
               00013 ; ----------------[MEMO: 74HC595 - SHIFT REGISTER]-----------------------
               00014 ; DEFINITION of the PINS which are connected to the AY MODULE /
               00015 ; TTL 74HC595: 8-BIT SERIAL-IN REGISTER WITH 8-BIT PARALLEL-OUTPUT LATCH
               00016 ; SERIAL CLOCK:   SCLK (SCK ==> shift register clock input (PIN 11))
               00017 ; REGISTER CLOCK: RCLK (RCK ==> storage register clock input (PIN 12))
               00018 ; SERIAL DATA:    SER  (SI  ==> serial data input (PIN 14))
               00019 ; -----------------------------------------------------------------------
               00020 
               00021 ;; -----------[MEMO: BUS CONTROL SIGNALS OF THE AY CHIP (BDIR, BC1)]------
               00022 ;; -----------------------------------------------------------------------
               00023 ;; MEMO AY 3 8912 BUS CONTROL [PIN CONNETION]
               00024 ;; AY BDIR      => PIN 18
               00025 ;; AY BC1       => PIN 20
               00026 ;; [AY BC2      => PIN 19 (BC2 ALWAYS => 1)]
               00027 ;;
               00028 ;; 74HC595 - SHIFT REGISTER INTERCONNECTION
               00029 ;; ASSIGNMENT => AY [8 BIT ADDRESS/DATA]
               00030 ;; BIT           [  7       6       5       4       3      2       1       0   ] BIT
               00031 ;; BIT           [A7/D7 | A6/D6 | A5/D5 | A4/D4 | A3/D3 | A2/D2 | A1/D1 | A0/D0] ADRESS / DATA
               00032 ;; 74HC595       [Q0/P15| Q1/P01| Q2/P02| Q3/P03| Q4/P04| Q5/P05| Q6/P06|Q7/P07] PARALLEL OUTPUT / PIN
               00033 ;;
               00034 ;; AY ADRESS/DATA TRANSPHERE: WITH TWO WRITING CYCLES 
               00035 ;; CYCLE ONE: WRITE AY ADDRESS 
               00036 ;; CYCLE TWO: WRITE AY DATA 
               00037 ;;
               00038 ;;
               00039 ;; MEMO: WRITE ADRESS AND DATA TO THE AY CHIP (PROCEDURE):
               00040 ;; [INACTIVE]->[OUTPUT ADDRESS]->[INACTIVE]->[OUTPUT DATA]->[INACTIVE]
               00041 ;;
               00042 ;;
               00043 ;; THE AY DATA-BUS CONTROL (BDIR, [BC2], BC1)
               00044 ;; [BDIR]    -     [BC2]     -     [BC1]
               00045 ;;   0               1               0  ==> AY BUS INACTIVE     
               00046 ;;   0               1               1  ==> READ FROM THE AY CHIP
               00047 ;;   1               1               0  ==> WRITE TO THE AY CHIP
               00048 ;;   1               1               1  ==> LATCH AY REGISTER ADDRESS
               00049 ;;
               00050 ;;
               00051 ;; WRITE ADRESS AND DATA TO THE AY CHIP (AY BUS CONTROL)
               00052 ;; BUS CONTROL       [BDIR]     -     [BC1]
               00053 ;; POS1         1               1                       ==> WRITE ADDRESS
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00054 ;; POS2         0               0                       ==> INACTIVE (END CYCLE 1)
               00055 ;; POS3         1               0                       ==> WRITE DATA
               00056 ;; POS4         0               0                       ==> INACTIVE (END CYCLE 2)
               00057 ;; 
               00058 ;;
               00059 ;;      
               00060 ;; ------[MEMO SET/CLEAR THE CONTROL SIGNALS]---
               00061 ;; 
               00062 ;; MEMO: CLEAR BDIR (AY Chip)
               00063 ;; MEMO: bcf    AY_SR_LAT_BDIR, AY_SR_PIN_BDIR  
               00064 ;; 
               00065 ;; MEMO: SET BDIR (AY Chip)
               00066 ;; MEMO: bsf    AY_SR_LAT_BDIR, AY_SR_PIN_BDIR  
               00067 ;;
               00068 ;; MEMO: CLEAR BC1 (AY Chip)
               00069 ;; MEMO: bcf    AY_SR_LAT_BC1, AY_SR_PIN_BC1    
               00070 ;;
               00071 ;; MEMO: SET BC1 (AY Chip)
               00072 ;; MEMO: bsf    AY_SR_LAT_BC1, AY_SR_PIN_BC1    
               00073 ;;
               00074 ;; ----------------[MEMO END]-----------------
               00075 
               00076 
               00077  
               00078 ; SET THE PINS FOR SERIAL COMMUNICATION WITH THE 74HC595 SHIFT REGISTER(S)
               00079 ; -------------------------------------------------------------------------
  00000F8B     00080 AY_SR_LAT_SCLK          EQU     LATC    ; SCLK 
  00000000     00081 AY_SR_PIN_SCLK          EQU     0       ; Pin15 RC0 CORE:J7 RC => 74HC595 PIN 11 [SCLK] 
               00082 
  00000F8B     00083 AY_SR_LAT_RCLK          EQU     LATC    ; RCLK
  00000001     00084 AY_SR_PIN_RCLK          EQU     1       ; Pin16 RC1 CORE:J7 SC => 74HC595 PIN 12 [RCLK]
               00085 
  00000F8B     00086 AY_SR_LAT_SER_OUT       EQU     LATC    ; SER
  00000002     00087 AY_SR_PIN_SER_OUT       EQU     2       ; Pin17 RC2 CORE:J7 SO => 74HC595 PIN 14 [SER]
               00088 
               00089 
               00090 ; SET THE PINS FOR AY-3-8912 BUS CONTROL / DIRECTION SIGNALS (BC1/BDIR)
               00091 ; --------------------------------------------------------
  00000F8B     00092 AY_SR_LAT_BDIR    EQU   LATC    ;BDIR
  00000004     00093 AY_SR_PIN_BDIR    EQU   4       ;Pin23 RC4 / CORE J10 RC [TO =>] TO AY BDIR
  00000F8B     00094 AY_SR_LAT_BC1     EQU   LATC    ;BC1
  00000005     00095 AY_SR_PIN_BC1     EQU   5       ;Pin24 RC5 / CORE J10 SO [TO =>] TO AY BC1
               00096 
               00097 
               00098 ;; ---------------------[AY_SR_WRITE_BIT MACRO]---------------------    
               00099 ;;------------------------------------------------------------------
               00100 ;;------------------------------------------------------------------
               00101 ;;------------------------------------------------------------------
               00102 
               00103 ;; -----------[MACRO: AY_SR_WRITE_BIT SERIAL DATA BIT BY BIT]-------
               00104 AY_SR_WRITE_BIT MACRO reg, bit
               00105         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
               00106         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
               00107                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00108         
               00109         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
               00110         ; SET PIN [SER] TO 0    
               00111         
               00112                 
               00113                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
               00114                 ;; reg => MIOS_PARAMETER1
               00115                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
               00116                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
               00117                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
               00118                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
               00119                         
               00120                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
               00121                         ; GO HERE, IF THE BIT X in Y IS SET 
               00122                         ; AND SET PIN [SER] TO 1
               00123                         ; AND MAKE ANOTHER SCLK TRIGGER
               00124 
               00125                         
               00126                         ; IF THE BIT X IS *NOT* SET
               00127                         ; PIN [SER] REMAIN 0 
               00128                 
               00129                          
               00130         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
               00131         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
               00132         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
               00133 
               00134         ENDM
               00135         
               00136 ;; ---------------------[AY_SR_WRITE_BIT MACRO END]--------------------------   
               00137 ;;------------------------------------------------------------------
               00138 ;;------------------------------------------------------------------
               00139 ;;------------------------------------------------------------------
               00140 
               00141 
               00142 
               00143 ;; **************************************************************************
               00144 ;; --------------------------------------------------------------------------
               00145 ;;  AY_SR_Write: WRITE A BYTE TO AN AY-3-8912 REGSITER
               00146 ;; --------------------------------------------------------------------------
               00147 ;; **************************************************************************
3754           00148 LABEL_AY_SR_Write
               00149 
               00150    ;; WRITING SERIAL Data to AY Chip is a time-critical routine
               00151    ;; So DISABLE Interrupt Request (IRQ)
               00152    ;; a macro @ macros.h
               00153    IRQ_DISABLE
3754 9EF2          M         bcf     INTCON, GIE
               00154 
               00155   ;; MEMO: AY BUS CONTROL
               00156   ;; BUS CONTROL                   [BDIR]       -      [BC1]
               00157   ;; POS1                            1                   1                      ==> WRITE ADDRESS
               00158   ;; POS2                            0                   0                      ==> INACTIVE (END CYCLE 1)
               00159   ;; POS3                            1                   0                      ==> WRITE DATA
               00160   ;; POS4                            0                   0                      ==> INACTIVE (END CYCLE 2)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00161   
               00162                 
               00163         ;; - ------------[START WRITE AY ADRESS]-------------------
               00164         
               00165         ;; SET BDIR TO 1
               00166         ;; SET BC1 TO 1
3756 888B      00167         bsf     AY_SR_LAT_BDIR, AY_SR_PIN_BDIR  ;; SET BDIR (AY Chip)
3758 8A8B      00168         bsf     AY_SR_LAT_BC1, AY_SR_PIN_BC1    ;; SET BC1 (AY Chip)
               00169         
               00170 
               00171         
               00172         ; ---------[AY ADRESS :: WRITING 8-BIT SERIAL DATA TO 1x 74HC595]----------------------
               00173         ; ------------------------------------------------------------------------      
               00174         ; AY ADRESS => MIOS_PARAMETER1
               00175         ; => SEE AY_SR_WRITE_BIT MACRO!
               00176         AY_SR_WRITE_BIT AY_REG_ADDRESS, 0       ;; AY1          ADDR. BYTE => [B x x x x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
375A 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
375C B039          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
375E 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
3760 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
3762 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00177         AY_SR_WRITE_BIT AY_REG_ADDRESS, 1       ;; AY1          ADDR. BYTE => [x B x x x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
3764 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3766 B239          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
3768 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
376A 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
376C 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00178         AY_SR_WRITE_BIT AY_REG_ADDRESS, 2       ;; AY1          ADDR. BYTE => [x x B x x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
376E 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
3770 B439          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
3772 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
3774 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
3776 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00179         AY_SR_WRITE_BIT AY_REG_ADDRESS, 3       ;; AY1          ADDR. BYTE => [x x x B x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M                 
                   M         
3778 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
377A B639          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
377C 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
377E 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
3780 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00180         AY_SR_WRITE_BIT AY_REG_ADDRESS, 4       ;; AY1          ADDR. BYTE => [x x x x B x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
3782 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
3784 B839          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
3786 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3788 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
378A 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00181         AY_SR_WRITE_BIT AY_REG_ADDRESS, 5       ;; AY1          ADDR. BYTE => [x x x x x B x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
378C 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
378E BA39          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
3790 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
3792 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
3794 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00182         AY_SR_WRITE_BIT AY_REG_ADDRESS, 6       ;; AY1          ADDR. BYTE => [x x x x x x B x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
3796 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
3798 BC39          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
379A 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
379C 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
379E 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00183         AY_SR_WRITE_BIT AY_REG_ADDRESS, 7       ;; AY1          ADDR. BYTE => [x x x x x x x B]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37A0 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37A2 BE39          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37A4 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37A6 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37A8 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00184 
               00185                 ; AFTER A SERIAL BYTE [MIOS_PARAMETER1] BYTE HAS BEEN TRANSMITTED
               00186                 ; STORE THE DATA IN THE 8BIT PARALLEL DATA LATCH [=>74HC595]
               00187                 ; ----------------------------------------------------------
37AA 828B      00188                 bsf     AY_SR_LAT_RCLK, AY_SR_PIN_RCLK                  ; latch AY values
37AC 948B      00189                 bcf     AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT            ; clear out pin (standby)
37AE 928B      00190                 bcf     AY_SR_LAT_RCLK, AY_SR_PIN_RCLK                  ; release latch
               00191                 
               00192 
               00193         ;; ------------[END WRITE AY ADRESS (AY BUS CONTROL)]---------------
               00194         ;; SET AY BUS INACTIVE (END CYCLE 1)
               00195         ;; AY BUS CONTROL: SET BDIR TO 0, SET BC1 TO 0
37B0 988B      00196         bcf     AY_SR_LAT_BDIR, AY_SR_PIN_BDIR  ;; CLEAR BDIR (AY Chip)
37B2 9A8B      00197         bcf     AY_SR_LAT_BC1, AY_SR_PIN_BC1    ;; CLEAR BC1 (AY Chip)
               00198         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00199 
               00200         
               00201         ;; THE ADDRESS BYTE HAS NOW BEEN WRITTEN TO THE AY CHIP
               00202 
               00203         ;; ------------[NOW LET'S START TO WRITE THE AY DATA BYTE!]-----------
               00204         ;; AY BUS CONTROL: SET BDIR TO 1, SET BC1 TO 0
37B4 888B      00205         bsf     AY_SR_LAT_BDIR, AY_SR_PIN_BDIR  ;; SET BDIR (AY Chip)
37B6 9A8B      00206         bcf     AY_SR_LAT_BC1, AY_SR_PIN_BC1    ;; SET BC1 (AY Chip)
               00207         
               00208         
               00209         ;; ---------[WRITING 8-BIT SERIAL DATA TO 1x 74HC595]------------------
               00210         ;; -------------------------------------------------------------------- 
               00211         ;; => SEE AY_SR_WRITE_BIT MACRO!
               00212         AY_SR_WRITE_BIT AY_REG_DATA, 0  ;; AY1          DATA. BYTE => [B x x x x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37B8 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37BA B03A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37BC 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37BE 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37C0 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00213         AY_SR_WRITE_BIT AY_REG_DATA, 1  ;; AY1          DATA. BYTE => [x B x x x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37C2 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37C4 B23A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37C6 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37C8 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37CA 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00214         AY_SR_WRITE_BIT AY_REG_DATA, 2  ;; AY1          DATA. BYTE => [x x B x x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37CC 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37CE B43A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37D0 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37D2 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37D4 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00215         AY_SR_WRITE_BIT AY_REG_DATA, 3  ;; AY1          DATA. BYTE => [x x x B x x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
37D6 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37D8 B63A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37DA 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37DC 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37DE 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00216         AY_SR_WRITE_BIT AY_REG_DATA, 4  ;; AY1          DATA. BYTE => [x x x x B x x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37E0 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37E2 B83A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37E4 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37E6 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37E8 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M 
               00217         AY_SR_WRITE_BIT AY_REG_DATA, 5  ;; AY1          DATA. BYTE => [x x x x x B x x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37EA 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37EC BA3A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37EE 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37F0 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37F2 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00218         AY_SR_WRITE_BIT AY_REG_DATA, 6  ;; AY1          DATA. BYTE => [x x x x x x B x]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37F4 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
37F6 BC3A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
37F8 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
37FA 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
37FC 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00219         AY_SR_WRITE_BIT AY_REG_DATA, 7  ;; AY1          DATA. BYTE => [x x x x x x x B]
                   M         ;; MACRO FOR WRITING SERIAL DATA TO THE 74HC595 SHIFT REGISTER
                   M         ;; THE MACRO WRITES ONE BIT [AY ADRESS / AY DATA] TO SERIAL OUT
                   M                 
                   M         
37FE 948B          M         bcf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M         ; SET PIN [SER] TO 0    
                   M         
                   M                 
3800 BE3A          M                 btfsc reg, bit ; BIT TEST f, SKIP IF CLEAR
                   M                 ;; reg => MIOS_PARAMETER1
                   M                 ;; bit => BIT [0-7] OF MIOS_PARAMETER1 
                   M                 ; SET SER PIN DEPENDING ON REGISTER CONTENT (reg.bit)
                   M                 ; IS BIT X [0-7] in REG Y [MIOS_PARAMETER1] = 0 or 1 ?
                   M                 ; CHECK IT WITH btfsc => BIT TEST f, SKIP IF CLEAR
                   M                         
3802 848B          M                         bsf AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT
                   M                         ; GO HERE, IF THE BIT X in Y IS SET 
                   M                         ; AND SET PIN [SER] TO 1
                   M                         ; AND MAKE ANOTHER SCLK TRIGGER
                   M 
                   M                         
                   M                         ; IF THE BIT X IS *NOT* SET
                   M                         ; PIN [SER] REMAIN 0 
                   M                 
                   M                          
                   M         ; ONE MORE SERIAL CLOCK TRIGGER => SCLK - 74HC595
3804 808B          M         bsf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; rising clock edge
3806 908B          M         bcf     AY_SR_LAT_SCLK, AY_SR_PIN_SCLK  ; falling clock edge
                   M 
               00220 
               00221                 ; AFTER A SERIAL BYTE [AY_REG_DATA] HAS BEEN TRANSMITTED
               00222                 ; STORE THE DATA IN THE 8BIT PARALLEL DATA LATCH [=>74HC595]
               00223                 ; ----------------------------------------------------------
3808 828B      00224                 bsf     AY_SR_LAT_RCLK, AY_SR_PIN_RCLK          ; latch AY values
380A 948B      00225                 bcf     AY_SR_LAT_SER_OUT, AY_SR_PIN_SER_OUT    ; clear out pin (standby)
380C 928B      00226                 bcf     AY_SR_LAT_RCLK, AY_SR_PIN_RCLK          ; release latch
               00227                 
               00228 
               00229         
               00230         ;; ------------[SET AY BUS INACTIVE (END CYCLE 2)]-------------------
               00231         ;; SET BDIR TO 0
               00232         ;; SET BC1 TO 0
380E 988B      00233         bcf     AY_SR_LAT_BDIR, AY_SR_PIN_BDIR  ;; CLEAR BDIR (AY Chip)
3810 9A8B      00234         bcf     AY_SR_LAT_BC1, AY_SR_PIN_BC1    ;; CLEAR BC1 (AY Chip)
               00235         
               00236         ;; NOW A BYTE HAS BEEN WRITTEN TO AN AY REGISTER
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00237         ;; ENABLE Interrupt Request (IRQ)
               00238         IRQ_ENABLE              
3812 8EF2          M         bsf     INTCON, GIE
               00239 
               00240           ;; A BYTE HAS BEEN TRANSMITTED TO A AY-3-8912 REGISTER
               00241           ;; END OF THE SERIAL WRITING AND AY BUS CONTROL ROUTINE
3814 0012      00242                 return
               00243         
               00244 
               00245 
               00036 #include "format_bankstick.inc"
               00001 ;; format_bankstick.inc
               00002 
3816           00003 FORMAT_BANKSTICK
               00004         ;; CHECK:
               00005         ;; BANKSTICK AVAILABLE?
               00006         ;; -------------[STATE: SELECTED PATCH = BANKSTICK PATCH]------------------------
               00007         ;; -------------[CHECK: BANKSTICK AVAILABLE?]------------------------------------
               00008                 
               00009                 ;; CHECK: -----[BANKSTICK IS AVAILABLE?]----------------
               00010                 ;; BIT0 of = PATCH_MENU_STATE_FLAGS?
3816 A07D      00011                 btfss   PATCH_MENU_STATE_FLAGS, BIT0_BANKSTICK_FOUND
               00012                                         ;; ---[BANKSTICK NOT AVAILABLE]----------------
               00013                                         ;; BIT0 = 0 = NO BANKSTICK FOUND
               00014                                         ;; EXIT HERE
3818 EFDD F024 00015                                         goto LABEL_MAIN_MENUE_SWITCH
               00016                         ;; ---[BANKSTICK IS AVAILABLE]----------------
               00017                         ;; BIT0 = 1 = BANKSTICK IS AVAILABLE
               00018                         
               00019                 ;; CHECK: MENU = MAIN MENU 1
381C 0E01      00020                 movlw   MAIN_MENU_01
381E 6274      00021                 cpfseq  CURRENT_MAIN_MENU
               00022                                 ;; NO IT'S NOT MAIN MENU1
               00023                                 ;; Exit Here
3820 0012      00024                                 return
               00025                 
               00026                         ;; YES MAIN MENU1
               00027                         ;; GO ON...
               00028 
               00029                 ;; --[CHECK ACTIVE ITEM @ Main Menu 1]-------
               00030                 ;; CHECK LOCATION VIA EDITING MODE "*"
               00031                 ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
3822 C200 F003 00032                 movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
3826 0E03      00033                 movlw   MENU_ITEM_POS3
3828 6203      00034                 cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3? | [W]rite [F]ormat ...
               00035                                 ;; NO, NOT ITEM 3
               00036                                 ;; EXIT HERE
382A 0012      00037                                 return
               00038 
               00039                         ;; YES, ITEM 3 IS ACTIVE (EDITING MODE)
               00040                         ;; GO ON
               00041                         
               00042                         ;; SO DO FORMAT CURREND BANKSTICK
               00043                         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00044                         ;; SET THE "DO FORMAT THE BANKSTICK BIT"
382C 867D      00045                         bsf     PATCH_MENU_STATE_FLAGS, BIT3_SELECTED_PATCH_FORMAT_BANKSTICK
               00046         
               00047                                                 
               00048                         ;; GO AND DO FORMAT BANKSTICK
382E EF19 F01C 00049                         goto PATCH_WRITE_DO_FORMAT_BANKSTICK    
               00050         
               00051 
               00052 ;;-------------------------------------------------------------------------------------------------
               00053 
               00054 
               00055 ;; -------------------------------------------------------------------------------
               00056 ;; ----------------[SUB ROUTINE: FORMAT BANKSTICK PATCHES PATCH BY PATCH]---------
               00057 ;; -------------------------------------------------------------------------------
               00058 ;; ---------------------------------------------------------------------------------------------------
               00059 ;; -----------------------------[FORMAT BANKSTICK JUMP IN POINT]--------------------------------------
3832           00060 PATCH_WRITE_DO_FORMAT_BANKSTICK
               00061         ;; FORMAT BANKSTICK (STEP 1)
               00062         ;; ----SELECT (A NEW) PATCH NUMBER-----
               00063         ;; -------------------------------------
               00064         ;; INI VALUE FORMAT_BANKSTICK_CYCLE_COUNTER = 0
               00065         ;; DO INC FORMAT_BANKSTICK_CYCLE_COUNTER    + 1
               00066         ;; [FORMAT_BANKSTICK_CYCLE_COUNTER: DO COUNT FROM 1 to 128]
               00067         ;;    IF FORMAT_BANKSTICK_CYCLE_COUNTER = 128 ( = BANKSTICK_MAX_PATCH_NUMBER +1) 
               00068         ;;    IT WILL BE THE "EXIT THE FORMAT BANSTICK ROUTINE" VALUE  
3832 2A7E      00069         incf    FORMAT_BANKSTICK_CYCLE_COUNTER, F
               00070         ;; -------------------------------------
               00071         ;; FORMAT BANKSTICK (STEP 1a)
               00072         ;; -------------------------------------
               00073         ;; BROWSE_PATCH_NR = FORMAT_BANKSTICK_CYCLE_COUNTER
3834 C07E F07C 00074         movff FORMAT_BANKSTICK_CYCLE_COUNTER, BROWSE_PATCH_NR
               00075         ;; -------------------------------------
               00076         ;; FORMAT BANKSTICK (STEP 2)
               00077         ;; -------------------------------------
               00078         ;; CLEAR LCD ROW4
               00079         TABLE_ADDR LCD_CLEAR_ROW4
3838 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
383A 6EF6          M         movwf   TBLPTRL
383C 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
383E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
3840 EC9E F016 00080         call    MIOS_LCD_PrintString
               00081         ;; WRITE "F:" on LCD ROW4
               00082         TABLE_ADDR TEXT_AY_MB_AY_PATCH_FORMATTING_BS
3844 0EFC          M         movlw   LOW(addr)               ; store Lo Byte
3846 6EF6          M         movwf   TBLPTRL
3848 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
384A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #endif
384C EC9E F016 00083         call    MIOS_LCD_PrintString
               00084         ;; Write CURREND FORMATTING PATCH NR on LCD
3850 0E5C      00085         movlw   LCD_ROW4 + 12
3852 EC88 F016 00086         call    MIOS_LCD_CursorSet
3856 507E      00087         movf    FORMAT_BANKSTICK_CYCLE_COUNTER, W
3858 EC92 F016 00088         call    MIOS_LCD_PrintBCD3
               00089         ;; -------------------------------------
               00090         ;; FORMAT BANKSTICK (STEP 3)
               00091         ;; --------------------------------------
               00092         ;; CHECK: FORMAT_BANKSTICK_CYCLE_COUNTER > BANKSTICK_MAX_PATCH_NUMBER ?
               00093         ;; IF NOT: DO ANOTHER BANKSTICK PATCH WRITE
385C 0E7F      00094         movlw   BANKSTICK_MAX_PATCH_NUMBER
385E 647E      00095         cpfsgt  FORMAT_BANKSTICK_CYCLE_COUNTER
               00096                         ;; FORMAT_BANKSTICK_CYCLE_COUNTER < or = BANKSTICK_MAX_PATCH_NUMBER
               00097                         ;; ----------------------------------------------------------------
               00098                         ;; STATE: GO ON FORMAT BANKSTICK 
               00099                         ;; DO: WRITE BANKTICK @ BROWSE_PATCH_NR [WRITE BANKSTICK PATCH1 to 127]
               00100                         ;; ----------------------------------------------------------------
               00101                         ;; (STEP 4 WRITE PATCH)
               00102                         ;; --------------------------------------
               00103                         rgoto PATCH_WRITE_DO
3860 D307          M         bra     label
               00104                 
               00105                 ;; FORMAT_BANKSTICK_CYCLE_COUNTER > BANKSTICK_MAX_PATCH_NUMBER
               00106                 ;; -----------------------------------------------------------
               00107                 ;; (STEP 5=FINALIZE FORMATTING)
               00108                 ;; --------------------------------------
               00109                 ;; STATE:
               00110                 ;; ALL BANKSTICK PATCHES ARE WRITTEN (FORMATTED)                                        
               00111                 ;; DO: 
               00112                 ;; FINALIZE THE BANKSTICK FORMATTING PROCESS
               00113                 ;; -----------------------------------------------------------
               00114                 ;; (STEP 5a)
               00115                 ;; RESET: FORMAT_BANKSTICK_CYCLE_COUNTER to 0
3862 6A7E      00116                 clrf    FORMAT_BANKSTICK_CYCLE_COUNTER
               00117                 ;; -----------------------------------------------------------
               00118                 ;; (STEP 5b)
               00119                 ;; -----------------------------------------------------------
               00120                 ;; (RE)SET CURREND PATCH TO 1 (BANKSTICK PATCH1)
               00121                 ;; AFTER FORMATTING BANKSTICK PATCH 1-127
3864 0E01      00122                 movlw 0x01
3866 6E3E      00123                 movwf CURREND_PATCH_NR
3868 C03E F07C 00124                 movff CURREND_PATCH_NR, BROWSE_PATCH_NR
               00125                 ;; -----------------------------------------------------------
               00126                 ;; (STEP 5c)
               00127                 ;; -----------------------------------------------------------
               00128                 ;; SWITCH OF THE "DO FORMAT BANKSTICK" MODE 
               00129                 ;; RESET: BIT3_SELECTED_PATCH_FORMAT_BANKSTICK @ PATCH_MENU_STATE_FLAGS
               00130                 ;; DO CLEAR BIT3 PATCH_MENU_STATE_FLAGS
386C 967D      00131                 bcf     PATCH_MENU_STATE_FLAGS, BIT3_SELECTED_PATCH_FORMAT_BANKSTICK
               00132                 ;; -----------------------------------------------------------
               00133                 ;; (STEP 5d)
               00134                 ;; -----------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00135                 ;; EXIT THE BANKSTICK FORMATTING CYCLE HERE
               00136                 ;; AND WRITE MAIN MENU1 on LCD
386E EF1E F025 00137                 goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00138                         
               00139 
               00140 ;; -------------------------[END: FORMATTING BANKSTICK SUB ROUTINE]---------------------------------------
               00141 ;; ---------------------------------------------------------------------------------------------------
               00037 
               00038 ;; ----[AY LCD TEXT DEFINITION]---------------------------
               00039 #include "lcd_text.inc"
               00001 ;; lcd_text.inc
               00002 ;; MIDIBOX AY - TEXT MESSAGES / MENU TEXT
               00003 ;; ========================================
               00004 
               00005 ;; LCD - CLEAR ROW 1-4
3872           00006 LCD_CLEAR_ROW1                          STRING 16, LCD_ROW1, "                "
3872 1000 2020     M         da      ((length) << 8) | (pos), str
3876 2020 2020
387A 2020 2020
387E 2020 2020
3882 2020
3884           00007 LCD_CLEAR_ROW2                          STRING 16, LCD_ROW2, "                "
3884 1040 2020     M         da      ((length) << 8) | (pos), str
3888 2020 2020
388C 2020 2020
3890 2020 2020
3894 2020
3896           00008 LCD_CLEAR_ROW3                          STRING 16, LCD_ROW3, "                "
3896 1010 2020     M         da      ((length) << 8) | (pos), str
389A 2020 2020
389E 2020 2020
38A2 2020 2020
38A6 2020
38A8           00009 LCD_CLEAR_ROW4                          STRING 16, LCD_ROW4, "                "
38A8 1050 2020     M         da      ((length) << 8) | (pos), str
38AC 2020 2020
38B0 2020 2020
38B4 2020 2020
38B8 2020
               00010 
               00011 ;; LCD TEXT - Start Screen
38BA           00012 TEXT_AY_START_SCREEN_ROW1               STRING 7,  LCD_ROW1, "MIDIBOX"
38BA 0700 494D     M         da      ((length) << 8) | (pos), str
38BE 4944 4F42
38C2 0058
38C4           00013 TEXT_AY_START_SCREEN_ROW2               STRING 9,  LCD_ROW2, "AY-3-8912"
38C4 0940 5941     M         da      ((length) << 8) | (pos), str
38C8 332D 382D
38CC 3139 0032
38D0           00014 TEXT_AY_START_SCREEN_ROW3               STRING 16, LCD_ROW3, "V1.00 RC1 [2009]"
38D0 1010 3156     M         da      ((length) << 8) | (pos), str
38D4 302E 2030
38D8 4352 2031
38DC 325B 3030
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
38E0 5D39
38E2           00015 TEXT_AY_START_SCREEN_ROW4               STRING 16, LCD_ROW4, "BY LEMONHORSE   "
38E2 1050 5942     M         da      ((length) << 8) | (pos), str
38E6 4C20 4D45
38EA 4E4F 4F48
38EE 5352 2045
38F2 2020
               00016 
               00017 
               00018 ;; LCD TEXT - LABEL_AY_MAIN_MENU_00_MENU_SWITCH
38F4           00019 TEXT_AY_MB_AY_MENUE_SWITCH_ROW1         STRING 16, LCD_ROW1, "F1-PATCH F2-TUNE"
38F4 1000 3146     M         da      ((length) << 8) | (pos), str
38F8 502D 5441
38FC 4843 4620
3900 2D32 5554
3904 454E
3906           00020 TEXT_AY_MB_AY_MENUE_SWITCH_ROW2         STRING 16, LCD_ROW2, "F3-MIXER F4-VOL."
3906 1040 3346     M         da      ((length) << 8) | (pos), str
390A 4D2D 5849
390E 5245 4620
3912 2D34 4F56
3916 2E4C
3918           00021 TEXT_AY_MB_AY_MENUE_SWITCH_ROW3         STRING 16, LCD_ROW3, "F5-ENVEL F6-MIDI" 
3918 1010 3546     M         da      ((length) << 8) | (pos), str
391C 452D 564E
3920 4C45 4620
3924 2D36 494D
3928 4944
392A           00022 TEXT_AY_MB_AY_MENUE_SWITCH_ROW4         STRING 14, LCD_ROW4, "F7-VELOC F8-Fx" 
392A 0E50 3746     M         da      ((length) << 8) | (pos), str
392E 562D 4C45
3932 434F 4620
3936 2D38 7846
               00023 
               00024 
               00025 ;; LCD TEXT - LABEL_AY_MAIN_MENU_01_PATCH_INFO
393A           00026 TEXT_AY_MB_AY_PATCH_NAME                STRING 16, LCD_ROW1,    "NAME:   --------"
393A 1000 414E     M         da      ((length) << 8) | (pos), str
393E 454D 203A
3942 2020 2D2D
3946 2D2D 2D2D
394A 2D2D
394C           00027 TEXT_AY_MB_AY_BANKSTICK_NOT_FORMATED    STRING 16, LCD_ROW1,    "[-FORMATTING?!-]"
394C 1000 2D5B     M         da      ((length) << 8) | (pos), str
3950 4F46 4D52
3954 5441 4954
3958 474E 213F
395C 5D2D
395E           00028 TEXT_AY_MB_AY_PATCH_NO_BS               STRING 16, LCD_ROW1,    "[-NO BANSTICK1-]"
395E 1000 2D5B     M         da      ((length) << 8) | (pos), str
3962 4F4E 4220
3966 4E41 5453
396A 4349 314B
396E 5D2D
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3970           00029 TEXT_AY_MB_AY_PATCH_NR                  STRING  3, LCD_ROW2,    "NR:"
3970 0340 524E     M         da      ((length) << 8) | (pos), str
3974 003A
3976           00030 TEXT_AY_MB_AY_PATCH_INT_PATCH           STRING  8, LCD_ROW2+8,  "INTERNAL"
3976 0848 4E49     M         da      ((length) << 8) | (pos), str
397A 4554 4E52
397E 4C41
3980           00031 TEXT_AY_MB_AY_PATCH_BS_PATCH            STRING  7, LCD_ROW2+9,  "B.STCK1"
3980 0749 2E42     M         da      ((length) << 8) | (pos), str
3984 5453 4B43
3988 0031
398A           00032 TEXT_AY_MB_AY_PATCH_DO                  STRING 16, LCD_ROW3,    "DO:  [L] [W] [F]"
398A 1010 4F44     M         da      ((length) << 8) | (pos), str
398E 203A 5B20
3992 5D4C 5B20
3996 5D57 5B20
399A 5D46
399C           00033 TEXT_AY_MB_AY_PATCH_EXE                 STRING 16, LCD_ROW4,    "Load Wrte Format"
399C 1050 6F4C     M         da      ((length) << 8) | (pos), str
39A0 6461 5720
39A4 7472 2065
39A8 6F46 6D72
39AC 7461
39AE           00034 TEXT_AY_MB_AY_PATCH_EXE_NO_FORMAT       STRING 16, LCD_ROW4,    "Load Wrte ------"
39AE 1050 6F4C     M         da      ((length) << 8) | (pos), str
39B2 6461 5720
39B6 7472 2065
39BA 2D2D 2D2D
39BE 2D2D
39C0           00035 TEXT_AY_MB_AY_PATCH_EXE_NO_LT_ERT_FMT   STRING 16, LCD_ROW4,    "---- ---- ------"
39C0 1050 2D2D     M         da      ((length) << 8) | (pos), str
39C4 2D2D 2D20
39C8 2D2D 202D
39CC 2D2D 2D2D
39D0 2D2D
39D2           00036 TEXT_AY_MB_AY_PATCH_EXE_JUST_FORMAT     STRING 16, LCD_ROW4,    "---- ---- Format"
39D2 1050 2D2D     M         da      ((length) << 8) | (pos), str
39D6 2D2D 2D20
39DA 2D2D 202D
39DE 6F46 6D72
39E2 7461
39E4           00037 TEXT_AY_MB_AY_PATCH_WRITE_OK            STRING 5,  LCD_ROW4+10,         "W: OK"
39E4 055A 3A57     M         da      ((length) << 8) | (pos), str
39E8 4F20 004B
39EC           00038 TEXT_AY_MB_AY_PATCH_LOAD_OK             STRING 5,  LCD_ROW4+10,         "L: OK"
39EC 055A 3A4C     M         da      ((length) << 8) | (pos), str
39F0 4F20 004B
39F4           00039 TEXT_AY_MB_AY_PATCH_ERROR               STRING 5,  LCD_ROW4+10,         "ERROR"
39F4 055A 5245     M         da      ((length) << 8) | (pos), str
39F8 4F52 0052
39FC           00040 TEXT_AY_MB_AY_PATCH_FORMATTING_BS       STRING 2,  LCD_ROW4+10,         "F:"
39FC 025A 3A46     M         da      ((length) << 8) | (pos), str
               00041 
               00042 ;; LCD TEXT - LABEL_AY_MAIN_MENU_02_ABC_TUNE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3A00           00043 TEXT_AY_MENU_ABC_TUNE                   STRING 16, LCD_ROW1, "TUNE COARSE FINE"
3A00 1000 5554     M         da      ((length) << 8) | (pos), str
3A04 454E 4320
3A08 414F 5352
3A0C 2045 4946
3A10 454E
3A12           00044 TEXT_AY_MENU_ABC_TUNE_CHA_TUNE          STRING 04, LCD_ROW2, "CH.A"
3A12 0440 4843     M         da      ((length) << 8) | (pos), str
3A16 412E
3A18           00045 TEXT_AY_MENU_ABC_TUNE_CHB_TUNE          STRING 04, LCD_ROW3, "CH.B"
3A18 0410 4843     M         da      ((length) << 8) | (pos), str
3A1C 422E
3A1E           00046 TEXT_AY_MENU_ABC_TUNE_CHC_TUNE          STRING 04, LCD_ROW4, "CH.C"
3A1E 0450 4843     M         da      ((length) << 8) | (pos), str
3A22 432E
               00047 
               00048 ;; LCD TEXT - LABEL_AY_MAIN_MENU_03_ABC_MIXER
3A24           00049 TEXT_AY_MENU_MIXER_FX_ON_OFF            STRING  6, LCD_ROW1, "Fx ABC"
3A24 0600 7846     M         da      ((length) << 8) | (pos), str
3A28 4120 4342
3A2C           00050 TEXT_AY_MENU3_FX_A_OFF                  STRING 01, LCD_ROW1 + 13, "-"
3A2C 010D 002D     M         da      ((length) << 8) | (pos), str
3A30           00051 TEXT_AY_MENU3_FX_A_ON                   STRING 01, LCD_ROW1 + 13, "A"
3A30 010D 0041     M         da      ((length) << 8) | (pos), str
3A34           00052 TEXT_AY_MENU3_FX_B_OFF                  STRING 01, LCD_ROW1 + 14, "-"
3A34 010E 002D     M         da      ((length) << 8) | (pos), str
3A38           00053 TEXT_AY_MENU3_FX_B_ON                   STRING 01, LCD_ROW1 + 14, "B"
3A38 010E 0042     M         da      ((length) << 8) | (pos), str
3A3C           00054 TEXT_AY_MENU3_FX_C_OFF                  STRING 01, LCD_ROW1 + 15, "-"
3A3C 010F 002D     M         da      ((length) << 8) | (pos), str
3A40           00055 TEXT_AY_MENU3_FX_C_ON                   STRING 01, LCD_ROW1 + 15, "C"
3A40 010F 0043     M         da      ((length) << 8) | (pos), str
               00056 
3A44           00057 TEXT_AY_MENU_TONE_ABC_NOISE_MIX         STRING  8, LCD_ROW2, "TONE ABC"
3A44 0840 4F54     M         da      ((length) << 8) | (pos), str
3A48 454E 4120
3A4C 4342
3A4E           00058 TEXT_AY_MENU_TONE_ABC_MIX_A_NOT         STRING 01, LCD_ROW2 + 13, "-"
3A4E 014D 002D     M         da      ((length) << 8) | (pos), str
3A52           00059 TEXT_AY_MENU_TONE_ABC_MIX_A_SET         STRING 01, LCD_ROW2 + 13, "A"
3A52 014D 0041     M         da      ((length) << 8) | (pos), str
3A56           00060 TEXT_AY_MENU_TONE_ABC_MIX_B_NOT         STRING 01, LCD_ROW2 + 14, "-"
3A56 014E 002D     M         da      ((length) << 8) | (pos), str
3A5A           00061 TEXT_AY_MENU_TONE_ABC_MIX_B_SET         STRING 01, LCD_ROW2 + 14, "B"
3A5A 014E 0042     M         da      ((length) << 8) | (pos), str
3A5E           00062 TEXT_AY_MENU_TONE_ABC_MIX_C_NOT         STRING 01, LCD_ROW2 + 15, "-"
3A5E 014F 002D     M         da      ((length) << 8) | (pos), str
3A62           00063 TEXT_AY_MENU_TONE_ABC_MIX_C_SET         STRING 01, LCD_ROW2 + 15, "C"
3A62 014F 0043     M         da      ((length) << 8) | (pos), str
               00064 
3A66           00065 TEXT_AY_MENU_TONE_ABC_NOISE_MIX2        STRING  9, LCD_ROW3, "NOISE ABC"
3A66 0910 4F4E     M         da      ((length) << 8) | (pos), str
3A6A 5349 2045
3A6E 4241 0043
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3A72           00066 TEXT_AY_MENU_TONE_ABC_MIX_NOISE_A_NOT   STRING 01, LCD_ROW3 + 13, "-"
3A72 011D 002D     M         da      ((length) << 8) | (pos), str
3A76           00067 TEXT_AY_MENU_TONE_ABC_MIX_NOISE_A_SET   STRING 01, LCD_ROW3 + 13, "A"
3A76 011D 0041     M         da      ((length) << 8) | (pos), str
3A7A           00068 TEXT_AY_MENU_TONE_ABC_MIX_NOISE_B_NOT   STRING 01, LCD_ROW3 + 14, "-"
3A7A 011E 002D     M         da      ((length) << 8) | (pos), str
3A7E           00069 TEXT_AY_MENU_TONE_ABC_MIX_NOISE_B_SET   STRING 01, LCD_ROW3 + 14, "B"
3A7E 011E 0042     M         da      ((length) << 8) | (pos), str
3A82           00070 TEXT_AY_MENU_TONE_ABC_MIX_NOISE_C_NOT   STRING 01, LCD_ROW3 + 15, "-"
3A82 011F 002D     M         da      ((length) << 8) | (pos), str
3A86           00071 TEXT_AY_MENU_TONE_ABC_MIX_NOISE_C_SET   STRING 01, LCD_ROW3 + 15, "C"
3A86 011F 0043     M         da      ((length) << 8) | (pos), str
               00072 
3A8A           00073 TEXT_AY_MENU_NOISE_PERIOD               STRING 11, LCD_ROW4, "NOISE FREQ."
3A8A 0B50 4F4E     M         da      ((length) << 8) | (pos), str
3A8E 5349 2045
3A92 5246 5145
3A96 002E
3A98           00074 TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_A    STRING 3,  LCD_ROW4 + 13, "[A]"
3A98 035D 415B     M         da      ((length) << 8) | (pos), str
3A9C 005D
3A9E           00075 TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_B    STRING 3,  LCD_ROW4 + 13, "[B]"
3A9E 035D 425B     M         da      ((length) << 8) | (pos), str
3AA2 005D
3AA4           00076 TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_C    STRING 3,  LCD_ROW4 + 13, "[C]"
3AA4 035D 435B     M         da      ((length) << 8) | (pos), str
3AA8 005D
               00077 
               00078 ;; LCD TEXT - LABEL_AY_MAIN_MENU_04_ABC_AMPLITUDE
3AAA           00079 TEXT_AY_MENU_AMPLITUDE_HEADLINE         STRING 16, LCD_ROW1, "VOLUME/AMPLITUDE"
3AAA 1000 4F56     M         da      ((length) << 8) | (pos), str
3AAE 554C 454D
3AB2 412F 504D
3AB6 494C 5554
3ABA 4544
3ABC           00080 TEXT_AY_MENU_AMPLITUDE_CH_A             STRING 7,  LCD_ROW2, "TONE A "
3ABC 0740 4F54     M         da      ((length) << 8) | (pos), str
3AC0 454E 4120
3AC4 0020
3AC6           00081 TEXT_AY_MENU_AMPLITUDE_CH_B             STRING 7,  LCD_ROW3, "TONE B "
3AC6 0710 4F54     M         da      ((length) << 8) | (pos), str
3ACA 454E 4220
3ACE 0020
3AD0           00082 TEXT_AY_MENU_AMPLITUDE_CH_C             STRING 7,  LCD_ROW4, "TONE C "
3AD0 0750 4F54     M         da      ((length) << 8) | (pos), str
3AD4 454E 4320
3AD8 0020
               00083 
3ADA           00084 TEXT_AY_MENU_AMPLITUDE_CH_A_ENV         STRING 8, LCD_ROW2 + 8, "[ENV.ON]"
3ADA 0848 455B     M         da      ((length) << 8) | (pos), str
3ADE 564E 4F2E
3AE2 5D4E
3AE4           00085 TEXT_AY_MENU_AMPLITUDE_CH_B_ENV         STRING 8, LCD_ROW3 + 8, "[ENV.ON]"
3AE4 0818 455B     M         da      ((length) << 8) | (pos), str
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3AE8 564E 4F2E
3AEC 5D4E
3AEE           00086 TEXT_AY_MENU_AMPLITUDE_CH_C_ENV         STRING 8, LCD_ROW4 + 8, "[ENV.ON]"
3AEE 0858 455B     M         da      ((length) << 8) | (pos), str
3AF2 564E 4F2E
3AF6 5D4E
               00087 
3AF8           00088 TEXT_AY_MENU_AMPLITUDE_CH_A_VELOC               STRING 8, LCD_ROW2 + 8, "[VELCTY]"
3AF8 0848 565B     M         da      ((length) << 8) | (pos), str
3AFC 4C45 5443
3B00 5D59
3B02           00089 TEXT_AY_MENU_AMPLITUDE_CH_B_VELOC               STRING 8, LCD_ROW3 + 8, "[VELCTY]"
3B02 0818 565B     M         da      ((length) << 8) | (pos), str
3B06 4C45 5443
3B0A 5D59
3B0C           00090 TEXT_AY_MENU_AMPLITUDE_CH_C_VELOC               STRING 8, LCD_ROW4 + 8, "[VELCTY]"
3B0C 0858 565B     M         da      ((length) << 8) | (pos), str
3B10 4C45 5443
3B14 5D59
               00091 
               00092 
               00093 ;; LCD TEXT - LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE
3B16           00094 TEXT_AY_MENU_ENVELOPE_COASE             STRING 10, LCD_ROW1,  "ENV.PERIOD"
3B16 0A00 4E45     M         da      ((length) << 8) | (pos), str
3B1A 2E56 4550
3B1E 4952 444F
3B22           00095 TEXT_AY_MENU_ENVELOPE_FINE              STRING 10, LCD_ROW2,  "ENV.P.FINE"
3B22 0A40 4E45     M         da      ((length) << 8) | (pos), str
3B26 2E56 2E50
3B2A 4946 454E
3B2E           00096 TEXT_AY_MENU_ENVELOPE_SHAPE             STRING 5, LCD_ROW3,   "SHAPE"
3B2E 0510 4853     M         da      ((length) << 8) | (pos), str
3B32 5041 0045
3B36           00097 TEXT_AY_MENU_ENVELOPE_MODE              STRING 10, LCD_ROW4,  "ENV.[ABC] "
3B36 0A50 4E45     M         da      ((length) << 8) | (pos), str
3B3A 2E56 415B
3B3E 4342 205D
3B42           00098 TEXT_AY_MENU_ENVELOPE_MODE_SET_A        STRING 1, LCD_ROW4 + 11, "A"
3B42 015B 0041     M         da      ((length) << 8) | (pos), str
3B46           00099 TEXT_AY_MENU_ENVELOPE_MODE_SET_B        STRING 1, LCD_ROW4 + 13, "B"
3B46 015D 0042     M         da      ((length) << 8) | (pos), str
3B4A           00100 TEXT_AY_MENU_ENVELOPE_MODE_SET_C        STRING 1, LCD_ROW4 + 15, "C"
3B4A 015F 0043     M         da      ((length) << 8) | (pos), str
3B4E           00101 TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_A    STRING 1, LCD_ROW4 + 11, "-"
3B4E 015B 002D     M         da      ((length) << 8) | (pos), str
3B52           00102 TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_B    STRING 1, LCD_ROW4 + 13, "-"
3B52 015D 002D     M         da      ((length) << 8) | (pos), str
3B56           00103 TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_C    STRING 1, LCD_ROW4 + 15, "-"
3B56 015F 002D     M         da      ((length) << 8) | (pos), str
3B5A           00104 TEXT_AY_MENU_ENVELOPE_SHAPE_0_3         STRING 4, LCD_ROW3 + 7,  "down"
3B5A 0417 6F64     M         da      ((length) << 8) | (pos), str
3B5E 6E77
3B60           00105 TEXT_AY_MENU_ENVELOPE_SHAPE_4_7         STRING 7, LCD_ROW3 + 7,  "up down"
3B60 0717 7075     M         da      ((length) << 8) | (pos), str
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3B64 6420 776F
3B68 006E
3B6A           00106 TEXT_AY_MENU_ENVELOPE_SHAPE_8           STRING 8, LCD_ROW3 + 7,  "dwn cont"
3B6A 0817 7764     M         da      ((length) << 8) | (pos), str
3B6E 206E 6F63
3B72 746E
3B74           00107 TEXT_AY_MENU_ENVELOPE_SHAPE_10          STRING 9, LCD_ROW3 + 7,  "dwn cont2"
3B74 0917 7764     M         da      ((length) << 8) | (pos), str
3B78 206E 6F63
3B7C 746E 0032
3B80           00108 TEXT_AY_MENU_ENVELOPE_SHAPE_11          STRING 6, LCD_ROW3 + 7,  "dwn up"
3B80 0617 7764     M         da      ((length) << 8) | (pos), str
3B84 206E 7075
3B88           00109 TEXT_AY_MENU_ENVELOPE_SHAPE_12          STRING 7, LCD_ROW3 + 7,  "up cont"
3B88 0717 7075     M         da      ((length) << 8) | (pos), str
3B8C 6320 6E6F
3B90 0074
3B92           00110 TEXT_AY_MENU_ENVELOPE_SHAPE_13          STRING 2, LCD_ROW3 + 7,  "up"
3B92 0217 7075     M         da      ((length) << 8) | (pos), str
3B96           00111 TEXT_AY_MENU_ENVELOPE_SHAPE_14          STRING 8, LCD_ROW3 + 7,  "up cont2"
3B96 0817 7075     M         da      ((length) << 8) | (pos), str
3B9A 6320 6E6F
3B9E 3274
               00112 
               00113 
               00114 ;; LCD TEXT - LABEL_AY_MAIN_MENU_06_MIDI_CONFIG (MAIN MENU)
3BA0           00115 TEXT_AY_MIDI_CONFIG_ROW1                STRING 16, LCD_ROW1, "MIDI CH CONFIG. "
3BA0 1000 494D     M         da      ((length) << 8) | (pos), str
3BA4 4944 4320
3BA8 2048 4F43
3BAC 464E 4749
3BB0 202E
3BB2           00116 TEXT_AY_MIDI_CONFIG_ROW2                STRING 16, LCD_ROW2, "MIDI CH A       "
3BB2 1040 494D     M         da      ((length) << 8) | (pos), str
3BB6 4944 4320
3BBA 2048 2041
3BBE 2020 2020
3BC2 2020
3BC4           00117 TEXT_AY_MIDI_CONFIG_ROW3                STRING 16, LCD_ROW3, "MIDI CH B       "
3BC4 1010 494D     M         da      ((length) << 8) | (pos), str
3BC8 4944 4320
3BCC 2048 2042
3BD0 2020 2020
3BD4 2020
3BD6           00118 TEXT_AY_MIDI_CONFIG_ROW4                STRING 16, LCD_ROW4, "MIDI CH C       "
3BD6 1050 494D     M         da      ((length) << 8) | (pos), str
3BDA 4944 4320
3BDE 2048 2043
3BE2 2020 2020
3BE6 2020
               00119 
               00120 
               00121 ;; LCD TEXT - LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG (MAIN MENU)
3BE8           00122 TEXT_AY_VELOCITY_CONFIG_ROW1            STRING 10, LCD_ROW1, "VELOCITY A"
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3BE8 0A00 4556     M         da      ((length) << 8) | (pos), str
3BEC 4F4C 4943
3BF0 5954 4120
3BF4           00123 TEXT_AY_VELOCITY_CONFIG_ROW2            STRING 10, LCD_ROW2, "VELOCCIT B"
3BF4 0A40 4556     M         da      ((length) << 8) | (pos), str
3BF8 4F4C 4343
3BFC 5449 4220
3C00           00124 TEXT_AY_VELOCITY_CONFIG_ROW3            STRING 10, LCD_ROW3, "VELOCITY C"
3C00 0A10 4556     M         da      ((length) << 8) | (pos), str
3C04 4F4C 4943
3C08 5954 4320
3C0C           00125 TEXT_AY_VELOCITY_CONFIG_ROW4            STRING 10, LCD_ROW4, "NOISE RATE"
3C0C 0A50 4F4E     M         da      ((length) << 8) | (pos), str
3C10 5349 2045
3C14 4152 4554
               00126 
               00127 ;; LCD TEXT - FX MENU 08
3C18           00128 TEXT_MB_AY_MENUE_FX_ROW1                STRING 6, LCD_ROW1, "Fx POS"
3C18 0600 7846     M         da      ((length) << 8) | (pos), str
3C1C 5020 534F
3C20           00129 TEXT_MB_AY_MENUE_FX_ROW2                STRING 8, LCD_ROW2, "Fx DELAY"
3C20 0840 7846     M         da      ((length) << 8) | (pos), str
3C24 4420 4C45
3C28 5941
3C2A           00130 TEXT_MB_AY_MENUE_FX_ROW3                STRING 2, LCD_ROW3, "Fx"
3C2A 0210 7846     M         da      ((length) << 8) | (pos), str
3C2E           00131 TEXT_MB_AY_MENUE_FX_ROW4                STRING 7, LCD_ROW4, "Fx DATA"
3C2E 0750 7846     M         da      ((length) << 8) | (pos), str
3C32 4420 5441
3C36 0041
               00132 
3C38           00133 TEXT_MB_AY_MENUE_FX_FUNC0               STRING 7, LCD_ROW3 + PLUS_POS_Fx, "Fx STOP"
3C38 0715 7846     M         da      ((length) << 8) | (pos), str
3C3C 5320 4F54
3C40 0050
3C42           00134 TEXT_MB_AY_MENUE_FX_FUNC1               STRING 5, LCD_ROW3 + PLUS_POS_Fx, "ON  A"
3C42 0515 4E4F     M         da      ((length) << 8) | (pos), str
3C46 2020 0041
3C4A           00135 TEXT_MB_AY_MENUE_FX_FUNC2               STRING 5, LCD_ROW3 + PLUS_POS_Fx, "OFF A"
3C4A 0515 464F     M         da      ((length) << 8) | (pos), str
3C4E 2046 0041
3C52           00136 TEXT_MB_AY_MENUE_FX_FUNC3               STRING 5, LCD_ROW3 + PLUS_POS_Fx, "ON  B"
3C52 0515 4E4F     M         da      ((length) << 8) | (pos), str
3C56 2020 0042
3C5A           00137 TEXT_MB_AY_MENUE_FX_FUNC4               STRING 5, LCD_ROW3 + PLUS_POS_Fx, "OFF B"
3C5A 0515 464F     M         da      ((length) << 8) | (pos), str
3C5E 2046 0042
3C62           00138 TEXT_MB_AY_MENUE_FX_FUNC5               STRING 5, LCD_ROW3 + PLUS_POS_Fx, "ON  C"
3C62 0515 4E4F     M         da      ((length) << 8) | (pos), str
3C66 2020 0043
3C6A           00139 TEXT_MB_AY_MENUE_FX_FUNC6               STRING 5, LCD_ROW3 + PLUS_POS_Fx, "OFF C"
3C6A 0515 464F     M         da      ((length) << 8) | (pos), str
3C6E 2046 0043
3C72           00140 TEXT_MB_AY_MENUE_FX_FUNC7               STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Tune A+DATA"
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3C72 0B15 7554     M         da      ((length) << 8) | (pos), str
3C76 656E 4120
3C7A 442B 5441
3C7E 0041
3C80           00141 TEXT_MB_AY_MENUE_FX_FUNC8               STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Tune A-DATA"
3C80 0B15 7554     M         da      ((length) << 8) | (pos), str
3C84 656E 4120
3C88 442D 5441
3C8C 0041
3C8E           00142 TEXT_MB_AY_MENUE_FX_FUNC9               STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Tune B+DATA"
3C8E 0B15 7554     M         da      ((length) << 8) | (pos), str
3C92 656E 4220
3C96 442B 5441
3C9A 0041
3C9C           00143 TEXT_MB_AY_MENUE_FX_FUNC10              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Tune B-DATA"
3C9C 0B15 7554     M         da      ((length) << 8) | (pos), str
3CA0 656E 4220
3CA4 442D 5441
3CA8 0041
3CAA           00144 TEXT_MB_AY_MENUE_FX_FUNC11              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Tune C+DATA"
3CAA 0B15 7554     M         da      ((length) << 8) | (pos), str
3CAE 656E 4320
3CB2 442B 5441
3CB6 0041
3CB8           00145 TEXT_MB_AY_MENUE_FX_FUNC12              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Tune C-DATA"
3CB8 0B15 7554     M         da      ((length) << 8) | (pos), str
3CBC 656E 4320
3CC0 442D 5441
3CC4 0041
3CC6           00146 TEXT_MB_AY_MENUE_FX_FUNC13              STRING 11, LCD_ROW3 + PLUS_POS_Fx,"Vol. A DATA"
3CC6 0B15 6F56     M         da      ((length) << 8) | (pos), str
3CCA 2E6C 4120
3CCE 4420 5441
3CD2 0041
3CD4           00147 TEXT_MB_AY_MENUE_FX_FUNC14              STRING 11, LCD_ROW3 + PLUS_POS_Fx,"Vol. B DATA"
3CD4 0B15 6F56     M         da      ((length) << 8) | (pos), str
3CD8 2E6C 4220
3CDC 4420 5441
3CE0 0041
3CE2           00148 TEXT_MB_AY_MENUE_FX_FUNC15              STRING 11, LCD_ROW3 + PLUS_POS_Fx,"Vol. C DATA"
3CE2 0B15 6F56     M         da      ((length) << 8) | (pos), str
3CE6 2E6C 4320
3CEA 4420 5441
3CEE 0041
3CF0           00149 TEXT_MB_AY_MENUE_FX_FUNC16              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Noise ON  A"
3CF0 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3CF4 7369 2065
3CF8 4E4F 2020
3CFC 0041
3CFE           00150 TEXT_MB_AY_MENUE_FX_FUNC17              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Noise OFF A"
3CFE 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3D02 7369 2065
3D06 464F 2046
3D0A 0041
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3D0C           00151 TEXT_MB_AY_MENUE_FX_FUNC18              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Noise ON  B"
3D0C 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3D10 7369 2065
3D14 4E4F 2020
3D18 0042
3D1A           00152 TEXT_MB_AY_MENUE_FX_FUNC19              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Noise OFF B"
3D1A 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3D1E 7369 2065
3D22 464F 2046
3D26 0042
3D28           00153 TEXT_MB_AY_MENUE_FX_FUNC20              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Noise ON  C"
3D28 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3D2C 7369 2065
3D30 4E4F 2020
3D34 0043
3D36           00154 TEXT_MB_AY_MENUE_FX_FUNC21              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Noise OFF C"
3D36 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3D3A 7369 2065
3D3E 464F 2046
3D42 0043
3D44           00155 TEXT_MB_AY_MENUE_FX_FUNC22              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "N.Frq.:0-31"
3D44 0B15 2E4E     M         da      ((length) << 8) | (pos), str
3D48 7246 2E71
3D4C 303A 332D
3D50 0031
3D52           00156 TEXT_MB_AY_MENUE_FX_FUNC23              STRING 10, LCD_ROW3 + PLUS_POS_Fx,"Env. ON  A" 
3D52 0A15 6E45     M         da      ((length) << 8) | (pos), str
3D56 2E76 4F20
3D5A 204E 4120
3D5E           00157 TEXT_MB_AY_MENUE_FX_FUNC24              STRING 10, LCD_ROW3 + PLUS_POS_Fx,"Env. OFF A"
3D5E 0A15 6E45     M         da      ((length) << 8) | (pos), str
3D62 2E76 4F20
3D66 4646 4120
3D6A           00158 TEXT_MB_AY_MENUE_FX_FUNC25              STRING 10, LCD_ROW3 + PLUS_POS_Fx,"Env. ON  B" 
3D6A 0A15 6E45     M         da      ((length) << 8) | (pos), str
3D6E 2E76 4F20
3D72 204E 4220
3D76           00159 TEXT_MB_AY_MENUE_FX_FUNC26              STRING 10, LCD_ROW3 + PLUS_POS_Fx,"Env. OFF B"
3D76 0A15 6E45     M         da      ((length) << 8) | (pos), str
3D7A 2E76 4F20
3D7E 4646 4220
3D82           00160 TEXT_MB_AY_MENUE_FX_FUNC27              STRING 10, LCD_ROW3 + PLUS_POS_Fx,"Env. ON  C" 
3D82 0A15 6E45     M         da      ((length) << 8) | (pos), str
3D86 2E76 4F20
3D8A 204E 4320
3D8E           00161 TEXT_MB_AY_MENUE_FX_FUNC28              STRING 10, LCD_ROW3 + PLUS_POS_Fx,"Env. OFF C"
3D8E 0A15 6E45     M         da      ((length) << 8) | (pos), str
3D92 2E76 4F20
3D96 4646 4320
3D9A           00162 TEXT_MB_AY_MENUE_FX_FUNC29              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Env.Shp:1-8"
3D9A 0B15 6E45     M         da      ((length) << 8) | (pos), str
3D9E 2E76 6853
3DA2 3A70 2D31
3DA6 0038
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3DA8           00163 TEXT_MB_AY_MENUE_FX_FUNC30              STRING  9,LCD_ROW3 + PLUS_POS_Fx, "Env. Fine"
3DA8 0915 6E45     M         da      ((length) << 8) | (pos), str
3DAC 2E76 4620
3DB0 6E69 0065
3DB4           00164 TEXT_MB_AY_MENUE_FX_FUNC31              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Env. Coarse"
3DB4 0B15 6E45     M         da      ((length) << 8) | (pos), str
3DB8 2E76 4320
3DBC 616F 7372
3DC0 0065
3DC2           00165 TEXT_MB_AY_MENUE_FX_FUNC32              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#1 => A"
3DC2 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3DC6 6574 3123
3DCA 3D20 203E
3DCE 0041
3DD0           00166 TEXT_MB_AY_MENUE_FX_FUNC33              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#1 => B"
3DD0 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3DD4 6574 3123
3DD8 3D20 203E
3DDC 0042
3DDE           00167 TEXT_MB_AY_MENUE_FX_FUNC34              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#1 => C"
3DDE 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3DE2 6574 3123
3DE6 3D20 203E
3DEA 0043
3DEC           00168 TEXT_MB_AY_MENUE_FX_FUNC35              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#2 => A"
3DEC 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3DF0 6574 3223
3DF4 3D20 203E
3DF8 0041
3DFA           00169 TEXT_MB_AY_MENUE_FX_FUNC36              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#2 => B"
3DFA 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3DFE 6574 3223
3E02 3D20 203E
3E06 0042
3E08           00170 TEXT_MB_AY_MENUE_FX_FUNC37              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#2 => C"
3E08 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3E0C 6574 3223
3E10 3D20 203E
3E14 0043
3E16           00171 TEXT_MB_AY_MENUE_FX_FUNC38              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#3 => A"
3E16 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3E1A 6574 3323
3E1E 3D20 203E
3E22 0041
3E24           00172 TEXT_MB_AY_MENUE_FX_FUNC39              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#3 => B"
3E24 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3E28 6574 3323
3E2C 3D20 203E
3E30 0042
3E32           00173 TEXT_MB_AY_MENUE_FX_FUNC40              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "Note#3 => C"
3E32 0B15 6F4E     M         da      ((length) << 8) | (pos), str
3E36 6574 3323
3E3A 3D20 203E
3E3E 0043
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3E40           00174 TEXT_MB_AY_MENUE_FX_FUNC41              STRING 11,LCD_ROW3 + PLUS_POS_Fx, "GoPos=>DATA" 
3E40 0B15 6F47     M         da      ((length) << 8) | (pos), str
3E44 6F50 3D73
3E48 443E 5441
3E4C 0041
               00175 
               00040 
               00041 ;; ----[PATCH]--------
               00042 #include "patch_write.inc"
               00001 ;; patch_write.inc
               00002 ;; -------------------[WRITE internal patch to pic eeprom or Bankstick ]------------
               00003 ;; ---------------------------------------------------------------------------------
3E4E           00004 PATCH_WRITE
               00005         ;; ----------------------------------------------------------------
               00006         ;; WRITE (SAVE) PATCH TO EEPROM OR BANKSTICK
               00007         ;; ----------------------------------------------------------------
               00008         
               00009         ;; -----------------[MAIN MENU1 (PATCH MENU (F1))?]----------------
               00010         ;; PATCH MENU = MAIN MENU 1
               00011         ;; CHECK: MAIN MENU = 1 ?
3E4E 0E01      00012         movlw   MAIN_MENU_01
3E50 6274      00013         cpfseq  CURRENT_MAIN_MENU
               00014                         ;; NO NOT MAIN MENU1
               00015                         ;; Exit Here
3E52 0012      00016                         return
               00017                 
               00018                 ;; YES MAIN MENU1
               00019                 ;; GO ON...
               00020 
               00021                 ;; --[CHECK ACTIVE ITEM @ Main Menu 1]-------
               00022                 ;; CHECK LOCATION VIA EDITING MODE "*"
               00023                 ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
3E54 C200 F003 00024                 movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
3E58 0E03      00025                 movlw   MENU_ITEM_POS3
3E5A 6203      00026                 cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3? | [W]rite [F]ormat ...
               00027                                 ;; NO, NOT ITEM 3
               00028                                 ;; EXIT HERE
3E5C 0012      00029                                 return
               00030 
               00031                 ;; YES, ITEM 3 IS ACTIVE (EDITING MODE)
               00032                 ;; GO ON
               00033                 
               00034         ;; ---------------------------[EEPROM or BANKSTICK?]----------------------------------
               00035         ;; CHECK:
               00036         ;; WRITE to EEPROM or BANKSTICK
               00037         ;; PATCH_MENU_STATE_FLAGS
               00038         ;; BIT2 = 0 = WRITE EEPROM PATCH (PIC INTERNAL PATCH)
               00039         ;; BIT2 = 1 = WRITE BANKSTICK PATCH
3E5E A47D      00040         btfss   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00041                                 ;; WRITE EEPROM PATCH (PIC INTERNAL PATCH)
               00042                                 ;; BIT2 = CLEAR
               00043                                 ;; USER WANT TO WRITE A PATCH TO PIC EEPROM (INTERNAL PATCH)
               00044                                 ;; NO FUTHER CHECKING NEEDED - GO AND WRITE THE PATCH DATA 
               00045                                 ;; TO PIC EEPROM
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00046                                 ;; ---[GO AND WRITE PATCH TO EEPROM]------------------------------
               00047                                 rgoto PATCH_WRITE_DO
3E60 D007          M         bra     label
               00048                                 ;; --------------------------------------------------------------
               00049 
               00050 
               00051                 ;; -------------[STATE: SELECTED PATCH = BANKSTICK PATCH]------------------------
               00052                 ;; -------------[CHECK: BANKSTICK AVAILABLE?]------------------------------------
               00053                 ;; BIT2 = SET
               00054                 ;; USER SELECTED A BANKSTICK PATCH
               00055                 ;; USER WANT TO WRITE A PATCH TO BANKSTICK
               00056                 ;; NEXT THING TO DO:
               00057                 ;; CHECK IF THE BANKSTICK IS AVAILABLE
3E62 A07D      00058                 btfss   PATCH_MENU_STATE_FLAGS, BIT0_BANKSTICK_FOUND
               00059                                         ;; ---[BANKSTICK NOT AVAILABLE]----------------
               00060                                         ;; ---[DO: EXIT HERE]--------------------------
               00061                                         ;; BIT0 = 0 = NO BANKSTICK FOUND
               00062                                         ;; A BANKSTICK PATCH WAS SELECTED
               00063                                         ;; BY THE USER, BUT THERE WAS NO BANKSTICK FOUND
               00064                                         ;; EXIT HERE
3E64 0012      00065                                         return
               00066                         ;; ---[BANKSTICK IS AVAILABLE]----------------
               00067                         ;; BIT0 = 1 = BANKSTICK IS AVAILABLE
               00068                         ;; GO ON WITH:  
               00069         ;; -------------[CHECK: IS THE "DO BANKSTICK FORMAT MODE" ON?]----------------------------- 
               00070         ;; ----------------------------------------------------------------------------------------
               00071         ;; CHECK IF THE "BANKSTICK DO FORMAT" BIT = ON or OFF
3E66 B67D      00072         btfsc   PATCH_MENU_STATE_FLAGS, BIT3_SELECTED_PATCH_FORMAT_BANKSTICK            
               00073                         ;; ------------[FORMAT MODE = ON]----------------
               00074                         ;; BIT3 = 1 = THE "FORMAT BANKSTICK" BIT3 is SET
               00075                         ;; --------[DO FOARMAT BANKSTICK]----------------
               00076                         ;; FORMAT BANSTICK PATCH BY PATCH SUBROUTINE
               00077                         ;; @ format_bankstick.inc
3E68 EF19 F01C 00078                         goto PATCH_WRITE_DO_FORMAT_BANKSTICK
               00079 
               00080                 ;; ------------[FORMAT MODE = OFF]----------------
               00081                 ;; BIT3 = 0 = THE "FORMAT BANKSTICK" BIT3 is CLEAR 
               00082                 ;; DO NOT FORMAT THE CURREND BANKSTICK 
               00083                 ;; NEXT STEP: CHECK IF BANKSTICK IS FORMATTED
               00084 
               00085 ;; ---------------------------------------------------------------------------------------------------
               00086 ;; -----------------------------------[STATE: SELECTED PATCH = BANKSTICK PATCH]-----------------------
               00087 ;; -----------------------------------[STATE: BANKSTICK is AVAILABLE          ]-----------------------
               00088 ;; -----------------------------------[STATE: DO FORAMT BANKSTICK MODE is OFF ]-----------------------
               00089 ;; -----------------------------------[DO   : CHECK if BANKSTICK IS FORMATTED ]----------------------- 
3E6C           00090 PATCH_WRITE_CHECK_IF_BANKSTICK_IS_FORMATTED
               00091         ;; --------------------------[BANKSTICK FORMATTED?]-------------------------------------------
               00092         ;; CHECK:
               00093         ;; IS THE BANKSTICK FORMATTED?
3E6C A27D      00094         btfss   PATCH_MENU_STATE_FLAGS, BIT1_BANKSTICK_SELECTED_PATCH_FORMATED
               00095                                 ;; ----------[NO]---------------------------
               00096                                 ;; BIT1 = CLEAR = BANKSTICK IS NOT FORMATTED
               00097                                 ;; SO EXIT HERE 
3E6E 0012      00098                                 return
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00099                 ;; --------[YES]------------------------                        
               00100                 ;; BIT1 = 1 = BANKSTICK IS FORMATTED :-)
               00101                 ;; SO WE CAN GO ON
               00102                 ;; WRITE PATCH DATA TO BANKSTICK
               00103 ;; ---------------------------------------------------------------------------------------------------
               00104 ;; -------------[STATE: SELECTED PATCH = BANKSTICK PATCH  ]-------------------------------------------
               00105 ;; -------------[STATE: BANKSTICK is AVAILABLE            ]-------------------------------------------
               00106 ;; -------------[STATE: DO FORAMT BANKSTICK MODE is OFF   ]-------------------------------------------
               00107 ;; -------------[STATE: BANKSTICK IS FORMATTED            ]-------------------------------------------
               00108 ;; -------------[DO: WRITE DATA to PIC EEPROM or BANKSTICK]-------------------------------------------
               00109 ;; ---------------------------------------------------------------------------------------------------
               00110 
3E70           00111 PATCH_WRITE_DO
               00112 ;; MEMO:
               00113 ;; ALSO JUMP IN POINT FROM BANKSTICK FORMAT SUBROUTINE (format_bankstick.inc)
               00114         
               00115         ;; --------------------------------------------------------------------------
               00116         ;; -------------------------[Write Fingerprint]------------------------------
               00117         ;; --------------------------------------------------------------------------
               00118         ;; DO: WRITE the FINGERPRINT BYTE TO PIC EEPROM (INTERNAL PATCH) or BANKSTICK
               00119         ;; DO: INITIALIZE EEPROM START ADRESS or BANKSTICK PATCH START ADRESS
3E70 EC27 F020 00120         call WRITE_PATCH_FINGERPRINT    ;; [EEPROM/BANKSTICK PATCH-DATA BYTE1 @ ADR0]
               00121         
               00122         ;; MEMO:
               00123         ;;
               00124         ;; EEPROM:
               00125         ;; PATCH DATA BYTE ADR 0 has been Written (FINGERPRINT BYTE) - 
               00126         ;; FINGERPRINT ADR = 0
               00127         ;;
               00128         ;; or 
               00129         ;;
               00130         ;;    BANKSTICK: 
               00131         ;;    BANKSTICK ADR [PATCH OFFSET + 0] has been written with the BANKSTICK (FINGERPRINT BYTE)
               00132         ;;    FINGERPRINT ADR  = 0x00
               00133         ;;    PATCH NUMBER ADR = 0x01
               00134         
               00135         
               00136 ;; --------------------------------------------------------------------
               00137 ;; ---------[SAVE PATCH DATA to EEPROM (PIC EEPROM INT PATCH)]---------
               00138 ;;          Liste der zu speichernden MIDIBOX AY Patch variablen
               00139 ;; --------------------------------------------------------------------
               00140         ;; MEMO:
               00141         ;; -----
               00142         ;; EEPROM      ADR 0 = FINGERPRINT BYTE
               00143         ;; NEXT EEPROM ADR THAT WILL BE WRITTEN           = 0x01
               00144         ;; BANKSTICK ADR 0 = FINGERPRINT BYTE
               00145         ;; BANKSTICK ADR 1 = PATCH NUMBER BYTE
               00146         ;; NEXT BANKSTICK PATCH ADR THAT WILL BE WRITTEN  = 0x02 
               00147         
               00148         ;; WRITE:
               00149         ;; ------
               00150         ;; PATCH DATA BYTE 001
               00151         ;; [INTERNAL PATCH - ADR 0x01 @ EEPROM] [BANKSTICK PATCH ADR 0x02 @ BANKSTICK]
3E74 C303 F03F 00152         movff   PATCH_NAME_ASC_0, CURREND_PATCH_DATA_BYTE_TEMP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3E78 EC17 F020 00153         call    WRITE_PATCH_DATA_BYTE
               00154         
               00155         ;; PATCH DATA BYTE 002
               00156         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x02 @ EEPROM] [BANKSTICK PATCH ADR 0x03 @ BANKSTICK]
3E7C C304 F03F 00157         movff   PATCH_NAME_ASC_1, CURREND_PATCH_DATA_BYTE_TEMP
3E80 EC17 F020 00158         call    WRITE_PATCH_DATA_BYTE
               00159         
               00160         ;; PATCH DATA BYTE 003
               00161         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x03 @ EEPROM] [BANKSTICK PATCH ADR 0x04 @ BANKSTICK]
3E84 C305 F03F 00162         movff   PATCH_NAME_ASC_2, CURREND_PATCH_DATA_BYTE_TEMP
3E88 EC17 F020 00163         call    WRITE_PATCH_DATA_BYTE
               00164         
               00165         ;; PATCH DATA BYTE 004
               00166         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x04 @ EEPROM] [BANKSTICK PATCH ADR 0x05 @ BANKSTICK]
3E8C C306 F03F 00167         movff   PATCH_NAME_ASC_3, CURREND_PATCH_DATA_BYTE_TEMP
3E90 EC17 F020 00168         call    WRITE_PATCH_DATA_BYTE
               00169         
               00170         ;; PATCH DATA BYTE 005
               00171         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x05 @ EEPROM] [BANKSTICK PATCH ADR 0x06 @ BANKSTICK]
3E94 C307 F03F 00172         movff   PATCH_NAME_ASC_4, CURREND_PATCH_DATA_BYTE_TEMP
3E98 EC17 F020 00173         call    WRITE_PATCH_DATA_BYTE
               00174         
               00175         ;; PATCH DATA BYTE 006
               00176         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x06 @ EEPROM] [BANKSTICK PATCH ADR 0x07 @ BANKSTICK]
3E9C C308 F03F 00177         movff   PATCH_NAME_ASC_5, CURREND_PATCH_DATA_BYTE_TEMP
3EA0 EC17 F020 00178         call    WRITE_PATCH_DATA_BYTE
               00179         
               00180         ;; PATCH DATA BYTE 007
               00181 ;       ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x07 @ EEPROM] [BANKSTICK PATCH ADR 0x08 @ BANKSTICK]
3EA4 C309 F03F 00182         movff   PATCH_NAME_ASC_6, CURREND_PATCH_DATA_BYTE_TEMP
3EA8 EC17 F020 00183         call    WRITE_PATCH_DATA_BYTE
               00184         
               00185         ;; PATCH DATA BYTE 008
               00186         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x08 @ EEPROM] [BANKSTICK PATCH ADR 0x09 @ BANKSTICK]
3EAC C30A F03F 00187         movff   PATCH_NAME_ASC_7, CURREND_PATCH_DATA_BYTE_TEMP
3EB0 EC17 F020 00188         call    WRITE_PATCH_DATA_BYTE
               00189         
               00190         ;; PATCH DATA BYTE 009
               00191         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x09 @ EEPROM] [BANKSTICK PATCH ADR 0x0A @ BANKSTICK]
3EB4 C023 F03F 00192         movff AY_TONE_A_TUNE_FINE_USER, CURREND_PATCH_DATA_BYTE_TEMP
3EB8 EC17 F020 00193         call    WRITE_PATCH_DATA_BYTE
               00194         
               00195         ;; PATCH DATA BYTE 010
               00196         ;; PATCH DATA BYTE [INTERNAL PATCH - ADR 0x0A @ EEPROM] [BANKSTICK PATCH ADR 0x0B @ BANKSTICK]
3EBC C024 F03F 00197         movff AY_TONE_B_TUNE_FINE_USER, CURREND_PATCH_DATA_BYTE_TEMP
3EC0 EC17 F020 00198         call    WRITE_PATCH_DATA_BYTE
               00199         
               00200         ;; PATCH DATA BYTE 011
               00201         ;; etc. ...
3EC4 C025 F03F 00202         movff AY_TONE_C_TUNE_FINE_USER, CURREND_PATCH_DATA_BYTE_TEMP
3EC8 EC17 F020 00203         call    WRITE_PATCH_DATA_BYTE
               00204         
               00205         ;; PATCH DATA BYTE 012 ...
3ECC C026 F03F 00206         movff AY_TONE_A_TUNE_COARSE_USER, CURREND_PATCH_DATA_BYTE_TEMP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3ED0 EC17 F020 00207         call    WRITE_PATCH_DATA_BYTE
               00208 
3ED4 C027 F03F 00209         movff AY_TONE_B_TUNE_COARSE_USER, CURREND_PATCH_DATA_BYTE_TEMP
3ED8 EC17 F020 00210         call    WRITE_PATCH_DATA_BYTE
               00211         
3EDC C028 F03F 00212         movff AY_TONE_C_TUNE_COARSE_USER,CURREND_PATCH_DATA_BYTE_TEMP
3EE0 EC17 F020 00213         call    WRITE_PATCH_DATA_BYTE
               00214         
3EE4 C030 F03F 00215         movff AY_TONE_A_MIDI_CHANNEL_USER, CURREND_PATCH_DATA_BYTE_TEMP
3EE8 EC17 F020 00216         call    WRITE_PATCH_DATA_BYTE
               00217         
3EEC C031 F03F 00218         movff AY_TONE_B_MIDI_CHANNEL_USER, CURREND_PATCH_DATA_BYTE_TEMP
3EF0 EC17 F020 00219         call    WRITE_PATCH_DATA_BYTE
               00220         
3EF4 C032 F03F 00221         movff AY_TONE_C_MIDI_CHANNEL_USER, CURREND_PATCH_DATA_BYTE_TEMP
3EF8 EC17 F020 00222         call    WRITE_PATCH_DATA_BYTE
               00223         
3EFC C033 F03F 00224         movff AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, CURREND_PATCH_DATA_BYTE_TEMP
3F00 EC17 F020 00225         call    WRITE_PATCH_DATA_BYTE
               00226 
3F04 C06A F03F 00227         movff AY_R6_NOISE_PERIOD, CURREND_PATCH_DATA_BYTE_TEMP
3F08 EC17 F020 00228         call    WRITE_PATCH_DATA_BYTE
               00229         
3F0C C06C F03F 00230         movff AY_R8_CH_A_AMPLITUDE, CURREND_PATCH_DATA_BYTE_TEMP
3F10 EC17 F020 00231         call    WRITE_PATCH_DATA_BYTE
               00232 
3F14 C06D F03F 00233         movff AY_R9_CH_B_AMPLITUDE, CURREND_PATCH_DATA_BYTE_TEMP
3F18 EC17 F020 00234         call    WRITE_PATCH_DATA_BYTE
               00235 
3F1C C06E F03F 00236         movff AY_R10_CH_C_AMPLITUDE, CURREND_PATCH_DATA_BYTE_TEMP
3F20 EC17 F020 00237         call    WRITE_PATCH_DATA_BYTE
               00238 
3F24 C06F F03F 00239         movff AY_R11_ENV_PERIOD_FINE, CURREND_PATCH_DATA_BYTE_TEMP
3F28 EC17 F020 00240         call    WRITE_PATCH_DATA_BYTE
               00241         
3F2C C070 F03F 00242         movff AY_R12_ENV_PERIOD_COARSE, CURREND_PATCH_DATA_BYTE_TEMP
3F30 EC17 F020 00243         call    WRITE_PATCH_DATA_BYTE
               00244         
3F34 C07A F03F 00245         movff ENV_SHAPE_0_15_to_1_8_TRANSLATOR, CURREND_PATCH_DATA_BYTE_TEMP
3F38 EC17 F020 00246         call    WRITE_PATCH_DATA_BYTE
               00247 
3F3C C020 F03F 00248         movff AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, CURREND_PATCH_DATA_BYTE_TEMP
3F40 EC17 F020 00249         call    WRITE_PATCH_DATA_BYTE
               00250 
               00251         ;; WRITE:
               00252         ;; PATCH DATA BYTE 027
               00253         ;; INTERNAL PATCH DATA BYTE   [INTERNAL EEPROM PATCH - ADR 0x1B (027 DEC)@ EEPROM   ] 
               00254         ;; BANKSTICK PATCH DATA BAYTE [BANKSTICK PATCH         ADR 0x1C (028 DEC)@ BANKSTICK]
3F44 C04D F03F 00255         movff FX_USER_ON_OFF_ABC, CURREND_PATCH_DATA_BYTE_TEMP
3F48 EC17 F020 00256         call    WRITE_PATCH_DATA_BYTE
               00257 
               00258 
               00259         ;; -------------------------------------------------------------------------------------------
               00260         ;; -------------------------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00261 
               00262         ;; -----------------------------------------------------------------------------------
               00263         ;; --------[PREPARE to STORE Fx (Fx FUNCTION, Fx DATA, Fx TIME)]----------------------
               00264         ;;    PREPARE TO WRITE ALL Fx REGS to PIC EEPROM (INTernal Patch) or BANKSTICK
               00265         ;; ------------------------------------------------------------------------------------ 
3F4C 0E02      00266         movlw SELECT_Fx_RAM_BANK                ;; INDIRECT RAM ADDRESSING - SELECT RAM BANK
3F4E 6EEA      00267         movwf FSR0H                             ;; SET THE RAM BANK (WRITE TO IND. FILE SELECT REGISTER HIBYTE)
3F50 6A60      00268         clrf  Fx_LOAD_WRITE_ADR_COUNTER_TMP     ;; RESET WRITE CYCLE [0-31] COUNTER
               00269         ;; ------------------------------------------------------------------------------------
               00270         ;; ---------[END: PREPARE to SAVE Fx (Fx FUNCTION, Fx DATA, Fx TIME)]------------------
               00271         ;; ------------------------------------------------------------------------------------
               00272 
               00273         ;; CHECK: 
               00274         ;; DO WRITE DATA TO EEPROM or BANKSTICK?
               00275         ;; PATCH_MENU_STATE_FLAGS
               00276         ;; BIT2 = 0 = WRITE Fx DATA to EEPROM (PIC INTERNAL PATCH)
               00277         ;; BIT2 = 1 = WRITE Fx DATA to BANKSTICK 
3F52 B47D      00278         btfsc   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00279                         ;; BANKSTICK
               00280                         ;; BIT2 = SET   
               00281                         rgoto WRITE_ALL_FX_PATCH_DATA_TO_BANKSTICK
3F54 D031          M         bra     label
               00282                 
               00283                         ;; INTERNAL
               00284                         ;; BIT2 = CLEAR
               00285                         ;; WRITE PATCH FINGERPRINT INTERNAL 
               00286                         rgoto WRITE_ALL_FX_PATCH_DATA_TO_EEPROM
3F56 D000          M         bra     label
               00287                         
               00288 ;; -----------------------------------------------------------------------
               00289 
               00290 
               00291 
               00292 ;; -----------------------------------------------------------------------
               00293 ;; -----------------------[WRITE Fx DATA TO EEPROM]-----------------------
               00294 ;; -----------------------------------------------------------------------
               00295 
3F58           00296 WRITE_ALL_FX_PATCH_DATA_TO_EEPROM       
               00297         
               00298         ;; DO LOOP 32x 
3F58           00299 WRITE_PATCH_FX_FUNC_TO_EEPROM
               00300         ;; -------------------------------------------------------------------------------
               00301         ;; ---------------[WRITE Fx *Func* to EEPROM]-------------------------
               00302         ;; LOAD FX FUNCTION [POS 0-31] from PIC RAM
               00303         ;; Fx FUNCTIONS @ Currend Fx Pos [0-31] 
3F58 0E20      00304         movlw RAM_OFFSET_FX_FUNCTION                    ;; PIC RAM BANK OFFSET - fx functions 
3F5A 2460      00305         addwf Fx_LOAD_WRITE_ADR_COUNTER_TMP, W          ;; OFFSET + (0 to 31 [32]) => Fx Tab Pos
3F5C 6EE9      00306         movwf FSR0L                                     ;; CURREND Fx Func. ADR. (current Fx Func. Pos.)
3F5E CFEF F05F 00307         movff INDF0, Fx_PATCH_DATA_TMP                  ;; WRITE FX FUNCTION (currend Pos) to TMP
               00308         ;; ------------------------------------------------------------------------------
               00309         ;; WRITE Fx FUNTION @ POS [0-31] TO EEPROM
3F62 0E20      00310         movlw   EEPROM_OFFSET_FX_FUNCTION               ;; CONST: EEPROM OFFSET (0x20)
3F64 2460      00311         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; ADD EEPROM OFFSET + POS
3F66 6EA9      00312         movwf   EEADR                                   ;; SETUP EEPROM ADRESS [OFFSET+POS] for WRITING
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
3F68 505F      00313         movf      Fx_PATCH_DATA_TMP, W                  ;; WRITE FX FUNCTION @ currend Pos TO WREG
3F6A ECB2 F016 00314         call      MIOS_EEPROM_Write                     ;; WRITE FX FUNCTION @ currend Pos TO PIC EEPROM 
               00315                                                                         ;; (EEADR will be incremented)
               00316         ;; ------------------------------------------------------------------------------
               00317         ;; ------------------------------------------------------------------------------
               00318                 ;; POS = POS +1
3F6E 2A60      00319                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00320                 ;; check if pos = 32 [range = 0 to 31]
3F70 0E20      00321                 movlw FX_POS_MAX_PLUS1 ;; dec 31+1
3F72 6260      00322                 cpfseq Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00323                         
               00324                         ;; POS < 32
               00325                         ;; Do another Fx Func WRITE CYCLE
               00326                         ;; write 32x
               00327                         rgoto WRITE_PATCH_FX_FUNC_TO_EEPROM
3F74 D7F1          M         bra     label
               00328                         
               00329                         ;; POS = 32
               00330                         ;; ALL Fx Func. REGS HAD BEEN SAVED TO EEPROM
               00331                         ;; RESET WRITE CYCLE [0-31] COUNTER
               00332                         ;; go on with Write Fx DATA
3F76 6A60      00333                         clrf Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00334         ;; ---------------[END: Fx Func to EEPROM WRITING CYCLE]-------------------------
               00335         ;; ------------------------------------------------------------------------------
               00336         
               00337 
               00338         ;; ---------------[WRITE Fx DATA to EEPROM WRITING CYCLE]------------------------
3F78           00339 WRITE_PATCH_FX_DATA_TO_EEPROM
               00340         ;; DO 32x 
               00341         ;; LOAD Fx DATA [POS 0-31] from PIC RAM
               00342         ;; Fx DATA @ Currend Fx Pos [0-31]      
               00343         ;; LOAD FX DATA
               00344         ;; Fx DATA Reg. @ Currend Fx Pos [0-31] 
3F78 0E40      00345         movlw RAM_OFFSET_FX_DATA                        ;; PIC RAM OFFSET - to fx DATA Registers
3F7A 2460      00346         addwf Fx_LOAD_WRITE_ADR_COUNTER_TMP, W          ;; OFFSETT + POS (0 to 31 [32]) => Fx Tab. Pos
3F7C 6EE9      00347         movwf FSR0L                                     ;; LOAD CURREND OFFSET IND. ADR. 
               00348                                                         ;; for Fx DATA Registers @ current Fx Pos.
3F7E CFEF F05F 00349         movff INDF0, Fx_PATCH_DATA_TMP                  ;; WRITE FX DATA @ currend Pos to TEMP
               00350         ;; --------------------------------------------------------------------------------------
3F82 0E40      00351         movlw   EEPROM_OFFSET_FX_DATA                   ;; LOAD EEPROM OFFSET
3F84 2460      00352         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; EEPROM OFFSET + POS (0-31)
3F86 6EA9      00353         movwf   EEADR                                   ;; SET EEPROM ADRESS [OFFSET+POS]
3F88 505F      00354         movf    Fx_PATCH_DATA_TMP, W                    ;; WRITE FX DATA @ currend Pos TO WREG
3F8A ECB2 F016 00355         call    MIOS_EEPROM_Write                       ;; WRITE FX DATA @ currend Pos TO PIC EEPROM 
               00356                                                         ;; EEADR will be incremented (AUTO INC)
               00357         ;; ------------------------------------------------------------------------------
3F8E 2A60      00358                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00359                 
               00360                 ;; check if pos = FX_POS_MAX_PLUS1      (32 =  Fx Tab Max. +1 (31+1))
3F90 0E20      00361                 movlw   FX_POS_MAX_PLUS1         ;; dec 32
3F92 6260      00362                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00363                         
               00364                         ;; Fx Tab. Pos < 32
               00365                         ;; GO ON WITH AONTHER "WRITE FX DATA TO EEPROM" CYCLE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00366                         rgoto WRITE_PATCH_FX_DATA_TO_EEPROM
3F94 D7F1          M         bra     label
               00367                         
               00368                         ;; POS = 32
               00369                         ;; ALL Fx DATA REGS HAD BEEN SAVED TO EEPROM
               00370                         ;; RESET WRITE CYCLE [0-31] COUNTER
               00371                         ;; go on with Write Fx TIME
3F96 6A60      00372                         clrf Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00373         ;; ---------------[END: Fx DATA to EEPROM WRITING CYCLE]--------------------------------
               00374 
3F98           00375 WRITE_PATCH_FX_TIME_TO_EEPROM
               00376         ;; DO 32x 
               00377         ;; ---------------[Fx PRE DELAY TIME to EEPROM WRITING CYCLE]---------------------------
               00378         ;; LOAD FX PRE DELAY TIME
               00379         ;; Fx PRE DELAY TIME Reg. @ Currend Fx Pos [0-31]       
3F98 0E60      00380         movlw RAM_OFFSET_FX_TIME_PRE_EXECUTION          ;; PIC RAM OFFSET - to fx functions 
3F9A 2460      00381         addwf Fx_LOAD_WRITE_ADR_COUNTER_TMP, W          ;; OFFSET + (0 to 31 [32]) => Fx Tab Pos
3F9C 6EE9      00382         movwf FSR0L                                     ;; LOAD CURREND OFFSET IND. ADR. 
               00383                                                         ;; for Fx TIME Registers @ current Fx Pos.
3F9E CFEF F05F 00384         movff INDF0, Fx_PATCH_DATA_TMP                  ;; WRITE FX FUNCTION @ currend Pos to TEMP
               00385         ;; --------------------------------------------------------------------------------------
3FA2 0E60      00386         movlw   EEPROM_OFFSET_FX_TIME_PRE_EXECUTION     ;; EEPROM OFFSET (!)
3FA4 2460      00387         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
3FA6 6EA9      00388         movwf   EEADR                                   ;; SET EEPROM ADRESS [OFFSET+POS]
3FA8 505F      00389         movf    Fx_PATCH_DATA_TMP, W                    ;; WRITE FX FUNCTION @ currend Pos TO WREG
3FAA ECB2 F016 00390         call    MIOS_EEPROM_Write                       ;; WRITE FX FUNCTION @ currend Pos TO PIC EEPROM 
               00391                                                                         ;; (EEADR will be incremented)
               00392         ;; ------------------------------------------------------------------------------
               00393         
3FAE 2A60      00394                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00395                 
               00396                 ;; check if pos = FX_POS_MAX_PLUS1      (32 =  Fx Tab Max. +1 (31+1))
3FB0 0E20      00397                 movlw   FX_POS_MAX_PLUS1 ;; Fx Tab Pos > Fx Pos Max  ?
3FB2 6260      00398                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00399                         
               00400                         ;; Fx_LOAD_WRITE_ADR_COUNTER_TMP < 32
               00401                         ;; DO ANOTHER CYCLE
               00402                         ;; TILL Fx_LOAD_WRITE_ADR_COUNTER_TMP = FX_POS_MAX_PLUS1
               00403                         rgoto WRITE_PATCH_FX_TIME_TO_EEPROM
3FB4 D7F1          M         bra     label
               00404                         
               00405                         ;; Fx_LOAD_WRITE_ADR_COUNTER_TMP = FX_POS_MAX_PLUS1
               00406                         ;; go on with FINALIZING 
               00407                         rgoto WRITE_PATCH_FINISH
3FB6 D028          M         bra     label
               00408                         
               00409 ;; ---------------[END: Fx PRE DELAY TIME to EEPROM WRITING CYCLE]-----------------
               00410 
               00411 
               00412 ;; ---------------------------------------------------------------------------
               00413 ;; -----------------------[END: WRITE Fx DATA TO EEPROM]----------------------
               00414 ;; ---------------------------------------------------------------------------
               00415 
               00416 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00417 ;; ---------------------------------------------------------------------------
               00418 ;; -----------------------[WRITE Fx DATA TO BANKSTICK]---------------------------
               00419 ;; ---------------------------------------------------------------------------
3FB8           00420 WRITE_ALL_FX_PATCH_DATA_TO_BANKSTICK
               00421         
               00422         
               00423         ;; DO LOOP 32x 
3FB8           00424 WRITE_PATCH_FX_FUNC_TO_BANKSTICK
               00425         ;; -------------------------------------------------------------------------------
               00426         ;; ---------------[WRITE Fx *Functions* to BANKSTICK]----------------------------------
               00427         ;; LOAD FX FUNCTION [POS 0-31] from PIC RAM
               00428         ;; Fx FUNCTIONS @ Currend Fx Pos [0-31] 
3FB8 0E20      00429         movlw RAM_OFFSET_FX_FUNCTION            ;; CONST: PIC RAM BANK OFFSET - fx functions Area 
3FBA 2460      00430         addwf Fx_LOAD_WRITE_ADR_COUNTER_TMP, W  ;; OFFSET + (POS 0 to 31 [32]) => Fx Tab Pos
3FBC 6EE9      00431         movwf FSR0L                             ;; CURREND Fx Func. ADR. (current Fx Func. Pos.)
3FBE CFEF F05F 00432         movff INDF0, Fx_PATCH_DATA_TMP          ;; WRITE FX FUNCTION (currend Pos) to TMP
               00433         ;; ------------------------------------------------------------------------------
               00434         ;; MEMO:
               00435         ;; HOW DOES THIS ROUTINE CHOOSE THE RIGHT BANKSTICK ADRESS?
               00436         ;; Fx_LOAD_WRITE_ADR_COUNTER_TMP WAS ALREADY CLEARD (WRITE CYCLE COUNTER [0-31])
               00437         ;; THE BANKSTICK ADRESS WAS predefined by the *WRITE_PATCH_FINGERPRINT_BANKSTICK* ROUTINE
               00438         ;; THE WRITE_PATCH_FINGERPRINT_BANKSTICK ROUTINE DO:
               00439         ;; * SET THE BANKSTICK *HIGH BYTE* ADR to the *CURREND PATCH NUMBER* -1 [[[RANGE: 1 to 128] -1] (=> 0 to 127)]
               00440         ;; * CLEAR THE BANKSTICK LOW ADR BYTE COUNTER to 0
               00441         ;; * WRITE THE FINGERPRINT BYTE @ PATCH DATA LOW BYTE ADR. 0 (THEN THE LOW ADR. BYTE = 1 (AUTO INC))
               00442         ;; * WRITE THE PATCH NUMBER BYTE @ PATCH DATA LOW BYTE ARD. 1 (THEN THE LOW ADR. BYTE = 2 (AUTO INC))
               00443         ;; * SET THE BANKSTICK_LOW_BYTE_ADR_COUNTER to 2 (not relevant here)
               00444         ;; -------------------------------------------------------------------------------
               00445         ;; -----[DO WRITE BYTE TO BANKSTICK]----------------------------------------------
3FC2 505F      00446         movf    Fx_PATCH_DATA_TMP, W                    ;; WRITE FX FUNCTION @ currend Pos TO WREG
3FC4 ECBA F016 00447         call    MIOS_BANKSTICK_Write                    ;; WRITE [FX FUNCTION] @ currend Pos TO PIC BANKSTICK
               00448                                                         ;; (BANKSTICK address will be incremented after write)
               00449 
               00450                 ;; -------------------------------------------------
               00451                 ;; -------------------------------------------------
               00452                 ;; Cycle POS = CYCLE POS +1
3FC8 2A60      00453                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 BYTES]
               00454                 ;; Check:
               00455                 ;; Pos = 32 ?
3FCA 0E20      00456                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
3FCC 6260      00457                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00458                         ;; NO,
               00459                         ;; Cycle POS < 32
               00460                         ;; Do another RAM READ / BANKSTICK WRITE CYCLE
               00461                         ;; DO 32 CYCLES
               00462                         rgoto WRITE_PATCH_FX_FUNC_TO_BANKSTICK
3FCE D7F4          M         bra     label
               00463                         
               00464                         ;; YES,
               00465                         ;; POS = 32
               00466                         ;; ALL Fx Func. REGISTERS HAVE BEEN SAVED TO BANKSTICK PATCH
               00467                         ;; RESET WRITE CYCLE [0-31] COUNTER
               00468                         ;; GO ON with Write Fx DATA
3FD0 6A60      00469                         clrf Fx_LOAD_WRITE_ADR_COUNTER_TMP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00470                         ;; --------------------------------------------
               00471         ;; ---------------[END: Fx Func to EEPROM WRITING CYCLE]-------------------------
               00472         ;; ------------------------------------------------------------------------------
               00473 
               00474         ;; ---------------[WRITE Fx DATA to EEPROM WRITING CYCLE]------------------------
3FD2           00475 WRITE_PATCH_FX_DATA_TO_BANKSTICK
               00476         ;; DO 32x 
               00477         ;; LOAD Fx DATA [POS 0-31] from PIC RAM
               00478         ;; Fx DATA @ Currend Fx Pos [0-31]      
               00479         ;; LOAD FX DATA
               00480         ;; Fx DATA Reg. @ Currend Fx Pos [0-31] 
3FD2 0E40      00481         movlw RAM_OFFSET_FX_DATA                ;; PIC RAM OFFSET - to fx DATA Registers
3FD4 2460      00482         addwf Fx_LOAD_WRITE_ADR_COUNTER_TMP, W  ;; OFFSETT + POS (0 to 31 [32]) => Fx Tab. Pos
3FD6 6EE9      00483         movwf FSR0L                             ;; LOAD CURREND OFFSET IND. ADR. for Fx DATA Registers @ current Fx Pos.
3FD8 CFEF F05F 00484         movff INDF0, Fx_PATCH_DATA_TMP          ;; WRITE FX DATA @ currend Pos to TEMP
               00485         ;; --------------------------------------------------------------------------------------
               00486         ;; -----[DO WRITE BYTE TO BANKSTICK]----------------------------------------------
3FDC 505F      00487         movf      Fx_PATCH_DATA_TMP, W                  ;; WRITE FX FUNCTION @ currend Pos TO WREG
               00488         ;; movlw        0xCC    ;; Just for testing
3FDE ECBA F016 00489         call    MIOS_BANKSTICK_Write                    ;; WRITE [FX DATA] @ currend Pos TO BANKSTICK
               00490                                                         ;; (BANKSTICK ADDRESS will be incremented after write)
               00491                                                         ;; = ADR AUTO INC
               00492                 ;; -------------------------------------------------
               00493                 ;; -------------------------------------------------
               00494                 ;; Cycle POS = CYCLE POS +1
3FE2 2A60      00495                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32]
               00496                 ;; Check if pos = 32 
3FE4 0E20      00497                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
3FE6 6260      00498                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00499                         ;; NO,
               00500                         ;; Cycle POS < 32
               00501                         ;; Do another RAM READ / BANKSTICK WRITE CYCLE
               00502                         ;; DO 32 RAM READ / BANKSTICK WRITE CYCLE
               00503                         rgoto WRITE_PATCH_FX_DATA_TO_BANKSTICK
3FE8 D7F4          M         bra     label
               00504                         
               00505                         ;; YES,
               00506                         ;; POS = 32
               00507                         ;; ALL Fx DATA REGS HAVE BEEN SAVED TO BANKSTICK PATCH
               00508                         ;; RESET WRITE CYCLE [0-31] COUNTER
               00509                         ;; Go on with Write Fx TIME
3FEA 6A60      00510                         clrf Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00511                         ;; --------------------------------------------
               00512                         ;; --------------------------------------------
               00513         ;; ---------------[END: Fx DATA to EEPROM WRITING CYCLE]--------------------------------
               00514 
3FEC           00515 WRITE_PATCH_FX_TIME_TO_BANKSTICK
               00516         ;; DO 32x 
               00517         ;; ---------------[Fx PRE DELAY TIME to EEPROM WRITING CYCLE]---------------------------
               00518         ;; LOAD FX PRE DELAY TIME
               00519         ;; Fx PRE DELAY TIME Reg. @ Currend Fx Pos [0-31]       
3FEC 0E60      00520         movlw RAM_OFFSET_FX_TIME_PRE_EXECUTION          ;; PIC RAM OFFSET - to fx functions 
3FEE 2460      00521         addwf Fx_LOAD_WRITE_ADR_COUNTER_TMP, W          ;; OFFSET + (0 to 31 [32]) => Fx Tab Pos
3FF0 6EE9      00522         movwf FSR0L                                     ;; LOAD CURREND OFFSET IND. ADR. 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00523                                                         ;; for Fx TIME Registers @ current Fx Pos.
3FF2 CFEF F05F 00524         movff INDF0, Fx_PATCH_DATA_TMP                  ;; WRITE FX FUNCTION @ currend Pos to TEMP
               00525         ;; --------------------------------------------------------------------------------------
               00526         ;; -----[DO WRITE BYTE TO BANKSTICK]-----------------------------------------------------
3FF6 505F      00527         movf      Fx_PATCH_DATA_TMP, W                  ;; WRITE FX FUNCTION @ currend Pos TO WREG
               00528         ;; movlw        0xDD    ;; Just for testing
3FF8 ECBA F016 00529         call    MIOS_BANKSTICK_Write                    ;; WRITE [FX PRE EXECUTION TIME] @ currend Pos TO BANKSTICK
               00530                                                         ;; (BANKSTICK address will be incremented after write)
               00531                                                         ;; = ADR AUTO INC
               00532                 ;; ------------------------------------------------------------------------------
               00533                 ;; ------------------------------------------------------------------------------
               00534                 ;; Cycle POS = CYCLE POS +1
3FFC 2A60      00535                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32]
               00536                 ;; Check if pos = 32 
3FFE 0E20      00537                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
4000 6260      00538                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00539                         ;; NO,
               00540                         ;; Cycle POS < 32
               00541                         ;; Do another RAM READ / BANKSTICK WRITE CYCLE
               00542                         ;; DO 32 RAM READ / BANKSTICK WRITE CYCLE
               00543                         rgoto WRITE_PATCH_FX_TIME_TO_BANKSTICK
4002 D7F4          M         bra     label
               00544                         
               00545                         ;; YES,
               00546                         ;; POS = 32
               00547                         ;; ALL Fx TIME REGS HAVE BEEN SAVED TO BANKSTICK PATCH
               00548                         ;; RESET WRITE CYCLE [0-31] COUNTER
4004 6A60      00549                         clrf Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00550         
               00551         ;; END OF WRITING Fx DATA TO BANKSTICK
               00552         rgoto WRITE_PATCH_FINISH
4006 D000          M         bra     label
               00553 
               00554 ;; ---------------------------------------------------------------------------
               00555 ;; ---------------------------------------------------------------------------
               00556 ;; -----------------------[END: WRITE Fx DATA TO BANKSTICK]-------------------
               00557 ;; ---------------------------------------------------------------------------
               00558 
               00559 
4008           00560 WRITE_PATCH_FINISH
               00561 ;; --------------------------------------------------------------------------------------
               00562         ;; ------------[STATE: A PATCH HAD BEEN WRITTEN TO BANKSTICK or PIC EEPROM]------
               00563         ;; ------------[       OR A BANKSTICK PATCH HAD BEEN FORMATTED            ]------
               00564         ;; ------------------------------------------------------------------------------
               00565         ;; ------------------------------------------------------------------------------
               00566         ;; 
               00567         ;; CHECK: 
               00568         ;; IS THE "DO FORMAT BANKSTICK" BIT = ON or OFF
               00569         ;; [MEMO:]-----------------------------------------------------------------------
               00570         ;; WE DO NEED TO KNOW whether a FORMATTING PROCESS IS RUNNING OR NOT
               00571         ;; IF THE BANKSTICK FORMATTING PROCESS IS ACTIVE LET'S FORMAT ANOTHER
               00572         ;; BANKSTICK PATCH TILL ALL BS PATCHES ARE FORMATTED - BUT IF THE USER STORED A 
               00573         ;; PATCH TO INTERNAL EEPROM or BANKSTICK THE "DO FORMAT BANKSTICK" BIT = OFF
               00574         ;; IN THIS CASE WE CAN GO ON WITH A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00575         ;; LCD "OK" MESSAGE on LCD ROW4
4008 A67D      00576         btfss   PATCH_MENU_STATE_FLAGS, BIT3_SELECTED_PATCH_FORMAT_BANKSTICK
               00577                         ;; ------------[FORMAT MODE = OFF]----------------------
               00578                         ;; BIT3 = 0 = THE "FORMAT BANKSTICK" BIT3 is CLEAR 
               00579                         ;; DO NOT FORMAT THE CURREND BANKSTICK 
               00580                         ;; DO WRITE GO AND WRITE "OK" on LCD 
               00581                         rgoto WRITE_PATCH_FINISH_WRITE_ON_LCD           
400A D004          M         bra     label
               00582 
               00583                         ;; ------------[FORMAT MODE = ON]------------------------
               00584                         ;; BIT3 = SET: THE "FORMAT BANKSTICK" MODE is ON
               00585                         ;; ----------[DO ANOTHER FORRMAT BANKSTICK CYCLE]--------
               00586                         ;; ------------------------------------------------------
               00587                         ;; MEMO:
               00588                         ;; THIS IS THE JUMP OUT POINT FROM BANKSTICK FORMAT SUBROUTINE 
               00589                         ;; (format_bankstick.inc)
               00590                         ;; ------------------------------------------------------
               00591                                 ;; --[DO: WAIT CYCLES for BANKSTICK FORMATTING]--
               00592                                 ;; THIS DELAY IS NEEDED FOR WRITING ALL 
               00593                                 ;; PATCH DATA TO THE BANKSTICK (127 times).
               00594                                 ;; WITHOUT THIS DELAY MIOS CRASH AND REBOOT (!)
               00595                                 ;; ----[ STATE: FORMAT ANOTHER BANKSTICK PATCH]--
               00596                                 ;; ----[ BUT DO Wait for 120 ms               ]--
400C 0E78      00597                                 movlw   120
400E ECCE F016 00598                                 call    MIOS_Delay
               00599                                 ;; ----------------------------------------------
               00600                         ;; GO and format another BANKSTICK PATCH
               00601                         rgoto PATCH_WRITE_DO_FORMAT_BANKSTICK
4012 D40F          M         bra     label
               00602                         ;; -------------------------------------------------------
               00603                 
4014           00604 WRITE_PATCH_FINISH_WRITE_ON_LCD 
               00605                 ;; "W: OK" INFO ON LCD ROW4:
               00606                 ;; WRITING PATCH DATA WAS SUCCSESSFULL! :-)
               00607                 TABLE_ADDR LCD_CLEAR_ROW4
4014 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
4016 6EF6          M         movwf   TBLPTRL
4018 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
401A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
401C EC9E F016 00608                 call    MIOS_LCD_PrintString
               00609                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_WRITE_OK
4020 0EE4          M         movlw   LOW(addr)               ; store Lo Byte
4022 6EF6          M         movwf   TBLPTRL
4024 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4026 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4028 EC9E F016 00610                 call    MIOS_LCD_PrintString
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00611                                 
               00612                                 ;; All Done, so exit WTITE PACH subroutines here 
402C 0012      00613                                 return
               00614 
               00615 
               00616 ;; -----------------------------------------------------------------------------------------
               00617 ;; -------------------------[END OF WRITING PATCH DATA ]------------------------------------
               00618 ;; -----------------------------------------------------------------------------------------
               00619 ;; -------------------------[END SAVE Fx PATCH DATA    ]------------------------------------
               00620 ;; -----------------------------------------------------------------------------------------
               00621 
               00622 
               00623 
               00624 ;; #########################################################################################
               00625 ;; -----------------------------------------------------------------------------------------
               00626 ;; -------------------------------[:: SUBROUTINES ::]---------------------------------------
               00627 ;; -----------------------------------------------------------------------------------------
               00628 ;; #########################################################################################
               00629 ;; ---------------------------------------------------------------------------
               00630 ;; ---------------------------------------------------------------------------
               00631 ;; -----------------------[WRITE DATA BYTE TO EEPROM OR BANKSTICK]------------
               00632 ;; ---------------------------------------------------------------------------
402E           00633 WRITE_PATCH_DATA_BYTE
               00634         ;; CHECK:
               00635         ;; PATCH_MENU_STATE_FLAGS
               00636         ;; BIT2 = 0 = WRITE EEPROM PATCH (PIC INTERNAL PATCH)
               00637         ;; BIT2 = 1 = WRITE BANKSTICK PATCH
402E B47D      00638         btfsc   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00639                         ;; ===[WRITE DATA BYTE TO BANKSTICK]=====
               00640                         ;; BIT2 = SET   
               00641                         rgoto WRITE_PATCH_DATA_BYTE_TO_BANKSTICK
4030 D004          M         bra     label
               00642                                 
               00643                 ;; ===[WRITE DATA BYTE TO INTERNAL EEPROM]=======
               00644                 ;; BIT2 = CLEAR
               00645                 ;; WRITE A BYTE to INTERNAL PATCH (PIC EEPROM)
4032 503F      00646                 movf    CURREND_PATCH_DATA_BYTE_TEMP, W
4034 ECB2 F016 00647                 call    MIOS_EEPROM_Write
               00648                 ;; BYTE HAS BEEN WRITTEN TO EEPROM
               00649                 ;; EEPROM ADR = EEPROM ADR +1
               00650                         ;; EXIT THIS SUBROUTINE
4038 0012      00651                         return
               00652                 ;; ==============================================
               00653 
403A           00654 WRITE_PATCH_DATA_BYTE_TO_BANKSTICK
               00655                         ;; ===================[WRITE DATA BYTE TO BANKSTICK]================
               00656                         ;; store LOW-byte of the BANKSTICK Address in MIOS_PARAMETER1
403A C07F F003 00657                         movff    BANKSTICK_LOW_BYTE_ADR_COUNTER, MIOS_PARAMETER1
               00658                         ;; store HIGH-byte of THE BANKSTICK Address in MIOS_PARAMETER2
403E C07C F004 00659                         movff   BROWSE_PATCH_NR, MIOS_PARAMETER2
               00660                                 ;; -----------------------------------------------------------------
               00661                                 ;; SET THE -1 OFFSET TO THE PATCH NR SELECTOR
4042 0604      00662                                 decf    MIOS_PARAMETER2, F      ;; ADR (HI BYTE) BS PATCH = CURREND PATCH NR -1
               00663                         ;; -----------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00664                         ;; STORE THE CURREND PATCH DATA BYTE IN WREG
               00665                         ;; movlw 0xAA   ;; JUST FOR TESTING
4044 503F      00666                         movf    CURREND_PATCH_DATA_BYTE_TEMP, W
               00667                         ;; WRITE THE CURRENT DATA BYTE (WREG) TO BANKSTICK
4046 ECBA F016 00668                         call    MIOS_BANKSTICK_Write                    
               00669                         ;; bnz   BSProgrammingFailed                    ; branch to your exception handler
               00670                         ;; BYTE HAS BEEN WRITTEN TO BAKSTICK
               00671                         ;; --------------------------------------------------------------------
               00672                         ;; BANKSTICK ADR = BANKSTICK ADR +1 (LOW BYTE)
               00673                         ;; WE CAN NOT USE BANKSTICK ADR AUTO INC +1
               00674                         ;; SO WE DO IT THIS WAY :-)
404A 2A7F      00675                         incf    BANKSTICK_LOW_BYTE_ADR_COUNTER, F
               00676                         ;; --------------------------------------------------------------------  
               00677                                 ;; NOW THE STORE BYTE in BANKSTICK ROUTINE IS DONE
               00678                                 ;; SO LET'S EXIT HERE
404C 0012      00679                                 return
               00680                         ;; =====================================================================
               00681 ;; ---------------------------------------------------------------------------------------------
               00682 ;; -----------------------[END: WRITE DATA BYTE TO EEPROM OR BANKSTICK]-------------------------
               00683 ;; ---------------------------------------------------------------------------------------------
               00684 
               00685 ;; ----------------------------------------------------------------------------------------
               00686 ;; ----------------------------------[START: Write PATCH Fingerprint]----------------------
               00687 ;; ----------------------------------------------------------------------------------------
404E           00688 WRITE_PATCH_FINGERPRINT
               00689         ;; WRITE FINGERPRINT to EEPROM or BANKSTICK?
               00690         ;; -----------------------------------------
               00691         ;; CHECK:
               00692         ;; PATCH_MENU_STATE_FLAGS
               00693         ;; BIT2 = 0 = WRITE EEPROM PATCH (PIC INTERNAL PATCH)
               00694         ;; BIT2 = 1 = WRITE BANKSTICK PATCH
404E B47D      00695         btfsc   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00696                         ;; BANKSTICK
               00697                         ;; BIT2 = SET   
               00698                         rgoto WRITE_PATCH_FINGERPRINT_BANKSTICK
4050 D006          M         bra     label
               00699                                 
               00700                 ;; =========[WRITE INTERNAL EEPROM PATCH FINGERPRINT]===
               00701                 ;; PATCH_MENU_STATE_FLAGS BIT2 = CLEAR
               00702                 ;; PATCH = INTERNAL (PIC EEPROM)
               00703                 ;; WRITE FINGERPRINT to INTERNAL PATCH
               00704                 ;; ==========[WRITE INTERNAL EEPROM FINGERPRINT]========
               00705                 ;; INITIALIZE EEPROM ADRESS and WRITE FINGERPRINT
               00706                 ; CONST: ADRESS (=0) @ EEPROM ADDRESS REG
4052 0E00      00707                 movlw       EEPROM_ADR_FINGERPRINT
4054 6EA9      00708                 movwf       EEADR
               00709                 ; CONST: [the "INTERNAL PATCH WAS WRITTEN" Fingerprint]
4056 0E12      00710                 movlw       PIC_INT_EEPROM_FINGERPRINT
               00711                 ; WRITE FINGERPRINT TO EEPROM (EEADR will be incremented)
4058 ECB2 F016 00712                 call        MIOS_EEPROM_Write
               00713                 ;; ----------[END: WRITING FINGERPRINT TO EEPROM]--------
               00714                 
               00715                 ;; Exit SUB ROUTINE
405C 0012      00716                 return
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00717                 ;; ======================================================
               00718 
               00719 
405E           00720 WRITE_PATCH_FINGERPRINT_BANKSTICK
               00721                 ;; ==================[WRITE BANKSTICK PATCH FINGERPRINT]=====
               00722                 ;; ----------------------------------------------------------------------------
               00723                 ;; 1) INITIALIZE BANKSTICK ADRESS 
               00724                 ;; 2) WRITE FINGERPRINT TO BANKSTICK PATCH [1-127] @ CURREND PATCH ADR0
               00725                 ;; 3) WRITE BROWSE_PATCH_NR TO BANKSTICK PATCH [1-127] @ CURREND PATCH ADR1
               00726                 ;; 4) SET BANKSTICK_LOW_BYTE_ADR_COUNTER to 2 (NOW CURREND PATCH ADR = 2 @ CURREND PATCH)
               00727                         ;; ----------------------------------------------------------------------------
               00728                         ;; -----------[SET BANKSTICK ADR LOWBYTE]------------------
               00729                         ;; Store LOW-byte (FINGERPRINT) BANKSTICK ADRESS in MIOS_PARAMETER1
               00730                         ;; (LOW BYTE) = PATCH [1-128] BANSKSTICK ADRESS0 [+ HIGHBYTE OFFSET] 
               00731                         ;; SET LOW BYTE BANKSTICK ADRRESS to 0
405E 6A03      00732                         clrf        MIOS_PARAMETER1
               00733                         ;; -----------[SET BANKSTICK ADR HIGHBYTE]-------------------------------------
               00734                         ; Store HIGH-byte BANKSTICK ADRESS in MIOS_PARAMETER2
               00735                         ; FINGERPRINT (HIGH BYTE) = BROWSE_PATCH_NR = [1 to 128]
4060 C07C F004 00736                         movff       BROWSE_PATCH_NR, MIOS_PARAMETER2
               00737                         ;; -1 OFFSET
               00738                                 ;; ---------------------------------------------------------------------
               00739                                 ;; MEMO - HIGH BYTE ADR OFFSET:
               00740                                 ;; EVERY BANKSTICK PATCH NEED A HIGH BYTE OFFSET of -1
               00741                                 ;; SO THAT PATCH Nr 1   => HIGH BYTE = 0
               00742                                 ;; SO THAT PATCH Nr 2   => HIGH BYTE = 1
               00743                                 ;; SO THAT PATCH Nr 3   => HIGH BYTE = 2
               00744                                 ;; ...
               00745                                 ;; SO THAT PATCH Nr 127 => HIGH BYTE = 126
               00746                                 ;; THE HIGHEST BANKSTICK ADR = 7FFF 
               00747                                 ;; => [7F(ADR.HIGH_BYTE)FF(ADR.LOW_BYTE)]
               00748                                 ;; THERE WOULD BE NO ADR SPACE for A PATCH
               00749                                 ;; STARTING WITH A HIGH BYTE ADR @ 127 (!)
               00750                                 ;; SO THE LAST VALID HIGH BYTE ADR = 126 
               00751                                 ;; ----------------------------------------------------------------------
4064 0604      00752                         decf        MIOS_PARAMETER2, F 
               00753                         ;; ---------------------------------------------------------------------
               00754                         ;; WRITE BANKSTICK FINGERPRINT TO PATCH [1-127] FINGERPRINT BYTE 
               00755                         ;; @ CURREND PATCH ADR 0x00
4066 0E88      00756                         movlw        BANKSTICK_PATCH_FINGERPRINT
               00757                         ;; ... TO BANKSTICK
4068 ECBA F016 00758                         call         MIOS_BANKSTICK_Write        ; (address will be incremented
               00759                                                                  ;  after write)
               00760                         ;; bnz        BSProgrammingFailed        ; branch to your exception handler
               00761                         ;; ----------------------------------------------------------------------
               00762                         ;; WRITE BANKSTICK PATCH NUMBER TO PATCH [1-127] 
               00763                         ;; @ CURREND PATCH ADR 0x01
406C 507C      00764                         movf      BROWSE_PATCH_NR, W
               00765                         ;; ... TO BANKSTICK
406E ECBA F016 00766                         call      MIOS_BANKSTICK_Write           ; (address will be incremented
               00767                                                                  ;  after write)
               00768                         ;; bnz        BSProgrammingFailed        ; branch to your exception handler
               00769                         ;; ----------------------------------------------------------------------
               00770                         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00771                         ;; AFTER WRITING THE PATCH THE CURRENT PATCH IS THE browser Patch 
4072 C07C F03E 00772                         movff       BROWSE_PATCH_NR, CURREND_PATCH_NR
               00773                         
               00774                         ;; ------------[RESET: BANKSTICK_LOW_BYTE_ADR_COUNTER]-------------------
               00775                         ;; THE FINGERPRINT HAS BEEN WRITTEN TO PATCH [VALID PATCH NR. RANGE 1 to 127] 
               00776                         ;; ALL THE OTHER PATCH DATA WILL FOLOW NOW - BUT FIRST
               00777                         ;; RESET BANKSTICK LOW BYTE COUNTER TO ADR2
               00778                         ;; SEE WRITE_PATCH_DATA_BYTE_TO_BANKSTICK for futher backgrund
4076 0E02      00779                         movlw   0x02
4078 6E7F      00780                         movwf   BANKSTICK_LOW_BYTE_ADR_COUNTER
               00781                                 ;; JUMP BACK
407A 0012      00782                                 return
               00783                         ;; ===================================================
               00784 ;; ---------------------------------------------------------------------------
               00785 ;; ---------------------[END: Write PATCH Fingerprint]------------------------
               00786 ;; ---------------------------------------------------------------------------
               00787 
               00788 ;; #########################################################################################
               00789 ;; -----------------------------------------------------------------------------------------
               00790 ;; ---------------------------[:: END SUBROUTINES ::]---------------------------------------
               00791 ;; -----------------------------------------------------------------------------------------
               00792 ;; #########################################################################################
               00793 
               00043 #include "patch_load.inc"
               00001 ;; patch_load.inc
               00002 
               00003 ;; ----------------------------------------------------------------------------------------
               00004 ;; -------------[FUNCTION: LOAD PATCH DATA from PIC Eeprom or BANKSTICK to PIC RAM]--------
               00005 ;; ----------------------------------------------------------------------------------------
               00006 ;;                    LOAD A PATCH FROM EEPROM or BANKSTICK into PIC RAM
               00007 ;; ----------------------------------------------------------------------------------------
               00008 
               00009 
407C           00010 PATCH_LOAD
               00011         ;; CHECH MAIN MENU = 1 ?
407C 0E01      00012         movlw   MAIN_MENU_01    
407E 6274      00013         cpfseq  CURRENT_MAIN_MENU
               00014                 ;; NO 
               00015                 ;; NOT MAIN MENU1 (PATCH MENU)
               00016                 ;; SO EXIT HERE
4080 0012      00017                 return
               00018                 
               00019                 ;; YES, MENU = PATCH MENU
               00020                 ;; MAIN MENU = MAIN MENU1
               00021         ;; --[CHECK ACTIVE ITEM @ Main Menu 1]-------
               00022         ;; CHECK LOCATION VIA EDITING MODE "*"
4082 C200 F003 00023         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4086 0E03      00024         movlw   MENU_ITEM_POS3
4088 6203      00025         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00026                 ;; NO, NOT ITEM 3
               00027                 ;; LOAD PATCH OPTION IS ONLY VALID VIA ITEM 3
               00028                 ;; SO EXIT HERE
408A 0012      00029                 return
               00030 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00031                 ;; YES, ITEM 3 IS ACTIVE [ITEM = [L]oad and [W]rite [F]ormat...
               00032                 ;; ------------[EEPROM or BANKSTICK?]--------------------------
               00033                 ;; CHECK:
               00034                 ;; DO WE HAVE TO LOAD DATA from EEPROM or BANKSTICK
               00035                 ;; CHECK VIA PATCH_MENU_STATE_FLAGS
               00036                 ;; BIT2 = 0 = LOAD EEPROM PATCH (PIC INTERNAL PATCH)
               00037                 ;; BIT2 = 1 = LOAD A BANKSTICK PATCH
408C A47D      00038                 btfss   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00039                                 ;; LOAD EEPROM PATCH (PIC INTERNAL PATCH)
               00040                                 ;; BIT2 = CLEAR = 0
               00041                                 ;; USER WANT TO LOAD A PATCH TO PIC RAM from EEPROM (INTERNAL PATCH)
               00042                                 ;; NO FUTHER CHECKING NEEDED - GO AND LOAD THE PATCH DATA 
               00043                                 ;; TO PIC RAM FROM PIC EEPROM
               00044                                 ;; -------[STATE: USER WAND TO LOAD A PATCH               ]--------
               00045                                 ;; -------[STATE: SELECTED PATCH = INTERNAL (EEPROM) PATCH]--------
               00046                                 ;; ----------------------------------------------------------------
               00047                                 ;; FIRST THING TO DO (IF A PATCH IS TO BE LOADED INTO PIC RAM)
               00048                                 ;; IS TO CHECK THE PATCH DATA FINGERPRINT @ PATCH ARD 0
               00049                                 rgoto CHECK_PATCH_FINGERPRINT
408E D004          M         bra     label
               00050                 
               00051                 ;; -------------[STATE: USER WAND TO LOAD A PATCH       ]------------------------
               00052                 ;; -------------[STATE: SELECTED PATCH = BANKSTICK PATCH]------------------------
               00053                 ;; -------------[CHECK: BANKSTICK AVAILABLE?]------------------------------------
               00054                 ;; BIT2 = SET
               00055                 ;; USER SELECTED A *BANKSTICK* PATCH
               00056                 ;; USER WANT TO LOAD A PATCH from BANKSTICK
               00057                 ;; NEXT THING TO DO:
               00058                 ;; CHECK IF THE BANKSTICK IS AVAILABLE
4090 A07D      00059                 btfss   PATCH_MENU_STATE_FLAGS, BIT0_BANKSTICK_FOUND
               00060                                         ;; ---[STAE: BANKSTICK NOT AVAILABLE]----------------
               00061                                         ;; ---[DO: EXIT HERE                ]----------------
               00062                                         ;; BIT0 = 0 = NO BANKSTICK FOUND
               00063                                         ;; A BANKSTICK PATCH WAS SELECTED
               00064                                         ;; BY THE USER, BUT THERE WAS NO BANKSTICK FOUND
               00065                                         ;; EXIT HERE
4092 0012      00066                                         return
               00067                                         
               00068         ;; BIT0 = 1 = BANKSTICK IS AVAILABLE                    
               00069         ;; -------------[STATE: USER WAND TO LOAD A PATCH         ]---------------------------
               00070         ;; -------------[STATE: SELECTED PATCH = BANKSTICK PATCH  ]---------------------------
               00071         ;; -------------[STATE: BANKSTICK IS AVAILABLE            ]---------------------------
               00072         ;; CHECK:
               00073         ;; IS THE BANKSTICK FORMATTED?
4094 A27D      00074         btfss   PATCH_MENU_STATE_FLAGS, BIT1_BANKSTICK_SELECTED_PATCH_FORMATED
               00075                                 ;; BIT1 = CLEAR = BANKSTICK IS *NOT* FORMATTED
               00076                                 ;; ---------------[STATE: BANKSTICK NOT FORMATTED]------------------------
               00077                                 ;; SO THERE IS NO PATCH DATA TO LOAD
               00078                                 ;; EXIT HERE 
4096 0012      00079                                 return
               00080                 
               00081                 ;; BIT1 = SET = BANKSTICK IS FORMATTED :-)
               00082                 ;; -------------[STATE: USER WAND TO LOAD A PATCH         ]---------------------------
               00083                 ;; -------------[STATE: SELECTED PATCH = BANKSTICK PATCH  ]---------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00084                 ;; -------------[STATE: BANKSTICK IS AVAILABLE            ]---------------------------          
               00085                 ;; -------------[STATE: BANKSTICK IS FORMATTED            ]---------------------------
               00086                 ;; SO WE CAN GO ON WITH PATCH LOAD from BANKSTICK 
               00087                 ;; FIRST WE HAVE TO CHECK THE BANKSTICK PATCH FINGERPRINT
               00088                 
4098           00089 CHECK_PATCH_FINGERPRINT
               00090         ;; LOAD FINGERPRINT FROM EEPROM or BANKSTICK?
               00091         ;; ------------------------------------------
               00092         ;; CHECK:
               00093         ;; PATCH_MENU_STATE_FLAGS
               00094         ;; BIT2 = 0 = LOAD EEPROM PATCH (PIC INTERNAL PATCH)
               00095         ;; BIT2 = 1 = LOAD BANKSTICK PATCH
4098 B47D      00096         btfsc   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00097                         ;; BANKSTICK
               00098                         ;; BIT2 = SET   
               00099                         ;; ============[GO AND LOAD BANKSTICK PATCH FINGERPRINT]==========
               00100                         rgoto LOAD_PATCH_FINGERPRINT_BANKSTICK
409A D009          M         bra     label
               00101                                 
               00102                 ;; ================[LOAD INTERNAL (EEPROM) PATCH FINGERPRINT]=============
               00103                 ;; PATCH_MENU_STATE_FLAGS BIT2 = CLEAR
               00104                 ;; PATCH = INTERNAL (PIC EEPROM)
               00105                 ;; LOAD FINGERPRINT from INTERNAL PATCH (PIC EEPROM)
               00106                 ;; -------------------------------------------------------------------  
               00107                 ;; CHECK THE FINGERPRINT @ EEPROM ADR 0
               00108                 ;; DATA MUST BE = PIC_INT_EEPROM_FINGERPRINT (0x12)
               00109                 ;; ELSE THE PATCH DATA IS NOT VALID
409C 0E00      00110                 movlw   EEPROM_ADR_FINGERPRINT          ;; ADR 0
409E 6EA9      00111                 movwf   EEADR                           ;; MOVE ADR 0 TO EEPROM ARD REG
40A0 ECB0 F016 00112                 call    MIOS_EEPROM_Read                ;; read Byte from EEPROM and INC EEADR +1 (AUTO INC ADR)
40A4 6E03      00113                 movwf   MIOS_PARAMETER1                 ;; MOVE DATA from EEPROM ADR0 to MIOS_PARAMETER1
               00114                 ;; MEMO:
               00115                 ;; PIC_INT_EEPROM_FINGERPRINT = CONST 
               00116                 ;; DATA BYTE from PIC int EEPROM 
               00117                 ;; @ ADR0 = PIC_INT_EEPROM_FINGERPRINT?
40A6 0E12      00118                 movlw   PIC_INT_EEPROM_FINGERPRINT      
40A8 6203      00119                 cpfseq  MIOS_PARAMETER1
               00120                         ;; NO,
               00121                         ;; THERE IS NO VALID FINGERPRINT @ PIC EEPROM ADR0 (INTERNAL PATCH)
               00122                         ;; Fingerprint < > PIC_INT_EEPROM_FINGERPRINT
               00123                         rgoto PATCH_DATA_LOADING_Failed
40AA D15C          M         bra     label
               00124                         
               00125                 ;; YES
               00126                 ;; Fingerprint = PIC_INT_EEPROM_FINGERPRINT
               00127                 ;; GO ON AND LOAD PATCH FROM PIC EEPROM (INTERNAL PATCH)
               00128                 rgoto   PATCH_LOAD_DO
40AC D00C          M         bra     label
               00129                 ;; ============[END: LOAD INTERNAL (PIC EEPROM) PATCH FINGERPRINT]=================
               00130 
40AE           00131 LOAD_PATCH_FINGERPRINT_BANKSTICK
               00132         ;; =======================[LOAD BANKSTICK PATCH FINGERPRINT]===============================
               00133         ;; MEMO: BANKSTICK DATA STRUCTURE
               00134         ;; BANKSTICK ADRESS GOT A HIGH and a LOW BYTE [16 BIT ADRESS]
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00135         ;; [HIGH BYTE ADR] [LOW BYTE ADR]
               00136         ;; [  0000 0000      0000 0000  ] 16 BIT BANKSTICK ADR
               00137         ;; THE [HIGH BYTE ADR] = [PATCH NUMBER (-1)] | RANGE: 0 to 127 | = PATCH NUMBER POINTER
               00138         ;; THE [LOW  BYTE ADR] = PATCH DATA AREA     | RANGE: 0 to 255 | = PATCH DATA POINTER
               00139         ;; EVERY SINGLE BANKSTICK PATCH GOT A OWN 255 BYTES DATA AREA. THE [LOW BYTE ADR] IS THE POINTER
               00140         ;; TO EVERY SINGLE DATA BYTE OF A SINGLE PATCH. IN OTHER WORDS THE [LOW BYTE] IS THE PATCH
               00141         ;; DATA POINTER. THE [HIGH BYTE ADR] DO DEFINE THE PATCH NUMBER (0 to 127). IN OTHER WORDS
               00142         ;; THE [HIGH BYTE ADR] IS THE POINTER THE BANKSTICK PATCH NUMBER.
               00143                         ;; -----------[SET BANKSTICK LOWBYTE ADR]------------------------------------------
               00144                         ;; Store LOW-BYTE (FINGERPRINT) BANKSTICK ADRESS in MIOS_PARAMETER1 
               00145                         ;; SET LOW BYTE BANKSTICK ADRRESS to 0 ( = FINGERPRINT ADR)
40AE 6A03      00146                         clrf        MIOS_PARAMETER1
               00147                         ;; -----------[SET BANKSTICK ADR HIGHBYTE]-------------------------------------
               00148                         ;; Store HIGH-byte BANKSTICK ADRESS in MIOS_PARAMETER2
               00149                         ;; FINGERPRINT (HIGH BYTE) = PATCH NR = [1 to 127]
40B0 C07C F004 00150                         movff       BROWSE_PATCH_NR, MIOS_PARAMETER2
               00151                         ;; -1 OFFSET
               00152                                 ;; ---------------------------------------------------------------------
               00153                                 ;; MEMO - HIGH BYTE ADR OFFSET:
               00154                                 ;; EVERY BANKSTICK PATCH NEED A HIGH BYTE OFFSET of -1
               00155                                 ;; SO THAT PATCH Nr 1   => HIGH BYTE = 0
               00156                                 ;; SO THAT PATCH Nr 2   => HIGH BYTE = 1
               00157                                 ;; SO THAT PATCH Nr 3   => HIGH BYTE = 2
               00158                                 ;; ...
               00159                                 ;; SO THAT PATCH Nr 127 => HIGH BYTE = 126
               00160                                 ;; THE HIGHEST BANKSTICK ADR = 7FFF 
               00161                                 ;; => [7F(ADR.HIGH_BYTE)FF(ADR.LOW_BYTE)]
               00162                                 ;; THERE WOULD BE NO ADR SPACE for A PATCH
               00163                                 ;; STARTING WITH A HIGH BYTE ADR @ 127 (!)
               00164                                 ;; SO THE LAST VALID HIGH BYTE ADR = 126 
               00165                                 ;; ----------------------------------------------------------------------
40B4 0604      00166                         decf        MIOS_PARAMETER2, F
               00167                         ;; ---------------------------------------------------------------------
               00168                         ;; LOAD BANKSTICK FINGERPRINT  
               00169                         ;; @ CURREND PATCH ADR 0x00
40B6 ECB8 F016 00170                         call    MIOS_BANKSTICK_Read        ; load FINGERPRINT-BYTE from BankStick
40BA 6E03      00171                         movwf   MIOS_PARAMETER1 
               00172                         ;; branch to error exception
               00173                         ;; routine if neccesary
               00174                         ;; BRA_IFCLR MIOS_BOX_STAT, MIOS_BOX_STAT_BS_AVAILABLE, ACCESS, PATCH_DATA_LOADING_Failed
               00175                         
               00176                                 ;; FINGERPRINT OK ?
               00177                                 ;; MUST BE CONST. BANKSTICK_PATCH_FINGERPRINT
40BC 0E88      00178                                 movlw   BANKSTICK_PATCH_FINGERPRINT
40BE 6203      00179                                 cpfseq  MIOS_PARAMETER1
               00180                                         ;; NO,
               00181                                         ;; Fingerprint < > BANKSTICK_PATCH_FINGERPRINT
               00182                                         ;; ERROR !
               00183                                         rgoto PATCH_DATA_LOADING_Failed
40C0 D151          M         bra     label
               00184                 
               00185                         
               00186                                 ;; YES
               00187                                 ;; Fingerprint = BANKSTICK_PATCH_FINGERPRINT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00188                         ;; ----------------------------------------------------------------------
               00189                         ;; ---------[STATE: BANKSTICK FINGERPRINT  = OK]-------------------------
               00190                         ;; ----------------------------------------------------------------------
               00191                         
               00192                         ;; ---------[SET: BANKSTICK_LOW_BYTE_ADR_COUNTER]------------------------
               00193                         ;; THE FINGERPRINT IS  @ BANKSTICK ADR0 
               00194                         ;; THE PATCH NUMBER IS @ BANKSTICK ADR1
               00195                         ;; ALL OTHER PATCH DATA WILL FOLOW NOW @ ADR2
               00196                         ;; SO SET BANKSTICK LOW BYTE COUNTER TO  ADR2
40C2 0E02      00197                         movlw   0x02
40C4 6E7F      00198                         movwf   BANKSTICK_LOW_BYTE_ADR_COUNTER
               00199                 
               00200         ;; ============[STATE: BANKSTICK PATCH FINGERPRINT OK]=====
               00201         ;; --------------------------------------------------------
               00202         ;; GO AND LOAD BANKSTICK PATCH DATA BYTES...
               00203 
40C6           00204 PATCH_LOAD_DO
               00205         ;; --------------------------------------------------------------
               00206         ;; DISABLE IRQ ROUTINES
               00207         IRQ_DISABLE
40C6 9EF2          M         bcf     INTCON, GIE
               00208         ;; --------------------------------------------------------------
               00209         
               00210         ;; --------------------------------------------------------------
               00211         ;; -------------[READ PATCH NAME]--------------------------------
               00212         ;; --------------------------------------------------------------
               00213 
               00214         ;; LOAD DATA BYTE @ EEPROM ADR 0x01 | @ BANKSTICK PATCH DATA BYTE ADR 0x02
40C8 ECBF F021 00215         call    LOAD_PATCH_DATA_BYTE
40CC C03F F303 00216         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_0
               00217         
               00218         
               00219         
               00220         ;; LOAD DATA BYTE @ EEPROM ADR 0x02 | @ BANKSTICK PATCH DATA BYTE ADR 0x03
40D0 ECBF F021 00221         call    LOAD_PATCH_DATA_BYTE
40D4 C03F F304 00222         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_1
               00223 
               00224 
               00225         
               00226         ;; LOAD DATA BYTE @ EEPROM ADR 0x03 | @ BANKSTICK PATCH DATA BYTE ADR 0x04
40D8 ECBF F021 00227         call    LOAD_PATCH_DATA_BYTE
40DC C03F F305 00228         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_2
               00229 
               00230 
               00231         ;; @ EEPROM ADR 0x04 
40E0 ECBF F021 00232         call    LOAD_PATCH_DATA_BYTE
40E4 C03F F306 00233         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_3
               00234 
               00235         ;; @ EEPROM ADR 0x05
40E8 ECBF F021 00236         call    LOAD_PATCH_DATA_BYTE
40EC C03F F307 00237         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_4
               00238 
               00239         ;; @ EEPROM ADR 0x06
40F0 ECBF F021 00240         call    LOAD_PATCH_DATA_BYTE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
40F4 C03F F308 00241         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_5
               00242 
               00243         ;; @ EEPROM ADR 0x07
40F8 ECBF F021 00244         call    LOAD_PATCH_DATA_BYTE
40FC C03F F309 00245         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_6
               00246 
               00247         
               00248         ;; LOAD DATA BYTE @ EEPROM ADR 0x08 | @ BANKSTICK PATCH DATA BYTE ADR 0x09
4100 ECBF F021 00249         call    LOAD_PATCH_DATA_BYTE
4104 C03F F30A 00250         movff   CURREND_PATCH_DATA_BYTE_TEMP, PATCH_NAME_ASC_7
               00251 
               00252         
               00253         ;; -----------------------------------------------------------
               00254         ;; -------------[READ MIDIBOX AY OTHER PATCH DATA]------------
               00255         ;; -----------------------------------------------------------
               00256         
               00257         ;; @ EEPROM ADR 0x09
4108 ECBF F021 00258         call    LOAD_PATCH_DATA_BYTE
410C C03F F023 00259         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_A_TUNE_FINE_USER
               00260         
               00261         ;; @ EEPROM ADR 0x0A
4110 ECBF F021 00262         call    LOAD_PATCH_DATA_BYTE
4114 C03F F024 00263         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_B_TUNE_FINE_USER
               00264         
               00265 
               00266         ;; @ EEPROM ADR 0x0B
4118 ECBF F021 00267         call    LOAD_PATCH_DATA_BYTE    
411C C03F F025 00268         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_C_TUNE_FINE_USER
               00269         
               00270         
               00271         ;; @ EEPROM ADR 0x0C
4120 ECBF F021 00272         call    LOAD_PATCH_DATA_BYTE
4124 C03F F026 00273         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_A_TUNE_COARSE_USER
               00274         
               00275         
               00276         ;; @ EEPROM ADR 0x0D
4128 ECBF F021 00277         call    LOAD_PATCH_DATA_BYTE
412C C03F F027 00278         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_B_TUNE_COARSE_USER
               00279         
               00280         
               00281         ;; @ EEPROM ADR 0x0E
4130 ECBF F021 00282         call    LOAD_PATCH_DATA_BYTE
4134 C03F F028 00283         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_C_TUNE_COARSE_USER
               00284         
               00285         
               00286         ;; @ EEPROM ADR 0x0F
4138 ECBF F021 00287         call    LOAD_PATCH_DATA_BYTE    
413C C03F F030 00288         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_A_MIDI_CHANNEL_USER
               00289         
               00290         
               00291         ;; @ EEPROM ADR 0x10
4140 ECBF F021 00292         call    LOAD_PATCH_DATA_BYTE
4144 C03F F031 00293         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_B_MIDI_CHANNEL_USER
               00294         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00295         
               00296         ;; @ EEPROM ADR 0x11
4148 ECBF F021 00297         call    LOAD_PATCH_DATA_BYTE
414C C03F F032 00298         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_C_MIDI_CHANNEL_USER
               00299         
               00300         
               00301         ;; @ EEPROM ADR 0x12
4150 ECBF F021 00302         call    LOAD_PATCH_DATA_BYTE
4154 C03F F033 00303         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF
               00304         
               00305 
               00306         ;; @ EEPROM ADR 0x13
4158 ECBF F021 00307         call    LOAD_PATCH_DATA_BYTE
415C C03F F06A 00308         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_R6_NOISE_PERIOD
               00309         
               00310 
               00311         ;; @ EEPROM ADR 0x14
4160 ECBF F021 00312         call    LOAD_PATCH_DATA_BYTE    
4164 C03F F06C 00313         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_R8_CH_A_AMPLITUDE
               00314         
               00315         ;; ----------------[ CHK: TONE A ENV ON?  ]-------------------  
               00316         ;; CS LED ==> TONE A ENVELOPE MODE (BIT4)       
               00317         ;; IS "ENVELOPE MODE" (BIT4) ON OR OFF?
4168 A86C      00318         btfss AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00319                 ;; BIT 4 is CLEAR - ENV OFF
               00320                 rgoto EEPROM_PATCH_LOAD_LED_CS_ENV_A_OFF
416A D003          M         bra     label
               00321                 
               00322                 ;; BIT 4 is SET - ENV ON
               00323                 ;; WRITE PATCH DATA TO LED CS
416C ECA3 F03E 00324                 call LED_EnvelopeModeA_on
               00325                 rgoto EEPROM_PATCH_LOAD_R9
4170 D002          M         bra     label
               00326 
               00327                         
4172           00328 EEPROM_PATCH_LOAD_LED_CS_ENV_A_OFF
               00329                 ;; WRITE PATCH DATA TO LED CS
4172 ECA7 F03E 00330                 call LED_EnvelopeModeA_off
               00331                 ;; GO ON WITH EEPROM_PATCH_LOAD_R9
               00332                         
               00333         ;; ----------------[END]-------------------------------------   
               00334 
4176           00335 EEPROM_PATCH_LOAD_R9
               00336         ;; @ EEPROM ADR 0x15
4176 ECBF F021 00337         call    LOAD_PATCH_DATA_BYTE    
417A C03F F06D 00338         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_R9_CH_B_AMPLITUDE
               00339         
               00340         ;; ----------------[CHK: TONE B ENV ON?  ]-------------------   
               00341         ;; CS LED ==> TONE B ENVELOPE MODE (BIT4)       
               00342         ;; IS "ENVELOPE MODE" (BIT4) ON OR OFF?
417E A86D      00343         btfss AY_R9_CH_B_AMPLITUDE, 4
               00344                 ;; BIT 4 is CLEAR
               00345                 rgoto EEPROM_PATCH_LOAD_LED_CS_ENV_B_OFF
4180 D003          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00346 
               00347                 ;; BIT 4 is SET
               00348                 ;; CS LED ENV @ TONE B = ON
4182 ECAB F03E 00349                 call LED_EnvelopeModeB_on
               00350                 rgoto EEPROM_PATCH_LOAD_R10
4186 D002          M         bra     label
               00351 
               00352 
4188           00353 EEPROM_PATCH_LOAD_LED_CS_ENV_B_OFF
               00354                 ;; CS LED ENV @ TONE B = OFF
4188 ECAF F03E 00355                 call LED_EnvelopeModeB_off
               00356                 ;; GO ON WITH NEXT REG LOAD
               00357         ;; ------------------[END]-------------------------------------
               00358         
418C           00359 EEPROM_PATCH_LOAD_R10
               00360         ;; @ EEPROM ADR 0x16
418C ECBF F021 00361         call    LOAD_PATCH_DATA_BYTE
4190 C03F F06E 00362         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_R10_CH_C_AMPLITUDE
               00363         ;; ----------------[ CHK: TONE C ENV ON?  ]-------------------  
               00364         ;; CS LED ==> TONE C ENVELOPE MODE (BIT4)       
               00365         ;; IS "ENVELOPE MODE" (BIT4) ON OR OFF?
4194 A86E      00366         btfss AY_R10_CH_C_AMPLITUDE, 4
               00367                 ;; BIT 4 is CLEAR
               00368                 rgoto EEPROM_PATCH_LOAD_LED_CS_ENV_C_OFF
4196 D003          M         bra     label
               00369                 
               00370                 ;; BIT 4 is SET
               00371                 ;; CS LED ENV @ TONE C = ONN
4198 ECB3 F03E 00372                 call LED_EnvelopeModeC_on
               00373                 rgoto EEPROM_PATCH_LOAD_R11
419C D002          M         bra     label
               00374 
               00375 ;; CS LED ENV @ TONE B = OFF
419E           00376 EEPROM_PATCH_LOAD_LED_CS_ENV_C_OFF
419E ECB7 F03E 00377                 call LED_EnvelopeModeC_off
               00378                 ;; GO ON WITH NEXT REG LOAD
               00379         ;; ----------------[ END ]-----------------------------------
               00380                 
41A2           00381 EEPROM_PATCH_LOAD_R11
               00382         ;; @ EEPROM ADR 0x17
41A2 ECBF F021 00383         call    LOAD_PATCH_DATA_BYTE
41A6 C03F F06F 00384         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_R11_ENV_PERIOD_FINE
               00385                 ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00386                 ;; --------------------------------------------------------
               00387                 ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
41AA 0E0B      00388                 movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE ; ADRESS => AY REGISTER
41AC 6E39      00389                 movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00390                 ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
41AE C06F F03A 00391                 movff AY_R11_ENV_PERIOD_FINE, AY_REG_DATA 
               00392                         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00393                         ;; @ay_sr.inc
41B2 ECAA F01B 00394                         call LABEL_AY_SR_Write
               00395                 ;; --------------------------------------------------------
               00396         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00397         ;; @ EEPROM ADR 0x18
41B6 ECBF F021 00398         call    LOAD_PATCH_DATA_BYTE
41BA C03F F070 00399         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_R12_ENV_PERIOD_COARSE
               00400 
               00401                 ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00402                 ;; --------------------------------------------------------
               00403                 ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
41BE 0E0C      00404                 movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE ; ADRESS => AY REGISTER
41C0 6E39      00405                 movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00406                 ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
41C2 C070 F03A 00407                 movff AY_R12_ENV_PERIOD_COARSE, AY_REG_DATA 
               00408         
               00409                         ;; WRITING 8BIT DATA 
               00410                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
41C6 ECAA F01B 00411                         call LABEL_AY_SR_Write
               00412                 ;; --------------------------------------------------------
               00413         
               00414         ;; -------------[WRITE ENV SHAPE 1-8]--------------------------
               00415         ;; @ EEPROM ADR 0x19
41CA ECBF F021 00416         call    LOAD_PATCH_DATA_BYTE
41CE C03F F07A 00417         movff   CURREND_PATCH_DATA_BYTE_TEMP, ENV_SHAPE_0_15_to_1_8_TRANSLATOR
               00418                 ;; FUNCTION:
               00419                 ;; 1) TRANSLATE ENV SHAPE 1-8 (ENV SHAPES) to 0-15 (AY CHIP REG) 
               00420                 ;; 2) Write Value to AY_R13_ENV_SHAPE_CYCLE (but do not write the AY_R13_ENV_SHAPE_CYCLE
               00421                 ;;    Value to AY Chip, this would cause a immediate ENVELOPE-Action, this is up 
               00422                 ;;    to MIDI Note On)
               00423                 ;; 3) Set ENV CS LED
41D2 ECA1 F02A 00424                 call ENVELOPE_TRANSLATOR_CALL
               00425         ;; -------------[END: WRITE ENV SHAPE 1-8]---------------------
               00426 
               00427 
               00428         ;; @ EEPROM ADR 0x1A
               00429         ;; ----------------[ START @ EEPROM ADR 0x1A ]------------------
               00430         ;; -------------[LOAD TONE NOISE ON OFF SWITCH]-----------------
41D6 ECBF F021 00431         call    LOAD_PATCH_DATA_BYTE    
41DA C03F F020 00432         movff   CURREND_PATCH_DATA_BYTE_TEMP, AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00433                 ;; WRITE TO CS LED
               00434                 ;; IS BIT 0 CLEAR? [(=> TONE A) = 0 (=> ON)]?
41DE B020      00435                 btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT0_TONE_A_ON_OFF
               00436                 
               00437                         ;; NO - BIT0 IS SET
               00438                         ;; BIT0 = SET => SO TONE A IS *OFF* 
               00439                         ;; (DONT BE CONFUSED HAVE A LOOK IN THE DATASHEET OF THE AY CHIP ;-)
               00440                         rgoto PATCH_LOAD_CS_TONE_A_OFF
41E0 D003          M         bra     label
               00441                 
               00442                         ;; YES - BIT0 *IS* = 0
               00443                         ;; BIT0 = CLEAR => SO TONE A *IS* ON 
41E2 EC73 F03E 00444                         call LED_ToneA_on
               00445                         ;; GO ON WITH NEXT BIT (TONE B ON / OFF)
               00446                         rgoto PATCH_LOAD_CHK_TONE_B_ON_OFF
41E6 D002          M         bra     label
               00447 
               00448 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
41E8           00449 PATCH_LOAD_CS_TONE_A_OFF
               00450                 ;; MB AY CS:
41E8 EC77 F03E 00451                 call LED_ToneA_off
               00452                 ;; GO ON WITH NEXT BIT (TONE B ON / OFF)
               00453 
               00454 
41EC           00455 PATCH_LOAD_CHK_TONE_B_ON_OFF    
               00456         ;; IS BIT 1 = CLEAR? 
               00457         ;; [(TONE B BIT1) = CLEAR = (TONE B = ON)]?
41EC B220      00458         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF
               00459                         ;; NO - BIT1 IS IS = SET
               00460                         ;; BIT1 = 1 => SO TONE B IS *OFF* 
               00461                         ;; (DONT BE CONFUSED HAVE A LOOK IN THE DATASHEET OF THE AY CHIP ;-)
               00462                         rgoto PATCH_LOAD_CS_TONE_B_OFF
41EE D003          M         bra     label
               00463                 
               00464                         ;; YES - BIT1 *IS* = 0
               00465                         ;; BIT1 = 0 => SO TONE B *IS* ON 
41F0 EC7B F03E 00466                         call LED_ToneB_on
               00467                         ;; CHK NEXT BIT (TONE C)
               00468                         rgoto PATCH_LOAD_CHK_TONE_C
41F4 D002          M         bra     label
               00469 
41F6           00470 PATCH_LOAD_CS_TONE_B_OFF
41F6 EC7F F03E 00471                         call LED_ToneB_off
               00472                         ;; CHK NEXT BIT (TONE C)
               00473 
41FA           00474 PATCH_LOAD_CHK_TONE_C
               00475         ;; IS BIT 2 = CLEAR? [(=> TONE C) = 0 (=> ON)]?
41FA B420      00476         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_TONE_C_ON_OFF
               00477                         ;; NO - BIT2 IS IS = SET
               00478                         ;; BIT2 = 1 => SO TONE C IS *OFF*
               00479                         rgoto PATCH_LOAD_CS_TONE_C_OFF
41FC D003          M         bra     label
               00480                 
               00481                         ;; YES - BIT2 *IS* = 0
               00482                         ;; BIT2 = 0 => SO TONE C *IS* ON 
41FE EC83 F03E 00483                         call LED_ToneC_on
               00484                         ;; GO AND CHK NOISE TONE A
               00485                         rgoto PATCH_LOAD_CHK_NOISE_A
4202 D002          M         bra     label
               00486 
4204           00487 PATCH_LOAD_CS_TONE_C_OFF
4204 EC87 F03E 00488                         call LED_ToneC_off
               00489                         ;; GO AND CHK NOISE TONE A
               00490 
               00491 
4208           00492 PATCH_LOAD_CHK_NOISE_A
               00493         ;; IS BIT 3 = CLEAR [(=> NOISE A) = 0 (=> ON)]?
4208 B620      00494         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF
               00495                         ;; NO - BIT3 IS IS = SET
               00496                         ;; BIT3 = 1 => SO NOISE A IS *OFF*
               00497                         rgoto PATCH_LOAD_CS_NOISE_A_OFF
420A D003          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00498                 
               00499                         ;; YES - BIT3 *IS* = CLEAR
               00500                         ;; BIT3 = 0 => SO NOISE A *IS* ON 
420C EC8B F03E 00501                         call LED_NoiseA_on
               00502                         ;; GO AND CHK NOISE TONE B
               00503                         rgoto PATCH_LOAD_CHK_NOISE_B
4210 D002          M         bra     label
               00504 
4212           00505 PATCH_LOAD_CS_NOISE_A_OFF
4212 EC8F F03E 00506                         call LED_NoiseA_off
               00507                         ;; GO AND CHK NOISE TONE B
               00508 
4216           00509 PATCH_LOAD_CHK_NOISE_B
               00510         ;; IS BIT 4 = CLEAR [(=> NOISE B) = 0 (=> ON)]?
4216 B820      00511         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF
               00512                         ;; NO - BIT4 IS IS = SET
               00513                         ;; BIT4 = 1 => SO NOISE B IS *OFF*
               00514                         rgoto PATCH_LOAD_CS_NOISE_B_OFF
4218 D003          M         bra     label
               00515                 
               00516                         ;; YES - BIT4 *IS* = 0
               00517                         ;; BIT4 = 0 => SO NOISE B *IS* ON 
421A EC93 F03E 00518                         call LED_NoiseB_on
               00519                         ;; GO AND CHK NOISE TONE C
               00520                         rgoto PATCH_LOAD_CHK_NOISE_C
421E D002          M         bra     label
               00521 
4220           00522 PATCH_LOAD_CS_NOISE_B_OFF
4220 EC97 F03E 00523                         call LED_NoiseB_off
               00524                         ;; GO AND CHK NOISE TONE C
               00525 
4224           00526 PATCH_LOAD_CHK_NOISE_C
               00527         ;; IS BIT 5 = CLEAR? [(=> NOISE C) = 0 (=> ON)]?
4224 BA20      00528         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
               00529                 
               00530                         ;; NO - BIT5 IS IS = 1
               00531                         ;; BIT5 = 1 => SO NOISE C IS *OFF*
               00532                         rgoto EEPROM_PATCH_LOAD_CS_NOISE_C_OFF
4226 D003          M         bra     label
               00533                 
               00534                         ;; YES - BIT5 *IS* = 0
               00535                         ;; BIT5 = 0 => SO NOISE C *IS* ON 
4228 EC9B F03E 00536                         call LED_NoiseC_on
               00537                         ;; GO AND CHK IF USR Fx
               00538                         rgoto PATCH_LOAD_FX_USER_ON_OFF
422C D002          M         bra     label
               00539 
422E           00540 EEPROM_PATCH_LOAD_CS_NOISE_C_OFF
422E EC9F F03E 00541                         call LED_NoiseC_off
               00542                         ;; GO AND CHK IF USR Fx
               00543 ;; ---------------------[END: LOAD TONE NOISE ON OFF SWITCH]----------------
               00544 
               00545 
4232           00546 PATCH_LOAD_FX_USER_ON_OFF
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00547         ;; LOAD:
               00548         ;; PATCH DATA BYTE 027
               00549         ;; INTERNAL PATCH DATA BYTE   [INTERNAL EEPROM PATCH - ADR 0x1B (027 DEC)@ EEPROM   ] 
               00550         ;; BANKSTICK PATCH DATA BAYTE [BANKSTICK PATCH         ADR 0x1C (028 DEC)@ BANKSTICK]
4232 ECBF F021 00551         call    LOAD_PATCH_DATA_BYTE    
4236 C03F F04D 00552         movff   CURREND_PATCH_DATA_BYTE_TEMP, FX_USER_ON_OFF_ABC
               00553         
               00554         ;; USER: FX ABC off (See MAIN MENU 3 / Mixer)
               00555         ;; BIT0 = A (SET = ON / CLR = OFF)
               00556         ;; BIT1 = B (SET = ON / CLR = OFF)
               00557         ;; BIT2 = C (SET = ON / CLR = OFF)
               00558         
               00559         ;; WRITE TO CS LED
               00560         ;; ------------[Fx @ TONE A]-------------------
               00561         ;; IS BIT 0 = SET? [(=> Fx A) = 1 (=> ON)]?
423A A04D      00562         btfss FX_USER_ON_OFF_ABC, BIT0_FX_ON_OFF_TONE_A
               00563         
               00564                         ;; BIT0 = CLEAR = 0
               00565                         ;; Fx TONE A IS *NOT* ENABLED 
               00566                         rgoto PATCH_LOAD_LED_CS_FX_A_OFF
423C D003          M         bra     label
               00567                 
               00568                         ;; BIT0 = SET = 1
               00569                         ;; Fx @ TONE A *IS* ON 
423E ECBB F03E 00570                         call LED_Fx_A_on
               00571                         ;; GO AND CHECK FX @ TONE B
               00572                         rgoto PATCH_LOAD_CHK_FX_B
4242 D002          M         bra     label
               00573 
4244           00574 PATCH_LOAD_LED_CS_FX_A_OFF
4244 ECBF F03E 00575                         call LED_Fx_A_off
               00576                         ;; GO AND CHECK FX @ TONE B
               00577 
               00578         ;; ------------[Fx @ TONE B]-------------------
               00579                         
4248           00580 PATCH_LOAD_CHK_FX_B
               00581         ;; IS BIT 1 (=> Fx B) = 1 (=> ON)?
4248 A24D      00582         btfss FX_USER_ON_OFF_ABC, BIT1_FX_ON_OFF_TONE_B
               00583                         ;; BIT1 = CLEAR = 0
               00584                         ;; Fx B IS OFF 
               00585                         rgoto PATCH_LOAD_LED_CS_FX_B_OFF
424A D003          M         bra     label
               00586                 
               00587                         ;; BIT1 *IS* = 1
               00588                         ;; Fx B *IS* ON 
424C ECC3 F03E 00589                         call LED_Fx_B_on
               00590                         ;; GO AND CHK USER Fx TONE C 
               00591                         rgoto PATCH_LOAD_CHK_FX_C
4250 D002          M         bra     label
               00592 
4252           00593 PATCH_LOAD_LED_CS_FX_B_OFF
4252 ECC7 F03E 00594                         call LED_Fx_B_off
               00595                         ;; GO AND CHK USER Fx TONE C 
               00596 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00597         ;; ------------[Fx @ TONE C]-------------------
4256           00598 PATCH_LOAD_CHK_FX_C
               00599         ;; IS BIT 2 = SET [(=> Fx C) = 1 (=> ON)]?
4256 A44D      00600         btfss FX_USER_ON_OFF_ABC, BIT2_FX_ON_OFF_TONE_C
               00601                         ;; BIT2 = CLEAR = 0
               00602                         ;; Fx C IS OFF 
               00603                         rgoto PATCH_LOAD_LED_CS_FX_C_OFF
4258 D003          M         bra     label
               00604                 
               00605                         ;; BIT2 *IS* = 1
               00606                         ;; Fx C *IS* ON 
425A ECCB F03E 00607                         call LED_Fx_C_on
               00608                         ;; GO AND LOAD PATCH FX DATA
               00609                         rgoto DO_LOAD_CURREND_PATCH_FX_DATA
425E D002          M         bra     label
               00610 
               00611 
4260           00612 PATCH_LOAD_LED_CS_FX_C_OFF
4260 ECCF F03E 00613                         call LED_Fx_C_off
               00614                         ;; GO AND LOAD PATCH FX DATA
               00615 
               00616 ;; ----------------[END: USER FX OPTION ON/OFF]-------------------
               00617 ;; ---------------------------------------------------------------
               00618 
               00619 ;; ---------------------------------------------------------------
               00620 ;; ----------------[START: LOAD FX DATA]--------------------------                      
4264           00621 DO_LOAD_CURREND_PATCH_FX_DATA
               00622 ;; ---------------------------[LOAD Fx DATA]----------------------
               00623 
               00624         ;; ------------[PREPEAR Fx DATA LOADING]----------------
               00625         ;; MEMO: Load THE Fx DATA from EEPROM to PIC Fx RAM AREA
4264 0E02      00626         movlw SELECT_Fx_RAM_BANK                ;; INDIRECT RAM ADDRESSING:
4266 6EEA      00627         movwf FSR0H                             ;; SET THE Fx RAM BANK 
4268 6A60      00628         clrf  Fx_LOAD_WRITE_ADR_COUNTER_TMP     ;; reset READ CYCLE pos. to 0
               00629 
               00630 
               00631         ;; CHECK: LOAD DATA from EEPROM or BANKSTICK?
               00632         ;; -------------------------------------------------------
               00633         ;; PATCH_MENU_STATE_FLAGS
               00634         ;; BIT2 = 0 = LOAD Fx DATA from EEPROM (PIC INTERNAL PATCH)
               00635         ;; BIT2 = 1 = LOAD Fx DATA from BANKSTICK 
426A B47D      00636         btfsc   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00637                         ;; LOAD Fx DATA FROM BANKSTICK
               00638                         ;; BIT2 = SET   
               00639                         rgoto BANKSTICK_PATCH_LOAD_FX_FUNC_FROM_BANKSTICK
426C D030          M         bra     label
               00640                 
               00641                 ;; LOAD FX DATA From INTERNAL PATCH (EEPROM)
               00642                 ;; BIT2 = CLEAR
               00643         ;; -----------[LOAD Fx Function (Pos 0-31)]---------------------------------
426E           00644 EEPROM_PATCH_LOAD_FX_FUNC_FROM_EEPROM
               00645         ;; LOAD Fx FUNCTION BYTES CYCLE - DO 32x
               00646         ;; LOAD FX FUNCTION @ Currend Fx Pos from PIC EEPROM to PIC RAM
               00647         ;; -----------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
426E 0E20      00648         movlw           EEPROM_OFFSET_FX_FUNCTION               ;; Fx Functions AREA - EEPROM OFFSET (!)
4270 2460      00649         addwf           Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
4272 6EA9      00650         movwf           EEADR                   ;; SET EEPROM ADRESS [OFFSET+POS]
4274 ECB0 F016 00651         call            MIOS_EEPROM_Read        ;; READ FX FUNCTION @ currend Pos of PIC EEPROM (EEADR will be incremented)
4278 6E5F      00652         movwf           Fx_PATCH_DATA_TMP       ;; WRITE FX FUNCTION @ currend Pos TO TMP
               00653         
               00654         ;; ------[ WRITE FX FUNCTION @ Currend Fx Pos ==> to PIC RAM ]---------�
               00655         ;; -----------------------------------------------------
427A 0E20      00656         movlw   RAM_OFFSET_FX_FUNCTION                  ;; Fx RAM AREA OFFSET (!)
427C 2460      00657         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; + (0 to 31 [32]) => Fx Tab Pos
427E 6EE9      00658         movwf   FSR0L                           ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
4280 C05F FFEF 00659         movff   Fx_PATCH_DATA_TMP, INDF0        ;; WRITE FX FUNCTION @ currend Pos to Fx RAM
               00660         
               00661                 ;; ----------[PERFORM CYCLE or Exit READ CYCLE]----
               00662                 ;; ------------------------------------------------
4284 2A60      00663                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos]
               00664                 
               00665                 ;; check if pos = 32 [range = 0 to 31]
4286 0E20      00666                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
4288 6260      00667                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00668                         
               00669                         ;; < 32
               00670                         ;; write 32x
               00671                         rgoto EEPROM_PATCH_LOAD_FX_FUNC_FROM_EEPROM
428A D7F1          M         bra     label
               00672                 
               00673                         ;; Pos = 32 
               00674                         ;; RESET POS and EXIT THIS CYCLE
428C 6A60      00675                         clrf  Fx_LOAD_WRITE_ADR_COUNTER_TMP     ;; reset pos
               00676                 ;; ----------[PERFORM CYCLE or Exit READ CYCLE]----
               00677                         
               00678 ;; -----------[END: LOAD Fx Function (Pos 0-31)]-------------------
               00679 
               00680 ;; -----------[LOAD Fx DATA (Pos 0-31)]-------------------
428E           00681 EEPROM_PATCH_LOAD_FX_DATA_FROM_EEPROM
               00682         ;; LOAD Fx DATA BYTES CYCLE - DO 32x
428E 0E40      00683         movlw           EEPROM_OFFSET_FX_DATA                   ;; EEPROM OFFSET (!)
4290 2460      00684         addwf           Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
4292 6EA9      00685         movwf           EEADR                   ;; SET EEPROM ADRESS [OFFSET+POS]
4294 ECB0 F016 00686         call            MIOS_EEPROM_Read       ;; READ FX FUNCTION @ currend Pos of PIC EEPROM (EEADR will be incremented)
4298 6E5F      00687         movwf           Fx_PATCH_DATA_TMP        ;; WRITE FX FUNCTION @ currend Pos TO MIOS_PARAMETER2
               00688         
               00689         ;; WRITE FX FUNCTION @ Currend Fx Pos to PIC RAM
429A 0E40      00690         movlw   RAM_OFFSET_FX_DATA                      ;; Fx RAM AREA OFFSET (!)
429C 2460      00691         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; + (0 to 31 [32]) => Fx Tab Pos
429E 6EE9      00692         movwf   FSR0L                           ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
42A0 C05F FFEF 00693         movff   Fx_PATCH_DATA_TMP, INDF0        ;; WRITE FX FUNCTION @ currend Pos to Fx RAM
               00694 ;       
               00695         
               00696         
42A4 2A60      00697                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00698                 
               00699                 ;; check if pos = 32 [range = 0 to 31]
42A6 0E20      00700                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
42A8 6260      00701                 cpfseq Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00702                         
               00703                         ;; < 32
               00704                         ;; write 32x
               00705                         ;; DO ANOTHER CYCLE
               00706                         rgoto EEPROM_PATCH_LOAD_FX_DATA_FROM_EEPROM
42AA D7F1          M         bra     label
               00707                         
               00708                         ;; = 32
               00709                         ;; QUIT THE CYCLE
               00710                         ;; GO ON LOAD Fx Pre Exec. Time
42AC 6A60      00711                         clrf  Fx_LOAD_WRITE_ADR_COUNTER_TMP     ;; reset pos;   
               00712 
               00713 ;; -----------------------------[END: LOAD Fx Function (Pos 0-31)]-------------------
               00714                         
               00715 
               00716 ;; -----------------------------[LOAD Fx TIME (Pos 0-31)]----------------------------
42AE           00717 EEPROM_PATCH_LOAD_FX_TIME_FROM_EEPROM
               00718         ;; LOAD Fx Pre Exec. Time BYTES - DO CYCLE 32x  
42AE 0E60      00719         movlw   EEPROM_OFFSET_FX_TIME_PRE_EXECUTION     ;; EEPROM OFFSET (!)
42B0 2460      00720         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
42B2 6EA9      00721         movwf   EEADR                   ;; SET EEPROM ADRESS [OFFSET+POS]
42B4 ECB0 F016 00722         call    MIOS_EEPROM_Read        ;; READ FX FUNCTION @ currend Pos of PIC EEPROM (EEADR will be incremented)
42B8 6E5F      00723         movwf   Fx_PATCH_DATA_TMP       ;; WRITE FX FUNCTION @ currend Pos TO MIOS_PARAMETER2
               00724         
               00725         ;; WRITE FX FUNCTION @ Currend Fx Pos to PIC RAM
42BA 0E60      00726         movlw   RAM_OFFSET_FX_TIME_PRE_EXECUTION      ;; Fx RAM AREA OFFSET (!)
42BC 2460      00727         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W      ;; + (0 to 31 [32]) => Fx Tab Pos
42BE 6EE9      00728         movwf   FSR0L                           ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
42C0 C05F FFEF 00729         movff   Fx_PATCH_DATA_TMP, INDF0        ;; WRITE FX FUNCTION @ currend Pos to Fx RAM
               00730 
               00731         
42C4 2A60      00732                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00733                 
               00734                 ;; check if pos = 32 [range = 0 to 31]
42C6 0E20      00735                 movlw FX_POS_MAX_PLUS1 ;; dec 31+1
42C8 6260      00736                 cpfseq Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00737                         
               00738                         ;; < 32
               00739                         ;; write 32x
               00740                         rgoto EEPROM_PATCH_LOAD_FX_TIME_FROM_EEPROM
42CA D7F1          M         bra     label
               00741                         
               00742                         ;; = 32
               00743                         ;; GO AND WRITE "L: OK" on LCD Row 4
               00744                         ;; AND THEN WRITE PATCH NAME ON LCD ROW 1
               00745                         rgoto PATCH_LOAD_OK
42CC D039          M         bra     label
               00746 ;; --------------------------------------------------------------------------------------------------
               00747 ;; -----------[END: LOAD Fx Functions from INTERNAL PATCH (PIC EEPROM) (Pos 0-31)]-------------------
               00748 ;; --------------------------------------------------------------------------------------------------
               00749 
               00750 
               00751 ;; --------------------------------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00752 ;; -----------[START: LOAD Fx Functions from BANKSTICK (Pos 0-31)]-----------------------------------
               00753 ;; --------------------------------------------------------------------------------------------------
42CE           00754 BANKSTICK_PATCH_LOAD_FX_FUNC_FROM_BANKSTICK
               00755         ;; LOAD Fx FUNCTION BYTES CYCLE - DO 32x
               00756         ;; LOAD FX FUNCTIONS @ from BANKSTICK to PIC RAM
               00757         ;; -----------------------------------------------------------------
42CE 0E1D      00758         movlw   BANKSTICK_PATCH_OFFSET_FX_FUNCTION      ;; Fx AREA - BANKSTICK OFFSET (!)
42D0 2460      00759         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
               00760         ; store BANKSTICK low-byte of address in MIOS_PARAMETER1
42D2 6E03      00761         movwf    MIOS_PARAMETER1
               00762         ; store BANKSTICK high-byte of address in MIOS_PARAMETER2
42D4 C07C F004 00763         movff   BROWSE_PATCH_NR , MIOS_PARAMETER2
42D8 0604      00764         decf    MIOS_PARAMETER2, F      ;; ADR (HI BYTE) BS PATCH = CURREND PATCH NR -1
               00765         ;; READ BYTE @ BANKSTICK
42DA ECB8 F016 00766         call            MIOS_BANKSTICK_Read     ;; READ FX FUNCTION @ from BANKSTICK 
42DE 6E5F      00767         movwf           Fx_PATCH_DATA_TMP       ;; WRITE FX FUNCTION @ TO TMP
               00768         ;; --------------------------------------------------------------------
               00769         ;; ------[ WRITE FX FUNCTION @ Currend Fx Pos ==> to PIC RAM ]---------
               00770         ;; --------------------------------------------------------------------
42E0 0E20      00771         movlw   RAM_OFFSET_FX_FUNCTION                  ;; Fx RAM AREA OFFSET (!)
42E2 2460      00772         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; + (0 to 31 [32]) => Fx Tab Pos
42E4 6EE9      00773         movwf   FSR0L                           ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
42E6 C05F FFEF 00774         movff   Fx_PATCH_DATA_TMP, INDF0        ;; WRITE FX FUNCTION @ currend Pos to Fx RAM
               00775         
               00776                 ;; ----------[PERFORM CYCLE or Exit READ CYCLE]----
               00777                 ;; ------------------------------------------------
42EA 2A60      00778                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos]
               00779                 
               00780                 ;; check if pos = 32 [range = 0 to 31]
42EC 0E20      00781                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
42EE 6260      00782                 cpfseq  Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00783                         
               00784                         ;; < 32
               00785                         ;; write 32x
               00786                         rgoto BANKSTICK_PATCH_LOAD_FX_FUNC_FROM_BANKSTICK
42F0 D7EE          M         bra     label
               00787                 
               00788                         ;; Pos = 32 
               00789                         ;; RESET POS and EXIT THIS CYCLE
42F2 6A60      00790                         clrf  Fx_LOAD_WRITE_ADR_COUNTER_TMP     ;; reset pos
               00791                 ;; ----------[PERFORM CYCLE or Exit READ CYCLE]----
               00792                         
               00793 ;; -----------[END: LOAD Fx Function (Pos 0-31)]-------------------
               00794 
               00795 ;; -----------[LOAD Fx DATA (Pos 0-31)]-------------------
42F4           00796 BANKSTICK_PATCH_LOAD_FX_DATA_FROM_BANKSTICK
               00797         ;; LOAD Fx DATA BYTES CYCLE - DO 32x
               00798         ;; -----------------------------------------------------------------
42F4 0E3D      00799         movlw   BANKSTICK_OFFSET_FX_DATA                ;; Fx AREA - BANKSTICK OFFSET (!)
42F6 2460      00800         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
               00801         ; store BANKSTICK low-byte of address in MIOS_PARAMETER1
42F8 6E03      00802         movwf    MIOS_PARAMETER1
               00803         ; store BANKSTICK high-byte of address in MIOS_PARAMETER2
42FA C07C F004 00804         movff   BROWSE_PATCH_NR , MIOS_PARAMETER2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
42FE 0604      00805         decf    MIOS_PARAMETER2, F      ;; ADR (HI BYTE) BS PATCH = CURREND PATCH NR -1
               00806         ;; READ BYTE @ BANKSTICK
4300 ECB8 F016 00807         call    MIOS_BANKSTICK_Read     ;; READ FX FUNCTION BYTE from BANKSTICK
4304 6E5F      00808         movwf   Fx_PATCH_DATA_TMP       ;; WRITE FX FUNCTION TO TMP
               00809         ;; ------------------------------------------------------------------------------
               00810         ;; WRITE FX FUNCTION @ Currend Fx Pos to PIC RAM
4306 0E40      00811         movlw   RAM_OFFSET_FX_DATA                      ;; Fx RAM AREA OFFSET (!)
4308 2460      00812         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; + (0 to 31 [32]) => Fx Tab Pos
430A 6EE9      00813         movwf   FSR0L                           ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
430C C05F FFEF 00814         movff   Fx_PATCH_DATA_TMP, INDF0        ;; WRITE FX FUNCTION @ currend Pos to Fx RAM
               00815         
               00816                 ;; READ CYCLE MANAGEMENT        
4310 2A60      00817                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00818                 
               00819                 ;; check if pos = 32 [range = 0 to 31]
4312 0E20      00820                 movlw   FX_POS_MAX_PLUS1 ;; dec 31+1
4314 6260      00821                 cpfseq Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00822                         
               00823                         ;; < 32
               00824                         ;; write 32x
               00825                         ;; DO ANOTHER CYCLE
               00826                         rgoto BANKSTICK_PATCH_LOAD_FX_DATA_FROM_BANKSTICK
4316 D7EE          M         bra     label
               00827                         
               00828                         ;; = 32
               00829                         ;; QUIT THE CYCLE
               00830                         ;; GO ON LOAD Fx Pre Exec. Time
4318 6A60      00831                         clrf  Fx_LOAD_WRITE_ADR_COUNTER_TMP     ;; reset pos;   
               00832 
               00833 ;; -----------------------------[END: LOAD Fx Function (Pos 0-31)]-------------------
               00834                         
               00835 
               00836 ;; -----------------------------[LOAD Fx TIME (Pos 0-31)]----------------------------
431A           00837 BANKSTICK_PATCH_LOAD_FX_TIME_FROM_BANKSTICK
               00838         ;; LOAD Fx Pre Exec. Time BYTES - DO CYCLE 32x  
               00839         ;; -----------------------------------------------------------------
431A 0E5D      00840         movlw   BANKSTICK_OFFSET_FX_TIME_PRE_EXECUTION  ;; Fx AREA - BANKSTICK OFFSET (!)
431C 2460      00841         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W        ;; OFFSET + POS
               00842         ; store BANKSTICK low-byte of address in MIOS_PARAMETER1
431E 6E03      00843         movwf    MIOS_PARAMETER1
               00844         ; store BANKSTICK high-byte of address in MIOS_PARAMETER2
4320 C07C F004 00845         movff   BROWSE_PATCH_NR , MIOS_PARAMETER2
4324 0604      00846         decf    MIOS_PARAMETER2, F      ;; ADR (HI BYTE) BS PATCH = CURREND PATCH NR -1
               00847         ;; READ BYTE @ BANKSTICK
4326 ECB8 F016 00848         call    MIOS_BANKSTICK_Read     ;; READ FX FUNCTION BYTE from BANKSTICK
432A 6E5F      00849         movwf   Fx_PATCH_DATA_TMP       ;; WRITE FX FUNCTION TO TMP
               00850         ;; ------------------------------------------------------------------------------
               00851         ;; WRITE FX FUNCTION @ Currend Fx Pos to PIC RAM
432C 0E60      00852         movlw   RAM_OFFSET_FX_TIME_PRE_EXECUTION      ;; Fx RAM AREA OFFSET (!)
432E 2460      00853         addwf   Fx_LOAD_WRITE_ADR_COUNTER_TMP, W      ;; + (0 to 31 [32]) => Fx Tab Pos
4330 6EE9      00854         movwf   FSR0L                           ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
4332 C05F FFEF 00855         movff   Fx_PATCH_DATA_TMP, INDF0        ;; WRITE FX FUNCTION @ currend Pos to Fx RAM
               00856 
               00857         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4336 2A60      00858                 incf Fx_LOAD_WRITE_ADR_COUNTER_TMP, F ;; pos = pos +1 | pos range 0 to 31 [32 pos gesamt]
               00859                 
               00860                 ;; check if pos = 32 [range = 0 to 31]
4338 0E20      00861                 movlw FX_POS_MAX_PLUS1 ;; dec 31+1
433A 6260      00862                 cpfseq Fx_LOAD_WRITE_ADR_COUNTER_TMP
               00863                         
               00864                         ;; < 32
               00865                         ;; write 32x
               00866                         rgoto BANKSTICK_PATCH_LOAD_FX_TIME_FROM_BANKSTICK
433C D7EE          M         bra     label
               00867                         
               00868                         ;; = 32
               00869                         ;; GO AND WRITE "L: OK" on LCD Row 4
               00870                         ;; AND THEN WRITE PATCH NAME ON LCD ROW 1
               00871                         rgoto PATCH_LOAD_OK
433E D000          M         bra     label
               00872 ;; --------------------------------------------------------------------------------------------------
               00873 ;; -------------------------[END: LOAD Fx Functions from BANKSTICK (Pos 0-31)]-----------------------
               00874 ;; --------------------------------------------------------------------------------------------------
               00875 
               00876 
4340           00877 PATCH_LOAD_OK
               00878                 ;; IRQ ROUTINES HANDLING: ON
               00879                 IRQ_ENABLE
4340 8EF2          M         bsf     INTCON, GIE
               00880                 
               00881                 ;; INFO ON LCD:
               00882                 ;; LOADING PATCH DATA OK
               00883                 TABLE_ADDR LCD_CLEAR_ROW4
4342 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
4344 6EF6          M         movwf   TBLPTRL
4346 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4348 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
434A EC9E F016 00884                 call    MIOS_LCD_PrintString
               00885                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_LOAD_OK
434E 0EEC          M         movlw   LOW(addr)               ; store Lo Byte
4350 6EF6          M         movwf   TBLPTRL
4352 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4354 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4356 EC9E F016 00886                 call    MIOS_LCD_PrintString
               00887                 
               00888                 ;; AFTER LOADING THE PATCH: 
               00889                 ;; Currendt Patch = BROWSE PATCH
435A C07C F03E 00890                 movff       BROWSE_PATCH_NR, CURREND_PATCH_NR
               00891 
               00892                 ;; WRITE ASC. NAME @ LCD ROW1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00893                 ;; subfunction @ patch_name_writing.inc
435E EC72 F022 00894                 call WRITE_PATCH_NAME_ON_LCD
               00895                         
               00896                         ;; EXIT
4362 0012      00897                         return
               00898 
               00899 ;; ---------------------------------------------------------------
               00900 
               00901 ;; -------------------[ERROR MESSAGE]-----------------------------
               00902 ;; -------------- LOAD or WRITE FAILED ---------------------------
               00903 
4364           00904 PATCH_DATA_LOADING_Failed
               00905         ;; ERROR - SORRY, NO PATCH WAS LOADED :-(
               00906         ;; WRITE ERROR on LCD
               00907         TABLE_ADDR LCD_CLEAR_ROW4
4364 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
4366 6EF6          M         movwf   TBLPTRL
4368 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
436A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
436C EC9E F016 00908         call    MIOS_LCD_PrintString
               00909         TABLE_ADDR  TEXT_AY_MB_AY_PATCH_ERROR
4370 0EF4          M         movlw   LOW(addr)               ; store Lo Byte
4372 6EF6          M         movwf   TBLPTRL
4374 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4376 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4378 EC9E F016 00910         call    MIOS_LCD_PrintString
               00911                 ;; EXIT AFTER ERROR MESSAGE
437C 0012      00912                 return
               00913 
               00914 
               00915 
               00916 
               00917 ;; 
               00918 
               00919 ;; #########################################################################################
               00920 ;; -----------------------------------------------------------------------------------------
               00921 ;; -------------------------------[:: SUBROUTINES ::]---------------------------------------
               00922 ;; -----------------------------------------------------------------------------------------
               00923 ;; #########################################################################################
               00924 ;; -----------------------------------------------------------------------------------------
               00925 ;; -----------------------------------------------------------------------------------------
               00926 ;; -----------------------[LOAD DATA BYTE from EEPROM OR BANKSTICK to PIC RAM]--------------
               00927 ;; -----------------------------------------------------------------------------------------
437E           00928 LOAD_PATCH_DATA_BYTE
               00929         ;; CHECK:
               00930         ;; PATCH_MENU_STATE_FLAGS
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00931         ;; BIT2 = 0 = LOAD EEPROM PATCH (PIC INTERNAL PATCH)
               00932         ;; BIT2 = 1 = LOAD BANKSTICK PATCH
437E B47D      00933         btfsc   PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00934                         ;; ===[LOAD DATA BYTE from BANKSTICK TO PIC RAM]=====
               00935                         ;; BIT2 = SET   
               00936                         rgoto LOAD_PATCH_DATA_BYTE_FROM_BANKSTICK
4380 D004          M         bra     label
               00937                                 
               00938                 ;; ===========[WRITE DATA BYTE TO INTERNAL EEPROM]===========
               00939                 ;; BIT2 = CLEAR
               00940                 ;; LOAD INTERNAL PATCH (from PIC EEPROM)
4382 ECB0 F016 00941                 call    MIOS_EEPROM_Read
4386 6E3F      00942                 movwf   CURREND_PATCH_DATA_BYTE_TEMP
               00943                 ;; LOADED BYTE HAS BEEN WRITTEN TO CURREND_PATCH_DATA_BYTE_TEMP
               00944                 ;; EEPROM ADR = EEPROM ADR +1
               00945                 ;; EXIT THIS SUBROUTINE
4388 0012      00946                 return
               00947                 ;; ==============================================
               00948 
438A           00949 LOAD_PATCH_DATA_BYTE_FROM_BANKSTICK
               00950                         ;; ===================[WRITE DATA BYTE TO BANKSTICK]================
               00951                         ; store low-byte of address in MIOS_PARAMETER1
438A C07F F003 00952                         movff    BANKSTICK_LOW_BYTE_ADR_COUNTER, MIOS_PARAMETER1
               00953                         ; store high-byte of address in MIOS_PARAMETER2
438E C07C F004 00954                         movff   BROWSE_PATCH_NR , MIOS_PARAMETER2
4392 0604      00955                         decf    MIOS_PARAMETER2, F      ;; ADR (HI BYTE) BS PATCH = CURREND PATCH NR -1
               00956                                                         ;; -1 OFFSET
               00957                         ;; LOAD THE CURREND DATA BYTE from BANKSTICK
4394 ECB8 F016 00958                         call    MIOS_BANKSTICK_Read                     ; (address will be incremented
               00959                                                                         ;  after write)
               00960                         ;; bnz   BSProgrammingFailed                    ; branch to your exception handler
               00961                                                 
               00962                         ;; STORE PATCH DATA BYTE TO CURREND_PATCH_DATA_BYTE_TEMP
4398 6E3F      00963                         movwf   CURREND_PATCH_DATA_BYTE_TEMP
               00964                         ;; --------------------------------------------------------------------
               00965                         ;; BANKSTICK ADR = BANKSTICK ADR +1 (LOW BYTE)
439A 2A7F      00966                         incf    BANKSTICK_LOW_BYTE_ADR_COUNTER, F
               00967                         ;; --------------------------------------------------------------------  
               00968                         ;; EXIT THIS SUBROUTINE
439C 0012      00969                         return
               00970                         ;; =====================================================================
               00971 ;; ---------------------------------------------------------------------------------------------
               00972 ;; -----------------------[END: WRITE DATA BYTE TO EEPROM OR BANKSTICK]-------------------------
               00973 ;; ---------------------------------------------------------------------------------------------
               00044 #include "patch_name_writing.inc"
               00001 ;; patch_name_writing.inc
               00002 ;; --------------------------------------
               00003 ;; function: ptach name editing functions
               00004 ;; --------------------------------------
               00005 
               00006 ;; 1) check if active MAIN MENU = 1  (PATCH MENU)
               00007 ;; 2) check if active ITEM = 1 (PATCH NAME)
               00008 ;; 3) check if the KEY State is pressed or depressed (pressed is needed)
               00009 ;; 4) KEY ASCII CODE: check if the ASC CODE RANGE [0-9] is VALID 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00010 ;; 5) KEY ASCII CODE: check if the ASC CODE RANGE [A-Z] is VALID 
               00011 ;; 6) KEY ASCII CODE: check if the SPACE KEY had been pressed 
               00012 ;; 7) KEY ASCII CODE: check if the CURSOR RIGHT KEY had been pressed 
               00013 ;; 8) KEY ASCII CODE: check if the CURSOR LEFT KEY had been pressed 
               00014 
               00015 ;; ---[Start of MENU, ITEM an KEY Checking (PATCH NAME WRITING)]---------
439E           00016 CHCK_NEED_FOR_PATCHNAME_EDITING
               00017         ;; 1) check if active MAIN MENU = 1  (PATCH MENU)
               00018         ; First check if there is the patch menu active
               00019         ; MAIN MENU = 1 ? 
439E 0E01      00020         movlw  MAIN_MENU_01
43A0 6274      00021         cpfseq CURRENT_MAIN_MENU
               00022         
               00023                 ; NO - GO ON WITH SUB MENU FUNCTION
               00024                 ; @ sub_menu_functions.inc
43A2 EF8D F02C 00025                 goto BRANCH_TO_SUB_MENUE_KEY
               00026         
               00027                 ; YES
               00028                 ; GO ON AND CHECK IF the active item @ menu1
               00029                 rgoto CHCK_MAIN_MENU1_PATCHNAME_ITEM1
43A6 D000          M         bra     label
               00030 
43A8           00031 CHCK_MAIN_MENU1_PATCHNAME_ITEM1
               00032         ;; 2) check if active ITEM = 1 (ITEM: PATCH NAME)
               00033         ; ITEM 1 ?
43A8 C200 F003 00034         movff AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
43AC 0E01      00035         movlw MENU_ITEM_POS1
43AE 6203      00036         cpfseq MIOS_PARAMETER1
               00037                 ; NO - GO ON WITH SUB MENU FUNCTION
               00038                 ; @ sub_menu_functions.inc
43B0 EF8D F02C 00039                 goto BRANCH_TO_SUB_MENUE_KEY
               00040         
               00041                 ; YES, active ITEM = PATCH NAME
               00042                 ; GO ON AND CHECK the KEY State (pressed or depressed)
               00043                 rgoto CHCK_KEY_STATE_VALID
43B4 D000          M         bra     label
               00044         
               00045 
43B6           00046 CHCK_KEY_STATE_VALID
               00047         ;; 3) check if the KEY State is pressed or depressed
               00048         ; AY_KEY_STATE = 0 [=>PRESSED]
               00049         ; KEYBORAD: KEY HANDLING
43B6 0E00      00050         movlw  KEY_PRESSED_STATE_0
43B8 6277      00051         cpfseq SM_KEYB_KEY_STATE ;; = 0? (0=PRESSED, 1=DEPRESSED)
               00052                 
               00053                 ;; NO - EXIT HERE
               00054                 ;; GO ON WITH SUB MENU FUNCTION
               00055                 ;; @ sub_menu_functions.inc
43BA EF8D F02C 00056                 goto BRANCH_TO_SUB_MENUE_KEY
               00057 
               00058                         ;; YES
               00059                         ;; KEY STATE IS VALID
               00060                         ;; GO ON WITH ASCII CODE CHECKING
               00061                         rgoto CHCK_ASC_CODE_VALID_0_9_ASC_AREA_START
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
43BE D000          M         bra     label
               00062 
               00063 
43C0           00064 CHCK_ASC_CODE_VALID_0_9_ASC_AREA_START
               00065         ;; 4) Check KEY ASCII CODE: RANGE [0-9] 
               00066         ; CHECK if the KEY ASC CODE is in the ASC CODE [0-9] RANGE
               00067         ; (MAIN MENU =1, ITEM =1, KEY State = PRESSED)
               00068         ; CECK ASC CODE [0-9] START AREA = VALID?
               00069         ; IS PATCH_NAME_ASC_KEY > 0x2F ([0x30 = "0" in ASC CODE]) ?
43C0 C300 F003 00070         movff PATCH_NAME_ASC_KEY, MIOS_PARAMETER1
               00071         ; CHECK IF PATCH_NAME_ASC_KEY IS > 0x2F 
43C4 0E2F      00072         movlw PATCH_NAME_ASC_CODE_0_MINUS1
43C6 6403      00073         cpfsgt MIOS_PARAMETER1
               00074                 ;; NO - NOT in the Range of ASC [0-9] - EXIT [0-9] checking
               00075                 ;; GO ON WITH CHECKING ASC [A-Z] RANGE
               00076                 rgoto CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_START
43C8 D005          M         bra     label
               00077 
               00078                 ;; YES - OK GO ON AND CHECK IF THE 
               00079                 ;; ASC [0-9] AREA *END* IS VALID (not bigger than "9")
               00080                 rgoto CHCK_ASC_CODE_VALID_0_9_ASC_AREA_END
43CA D000          M         bra     label
               00081 
43CC           00082 CHCK_ASC_CODE_VALID_0_9_ASC_AREA_END
               00083         ; CHECK IF PATCH_NAME_ASC_KEY IS < 0x3A [0x39 = "9" (ASC)]
43CC 0E3A      00084         movlw PATCH_NAME_ASC_CODE_9_PLUS1
43CE 6003      00085         cpfslt MIOS_PARAMETER1
               00086                 ;; NO, ASC CODE is > than 0x39 [9 (ASC)]:
               00087                 ;; SO ASC CODE IS *NOT* in the ASC [0-9] RANGE!
               00088                 ;; SO EXIT THE [0-9] ASC AREA HERE AND
               00089                 ;; GO ON WITH CHECKING THE [A-Z] ASC AREA
               00090                 rgoto CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_START
43D0 D001          M         bra     label
               00091 
               00092                         ;; YES - OK VALID [0-9] RANGE
               00093                         ;; a *NUMBER* key [0-9] had been pressed!
               00094                         ;; GO ON AND WRITE A ASCI CHAR [0-9] TO THE PATCH NAME
               00095                         rgoto ASC_PATCH_NAME_WRITING
43D2 D047          M         bra     label
               00096 
43D4           00097 CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_START
               00098         ;; 5) KEY ASCII CODE: check if the ASC CODE RANGE [A-Z] is VALID 
               00099         ; CHECK if the ASC CODE is START AREA ASC [A]
               00100         ; CHECK IF PATCH_NAME_ASC_KEY IS > 0x40 [41 = A (ASC)]
43D4 0E40      00101         movlw PATCH_NAME_ASC_CODE_A_MINUS1
43D6 6403      00102         cpfsgt MIOS_PARAMETER1
               00103                 ;; NO - NOT [A-Z] RANGE - EXIT HERE AND
               00104                 ;; Check the SPACE KEY next
               00105                 rgoto CHCK_ASC_CODE_VALID_SPACE_KEY
43D8 D005          M         bra     label
               00106 
               00107                 ;; YES - OK GO ON
               00108                 rgoto CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_END
43DA D000          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109 
43DC           00110 CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_END
               00111         ; CHECK IF PATCH_NAME_ASC_KEY IS < 0x5B [0x5A = "Z" (ASC)]
43DC 0E5B      00112         movlw PATCH_NAME_ASC_CODE_Z_PLUS1
43DE 6003      00113         cpfslt MIOS_PARAMETER1
               00114                 ;; NO > 0x5A ["Z" (ASC)] - ASC CODE IS NOT [A-Z] ASC RANGE
               00115                 ;; SO EXIT THE [A-Z] ASC AREA HERE
               00116                 ;; Check SPACE KEY next
               00117                 rgoto CHCK_ASC_CODE_VALID_SPACE_KEY
43E0 D001          M         bra     label
               00118 
               00119                 ;; YES - OK VALID [A-Z] ASC RANGE
               00120                 ;; GO ON AND WRITE [A-Z] ASCII CHAR TO THE PATCH NAME
               00121                 rgoto ASC_PATCH_NAME_WRITING
43E2 D03F          M         bra     label
               00122 
               00123 
43E4           00124 CHCK_ASC_CODE_VALID_SPACE_KEY
               00125         ;; 6) KEY ASCII CODE: check if the SPACE KEY had been pressed 
               00126         ; CHECK IF PATCH_NAME_ASC_KEY IS == 0x5F [SPACE KEY "_" for LCD]
43E4 0E5F      00127         movlw PATCH_NAME_ASC_CODE_SPACE_KEY
43E6 6203      00128         cpfseq MIOS_PARAMETER1
               00129                 ;; NO not 0x5F [SPACE KEY => underscore in LCD code => "_"]
               00130                 ;; SO Check CURSOR RIGHT next
               00131                 rgoto CHCK_ASC_CODE_VALID_DELITE_KEY
43E8 D001          M         bra     label
               00132 
               00133                 ;; YES = [SPACE KEY] was pressed
               00134                 ;; WRITE "_"
               00135                 rgoto ASC_PATCH_NAME_WRITING
43EA D03B          M         bra     label
               00136 
               00137 
43EC           00138 CHCK_ASC_CODE_VALID_DELITE_KEY
               00139         ;; 7) KEY ASCII CODE: check if the DEL KEY had been pressed 
               00140         ; CHECK IF PATCH_NAME_ASC_KEY IS == 0x14 [DEL KEY]
43EC 0E14      00141         movlw PATCH_NAME_ASC_CODE_DEL_KEY
43EE 6203      00142         cpfseq MIOS_PARAMETER1
               00143                 ;; NO, THE DEL key has not been pressed
               00144                 ;; SO Check CURSOR RIGHT next
               00145                 rgoto CHCK_ASC_CODE_VALID_CURSOR_R
43F0 D019          M         bra     label
               00146 
               00147                         ;; YES = [DEL KEY] was pressed
               00148                         ;; DEL ASC CHAR @ current POS and WRITE "." @ currend POS x
               00149                         ;; first check if pos = 0
               00150                         rgoto RESET_PATCH_NAME
43F2 D000          M         bra     label
               00151 
43F4           00152 RESET_PATCH_NAME        
               00153         ;; reset patch name to "........"
43F4 0E2E      00154         movlw "."
43F6 6E03      00155         movwf MIOS_PARAMETER1
43F8 C003 F303 00156         movff MIOS_PARAMETER1, PATCH_NAME_ASC_0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
43FC C003 F304 00157         movff MIOS_PARAMETER1, PATCH_NAME_ASC_1
4400 C003 F305 00158         movff MIOS_PARAMETER1, PATCH_NAME_ASC_2
4404 C003 F306 00159         movff MIOS_PARAMETER1, PATCH_NAME_ASC_3
4408 C003 F307 00160         movff MIOS_PARAMETER1, PATCH_NAME_ASC_4
440C C003 F308 00161         movff MIOS_PARAMETER1, PATCH_NAME_ASC_5
4410 C003 F309 00162         movff MIOS_PARAMETER1, PATCH_NAME_ASC_6
4414 C003 F30A 00163         movff MIOS_PARAMETER1, PATCH_NAME_ASC_7
               00164         ;; POS1 PATCH NAME
4418 0E00      00165         movlw 0x00
441A 6E03      00166         movwf MIOS_PARAMETER1
441C C003 F301 00167         movff MIOS_PARAMETER1, PATCH_NAME_ASC_POS
               00168                         
               00169                 ;; REDRAW LCD
               00170                 ;; main_menu_01_patch.inc
4420 EF1E F025 00171                 goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00172                                 
               00173 
               00174 
               00175 
4424           00176 CHCK_ASC_CODE_VALID_CURSOR_R
               00177         ;; 7) KEY ASCII CODE: check if the CURSOR RIGHT KEY had been pressed 
               00178         ; CHECK IF PATCH_NAME_ASC_KEY IS == 0x1D [CURSOR RIGHT KEY]
4424 0E1D      00179         movlw PATCH_NAME_CURSOR_RIGHT_KEY
4426 6203      00180         cpfseq MIOS_PARAMETER1
               00181                 ;; NO not [CURSOR RIGHT KEY]
               00182                 ;; GO and Check CURSOR Left next
               00183                 rgoto CHCK_ASC_CODE_VALID_CURSOR_L
4428 D001          M         bra     label
               00184 
               00185                 ;; YES [CURSOR RIGHT KEY] was pressed
               00186                 ;; INC POS OF CURSOR @ THE PATCH NAME
               00187                 rgoto INC_PATCH_NAME_POS
442A D005          M         bra     label
               00188 
               00189 
442C           00190 CHCK_ASC_CODE_VALID_CURSOR_L
               00191         ;; 8) KEY ASCII CODE: check if the CURSOR LEFT KEY had been pressed 
               00192         ; CHECK IF PATCH_NAME_ASC_KEY IS == 0x9D [CURSOR LEFT KEY]
442C 0E9D      00193         movlw PATCH_NAME_CURSOR_LEFT_KEY
442E 6203      00194         cpfseq MIOS_PARAMETER1
               00195                 ;; NO not [CURSOR LEFT KEY]
               00196                 ;; SO EXIT HERE AND
               00197                 ;; GO ON WITH [SUB MENU - KEY SWITCH]
               00198                 ;; @ sub_menu_functions.inc
4430 EF8D F02C 00199                 goto BRANCH_TO_SUB_MENUE_KEY
               00200 
               00201                 ;; YES [CURSOR LEFT KEY]
               00202                 ;; DEC POS OF CURSOR @ THE PATCH NAME
               00203                 rgoto DEC_PATCH_NAME_POS
4434 D00B          M         bra     label
               00204 
               00205 
               00206 ;; -------------[END of MENU, ITEM an KEY Checking]--------------------
               00207 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00208 ;; -------------[Start of PATCH NAME EDITING Routines]-----------------
               00209 
4436           00210 INC_PATCH_NAME_POS
               00211         
               00212         ;; INC PATCH_NAME_ASC_POS [0-7]
               00213         ;; IF PATCH_NAME_ASC_POS = 7 (CURSOR POS MAX) do not inc
4436 C301 F003 00214         movff PATCH_NAME_ASC_POS, MIOS_PARAMETER1
               00215         
443A 0E07      00216         movlw PATCH_NAME_CURSOR_POS_MAX 
443C 6203      00217         cpfseq MIOS_PARAMETER1
               00218         
               00219                 ;; NO, POS is not 7 (CURSOR POS MAX)
               00220                 rgoto DO_INC_PATCH_NAME_CURSOR_POS
443E D002          M         bra     label
               00221 
               00222                 ;; YES = CURSOR POS MAX
               00223                 rgoto DO_NOT_INC_PATCH_NAME_CURSOR_POS
4440 D000          M         bra     label
               00224 
4442           00225 DO_NOT_INC_PATCH_NAME_CURSOR_POS
4442 0012      00226                 return
               00227 
4444           00228 DO_INC_PATCH_NAME_CURSOR_POS    
4444 2A03      00229         incf MIOS_PARAMETER1, F
4446 C003 F301 00230         movff MIOS_PARAMETER1, PATCH_NAME_ASC_POS
444A 0012      00231                 return
               00232 
444C           00233 DEC_PATCH_NAME_POS
               00234         ;; DEC PATCH_NAME_ASC_POS [0-7]
               00235         ;; IF PATCH_NAME_ASC_POS = 0 DO NOT DEC
444C C301 F003 00236         movff   PATCH_NAME_ASC_POS, MIOS_PARAMETER1
4450 0E00      00237         movlw   0x00
4452 6203      00238         cpfseq  MIOS_PARAMETER1
               00239         
               00240                 ;; NO, POS is not 0
               00241                 ;; SO IT'S ALLRIGHT TO DEC CURSOR POS -1
               00242                 rgoto DO_DEC_PATCH_NAME_CURSOR_POS
4454 D002          M         bra     label
               00243 
               00244                 ;; YES
               00245                 rgoto DO_NOT_DEC_PATCH_NAME_CURSOR_POS
4456 D000          M         bra     label
               00246 
4458           00247 DO_NOT_DEC_PATCH_NAME_CURSOR_POS
4458 0012      00248                 return
               00249 
445A           00250 DO_DEC_PATCH_NAME_CURSOR_POS    
445A 0603      00251         decf    MIOS_PARAMETER1, F
445C C003 F301 00252         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_POS
4460 0012      00253                 return
               00254 
               00255 
               00256 
4462           00257 ASC_PATCH_NAME_WRITING
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4462 C301 F003 00258                 movff PATCH_NAME_ASC_POS, MIOS_PARAMETER1
4466 5003      00259                 movf    MIOS_PARAMETER1, W
               00260                 ;; index is in WREG now
               00261                 JUMPTABLE_2BYTES 8        ; (8 entries)
4468 0FF8          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
446A B0D8          M         skpnc
446C 0EF8          M         movlw   -(max_value)
446E 0F08          M         addlw   max_value
4470 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00262                                 rgoto        WRITE_PATCH_NAME_ASC_POS1
4474 D007          M         bra     label
               00263                                 rgoto        WRITE_PATCH_NAME_ASC_POS2
4476 D009          M         bra     label
               00264                                 rgoto        WRITE_PATCH_NAME_ASC_POS3
4478 D00B          M         bra     label
               00265                                 rgoto        WRITE_PATCH_NAME_ASC_POS4
447A D00D          M         bra     label
               00266                                 rgoto        WRITE_PATCH_NAME_ASC_POS5
447C D00F          M         bra     label
               00267                                 rgoto        WRITE_PATCH_NAME_ASC_POS6
447E D011          M         bra     label
               00268                                 rgoto        WRITE_PATCH_NAME_ASC_POS7
4480 D013          M         bra     label
               00269                                 rgoto        WRITE_PATCH_NAME_ASC_POS8
4482 D015          M         bra     label
               00270 
               00271 
4484           00272 WRITE_PATCH_NAME_ASC_POS1
4484 C300 F303 00273         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_0
               00274                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
4488 D015          M         bra     label
               00275 
448A           00276 WRITE_PATCH_NAME_ASC_POS2
448A C300 F304 00277         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_1
               00278                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
448E D012          M         bra     label
               00279 
4490           00280 WRITE_PATCH_NAME_ASC_POS3
4490 C300 F305 00281         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_2
               00282                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
4494 D00F          M         bra     label
               00283 
4496           00284 WRITE_PATCH_NAME_ASC_POS4
4496 C300 F306 00285         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_3
               00286                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
449A D00C          M         bra     label
               00287 
449C           00288 WRITE_PATCH_NAME_ASC_POS5
449C C300 F307 00289         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_4
               00290                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
44A0 D009          M         bra     label
               00291 
44A2           00292 WRITE_PATCH_NAME_ASC_POS6
44A2 C300 F308 00293         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_5
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00294                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
44A6 D006          M         bra     label
               00295 
44A8           00296 WRITE_PATCH_NAME_ASC_POS7
44A8 C300 F309 00297         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_6
               00298                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
44AC D003          M         bra     label
               00299 
44AE           00300 WRITE_PATCH_NAME_ASC_POS8
44AE C300 F30A 00301         movff PATCH_NAME_ASC_KEY, PATCH_NAME_ASC_7
               00302                 rgoto ASC_PATCH_NAME_WRITING_TO_LCD
44B2 D000          M         bra     label
               00303 
               00304 
               00305 
44B4           00306 ASC_PATCH_NAME_WRITING_TO_LCD
               00307 
               00308                         ;;WRITE ASCII CHAR
               00309                         ;; SET CURSOR
44B4 0E08      00310                         movlw   LCD_ROW1 + 8 
44B6 C301 F003 00311                         movff   PATCH_NAME_ASC_POS, MIOS_PARAMETER1
44BA 2403      00312                         addwf   MIOS_PARAMETER1, W
44BC EC88 F016 00313                         call    MIOS_LCD_CursorSet
               00314                         ;; WRITE ASCII CHAR
44C0 C300 F003 00315                         movff   PATCH_NAME_ASC_KEY, MIOS_PARAMETER1
44C4 5003      00316                         movf    MIOS_PARAMETER1, W
44C6 EC94 F016 00317                         call    MIOS_LCD_PrintChar
               00318                         
               00319 
               00320 
44CA C301 F003 00321                         movff   PATCH_NAME_ASC_POS, MIOS_PARAMETER1
44CE 2A03      00322                         incf    MIOS_PARAMETER1, F
44D0 C003 F301 00323                         movff   MIOS_PARAMETER1, PATCH_NAME_ASC_POS
               00324 
               00325                                 ;; CHECK: CURSOR POS > 7 (PATCH_NAME_CURSOR_POS_MAX)?
44D4 0E07      00326                                 movlw PATCH_NAME_CURSOR_POS_MAX
44D6 6403      00327                                 cpfsgt MIOS_PARAMETER1
               00328                                         ;; NO,
               00329                                         ;; OK - JUST EXIT HERE
44D8 0012      00330                                         return
               00331 
               00332                                                 ;; YES,
               00333                                                 ;; WRITE PATCH_NAME_CURSOR_POS_MAX to CURSOR PATCH NAME POS
44DA 0E07      00334                                                 movlw PATCH_NAME_CURSOR_POS_MAX
44DC 6E03      00335                                                 movwf MIOS_PARAMETER1
44DE C003 F301 00336                                                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_POS
               00337                                                 ;; EXIT HERE
44E2 0012      00338                                                 return
               00339 
               00340 
               00341 
               00342 ;; ---------------------------------------------------------------
               00343 
               00344 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00345 
               00346 ;; ---------------------------------------------------------------
               00347 ;; -----------[SUBROUTINE: WRITE [PATCH NAME] on LCD]-------------
               00348 ;; ---------------------------------------------------------------
44E4           00349 WRITE_PATCH_NAME_ON_LCD
               00350                 ;; WRITE PATCH NAME ON LCD ROW1 
               00351                 
               00352                 ;; 1) SET CURSOR POS TO PATCH NAME ASC POS1
44E4 0E08      00353                         movlw   LCD_ROW1 + 8
               00354                                         
               00355                 ;; 2) WRITE ASC CODE from PATCH_NAME_ASC_1 to LCD
44E6 EC88 F016 00356                         call    MIOS_LCD_CursorSet
44EA C303 F003 00357                         movff   PATCH_NAME_ASC_0, MIOS_PARAMETER1
44EE 5003      00358                         movf    MIOS_PARAMETER1, W
44F0 EC94 F016 00359                         call    MIOS_LCD_PrintChar
               00360 
               00361                 ;; 3) INC CURSER POS
44F4 0E09      00362                         movlw   LCD_ROW1 + 9
               00363                 ;; 4) WRITE ASC CODE from PATCH_NAME_ASC_2 to LCD
44F6 EC88 F016 00364                         call    MIOS_LCD_CursorSet
44FA C304 F003 00365                         movff   PATCH_NAME_ASC_1, MIOS_PARAMETER1
44FE 5003      00366                         movf    MIOS_PARAMETER1, W
4500 EC94 F016 00367                         call    MIOS_LCD_PrintChar
               00368 
               00369                 ;; 5) INC CURSER POS
4504 0E0A      00370                         movlw   LCD_ROW1 + 10
               00371                 ;; 6) WRITE ASC CODE from PATCH_NAME_ASC_3 to LCD
4506 EC88 F016 00372                         call    MIOS_LCD_CursorSet
450A C305 F003 00373                         movff   PATCH_NAME_ASC_2, MIOS_PARAMETER1
450E 5003      00374                         movf    MIOS_PARAMETER1, W
4510 EC94 F016 00375                         call    MIOS_LCD_PrintChar
               00376                 
               00377                 ;; 7) INC CURSER POS
4514 0E0B      00378                         movlw   LCD_ROW1 + 11
               00379 
               00380                 ;; 8) WRITE ASC CODE from PATCH_NAME_ASC_4 to LCD
4516 EC88 F016 00381                         call    MIOS_LCD_CursorSet
451A C306 F003 00382                         movff   PATCH_NAME_ASC_3, MIOS_PARAMETER1
451E 5003      00383                         movf    MIOS_PARAMETER1, W
4520 EC94 F016 00384                         call    MIOS_LCD_PrintChar
               00385 
               00386                 ;; 9) INC CURSER POS
4524 0E0C      00387                         movlw   LCD_ROW1 + 12
               00388 
               00389                 ;;10) WRITE ASC CODE from PATCH_NAME_ASC_5 to LCD
4526 EC88 F016 00390                         call    MIOS_LCD_CursorSet
452A C307 F003 00391                         movff   PATCH_NAME_ASC_4, MIOS_PARAMETER1
452E 5003      00392                         movf    MIOS_PARAMETER1, W
4530 EC94 F016 00393                         call    MIOS_LCD_PrintChar
               00394 
               00395                 ;;11) INC CURSER POS
4534 0E0D      00396                         movlw   LCD_ROW1 + 13
               00397 
               00398                 ;;12) WRITE ASC CODE from PATCH_NAME_ASC_6 to LCD
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4536 EC88 F016 00399                         call    MIOS_LCD_CursorSet
453A C308 F003 00400                         movff   PATCH_NAME_ASC_5, MIOS_PARAMETER1
453E 5003      00401                         movf    MIOS_PARAMETER1, W
4540 EC94 F016 00402                         call    MIOS_LCD_PrintChar
               00403 
               00404                 ;;13) INC CURSER POS
4544 0E0E      00405                         movlw   LCD_ROW1 + 14
               00406 
               00407                 ;;14) WRITE ASC CODE from PATCH_NAME_ASC_7 to LCD
4546 EC88 F016 00408                         call    MIOS_LCD_CursorSet
454A C309 F003 00409                         movff   PATCH_NAME_ASC_6, MIOS_PARAMETER1
454E 5003      00410                         movf    MIOS_PARAMETER1, W
4550 EC94 F016 00411                         call    MIOS_LCD_PrintChar
               00412 
               00413                 ;;15) INC CURSER POS
4554 0E0F      00414                         movlw   LCD_ROW1 + 15
               00415 
               00416                 ;;16) WRITE ASC CODE from PATCH_NAME_ASC_8 to LCD
4556 EC88 F016 00417                         call    MIOS_LCD_CursorSet
455A C30A F003 00418                         movff   PATCH_NAME_ASC_7, MIOS_PARAMETER1
455E 5003      00419                         movf    MIOS_PARAMETER1, W
4560 EC94 F016 00420                         call    MIOS_LCD_PrintChar
               00421                                         
               00422                                         ;; EXIT HERE
4564 0012      00423                                         return
               00424                                         
               00425 ;; -----------[END: WRITE [PATCH NAME] ON LCD]--------------------
               00426 ;; ---------------------------------------------------------------
               00045 
               00046 ;; ----[C64 KEYBOARD DECODING]----------------------------
               00047 #include "keyb_decoding.inc"
               00001 
               00002 ;; keyb_decoding.inc
               00003 
               00004 ;; ---------------------[C64 KEYBOARD BUTTON DECODING]-------------------
               00005 ;; The SCAN MATRIX DRIVER (8x8 scan matrix driver, sm_fast.inc) deliver 
               00006 ;; a *KEYBOARD BUTON VALUE* => [SM_DRIVER_KEYBOARD_KEY_VALUE]
               00007 ;; ----------------------------------------------------------------------
               00008 ;;
               00009 
               00010 
               00011         ;; WHAT WILL HAPEN?
               00012         ;;
               00013         ;; 1)
               00014         ;; IF A *SUB MENU* KEY ([+] /[-] / etc.) HAS BEEN PRESSED
               00015         ;; A VALUE WILL BE WRITTEN TO 
               00016         ;; => AY_SUB_MENUE_KEY_SWITCH
               00017         ;; (FOR THE *SUB MENU* JUMPTABLE)
               00018         ;; 
               00019         ;; 2)IF A *MAIN MENU* KEY (F1, F2, ESC, etc.) HAS BEEN PRESSED
               00020         ;; A VALUE WILL BE WRITTEN TO 
               00021         ;; => CURRENT_MAIN_MENU
               00022         ;; (FOR THE *MAIN MENU* JUMPTABLE)
               00023         ;;
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00024         ;;2a)
               00025         ;; IF A *MAIN MENU* KEY HAS BEEN PRESSED 
               00026         ;; => SWITCH_BETWEEN_MAIN_AND_SUBMENU = 0
               00027         ;; 
               00028         ;; 3)
               00029         ;; THERE ARE SHIFT-KEY HANDLING ROUTINES
               00030         ;; => AY_KEYB_SPECIAL_KEY_TOGGLE
               00031         ;; when BIT0 IS SET THEN THE SHIFT KEY IS PRESSED
               00032         ;; when BIT0 IS CLEAR THE THE SHIFT KEY IS NOT PRESSED
               00033         ;; 
               00034         ;; 4)
               00035         ;; If needed write ASCII CODE Char to PATCH_NAME_ASC_KEY
               00036         ;; 
               00037 
4566           00038 DECODE_KEYBOARD_BUTTON  
               00039         ;; FUNCTION:
               00040         ;; CHECK WITCH KEYBOARD BUTTON HAS BEEN PRESSED
               00041         
               00042         ;; BUT FIRST: 
               00043         ;; RESET the former AY_SUB_MENUE_KEY_SWITCH VALUE to 0
4566 0E00      00044         movlw 0x00
4568 6E75      00045         movwf AY_SUB_MENUE_KEY_SWITCH                           ;; JUMP 
               00046                                                                 ;; WITH
               00047         ;;                                                      ;; THE          NAME OF     
               00048         ;; JUMPTABLE KEYBOARD KEY 8x8 (0x00 - 0x40)             ;;8x8 SM        BUTTONS/    
456A 5076      00049         movf SM_DRIVER_KEYBOARD_KEY, W                          ;;DRIVER        KEYBOARD        
               00050         JUMPTABLE_4BYTES 64 ; 0-63                              ;;VALUE         BUTTON NAME/          Assigned
456C 0FC0          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
456E B0D8          M         skpnc
4570 0012          M         return
4572 0F40          M         addlw   (max_value)
4574 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
               00051                 ;;                                                (DEC.)        C64 KEY               CPM ASCII VALUE
               00052                 ;;                                                ||              ||                  FOR THE PATCH MENU 
               00053                 ;;      KEYBOARD JUMPTABLE                        ||   Assigned   ||                  WRITE NAME ROUTINE
               00054                 ;;              ||                                ||   SUB MENU   ||                       ||
               00055                 ;;              ||                                ||   KEY VALUE  ||                       ||
               00056                 ;;              ||                                ||    ||        ||                       ||
               00057                 ;;              \/                                \/    \/        \/                       \/
               00058                 ;;------------------------------------------------------------------------------------------------------------
4578 EF41 F023 00059                 goto    DECODE_SM_BUTTON_MATRIX_00              ;;00    [-]     INS DEL         CPM ASCII: 0x14 = INS DEL
457C EF46 F023 00060                 goto    DECODE_SM_BUTTON_MATRIX_01              ;;01    [2]     RETURN          CPM ASCII: 0x0D = CR
4580 EF4D F023 00061                 goto    DECODE_SM_BUTTON_MATRIX_02              ;;02    [3]/[4] CRSR RGT./LFT.  CPM ASCII: RGT. 0x1D, LFT. 0x9D 
4584 EF60 F023 00062                 goto    DECODE_SM_BUTTON_MATRIX_03              ;;03    [1]/[2] CRSR UP/DWN.    CPM ASCII: UP 0x91 , DWN. 0x11
4588 EF73 F023 00063                 goto    DECODE_SM_BUTTON_MATRIX_04              ;;04 [MAINMENU] F1 / F2 (+SHIFT)-
458C EF83 F023 00064                 goto    DECODE_SM_BUTTON_MATRIX_05              ;;05 [MAINMENU] F3 / F4 (+SHIFT)-
4590 EF93 F023 00065                 goto    DECODE_SM_BUTTON_MATRIX_06              ;;06 [MAINMENU] F5 / F6 (+SHIFT)-
4594 EFA3 F023 00066                 goto    DECODE_SM_BUTTON_MATRIX_07              ;;07 [MAINMENU] F7 / F8 (+SHIFT)-
4598 EF3C F023 00067                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;08    [-]     POUND           CPM ASCII 0x00
459C EF3C F023 00068                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;09    [-]     *(STAR)         CPM ASCII 0x00
45A0 EF3C F023 00069                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;10    [-]     ; (SEMICOLON)   CPM ASCII 0x00
45A4 EF3C F023 00070                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;11    [-]     / (SLASH)       CPM ASCII 0x00
45A8 EFB3 F023 00071                 goto    DECODE_SM_BUTTON_MATRIX_12              ;;12 [SHIFT R.](SpezialKEY)     CPM ASCII 0x00
45AC EF3C F023 00072                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;13    [-]     =               CPM ASCII 0x00
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
45B0 EFC1 F023 00073                 goto    DECODE_SM_BUTTON_MATRIX_14              ;;14    [1]     UP (Arrow UP)   -
45B4 EF41 F023 00074                 goto    DECODE_SM_BUTTON_MATRIX_00 ;;[INS DEL]! ;;15    [-]     CLR HOME        CPM ASCII 0x14 = INS DEL
45B8 EFC4 F023 00075                 goto    DECODE_SM_BUTTON_MATRIX_16              ;;16    [3]     + (PLUS)        CPM ASCII:0x1D
45BC EFCB F023 00076                 goto    DECODE_SM_BUTTON_MATRIX_17              ;;17    [-]     P               CPM ASCII 0x50
45C0 EFD0 F023 00077                 goto    DECODE_SM_BUTTON_MATRIX_18              ;;18    [9]     L               CPM ASCII 0x4C
45C4 EFD7 F023 00078                 goto    DECODE_SM_BUTTON_MATRIX_23 ;;[-]!       ;;19    [-]     , (COMMA)       CPM ASCII 0x9D 
45C8 EFC4 F023 00079                 goto    DECODE_SM_BUTTON_MATRIX_16 ;;[+]!       ;;20    [-]     . (POINT)       CPM ASCII:0x1D
45CC EF3C F023 00080                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;21    [-]     : (colon)       CPM ASCII 0x00
45D0 EF3C F023 00081                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;22    [-]     @               CPM ASCII 0x00
45D4 EFD7 F023 00082                 goto    DECODE_SM_BUTTON_MATRIX_23              ;;23    [4]     - (MINUS)       CPM ASCII 0x9D 
45D8 EFDE F023 00083                 goto    DECODE_SM_BUTTON_MATRIX_24              ;;24    [-]     9               CPM ASCII 0x39
45DC EFE3 F023 00084                 goto    DECODE_SM_BUTTON_MATRIX_25              ;;25    [-]     I               CPM ASCII 0x49
45E0 EFE8 F023 00085                 goto    DECODE_SM_BUTTON_MATRIX_26              ;;26    [-]     J               CPM ASCII 0x4A
45E4 EFED F023 00086                 goto    DECODE_SM_BUTTON_MATRIX_27              ;;27    [-]     N               CPM ASCII 0x4E
45E8 EFF2 F023 00087                 goto    DECODE_SM_BUTTON_MATRIX_28              ;;28    [-]     M               CPM ASCII 0x4D
45EC EFF7 F023 00088                 goto    DECODE_SM_BUTTON_MATRIX_29              ;;29    [-]     K               CPM ASCII 0x4B
45F0 EFFC F023 00089                 goto    DECODE_SM_BUTTON_MATRIX_30              ;;30    [-]     O               CPM ASCII 0x4F
45F4 EF01 F024 00090                 goto    DECODE_SM_BUTTON_MATRIX_31              ;;31    [-]     0               CPM ASCII 0x30
45F8 EF06 F024 00091                 goto    DECODE_SM_BUTTON_MATRIX_32              ;;32    [-]     7               CPM ASCII 0x37
45FC EF0B F024 00092                 goto    DECODE_SM_BUTTON_MATRIX_33              ;;33    [-]     Y               CPM ASCII 0x59
4600 EF10 F024 00093                 goto    DECODE_SM_BUTTON_MATRIX_34              ;;34    [-]     G               CPM ASCII 0x47
4604 EF15 F024 00094                 goto    DECODE_SM_BUTTON_MATRIX_35              ;;35    [-]     V               CPM ASCII 0x56
4608 EF1A F024 00095                 goto    DECODE_SM_BUTTON_MATRIX_36              ;;36    [6]     B               CPM ASCII 0x42
460C EF21 F024 00096                 goto    DECODE_SM_BUTTON_MATRIX_37              ;;37    [-]     H               CPM ASCII 0x48
4610 EF26 F024 00097                 goto    DECODE_SM_BUTTON_MATRIX_38              ;;38    [-]     U               CPM ASCII 0x55
4614 EF2B F024 00098                 goto    DECODE_SM_BUTTON_MATRIX_39              ;;39    [-]     8               CPM ASCII 0x38
4618 EF30 F024 00099                 goto    DECODE_SM_BUTTON_MATRIX_40              ;;40    [-]     5               CPM ASCII 0x35
461C EF35 F024 00100                 goto    DECODE_SM_BUTTON_MATRIX_41              ;;41    [-]     R               CPM ASCII 0x52
4620 EF3A F024 00101                 goto    DECODE_SM_BUTTON_MATRIX_42              ;;42    [-]     D               CPM ASCII 0x44
4624 EF3F F024 00102                 goto    DECODE_SM_BUTTON_MATRIX_43              ;;43    [-]     X               CPM ASCII 0x58
4628 EF44 F024 00103                 goto    DECODE_SM_BUTTON_MATRIX_44              ;;44    [-]     C               CPM ASCII 0x43
462C EF4B F024 00104                 goto    DECODE_SM_BUTTON_MATRIX_45              ;;45    [-]     F               CPM ASCII 0x46
4630 EF52 F024 00105                 goto    DECODE_SM_BUTTON_MATRIX_46              ;;46    [-]     T               CPM ASCII 0x54
4634 EF57 F024 00106                 goto    DECODE_SM_BUTTON_MATRIX_47              ;;47    [-]     6               CPM ASCII 0x36
4638 EF5C F024 00107                 goto    DECODE_SM_BUTTON_MATRIX_48              ;;48    [-]     3               CPM ASCII 0x33 
463C EF61 F024 00108                 goto    DECODE_SM_BUTTON_MATRIX_49              ;;49    [8]     W               CPM ASCII 0x57
4640 EF68 F024 00109                 goto    DECODE_SM_BUTTON_MATRIX_50              ;;50    [5]     A               CPM ASCII 0x41
4644 EF6F F024 00110                 goto    DECODE_SM_BUTTON_MATRIX_51              ;;51 [SHIFT L.](SpezialKEY)     -
4648 EF7D F024 00111                 goto    DECODE_SM_BUTTON_MATRIX_52              ;;52    [-]     Z               CPM ASCII 0x5A
464C EF82 F024 00112                 goto    DECODE_SM_BUTTON_MATRIX_53              ;;53    [-]     S               CPM ASCII 0x53
4650 EF87 F024 00113                 goto    DECODE_SM_BUTTON_MATRIX_54              ;;54    [-]     E               CPM ASCII 0x45
4654 EF8C F024 00114                 goto    DECODE_SM_BUTTON_MATRIX_55              ;;55    [-]     4               CPM ASCII 0x34
4658 EF91 F024 00115                 goto    DECODE_SM_BUTTON_MATRIX_56              ;;56    [-]     1               CPM ASCII 0x31
465C EF96 F024 00116                 goto    DECODE_SM_BUTTON_MATRIX_57              ;;57 [MAINMENU] <-(ESC)         -
4660 EF9B F024 00117                 goto    DECODE_SM_BUTTON_MATRIX_58              ;;58 [MAINMENU] CTRL            -
4664 EF96 F024 00118                 goto    DECODE_SM_BUTTON_MATRIX_57 ;; !ESC!     ;;57![MAINMENU] RUN STOP (ESC)  -
4668 EFC4 F024 00119                 goto    DECODE_SM_BUTTON_MATRIX_60              ;;60    [-]     SPACE           LCD:"_" = 0x5F(NOT CMP ASCII)
466C EF3C F023 00120                 goto    DECODE_SM_BUTTON_MATRIX_NOT_USED_YET    ;;61    [-]     COMMODORE       CPM ASCII 0x00
4670 EFC9 F024 00121                 goto    DECODE_SM_BUTTON_MATRIX_62              ;;62    [-]     Q               CPM ASCII 0x51
4674 EFCE F024 00122                 goto    DECODE_SM_BUTTON_MATRIX_63              ;;63    [-]     2               CPM ASCII 0x32
               00123 
               00124 
               00125 ;; -------[JUMPTABLE KEYBOARD KEY :: destinations]-------
               00126 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00127 
               00128 ;; -------[UNUSED KEYS]-------
4678           00129 DECODE_SM_BUTTON_MATRIX_NOT_USED_YET
               00130         ;; GO HERE IF A UNUSED KEY WAS PRESSED
               00131                         ;; WRITE CPM ASCII 0x00
4678 0E00      00132                         movlw 0x00
467A 6E03      00133                         movwf MIOS_PARAMETER1
467C C003 F300 00134                         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4680 0012      00135                         return
               00136 
4682           00137 DECODE_SM_BUTTON_MATRIX_00
               00138                         ;; C64 Keyboard INST DEL
               00139                         ;; CPM ASCII 0x2E = ASC CODE "." 
4682 0E14      00140                         movlw 0x14
4684 6E03      00141                         movwf MIOS_PARAMETER1
4686 C003 F300 00142                         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
               00143                                 
468A 0012      00144                         return
               00145 
               00146 
               00147 ;; -------[RETURN]-------
468C           00148 DECODE_SM_BUTTON_MATRIX_01
468C 0E02      00149         movlw 0x02
468E 6E75      00150         movwf AY_SUB_MENUE_KEY_SWITCH
               00151         
               00152                         ;; ASCII 0D = CR
               00153                         ;; carriage return
4690 0E0D      00154                         movlw 0x0D
4692 6E03      00155                         movwf MIOS_PARAMETER1
4694 C003 F300 00156                         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
               00157                         
               00158         
4698 0012      00159                         return
               00160 
               00161 ;; -------[CRSR RGT./LFT.]-------
469A           00162 DECODE_SM_BUTTON_MATRIX_02
               00163         ;; CHECK SHIFT KEY
               00164         ;; IS SHIFT PRESSED? (BIT 0)
469A A079      00165         btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00166                 
               00167                 ;; NO
469C EF52 F023 00168                 goto DECODE_SM_BUTTON_CRSR_NO_SHIFT
               00169         
               00170                 ;; YES
46A0 EF59 F023 00171                 goto DECODE_SM_BUTTON_CRSR_SHIFT
               00172 
46A4           00173 DECODE_SM_BUTTON_CRSR_NO_SHIFT  
               00174                         ;; SUBMENU > +
46A4 0E03      00175                         movlw   0x03
46A6 6E75      00176                         movwf   AY_SUB_MENUE_KEY_SWITCH
               00177                                 ;; C64 KEYBOARD: CURSOR RIGHT
               00178                                 ;; CPM ASCII = 29 / 0x1D
46A8 0E1D      00179                                 movlw 0x1D
46AA 6E03      00180                                 movwf MIOS_PARAMETER1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
46AC C003 F300 00181                                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
46B0 0012      00182                                         return
               00183 
46B2           00184 DECODE_SM_BUTTON_CRSR_SHIFT
               00185                         ;; SUBMENU > -
46B2 0E04      00186                         movlw   0x04
46B4 6E75      00187                         movwf   AY_SUB_MENUE_KEY_SWITCH
               00188                                 ;; C64 KEYBOARD: CURSOR LEFT
               00189                                 ;; CPM ASCII = 0x9D
46B6 0E9D      00190                                 movlw 0x9D
46B8 6E03      00191                                 movwf MIOS_PARAMETER1
46BA C003 F300 00192                                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
46BE 0012      00193                                         return
               00194 
               00195 
               00196 
               00197 ;; -------[CRSR UP/DWN.]-------
46C0           00198 DECODE_SM_BUTTON_MATRIX_03
               00199         ;; CHECK SHIFT KEY
               00200         ;; IS SHIFT PRESSED? (BIT 0)
46C0 A079      00201         btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00202                 ;; NO
46C2 EF65 F023 00203                 goto DECODE_SM_BUTTON_03_NO_SHIFT
               00204                 ;; YES
46C6 EF6C F023 00205                 goto DECODE_SM_BUTTON_03_SHIFT
               00206 
46CA           00207 DECODE_SM_BUTTON_03_NO_SHIFT
               00208                         ;; SUBMENU > POS DOWN
46CA 0E02      00209                         movlw   0x02
46CC 6E75      00210                         movwf   AY_SUB_MENUE_KEY_SWITCH
               00211                                 ;; CPM ASCII: DWN. 0x11
46CE 0E11      00212                                 movlw 0x11
46D0 6E03      00213                                 movwf MIOS_PARAMETER1
46D2 C003 F300 00214                                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
46D6 0012      00215                                         return
               00216 
46D8           00217 DECODE_SM_BUTTON_03_SHIFT
               00218                         ;; SUBMENU > POS UP
46D8 0E01      00219                         movlw   0x01
46DA 6E75      00220                         movwf   AY_SUB_MENUE_KEY_SWITCH
               00221                                 ;; CPM ASCII: UP 0x91
46DC 0E91      00222                                 movlw 0x91
46DE 6E03      00223                                 movwf MIOS_PARAMETER1
46E0 C003 F300 00224                                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
46E4 0012      00225                                         return
               00226 
               00227 ;; -------[F1 / F2 (WITH SHIFT ON)]-------
46E6           00228 DECODE_SM_BUTTON_MATRIX_04
               00229         ;; JUMP TO MAIN MENU !
46E6 0E00      00230         movlw 0x00
46E8 6E73      00231         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00232 
               00233         ;; KEYBORAD: KEY HANDLING
               00234         ;; IF MAIN MENU KEY 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00235         ;; IS = DEPRESSED (AY_KEY_STATE=1)
               00236         ;; THEN DO NOT EXECUTE A
               00237         ;; MAIN MENU FUNCTION
46EA 0E00      00238         movlw 0x00                      ;; 0 = KEY PRESSED, 1 = DEPRESSED
46EC 6277      00239         cpfseq SM_KEYB_KEY_STATE        ;; = 0?
               00240                 
               00241                 ;; NO, Exit Here
46EE 0012      00242                 return
               00243 
               00244                 ;; F1 or F2
               00245                 ;; CHECK SHIFT KEY
               00246                 ;; IS SHIFT (BIT 0) ON? 
46F0 A079      00247                 btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00248                 
               00249                         ;; NO  - GOTO MAIN MENU 1
46F2 EF7D F023 00250                         goto DECODE_SM_BUTTON_MATRIX_04_F1
               00251         
               00252                         ;; YES - GOTO MAIN MENU 2
46F6 EF80 F023 00253                         goto DECODE_SM_BUTTON_MATRIX_04_F2
               00254 
46FA           00255 DECODE_SM_BUTTON_MATRIX_04_F1
46FA 0E01      00256                                 movlw 0x01
46FC 6E74      00257                                 movwf CURRENT_MAIN_MENU 
46FE 0012      00258                                         return
               00259 
4700           00260 DECODE_SM_BUTTON_MATRIX_04_F2
4700 0E02      00261                                 movlw 0x02
4702 6E74      00262                                 movwf CURRENT_MAIN_MENU 
4704 0012      00263                                         return
               00264         
               00265 
               00266 
               00267 ;; -------[F3 / F4 (WITH SHIFT ON)]-------
4706           00268 DECODE_SM_BUTTON_MATRIX_05
               00269         ;; SWITCH TO MAIN MENU
4706 0E00      00270         movlw 0x00
4708 6E73      00271         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00272 
               00273         ;; KEYBORAD: KEY HANDLING
               00274         ;; IF MAIN MENU KEY 
               00275         ;; IS = DEPRESSED (AY_KEY_STATE=1)
               00276         ;; THEN DO NOT EXECUTE A
               00277         ;; MAIN MENU FUNCTION
470A 0E00      00278         movlw 0x00                      ;; 0 = KEY PRESSED, 1 = DEPRESSED
470C 6277      00279         cpfseq SM_KEYB_KEY_STATE        ;; = 0?
               00280                 
               00281                 ;; NO, Exit Here
470E 0012      00282                 return
               00283 
               00284         ;; F3 or F4
               00285         ;; CHECK SHIFT KEY
               00286         ;; IS SHIFT (BIT 0) ON? 
4710 A079      00287         btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00288                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00289                 ;; NO  - GOTO MAIN MENU 3
4712 EF8D F023 00290                 goto DECODE_SM_BUTTON_MATRIX_05_F3
               00291         
               00292                 ;; YES - GOTO MAIN MENU 4
4716 EF90 F023 00293                 goto DECODE_SM_BUTTON_MATRIX_05_F4
               00294 
471A           00295 DECODE_SM_BUTTON_MATRIX_05_F3
471A 0E03      00296                         movlw 0x03
471C 6E74      00297                         movwf CURRENT_MAIN_MENU         
471E 0012      00298                                         return
               00299 
4720           00300 DECODE_SM_BUTTON_MATRIX_05_F4
4720 0E04      00301                         movlw 0x04
4722 6E74      00302                         movwf CURRENT_MAIN_MENU         
4724 0012      00303                                         return
               00304 
               00305 
               00306 
               00307 
               00308 ;; -----[F5 / F6 (WITH SHIFT SET)]--------------
4726           00309 DECODE_SM_BUTTON_MATRIX_06
               00310         ;; JUMP TO MAIN MENU
4726 0E00      00311         movlw 0x00
4728 6E73      00312         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00313 
               00314         ;; KEYBORAD: KEY HANDLING
               00315         ;; IF MAIN MENU KEY 
               00316         ;; IS = DEPRESSED (AY_KEY_STATE=1)
               00317         ;; THEN DO NOT EXECUTE A
               00318         ;; MAIN MENU FUNCTION
472A 0E00      00319         movlw 0x00                      ;; 0 = KEY PRESSED, 1 = DEPRESSED
472C 6277      00320         cpfseq SM_KEYB_KEY_STATE        ;; = 0?
               00321                 
               00322                 ;; NO, Exit Here
472E 0012      00323                 return
               00324         
               00325         ;; F1 or F2
               00326         ;; CHECK SHIFT KEY
               00327         ;; IS SHIFT (BIT 0) ON? 
4730 A079      00328         btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00329                 
               00330                 ;; NO  - GOTO MAIN MENU 5
4732 EF9D F023 00331                 goto DECODE_SM_BUTTON_MATRIX_06_F5
               00332         
               00333                 ;; YES - GOTO MAIN MENU 6
4736 EFA0 F023 00334                 goto DECODE_SM_BUTTON_MATRIX_06_F6
               00335 
473A           00336 DECODE_SM_BUTTON_MATRIX_06_F5
473A 0E05      00337                         movlw 0x05
473C 6E74      00338                         movwf CURRENT_MAIN_MENU 
473E 0012      00339                                 return
               00340 
4740           00341 DECODE_SM_BUTTON_MATRIX_06_F6
4740 0E06      00342                         movlw 0x06
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4742 6E74      00343                         movwf CURRENT_MAIN_MENU 
4744 0012      00344                                 return
               00345 
               00346 ;; -----[F7 / F8 (with SHIFT SET)]-----------------
4746           00347 DECODE_SM_BUTTON_MATRIX_07
               00348         ;; SWITCH TO MAIN MENU
4746 0E00      00349         movlw 0x00
4748 6E73      00350         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00351 
               00352         ;; KEYBORAD: KEY HANDLING
               00353         ;; IF MAIN MENU KEY 
               00354         ;; IS = DEPRESSED (AY_KEY_STATE=1)
               00355         ;; THEN DO NOT EXECUTE A
               00356         ;; MAIN MENU FUNCTION
474A 0E00      00357         movlw 0x00                      ;; 0 = KEY PRESSED, 1 = DEPRESSED
474C 6277      00358         cpfseq SM_KEYB_KEY_STATE        ;; = 0?
               00359                 
               00360                 ;; NO, Exit Here
474E 0012      00361                 return
               00362 
4750           00363 DECODE_SM_BUTTON_MATRIX_07_CHEK_SHIFT
               00364         ;; F7 or F8
               00365         ;; CHECK SHIFT KEY
               00366         ;; IS SHIFT (BIT 0) ON? 
4750 A079      00367         btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00368                 
               00369                 ;; NO  - GOTO MAIN MENU 7
4752 EFAD F023 00370                 goto DECODE_SM_BUTTON_MATRIX_07_F7
               00371         
               00372                 ;; YES - GOTO MAIN MENU 8
4756 EFB0 F023 00373                 goto DECODE_SM_BUTTON_MATRIX_07_F8      
               00374 
475A           00375 DECODE_SM_BUTTON_MATRIX_07_F7
475A 0E07      00376                         movlw 0x07
475C 6E74      00377                         movwf CURRENT_MAIN_MENU 
475E 0012      00378                                 return
               00379 
               00380 
4760           00381 DECODE_SM_BUTTON_MATRIX_07_F8
4760 0E08      00382                         movlw 0x08
4762 6E74      00383                         movwf CURRENT_MAIN_MENU 
4764 0012      00384                                 return
               00385 
               00386 
               00387 ;; -----[SHIFT RIGHT]-----------------
4766           00388 DECODE_SM_BUTTON_MATRIX_12
               00389         ;; SHIFT KEY IS NO VALID KEY 
               00390         ;; @ WRITE PATCH NAME
4766 0E00      00391         movlw 0x00
4768 6E03      00392         movwf MIOS_PARAMETER1
476A C003 F300 00393         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
               00394         
               00395         ;; TOGGLE SHIFT R. ON / OFF HERE
               00396         ;; PRESSED OR DEPRESSED?
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
476E 0E00      00397         movlw   0x00
4770 6277      00398         cpfseq  SM_KEYB_KEY_STATE       ;; => 0 = PRESSED
               00399                                         ;; => 1 = DEPRESSED
               00400                 ;; NO
4772 EFBF F023 00401                 goto DECODE_SM_BUTTON_MATRIX_12_SHIFT_R_OFF
               00402 
               00403                 ;; YES
4776 EFBD F023 00404                 goto DECODE_SM_BUTTON_MATRIX_12_SHIFT_R_ON
               00405 
477A           00406 DECODE_SM_BUTTON_MATRIX_12_SHIFT_R_ON
477A 8079      00407         bsf AY_KEYB_SPECIAL_KEY_TOGGLE, 0       ;; SET BIT 0 = SHIFT = ON
477C 0012      00408                 return
               00409 
477E           00410 DECODE_SM_BUTTON_MATRIX_12_SHIFT_R_OFF
477E 9079      00411         bcf AY_KEYB_SPECIAL_KEY_TOGGLE, 0       ;; CLEAR BIT 0 = SHIFT = OFF
4780 0012      00412                 return
               00413         
               00414 
4782           00415 DECODE_SM_BUTTON_MATRIX_14
               00416         ;; UP (Arrow UP)
4782 0E01      00417         movlw 0x01
4784 6E75      00418         movwf AY_SUB_MENUE_KEY_SWITCH
4786 0012      00419                 return
               00420 
               00421 
               00422 ;; -----[+ (PLUS)]-----------------
4788           00423 DECODE_SM_BUTTON_MATRIX_16
4788 0E03      00424         movlw 0x03
478A 6E75      00425         movwf AY_SUB_MENUE_KEY_SWITCH
               00426 
               00427         ;; CPM ASCII: RGT. 0x1D
478C 0E1D      00428         movlw 0x1D
478E 6E03      00429         movwf MIOS_PARAMETER1
4790 C003 F300 00430         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4794 0012      00431                 return
               00432 
               00433 ;; -----[P]-----------------
4796           00434 DECODE_SM_BUTTON_MATRIX_17
               00435         ;; KEY [P] as ASCII value
4796 0E50      00436         movlw 0x50
4798 6E03      00437         movwf MIOS_PARAMETER1
479A C003 F300 00438         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
479E 0012      00439                 return  
               00440 
               00441 ;; -----[L]-----------------
47A0           00442 DECODE_SM_BUTTON_MATRIX_18
47A0 0E09      00443         movlw 0x09
47A2 6E75      00444         movwf AY_SUB_MENUE_KEY_SWITCH
               00445         
               00446         ;; KEY [L] as ASCII value
47A4 0E4C      00447         movlw 0x4C
47A6 6E03      00448         movwf MIOS_PARAMETER1
47A8 C003 F300 00449         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47AC 0012      00450                 return  
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00451 
               00452 ;; -----[ - (MINUS)]-----------------
47AE           00453 DECODE_SM_BUTTON_MATRIX_23
               00454         ;; [-] = 4 sub menu switch
47AE 0E04      00455         movlw 0x04
47B0 6E75      00456         movwf AY_SUB_MENUE_KEY_SWITCH
               00457         ;; CPM ASCII 0x9D 
47B2 0E9D      00458         movlw 0x9D
47B4 6E03      00459         movwf MIOS_PARAMETER1
47B6 C003 F300 00460         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47BA 0012      00461                 return
               00462 
               00463 ;; -----[9]-----------------
47BC           00464 DECODE_SM_BUTTON_MATRIX_24
               00465         ;; KEY [9] as ASCII value
47BC 0E39      00466         movlw 0x39
47BE 6E03      00467         movwf MIOS_PARAMETER1
47C0 C003 F300 00468         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47C4 0012      00469                 return          
               00470 
               00471 ;; -----[I]-----------------
47C6           00472 DECODE_SM_BUTTON_MATRIX_25
               00473         ;; KEY [I] as ASCII value
47C6 0E49      00474         movlw 0x49
47C8 6E03      00475         movwf MIOS_PARAMETER1
47CA C003 F300 00476         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47CE 0012      00477                 return          
               00478 
               00479 ;; -----[J]-----------------
47D0           00480 DECODE_SM_BUTTON_MATRIX_26
               00481         ;; KEY [J] as ASCII value
47D0 0E4A      00482         movlw 0x4A
47D2 6E03      00483         movwf MIOS_PARAMETER1
47D4 C003 F300 00484         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47D8 0012      00485                 return  
               00486 
               00487 ;; -----[N]-----------------
47DA           00488 DECODE_SM_BUTTON_MATRIX_27
               00489         ;; KEY [N] as ASCII value
47DA 0E4E      00490         movlw 0x4E
47DC 6E03      00491         movwf MIOS_PARAMETER1
47DE C003 F300 00492         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47E2 0012      00493                 return  
               00494 
               00495 ;; -----[M]-----------------
47E4           00496 DECODE_SM_BUTTON_MATRIX_28
               00497         ;; KEY [N] as ASCII value
47E4 0E4D      00498         movlw 0x4D
47E6 6E03      00499         movwf MIOS_PARAMETER1
47E8 C003 F300 00500         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47EC 0012      00501                 return  
               00502 
               00503 ;; -----[K]-----------------
47EE           00504 DECODE_SM_BUTTON_MATRIX_29
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00505         ;; KEY [K] as ASCII value
47EE 0E4B      00506         movlw 0x4B
47F0 6E03      00507         movwf MIOS_PARAMETER1
47F2 C003 F300 00508         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
47F6 0012      00509                 return  
               00510 
               00511 ;; -----[O]-----------------
47F8           00512 DECODE_SM_BUTTON_MATRIX_30
               00513         ;; KEY [O] as ASCII value
47F8 0E4F      00514         movlw 0x4F
47FA 6E03      00515         movwf MIOS_PARAMETER1
47FC C003 F300 00516         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4800 0012      00517                 return  
               00518 
               00519 ;; -----[0]-----------------
4802           00520 DECODE_SM_BUTTON_MATRIX_31
               00521         ;; ASCII value 0x30
4802 0E30      00522         movlw 0x30
4804 6E03      00523         movwf MIOS_PARAMETER1
4806 C003 F300 00524         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
480A 0012      00525                 return
               00526         
               00527 
               00528 ;; -----[7]-----------------
480C           00529 DECODE_SM_BUTTON_MATRIX_32
               00530         ;; ASCII value
480C 0E37      00531         movlw 0x37
480E 6E03      00532         movwf MIOS_PARAMETER1
4810 C003 F300 00533         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4814 0012      00534                 return
               00535 
               00536 ;; -----[Y]-----------------
4816           00537 DECODE_SM_BUTTON_MATRIX_33
               00538         ;; ASCII value
4816 0E59      00539         movlw 0x59
4818 6E03      00540         movwf MIOS_PARAMETER1
481A C003 F300 00541         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
481E 0012      00542                 return
               00543 
               00544 ;; -----[G]-----------------
4820           00545 DECODE_SM_BUTTON_MATRIX_34              
               00546         ;; ASCII value
4820 0E47      00547         movlw 0x47
4822 6E03      00548         movwf MIOS_PARAMETER1
4824 C003 F300 00549         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4828 0012      00550                 return
               00551 
               00552 ;; -----[V]-----------------
482A           00553 DECODE_SM_BUTTON_MATRIX_35
               00554         ;; ASCII value
482A 0E56      00555         movlw 0x56
482C 6E03      00556         movwf MIOS_PARAMETER1
482E C003 F300 00557         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4832 0012      00558                 return
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00559 
               00560 ;; -----[B]-----------------
4834           00561 DECODE_SM_BUTTON_MATRIX_36
4834 0E06      00562         movlw 0x06
4836 6E75      00563         movwf AY_SUB_MENUE_KEY_SWITCH
               00564         ;; Key [B] as ASCII value
4838 0E42      00565         movlw 0x42
483A 6E03      00566         movwf MIOS_PARAMETER1
483C C003 F300 00567         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4840 0012      00568                 return
               00569 
               00570 ;; -----[H]-----------------
4842           00571 DECODE_SM_BUTTON_MATRIX_37
               00572         ;; Key [H] as ASCII value
4842 0E48      00573         movlw 0x48
4844 6E03      00574         movwf MIOS_PARAMETER1
4846 C003 F300 00575         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
484A 0012      00576                 return
               00577 
               00578 ;; -----[U]-----------------
484C           00579 DECODE_SM_BUTTON_MATRIX_38              
               00580         ;; Key [U] as ASCII value
484C 0E55      00581         movlw 0x55
484E 6E03      00582         movwf MIOS_PARAMETER1
4850 C003 F300 00583         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4854 0012      00584                 return
               00585 
               00586         
               00587 ;; -----[8]-----------------
4856           00588 DECODE_SM_BUTTON_MATRIX_39              
               00589         ;; Key [8] as ASCII value
4856 0E38      00590         movlw 0x38
4858 6E03      00591         movwf MIOS_PARAMETER1
485A C003 F300 00592         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
485E 0012      00593                 return
               00594 
               00595                 
               00596 
               00597 ;; -----[5]-----------------
4860           00598 DECODE_SM_BUTTON_MATRIX_40
               00599         ;; 5 as ASCII value
4860 0E35      00600         movlw 0x35
4862 6E03      00601         movwf MIOS_PARAMETER1
4864 C003 F300 00602         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4868 0012      00603                 return
               00604 
               00605 ;; -----[R]-----------------
486A           00606 DECODE_SM_BUTTON_MATRIX_41
               00607         ;; Key [R] as ASCII value
486A 0E52      00608         movlw 0x52
486C 6E03      00609         movwf MIOS_PARAMETER1
486E C003 F300 00610         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4872 0012      00611                 return
               00612         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00613 ;; -----[D]-----------------
4874           00614 DECODE_SM_BUTTON_MATRIX_42
               00615         ;; D as ASCII value
4874 0E44      00616         movlw 0x44
4876 6E03      00617         movwf MIOS_PARAMETER1
4878 C003 F300 00618         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
487C 0012      00619                 return
               00620 
               00621 ;; -----[X]-----------------    
487E           00622 DECODE_SM_BUTTON_MATRIX_43
               00623         ;; X as ASCII value
487E 0E58      00624         movlw 0x58
4880 6E03      00625         movwf MIOS_PARAMETER1
4882 C003 F300 00626         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4886 0012      00627                 return
               00628 
               00629 ;; -----[C]-----------------
4888           00630 DECODE_SM_BUTTON_MATRIX_44
4888 0E07      00631         movlw 0x07
488A 6E75      00632         movwf AY_SUB_MENUE_KEY_SWITCH
               00633         ;; C as ASCII value
488C 0E43      00634         movlw 0X43 
488E 6E03      00635         movwf MIOS_PARAMETER1
4890 C003 F300 00636         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4894 0012      00637                 return
               00638 
               00639 ;; -----[F]-----------------
4896           00640 DECODE_SM_BUTTON_MATRIX_45
               00641         ;; FORMATI BANSTICK via patch_write.inc [SUB MENU KEY: [F]]
4896 0E0A      00642         movlw 0x0A
4898 6E75      00643         movwf AY_SUB_MENUE_KEY_SWITCH
               00644                                         
               00645         ;; F as ASCII value
489A 0E46      00646         movlw 0x46
489C 6E03      00647         movwf MIOS_PARAMETER1
489E C003 F300 00648         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
48A2 0012      00649                 return
               00650 
               00651 ;; -----[T]-----------------
48A4           00652 DECODE_SM_BUTTON_MATRIX_46      
               00653         ;; T as ASCII value
48A4 0E54      00654         movlw 0x54
48A6 6E03      00655         movwf MIOS_PARAMETER1
48A8 C003 F300 00656         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
48AC 0012      00657                 return
               00658         
               00659 ;; -----[6]-----------------
48AE           00660 DECODE_SM_BUTTON_MATRIX_47
               00661         ;; 6 as ASCII value
48AE 0E36      00662         movlw 0x36
48B0 6E03      00663         movwf MIOS_PARAMETER1
48B2 C003 F300 00664         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
48B6 0012      00665                 return
               00666 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00667                 
               00668 
               00669 ;; -----[3]-----------------
48B8           00670 DECODE_SM_BUTTON_MATRIX_48              
               00671         ;; 3 as ASCII value
48B8 0E33      00672         movlw 0x33 
48BA 6E03      00673         movwf MIOS_PARAMETER1
48BC C003 F300 00674         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
48C0 0012      00675                 return
               00676 
               00677 ;; -----[W]-----------------
48C2           00678 DECODE_SM_BUTTON_MATRIX_49              
48C2 0E08      00679         movlw 0x08
48C4 6E75      00680         movwf AY_SUB_MENUE_KEY_SWITCH
               00681         
               00682         ;; W as ASCII value
48C6 0E57      00683         movlw 0x57
48C8 6E03      00684         movwf MIOS_PARAMETER1
48CA C003 F300 00685         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
48CE 0012      00686                 return
               00687 
               00688                 
               00689 
               00690 ;; -----[A]-----------------
48D0           00691 DECODE_SM_BUTTON_MATRIX_50
               00692         ;; 1)
48D0 0E05      00693         movlw 0x05
48D2 6E75      00694         movwf AY_SUB_MENUE_KEY_SWITCH
               00695         ;; 2)
               00696         ;; A as ASCII value
48D4 0E41      00697         movlw 0x41
48D6 6E03      00698         movwf MIOS_PARAMETER1
48D8 C003 F300 00699         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
48DC 0012      00700                         return
               00701 
               00702 
               00703 ;; -----[SHIFT L.]-----------------
48DE           00704 DECODE_SM_BUTTON_MATRIX_51
               00705         ;; SHIFT KEY IS NO VALID KEY 
               00706         ;; @ WRITE PATCH NAME
48DE 0E00      00707         movlw 0x00
48E0 6E03      00708         movwf MIOS_PARAMETER1
48E2 C003 F300 00709         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
               00710 
               00711         ;; TOGGLE SHIFT L. ON / OFF HERE
               00712         ;; PRESSED OR DEPRESSED?
48E6 0E00      00713         movlw   0x00
48E8 6277      00714         cpfseq  SM_KEYB_KEY_STATE       ;; => 0 = PRESSED
               00715                                         ;; => 1 = DEPRESSED
               00716                 ;; NO
48EA EF7B F024 00717                 goto DECODE_SM_BUTTON_MATRIX_51_SHIFT_L_OFF
               00718 
               00719                 ;; YES
48EE EF79 F024 00720                 goto DECODE_SM_BUTTON_MATRIX_51_SHIFT_L_ON
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00721 
48F2           00722 DECODE_SM_BUTTON_MATRIX_51_SHIFT_L_ON
48F2 8079      00723         bsf AY_KEYB_SPECIAL_KEY_TOGGLE, 0       ;; SET BIT 0 = SHIFT L = ON
48F4 0012      00724                 return
               00725 
48F6           00726 DECODE_SM_BUTTON_MATRIX_51_SHIFT_L_OFF
48F6 9079      00727         bcf AY_KEYB_SPECIAL_KEY_TOGGLE, 0       ;; CLEAR BIT 0 = SHIFT L = OFF
48F8 0012      00728                 return
               00729         
               00730 ;; ---------[Z]-----------
48FA           00731 DECODE_SM_BUTTON_MATRIX_52
               00732         ;; Key [Z] as ASCII value
48FA 0E5A      00733         movlw 0x5A
48FC 6E03      00734         movwf MIOS_PARAMETER1
48FE C003 F300 00735         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4902 0012      00736                 return
               00737 
               00738 ;; ---------[S]-----------
4904           00739 DECODE_SM_BUTTON_MATRIX_53      
               00740         ;; Key [S] as ASCII value
4904 0E53      00741         movlw 0x53
4906 6E03      00742         movwf MIOS_PARAMETER1
4908 C003 F300 00743         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
490C 0012      00744                 return
               00745 
               00746 ;; ---------[E]-----------
490E           00747 DECODE_SM_BUTTON_MATRIX_54      
               00748         ;; Key [E] as ASCII value
490E 0E45      00749         movlw 0x45
4910 6E03      00750         movwf MIOS_PARAMETER1
4912 C003 F300 00751         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4916 0012      00752                 return
               00753         
               00754 ;; ---------[4]-----------
4918           00755 DECODE_SM_BUTTON_MATRIX_55
               00756         ;; Key [4] as ASCII value
4918 0E34      00757         movlw 0x34
491A 6E03      00758         movwf MIOS_PARAMETER1
491C C003 F300 00759         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4920 0012      00760                 return
               00761                 
               00762 
               00763 ;; ---------[1]-----------
4922           00764 DECODE_SM_BUTTON_MATRIX_56              
               00765         ;; Key [1] as ASCII value
4922 0E31      00766         movlw 0x31
4924 6E03      00767         movwf MIOS_PARAMETER1
4926 C003 F300 00768         movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
492A 0012      00769                 return
               00770                 
               00771 
               00772 
               00773 ;; -----[ESC [<-]]-----------------
492C           00774 DECODE_SM_BUTTON_MATRIX_57
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00775         ;; ESC BUTTON @ MAIN MENU
               00776         ;; JUMP TO MAIN MENU !
492C 0E00      00777         movlw 0x00
492E 6E73      00778         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00779         ;; TO MAIN MENU 0
4930 0E00      00780         movlw 0x00
4932 6E74      00781         movwf CURRENT_MAIN_MENU 
4934 0012      00782                         return
               00783 
               00784 ;; -----[CTRL]-----------------
4936           00785 DECODE_SM_BUTTON_MATRIX_58
               00786         ;; CTRL KEY WAS PRESSED
               00787         ;; FUNCTION: 
               00788         ;; STEP TO THE NEXT MAIN MENU OR
               00789         ;; PREVIOUS MAIN MENU IF THE SHIFT KEY IS PRESSED
               00790         
               00791         ;; CHECK:
               00792         ;; WAS THE CTRL KEY PRESSED OR DEPRESSED?
4936 0E00      00793         movlw   0x00
4938 6277      00794         cpfseq  SM_KEYB_KEY_STATE       ;; => 0 = PRESSED
               00795                                         ;; => 1 = DEPRESSED
               00796 
               00797                 ;; NO - DEPRESSED
493A EFA1 F024 00798                 goto DECODE_SM_BUTTON_MATRIX_58_CTRL_DEPRESSED
               00799 
               00800                 ;; YES - PRESSED
493E EFA2 F024 00801                 goto DECODE_SM_BUTTON_MATRIX_58_CTRL_PRESSED
               00802 
4942           00803 DECODE_SM_BUTTON_MATRIX_58_CTRL_DEPRESSED
               00804               ;; exit here
4942 0012      00805                         return
               00806 
4944           00807 DECODE_SM_BUTTON_MATRIX_58_CTRL_PRESSED
               00808         ;; THE CTRL KEY WAS PRESSED
               00809         ;; ==> CTRL FUNCTION = STEP TO THE NEXT MAIN MENU
               00810         ;; ==> OR REDRAW THE MAIN MENU IF THE SHIPT KEY IS ALSO PRESSED
               00811         ;; SO TOGGLE TO MAIN MENU!
4944 0E00      00812         movlw 0x00
4946 6E73      00813         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00814 
               00815         ;; CHECK SHIFT KEY
               00816         ;; IS SHIFT PRESSED? (BIT 0)
4948 A079      00817         btfss AY_KEYB_SPECIAL_KEY_TOGGLE, 0
               00818                 
               00819                 ;; NO - OK INC MAIN MENU 
494A EFA9 F024 00820                 goto DECODE_SM_BUTTON_MATRIX_58_INC_MAIN_MENU
               00821         
               00822                 ;; YES - JUST REDRAW CURRENT MAIN MENU
494E EFB3 F024 00823                 goto DECODE_SM_BUTTON_MATRIX_58_DEC_MAIN_MENU
               00824 
               00825 
4952           00826 DECODE_SM_BUTTON_MATRIX_58_INC_MAIN_MENU
               00827         ;; INC MAIN MENU
4952 2A74      00828         incf CURRENT_MAIN_MENU, F
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00829         
4954 0E08      00830         movlw 0x08
4956 6474      00831         cpfsgt CURRENT_MAIN_MENU
               00832 
               00833                 ;; NO - OK, GOTO MAIN MENU X
4958 EFC3 F024 00834                 goto DECODE_SM_BUTTON_MATRIX_58_GO_MAIN_MENU
               00835         
               00836                 ;; YES - MAIN MENU IS > 7 SO MAIN MENU MUST BE 1
495C EFB0 F024 00837                 goto DECODE_SM_BUTTON_MATRIX_58_MAIN_MENU_RESET
               00838 
4960           00839 DECODE_SM_BUTTON_MATRIX_58_MAIN_MENU_RESET      
               00840               ;; Reset Main Menu to 1
4960 0E01      00841               movlw 0x01
4962 6E74      00842               movwf CURRENT_MAIN_MENU
4964 0012      00843                         return
               00844         
4966           00845 DECODE_SM_BUTTON_MATRIX_58_DEC_MAIN_MENU
               00846         ;; DEC MAIN MENU
4966 0674      00847         decf CURRENT_MAIN_MENU, F
               00848         
               00849         ;; CHECK CURRENT_MAIN_MENU => 0x00 dec to 0xFF?
4968 0EFF      00850         movlw 0xFF
496A 6274      00851         cpfseq CURRENT_MAIN_MENU
               00852 
               00853                 ;; NO - OK, GOTO MAIN MENU X
496C EFBA F024 00854                 goto DECODE_SM_BUTTON_MATRIX_58_DEC_MAIN_MENU_CHECK_ZERO
               00855         
               00856                 ;; YES - MAIN MENU IS = 0xFF (OUT OF VALID VALUE)
               00857                 ;; SET CURRENT_MAIN_MENU to 0x07 (LAST MAIN MENU)
4970 EFC0 F024 00858                 goto DECODE_SM_BUTTON_MATRIX_58_SET_TO_LAST_MAIN_MENU
               00859 
4974           00860 DECODE_SM_BUTTON_MATRIX_58_DEC_MAIN_MENU_CHECK_ZERO
4974 0E00      00861         movlw 0x00
4976 6274      00862         cpfseq CURRENT_MAIN_MENU
               00863 
               00864                 ;; NO - OK, GOTO MAIN MENU X
4978 EFC3 F024 00865                 goto DECODE_SM_BUTTON_MATRIX_58_GO_MAIN_MENU
               00866         
               00867                 ;; YES - MAIN MENU IS = 0 SO MAIN MENU MUST BE SET 
               00868                 ;; TO THE LAST MAIN MENU
497C EFC0 F024 00869                 goto DECODE_SM_BUTTON_MATRIX_58_SET_TO_LAST_MAIN_MENU
               00870 
4980           00871 DECODE_SM_BUTTON_MATRIX_58_SET_TO_LAST_MAIN_MENU
               00872                 ;; MAIN MENU was 0 or out of RANGE so set 
               00873                 ;; MAIN MENU to 7
4980 0E08      00874                 movlw 0x08
4982 6E74      00875                 movwf CURRENT_MAIN_MENU
4984 0012      00876                         return
               00877         
4986           00878 DECODE_SM_BUTTON_MATRIX_58_GO_MAIN_MENU
               00879                 ;; exit to main menu X
4986 0012      00880                         return
               00881 ;; --------[END: CTRL]--------------------------------------------------
               00882 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00883 ;; -----[SPACE (KEY)]-----------------
4988           00884 DECODE_SM_BUTTON_MATRIX_60              
               00885                 ;; Space Key as underscore [_] in LCD Char Code! (non CMP ASCII Code)
4988 0E5F      00886                 movlw 0x5F
498A 6E03      00887                 movwf MIOS_PARAMETER1
498C C003 F300 00888                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
4990 0012      00889                         return
               00890 
               00891 ;; -----[Q]-----------------
4992           00892 DECODE_SM_BUTTON_MATRIX_62
               00893                 ;; Key [Q] as PCM ASCII Code
4992 0E51      00894                 movlw 0x51
4994 6E03      00895                 movwf MIOS_PARAMETER1
4996 C003 F300 00896                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
499A 0012      00897                         return
               00898 
               00899 ;; -----[2]-----------------
499C           00900 DECODE_SM_BUTTON_MATRIX_63              
               00901                 ;; Key [2] as ASCII value
499C 0E32      00902                 movlw 0x32
499E 6E03      00903                 movwf MIOS_PARAMETER1
49A0 C003 F300 00904                 movff MIOS_PARAMETER1, PATCH_NAME_ASC_KEY
49A4 0012      00905                         return
               00906 
               00907                 
               00908 
               00909 
               00910 
               00911 ;; ============[END OF SUB MENU BUTTON DECODING]======================
               00912 
               00913 
               00914 
               00915 
               00048 #include "get_key.inc"
               00001 ;; get_key.inc
               00002 
49A6           00003 GET_KEY
               00004 ;; jumped in here from main.asm >> USER_DIN_NotifyToggle
               00005 ;; (A Key has been pressed)
               00006 
               00007         ;; RESET SUB MENU KEY VALUE
49A6 0E00      00008         movlw 0x00
49A8 6E75      00009         movwf AY_SUB_MENUE_KEY_SWITCH
               00010 
49AA ECB3 F022 00011         call DECODE_KEYBOARD_BUTTON
               00012         ;; => @keyb_decoding.inc
               00013                 
               00014         ;; 1)
               00015         ;; IF A *SUB MENU* KEY ([+] /[-] / etc.) HAS BEEN PRESSED
               00016         ;; A VALUE HAS BEEN WRITTEN TO 
               00017         ;; => AY_SUB_MENUE_KEY_SWITCH
               00018         ;; (FOR THE *SUB MENU* JUMPTABLE)
               00019         ;; 
               00020         ;; 2)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00021         ;; IF A *MAIN MENU* KEY (F1, F2, ESC, etc.) HAS BEEN PRESSED
               00022         ;; A VALUE HAS BEEN WRITTEN TO 
               00023         ;; => CURRENT_MAIN_MENU
               00024         ;; (FOR THE *MAIN MENU* JUMPTABLE)
               00025         ;;
               00026         ;;2a)
               00027         ;; MAIN OR SUB MENU KEY? 
               00028         ;; GO MAINMENU ==> SWITCH_BETWEEN_MAIN_AND_SUBMENU      = 0
               00029         ;; GO SUBMENU ==> SWITCH_BETWEEN_MAIN_AND_SUBMENU       = 1
               00030         ;; IF A MAIN MENU KEY HAS BEEN PRESSED 
               00031         ;; TOGGLE TO MAIN MENU VIA
               00032         ;; => SWITCH_BETWEEN_MAIN_AND_SUBMENU = 0
               00033          
               00034         
               00035         ;; The [GO MAIN MENU [or] SUB MENU] switch
               00036         ;; IS SWITCH_BETWEEN_MAIN_AND_SUBMENU = 0 ?
49AE 0E00      00037         movlw   0x00
49B0 6273      00038         cpfseq  SWITCH_BETWEEN_MAIN_AND_SUBMENU
               00039    
               00040                 ;; NO
               00041                 ;; SWITCH_BETWEEN_MAIN_AND_SUBMENU = 0x01
               00042                 ;; GO ON WITH A *SUB MENU* ROUTINE
               00043                 ;; SWITCH_BETWEEN_MAIN_AND_SUBMENU IS = 1
               00044                 ;; RUN A *SUB MENU* ROUTINE
               00045                 ;; A VALUE HAS BEEN WRITTEN TO 
               00046                 ;; => AY_SUB_MENUE_KEY_SWITCH (GO *SUB MENU* JUMPTABLE)
               00047                 ;; => @ sub_menu_functions.inc
49B2 EF8B F02C 00048                 goto    LABEL_SUB_MENUE_SWITCH
               00049       
               00050       
               00051                 ;; YES
               00052                 ;; SWITCH_BETWEEN_MAIN_AND_SUBMENU = 0x00
               00053                 ;; SO GO ON WITH A MAIN MENU ROUTINE
               00054                 ;; RUN A *MAIN MENU* ROUTINE
               00055                 ;; A VALUE HAS BEEN WRITTEN TO 
               00056                 ;; => CURRENT_MAIN_MENU (GO *MAIN MENU* JUMPTABLE)
               00057                 ;; => @ main_menue_functions.inc
49B6 EFDD F024 00058                 goto    LABEL_MAIN_MENUE_SWITCH         
               00059 
               00060 
               00061 
               00062 
               00063 
               00064 ;; -----------[get_key.inc END]--------------
               00065 
               00066 
               00067 
               00049 
               00050 
               00051 
               00052 ;; ----[AY MAIN MENU CODE]----------------------------
               00053 #include "main_menu_functions.inc"
               00001 ;; main_menue_functions.inc
               00002 ;; MAIN MENU JUMPTABLE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00003 ;; -----------------------
               00004 
               00005 
               00006 ;; ----------[MAIN MENU SWITCH]------------------
               00007 ;; -------------------------------------------
               00008 ;; => CURRENT_MAIN_MENU = MAIN MENU SWITCH 
               00009 
49BA           00010 LABEL_MAIN_MENUE_SWITCH
               00011 
               00012         ;; KEYBORAD: KEY HANDLING
               00013         ;; IF MAIN MENU KEY 
               00014         ;; IS = DEPRESSED (AY_KEY_STATE=1)
               00015         ;; THEN DO NOT EXECUTE A
               00016         ;; MAIN MENU FUNCTION
49BA 0E00      00017         movlw   KEY_PRESSED_STATE_0     ;; 0 = KEY PRESSED, 1 = DEPRESSED
49BC 6277      00018         cpfseq  SM_KEYB_KEY_STATE       ;; = 0?
               00019                 
               00020                 ;; NO, Exit Here
               00021                 rgoto LABEL_MAIN_MENUE_SWITCH_EXIT
49BE D01C          M         bra     label
               00022 
               00023                 ;; YES
               00024                 rgoto LABEL_MAIN_MENUE_SWITCH_GO
49C0 D000          M         bra     label
               00025 
49C2           00026 LABEL_MAIN_MENUE_SWITCH_GO
               00027 
               00028         ;; THE MAIN MENU WILL NOW BE PERFORMED
               00029         ;; NEXT CYCLE MUSST BE A SUB MENU CYCLE SO
               00030         ;; SET SUB MENU TO ACTIVE (for the next cycle!)
49C2 0E01      00031         movlw SWITCH_MAIN_MENU_OFF_SUB_MENU_ON_0x01     ;; via 0x01
49C4 6E73      00032         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU 
               00033 
               00034         ;; JUMP TO MAIN MENU [0-8]
49C6 5074      00035         movf CURRENT_MAIN_MENU, W
               00036         JUMPTABLE_4BYTES 9
49C8 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
49CA B0D8          M         skpnc
49CC 0012          M         return
49CE 0F09          M         addlw   (max_value)
49D0 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
49D4 EF03 F025 00037                 goto            LABEL_AY_MAIN_MENU_00_MENU_SWITCH
49D8 EFFF F024 00038                 goto            LABEL_AY_MAIN_MENU_01_PATCH_INFO_PREPARE
49DC EF7F F026 00039                 goto            LABEL_AY_MAIN_MENU_02_ABC_TUNE
49E0 EF21 F028 00040                 goto            LABEL_AY_MAIN_MENU_03_ABC_MIXER
49E4 EF4B F029 00041                 goto            LABEL_AY_MAIN_MENU_04_ABC_AMPLITUDE
49E8 EFF3 F029 00042                 goto            LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE
49EC EF31 F02B 00043                 goto            LABEL_AY_MAIN_MENU_06_MIDI_CONFIG
49F0 EF9D F02B 00044                 goto            LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG
49F4 EF9C F039 00045                 goto            LABEL_AY_MAIN_MENU_08_FX
               00046                          
               00047 
               00048 
49F8           00049 LABEL_MAIN_MENUE_SWITCH_EXIT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00050         ;; NEXT CYCLE MUSST BE A SUB MENU CYCLE SO
               00051         ;; SET SUB MENU TO ACTIVE
49F8 0E01      00052         movlw SWITCH_MAIN_MENU_OFF_SUB_MENU_ON_0x01     ;; via 0x01
49FA 6E73      00053         movwf SWITCH_BETWEEN_MAIN_AND_SUBMENU 
               00054         
               00055                 ;; QUIT HERE
49FC 0012      00056                 return
               00057 
               00058 ;; -------------------------------------------
               00059 
49FE           00060 LABEL_AY_MAIN_MENU_01_PATCH_INFO_PREPARE
               00061         ;; Prepare for Patch Brownsing
               00062         ;; CURREND_PATCH_NR => BROWSE_PATCH_NR
49FE C03E F07C 00063         movff CURREND_PATCH_NR, BROWSE_PATCH_NR
               00064                 
               00065                 ;; NOW JUMP TO PATCH MAIN MENU
4A02 EF1E F025 00066                 goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00067 
               00068 ;; ----------[MAIN MENU SWITCH END]--------
               00069 
               00070 
               00071 
               00072 
               00073 
               00074 
               00075 
               00076 
               00054 #include "main_menu_00_overview.inc"
               00001 ;; main_menu_00_overview.inc
               00002 
               00003 ;; --[MB AY MAIN MENU 00: MENU OVERVIEW ]------ 
               00004 ;; =======================> SHORTCUT: F1
4A06           00005 LABEL_AY_MAIN_MENU_00_MENU_SWITCH
               00006  
               00007         ;; SHOW MIDIBOX AY MENU SWITCH SCREEN
4A06 EC82 F016 00008         call    MIOS_LCD_Clear
               00009         
               00010         ;; LCD ROW 1 TO 4
               00011         TABLE_ADDR TEXT_AY_MB_AY_MENUE_SWITCH_ROW1
4A0A 0EF4          M         movlw   LOW(addr)               ; store Lo Byte
4A0C 6EF6          M         movwf   TBLPTRL
4A0E 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4A10 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4A12 EC9E F016 00012         call    MIOS_LCD_PrintString
               00013         
               00014         TABLE_ADDR TEXT_AY_MB_AY_MENUE_SWITCH_ROW2
4A16 0E06          M         movlw   LOW(addr)               ; store Lo Byte
4A18 6EF6          M         movwf   TBLPTRL
4A1A 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4A1C 6EF7          M         movwf   TBLPTRH
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4A1E EC9E F016 00015         call    MIOS_LCD_PrintString
               00016         
               00017         TABLE_ADDR TEXT_AY_MB_AY_MENUE_SWITCH_ROW3
4A22 0E18          M         movlw   LOW(addr)               ; store Lo Byte
4A24 6EF6          M         movwf   TBLPTRL
4A26 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4A28 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4A2A EC9E F016 00018         call    MIOS_LCD_PrintString
               00019         
               00020         TABLE_ADDR TEXT_AY_MB_AY_MENUE_SWITCH_ROW4
4A2E 0E2A          M         movlw   LOW(addr)               ; store Lo Byte
4A30 6EF6          M         movwf   TBLPTRL
4A32 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4A34 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4A36 EC9E F016 00021         call    MIOS_LCD_PrintString
               00022 
               00023         
               00024 
4A3A           00025 LABEL_AY_MAIN_MENU_00_MENU_SWITCH_DONE
               00026         
               00027                 ;; THE MAIN MENU ROUTINE HAS BEEN PERFORMED 
               00028                 
               00029                         ;; MAIN MENU 0 ROUTINE END - SO RETURN
4A3A 0012      00030                         return
               00031 
               00032 
               00033 
               00055 #include "main_menu_01_patch.inc"
               00001 ;; main_menu_01_patch.inc
               00002 ;; 
               00003 ;; function: 
               00004 ;; WRITE MAIN MENU1 = PATCH MENU
               00005 ;; TO LCD (Patch Name, etc.)
               00006 
               00007 ;; ------[MB AY MAIN MENU 01: AY PATCH INFO ]------ 
               00008 
4A3C           00009 LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00010         ;; SHOW MIDIBOX AY PATCH INFO MENU
               00011         
               00012         ;; CLEAR LCD
4A3C EC82 F016 00013         call    MIOS_LCD_Clear
               00014         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00015         ;; -------------[LCD ROW 1 (PATCH NAME)]--------------------------------
               00016         TABLE_ADDR TEXT_AY_MB_AY_PATCH_NAME
4A40 0E3A          M         movlw   LOW(addr)               ; store Lo Byte
4A42 6EF6          M         movwf   TBLPTRL
4A44 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4A46 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4A48 EC9E F016 00017         call    MIOS_LCD_PrintString
               00018         
               00019                 ;; LCD ROW1 :
               00020                 ;; -----------[WRITE ASC PATCH NAME]----------
               00021                 ;; ------------------------------------------- 
               00022                 ;; 1) SET CURSOR POS TO PATCH NAME ASC POS1
4A4C 0E08      00023                         movlw   LCD_ROW1 + 8
               00024                                         
               00025                 ;; 2) WRITE ASC CODE from PATCH_NAME_ASC_1 to LCD
4A4E EC88 F016 00026                         call    MIOS_LCD_CursorSet
4A52 C303 F003 00027                         movff   PATCH_NAME_ASC_0, MIOS_PARAMETER1
4A56 5003      00028                         movf    MIOS_PARAMETER1, W
4A58 EC94 F016 00029                         call    MIOS_LCD_PrintChar
               00030 
               00031                 ;; 3) INC CURSER POS
4A5C 0E09      00032                         movlw   LCD_ROW1 + 9
               00033                 ;; 4) WRITE ASC CODE from PATCH_NAME_ASC_2 to LCD
4A5E EC88 F016 00034                         call    MIOS_LCD_CursorSet
4A62 C304 F003 00035                         movff   PATCH_NAME_ASC_1, MIOS_PARAMETER1
4A66 5003      00036                         movf    MIOS_PARAMETER1, W
4A68 EC94 F016 00037                         call    MIOS_LCD_PrintChar
               00038 
               00039                 ;; 5) INC CURSER POS
4A6C 0E0A      00040                         movlw   LCD_ROW1 + 10
               00041                 ;; 6) WRITE ASC CODE from PATCH_NAME_ASC_3 to LCD
4A6E EC88 F016 00042                         call    MIOS_LCD_CursorSet
4A72 C305 F003 00043                         movff   PATCH_NAME_ASC_2, MIOS_PARAMETER1
4A76 5003      00044                         movf    MIOS_PARAMETER1, W
4A78 EC94 F016 00045                         call    MIOS_LCD_PrintChar
               00046                 
               00047                 ;; 7) INC CURSER POS
4A7C 0E0B      00048                         movlw   LCD_ROW1 + 11
               00049 
               00050                 ;; 8) WRITE ASC CODE from PATCH_NAME_ASC_4 to LCD
4A7E EC88 F016 00051                         call    MIOS_LCD_CursorSet
4A82 C306 F003 00052                         movff   PATCH_NAME_ASC_3, MIOS_PARAMETER1
4A86 5003      00053                         movf    MIOS_PARAMETER1, W
4A88 EC94 F016 00054                         call    MIOS_LCD_PrintChar
               00055 
               00056                 ;; 9) INC CURSER POS
4A8C 0E0C      00057                         movlw   LCD_ROW1 + 12
               00058 
               00059                 ;;10) WRITE ASC CODE from PATCH_NAME_ASC_5 to LCD
4A8E EC88 F016 00060                         call    MIOS_LCD_CursorSet
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4A92 C307 F003 00061                         movff   PATCH_NAME_ASC_4, MIOS_PARAMETER1
4A96 5003      00062                         movf    MIOS_PARAMETER1, W
4A98 EC94 F016 00063                         call    MIOS_LCD_PrintChar
               00064 
               00065                 ;;11) INC CURSER POS
4A9C 0E0D      00066                         movlw   LCD_ROW1 + 13
               00067 
               00068                 ;;12) WRITE ASC CODE from PATCH_NAME_ASC_6 to LCD
4A9E EC88 F016 00069                         call    MIOS_LCD_CursorSet
4AA2 C308 F003 00070                         movff   PATCH_NAME_ASC_5, MIOS_PARAMETER1
4AA6 5003      00071                         movf    MIOS_PARAMETER1, W
4AA8 EC94 F016 00072                         call    MIOS_LCD_PrintChar
               00073 
               00074                 ;;13) INC CURSER POS
4AAC 0E0E      00075                         movlw   LCD_ROW1 + 14
               00076 
               00077                 ;;14) WRITE ASC CODE from PATCH_NAME_ASC_7 to LCD
4AAE EC88 F016 00078                         call    MIOS_LCD_CursorSet
4AB2 C309 F003 00079                         movff   PATCH_NAME_ASC_6, MIOS_PARAMETER1
4AB6 5003      00080                         movf    MIOS_PARAMETER1, W
4AB8 EC94 F016 00081                         call    MIOS_LCD_PrintChar
               00082 
               00083                 ;;15) INC CURSER POS
4ABC 0E0F      00084                         movlw   LCD_ROW1 + 15
               00085 
               00086                 ;;16) WRITE ASC CODE from PATCH_NAME_ASC_8 to LCD
4ABE EC88 F016 00087                         call    MIOS_LCD_CursorSet
4AC2 C30A F003 00088                         movff   PATCH_NAME_ASC_7, MIOS_PARAMETER1
4AC6 5003      00089                         movf    MIOS_PARAMETER1, W
4AC8 EC94 F016 00090                         call    MIOS_LCD_PrintChar
               00091                 ;; -------------------------------------------
               00092                 ;; ------[END: WRITE ASC PATCH NAME]----------
               00093                 ;; -----[END: LCD ROW 1 (PATCH NAME)]---------
               00094 
               00095 ;; ------------------------[START ITEM POS HANDLING]----------------------------------------------
               00096 ;; ------------------------------[PATCH NAME]-----------------------------------------------------
               00097 ;; Show the POSITION of "*" [LCD: MAIN MENU EDIT POINTER] 
4ACC           00098 LABEL_AY_MAIN_MENU_01_FIND_EDIT_POS1
               00099         ;; POS1 = PATCH NAME
               00100         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 1?
4ACC C200 F003 00101         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4AD0 0E01      00102         movlw   MENU_ITEM_POS1
4AD2 6203      00103         cpfseq  MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00104                         
               00105                         ;; NO
               00106                         ;; POS < > 1
               00107                         rgoto LABEL_AY_MAIN_MENU_01_NOT_POS1
4AD4 D007          M         bra     label
               00108 
               00109                 ;; YES
               00110                 ;; POS = 1
               00111                 ;; PRINT "*" ON EDIT POSITION1 = PATCH NAME
               00112                 ;; PATCH NAME IS IN EDITING MODE!
4AD6 0E04      00113                 movlw   LCD_ROW1 + 4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4AD8 EC88 F016 00114                 call    MIOS_LCD_CursorSet
4ADC 0E2A      00115                 movlw   '*'
4ADE EC94 F016 00116                 call    MIOS_LCD_PrintChar
               00117                         rgoto LABEL_AY_MAIN_MENU_01_POS2
4AE2 D006          M         bra     label
               00118 
4AE4           00119 LABEL_AY_MAIN_MENU_01_NOT_POS1
               00120                 ;; PRINT ":" ON EDIT POSITION1
               00121                 ;; PATCH NAME IS *NOT* IN EDITING MODE
4AE4 0E04      00122                 movlw   LCD_ROW1 + 4
4AE6 EC88 F016 00123                 call    MIOS_LCD_CursorSet
4AEA 0E3A      00124                 movlw   ':'
4AEC EC94 F016 00125                 call    MIOS_LCD_PrintChar
               00126 
               00127 
               00128 ;; -----------------[START ROW2]-----------------------------------------------------
               00129 ;; ----------------[ITEM: PATCH NUMBER]----------------------------------------------
4AF0           00130 LABEL_AY_MAIN_MENU_01_POS2
               00131         ;; LCD ROW 2 
               00132         ;; WRITE TXT PATCH NR. on LCD ROW2
               00133         TABLE_ADDR TEXT_AY_MB_AY_PATCH_NR
4AF0 0E70          M         movlw   LOW(addr)               ; store Lo Byte
4AF2 6EF6          M         movwf   TBLPTRL
4AF4 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4AF6 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4AF8 EC9E F016 00134         call    MIOS_LCD_PrintString
               00135                 
               00136         
               00137         ;; ----[CHECK IF PATCH NR = 0 = INTERNAL (PIC EEPROM PATCH)]-----------------
               00138         ;; IF PATCH NR: = 0: WRITE "INTERNAL" on LCD for INTernal PATCH (PIC EEPROM)
4AFC 6AE8      00139         clrw  ;; WREG = 0
4AFE 627C      00140         cpfseq BROWSE_PATCH_NR ;; COMPARE F WITH WREG
               00141                         
               00142                 ;; NO
               00143                 ;; BROWSE_PATCH_NR < > 0
               00144                 ;; SO PATCH = BANKSTICK PATCH (1-128)
               00145                 rgoto LABEL_AY_MAIN_MENU_01_POS2_BANKSTICK
4B00 D013          M         bra     label
               00146         
               00147                         ;; YES
               00148                         ;; BROWSE_PATCH_NR = 0
               00149                         ;; PATCH = INTERNAL (PIC EEPROM PATCH)
               00150                         ;; PRINT "INTERNAL" on LCD
               00151                         TABLE_ADDR LCD_CLEAR_ROW2
4B02 0E84          M         movlw   LOW(addr)               ; store Lo Byte
4B04 6EF6          M         movwf   TBLPTRL
4B06 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4B08 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movwf   TBLPTRU
                   M #endif
4B0A EC9E F016 00152                         call    MIOS_LCD_PrintString
               00153                         TABLE_ADDR TEXT_AY_MB_AY_PATCH_NR 
4B0E 0E70          M         movlw   LOW(addr)               ; store Lo Byte
4B10 6EF6          M         movwf   TBLPTRL
4B12 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4B14 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4B16 EC9E F016 00154                         call    MIOS_LCD_PrintString
               00155                         TABLE_ADDR TEXT_AY_MB_AY_PATCH_INT_PATCH
4B1A 0E76          M         movlw   LOW(addr)               ; store Lo Byte
4B1C 6EF6          M         movwf   TBLPTRL
4B1E 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4B20 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4B22 EC9E F016 00156                         call    MIOS_LCD_PrintString
               00157                                 ;; GO AND CHECK IF POS2 IS IN EDITING "*" MODE
               00158                                 rgoto   LABEL_AY_MAIN_MENU_01_POS2_EDITING_MODE
4B26 D018          M         bra     label
               00159         ;; ----[END: CHECK IF PATCH NR = 0 = INTERNAL (PIC EEPROM PATCH)]------------
               00160 
               00161         ;; ----[PRINT B.STICK PATCH ROW2 on LCD]-------------------------------------
4B28           00162 LABEL_AY_MAIN_MENU_01_POS2_BANKSTICK
               00163                 ;; PATCH = BANKSTICK PATCH (1-128)
               00164                 ;; PRINT "B.STCK1" on LCD ROW 2
               00165                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_BS_PATCH
4B28 0E80          M         movlw   LOW(addr)               ; store Lo Byte
4B2A 6EF6          M         movwf   TBLPTRL
4B2C 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4B2E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4B30 EC9E F016 00166                 call    MIOS_LCD_PrintString
               00167                 
               00168                         ;; PRINT PATCH NUMBER on LCD
4B34 0E44      00169                         movlw   LCD_ROW2 + 0x04
4B36 EC88 F016 00170                         call    MIOS_LCD_CursorSet
4B3A 507C      00171                         movf    BROWSE_PATCH_NR, W
4B3C EC92 F016 00172                         call    MIOS_LCD_PrintBCD3
               00173                 
4B40 0E43      00174                         movlw   LCD_ROW2 + 3
4B42 EC88 F016 00175                         call    MIOS_LCD_CursorSet
4B46 0E5B      00176                         movlw   '['
4B48 EC94 F016 00177                         call    MIOS_LCD_PrintChar
               00178                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4B4C 0E47      00179                         movlw   LCD_ROW2 + 7
4B4E EC88 F016 00180                         call    MIOS_LCD_CursorSet
4B52 0E5D      00181                         movlw   ']'
4B54 EC94 F016 00182                         call    MIOS_LCD_PrintChar
               00183 
               00184 
               00185 
               00186         ;; ----[END: PRINT B.STICK PATCH ROW2 on LCD]--------------------------------
               00187 
               00188 
               00189         ;; ----[START: CHECKING EDITING MODE @ PATCH NUMBER (ROW2 on LCD)]------------
4B58           00190 LABEL_AY_MAIN_MENU_01_POS2_EDITING_MODE
               00191         ;; EDITING MODE @ PATCH NUMBER?
               00192         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 2?
4B58 C200 F003 00193         movff AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4B5C 0E02      00194         movlw MENU_ITEM_POS2
4B5E 6203      00195         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00196                         ;; NO
               00197                         ;; POS < > 2
               00198                         rgoto LABEL_AY_MAIN_MENU_01_NOT_POS2
4B60 D007          M         bra     label
               00199         ;; ----[EDITING MODE @ PATCH NUMBER (ROW2 on LCD) IS GIVEN]----------------
               00200                 ;; YES
               00201                 ;; POS = 2
               00202                 ;; YES EDITING MODE @ PATCH NUMBER
               00203                 ;; PRINT "*" ON POS2 (ROW2 - ITEM: PATCH NUMBER)
4B62 0E42      00204                 movlw   LCD_ROW2 + 2
4B64 EC88 F016 00205                 call    MIOS_LCD_CursorSet
4B68 0E2A      00206                 movlw   '*'
4B6A EC94 F016 00207                 call    MIOS_LCD_PrintChar
               00208                         
               00209                         rgoto LABEL_AY_MAIN_MENU_01_POS3
4B6E D006          M         bra     label
               00210         
               00211         ;; ----[EDITING MODE @ PATCH NUMBER (ROW2 on LCD) IS NOT GIVEN]----------------
4B70           00212 LABEL_AY_MAIN_MENU_01_NOT_POS2
               00213                         ;; NO EDITING MODE @ PATCH NAME
               00214                         ;; PRINT ":" ON EDIT POSITION2
4B70 0E42      00215                         movlw   LCD_ROW2 + 2
4B72 EC88 F016 00216                         call    MIOS_LCD_CursorSet
4B76 0E3A      00217                         movlw   ':'
4B78 EC94 F016 00218                         call    MIOS_LCD_PrintChar
               00219 
               00220         ;; ----[END: CHECKING EDITING MODE @ PATCH NUMBER (ROW2 on LCD)]------------
               00221         ;; -------------------------------------------------------------------------
               00222         
               00223         
               00224 ;; -------------------------------[START ROW3]--------------------------------------
4B7C           00225 LABEL_AY_MAIN_MENU_01_POS3
               00226         ;; PRINT TXT on LCD ROW 3
               00227         TABLE_ADDR TEXT_AY_MB_AY_PATCH_DO
4B7C 0E8A          M         movlw   LOW(addr)               ; store Lo Byte
4B7E 6EF6          M         movwf   TBLPTRL
4B80 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4B82 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4B84 EC9E F016 00228         call    MIOS_LCD_PrintString
               00229 
               00230         ;; EDITING MODE @ EXECUTION ? (POS3)
               00231         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 3?
4B88 C200 F003 00232         movff AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4B8C 0E03      00233         movlw MENU_ITEM_POS3
4B8E 6203      00234         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00235                         
               00236                         ;; NO
               00237                         ;; POS < > 3
               00238                         rgoto LABEL_AY_MAIN_MENU_01_NOT_POS3
4B90 D007          M         bra     label
               00239 
               00240                 ;; YES
               00241                 ;; POS = 3
               00242                 ;; EDITING MODE @ DO [L W F]
               00243                 ;; PRINT "*" ON EDIT POS3
4B92 0E12      00244                 movlw   LCD_ROW3 + 2
4B94 EC88 F016 00245                 call    MIOS_LCD_CursorSet
4B98 0E2A      00246                 movlw   '*'
4B9A EC94 F016 00247                 call    MIOS_LCD_PrintChar
               00248                         ;; JUMP TO LCD ROW4
               00249                         rgoto LABEL_AY_MAIN_MENU_01_ROW4
4B9E D006          M         bra     label
               00250 
               00251 
4BA0           00252 LABEL_AY_MAIN_MENU_01_NOT_POS3
               00253                         ;; NO EDITING MODE @ SONGNAME
               00254                         ;; PRINT ":" ON EDIT POSITION3
4BA0 0E12      00255                         movlw   LCD_ROW3 + 2
4BA2 EC88 F016 00256                         call    MIOS_LCD_CursorSet
4BA6 0E3A      00257                         movlw   ':'
4BA8 EC94 F016 00258                         call    MIOS_LCD_PrintChar
               00259 
               00260 ;; -------------------------------[END: LCD ROW3]--------------------------------------
               00261 
               00262 ;; -------------------------------[START: LCD ROW4]------------------------------------
4BAC           00263 LABEL_AY_MAIN_MENU_01_ROW4
               00264         ;; LCD ROW 4 (PATCH MENU STATUS)
               00265         ;; (ROW4 = NO MENU ITEM)
               00266         
               00267         ;; -----------------[CHECK IF PATCH = INTERNAL]--------------------------------
               00268         ;; WRITE "----" [NO FORMAT] for INTernal PATCH (PIC EEPROM)
               00269         ;; ON LCD IF BROWSE_PATCH_NR = 0
4BAC 6AE8      00270         clrw 
4BAE 627C      00271         cpfseq BROWSE_PATCH_NR ;; COMPARE F WITH WREG
               00272                         
               00273                 ;; NO
               00274                 ;; BROWSE_PATCH_NR < > 0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00275                 ;; SO PATCH = BANKSTICK PATCH
               00276                 rgoto LABEL_AY_MAIN_MENU_01_POS4_FORMAT
4BB0 D00E          M         bra     label
               00277         
               00278                         ;; YES
               00279                         ;; BROWSE_PATCH_NR = 0
               00280                         ;; ;; PRINT "Load Write ------" on LCD  (NO FORMAT on ROW4)
               00281                         TABLE_ADDR TEXT_AY_MB_AY_PATCH_EXE_NO_FORMAT
4BB2 0EAE          M         movlw   LOW(addr)               ; store Lo Byte
4BB4 6EF6          M         movwf   TBLPTRL
4BB6 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4BB8 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4BBA EC9E F016 00282                         call    MIOS_LCD_PrintString
               00283                         ;; DO WRITE A "-" over [F] => [-]
               00284                         ;; BECAUSE ITS PATCH 0 = INT PATCH
               00285                         ;; NO FORMAT POSSIBLE
4BBE 0E1E      00286                         movlw   LCD_ROW3 + 14
4BC0 EC88 F016 00287                         call    MIOS_LCD_CursorSet
4BC4 0E2D      00288                         movlw   '-'
4BC6 EC94 F016 00289                         call    MIOS_LCD_PrintChar
               00290                         
               00291                         ;; WRITE PATCH FLAGS
               00292                         ;; SET CURREND PATCH = INTERNAL
               00293                         ;; CLEAR BIT 2 of PATCH_MENU_STATE_FLAGS
4BCA 947D      00294                         bcf PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00295                         
               00296                                 ;; INTERNAL PATCH, no need for checking BANKSTICK status
               00297                                 ;; EXIT HERE
4BCC 0012      00298                                 return
               00299 
               00300 ;; ----------------------[ROW4 PATCH (1-128) = BANKSTICK]--------------------------- 
4BCE           00301 LABEL_AY_MAIN_MENU_01_POS4_FORMAT
               00302         ;; WRITE PATCH FLAGS
               00303         ;; SET CURREND PATCH = BANKSTICK
               00304         ;; SET BIT 2 of PATCH_MENU_STATE_FLAGS
4BCE 847D      00305         bsf PATCH_MENU_STATE_FLAGS, BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL
               00306         
               00307         ;; LCD ROW4 = PATCH MENU: status line (NO MENU ITEM)
               00308         ;; PATCH Nr (1-128) = BANKSTICK AREA
               00309         ;; PRINT "Load Write Format" on LCD ROW4        
               00310         TABLE_ADDR TEXT_AY_MB_AY_PATCH_EXE 
4BD0 0E9C          M         movlw   LOW(addr)               ; store Lo Byte
4BD2 6EF6          M         movwf   TBLPTRL
4BD4 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4BD6 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4BD8 EC9E F016 00311         call    MIOS_LCD_PrintString
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00312 
               00313         ;; -----------------------[CHECK: BANKSTICK AVAILABLE?]-----------------------------------
4BDC           00314 LABEL_AY_MAIN_MENU_01_CHK_BANKSTICK_AVAILABLE
               00315         ;; 1) CHECK IF BANKSTICK IS AVAILABLE
               00316         ;; ------------------------------------------------------
               00317         ;; 1a) PREPARE THE: "IS THE BANKSTICK FORMATTED?" HANDLING
               00318         ;; ------------------------------------------------------
               00319         ;; DO: READ BANKSTICK ADR0 (BANKSTICK PATCH1 FINGERPRINT)
               00320         ;; ------------------------------------------------------
4BDC 6A03      00321         clrf MIOS_PARAMETER1
4BDE 6A04      00322         clrf MIOS_PARAMETER2
4BE0 ECB8 F016 00323         call MIOS_BANKSTICK_Read
               00324                 
               00325                 ;; ------------------------------------------
               00326                 ;; Save BANKSTICK1 PATCH1 Fingerprint (Byte)
               00327                 ;; FOR "IS THE BANKSTICK FORMATTED?" HANDLING
               00328                 ;; ------------------------------------------
4BE4 6E3F      00329                 movwf   CURREND_PATCH_DATA_BYTE_TEMP
               00330                 
               00331         ;; NOW (AFTER READING BS ADR 0) WE CAN CHECK IF BANKSTICK1 IS AVAILABLE
               00332         ;; BRANCH IF BANKSTICK1 IS NOT PRESENT
               00333         ;; ----------------------------------------------------------------------------------------------------
               00334         ;; --------------------------------------------------------[JUMP: IF BANKSTICK IST *NOT* AVAILABLE]----
               00335         ;; ----------------------------------------------------------------------------------------------------
               00336         BRA_IFCLR MIOS_BOX_STAT, MIOS_BOX_STAT_BS_AVAILABLE, ACCESS, LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE
4BE6 A002          M         btfss   reg, bit, reg_a
4BE8 D001          M         bra     label
               00337                 
               00338                 ;; --------------------------
               00339                 ;; BANKSTICK IS AVAILABLE :-)
               00340                 ;; --------------------------
               00341                 ;; GO ON WITH BANKSTICK HANDLING
               00342                 rgoto LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE
4BEA D059          M         bra     label
               00343 
               00344         
               00345         ;; -----------------------[END: CHECK BANKSTICK AVAILABLE]--------------------------------
               00346         ;; ---------------------------------------------------------------------------------------
               00347         
               00348         ;; -----------------------[HANDLING: BANKSTICK NOT AVAILABLE]--------------------------------
               00349         ;; -----------------------[HANDLING: BANKSTICK NOT AVAILABLE - POS1]--------------------------------
4BEC           00350 LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE
               00351                                 ;; PRINT "[-NO BANSTICK1-]" on LCD ROW1 (!)
               00352                                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_NO_BS
4BEC 0E5E          M         movlw   LOW(addr)               ; store Lo Byte
4BEE 6EF6          M         movwf   TBLPTRL
4BF0 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4BF2 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4BF4 EC9E F016 00353                                 call    MIOS_LCD_PrintString
               00354                                 ;; REDRAW ROW2 on LCD
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00355                                 TABLE_ADDR LCD_CLEAR_ROW2
4BF8 0E84          M         movlw   LOW(addr)               ; store Lo Byte
4BFA 6EF6          M         movwf   TBLPTRL
4BFC 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4BFE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4C00 EC9E F016 00356                                 call    MIOS_LCD_PrintString
               00357                                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_NR
4C04 0E70          M         movlw   LOW(addr)               ; store Lo Byte
4C06 6EF6          M         movwf   TBLPTRL
4C08 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4C0A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4C0C EC9E F016 00358                                 call    MIOS_LCD_PrintString
               00359                                 
               00360         ;; EDITING MODE @ PATCH NAME?
               00361         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 1?
               00362         ;; FOR "[-NO BANSTICK1-]" on LCD ROW1 (!)
               00363         ;; POS1 IS NOT A VALID POS for EDITING MODE WHEN A BANKSTICK1 IS *NOT* AVAILABLE
4C10 C200 F003 00364         movff AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4C14 0E01      00365         movlw MENU_ITEM_POS1
4C16 6203      00366         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00367                         ;; NO
               00368                         ;; POS < > 1
               00369                         ;; OK, GO ON AND CHECK POS2
               00370                         rgoto LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_CHK_POS2
4C18 D00B          M         bra     label
               00371 
               00372                 ;; YES
               00373                 ;; POS = 1
               00374                 ;; EDITING MODE @ PATCH NAME
               00375                 ;; ITS NOT A VALID POS
               00376                 ;; SO SET POS TO POS2
4C1A 0E02      00377                 movlw  MENU_ITEM_POS2
4C1C 6E03      00378                 movwf  MIOS_PARAMETER1
4C1E C003 F200 00379                 movff  MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
               00380                 
               00381                 ;; PRINT EDITING MODE "*" ON POS2
4C22 0E42      00382                 movlw   LCD_ROW2 + 2
4C24 EC88 F016 00383                 call    MIOS_LCD_CursorSet
4C28 0E2A      00384                 movlw   '*'
4C2A EC94 F016 00385                 call    MIOS_LCD_PrintChar
               00386                         ;; GO AND REWRITE PATCH NUMBER @ POS2 on LCD
               00387                         rgoto  LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_PRINT_PATCH_NUMBER
4C2E D00B          M         bra     label
               00388                 
               00389                 ;; ------------------[HANDLING: BANKSTICK NOT AVAILABLE - POS2]-------------------------
               00390                 ;; ------------------[CHECK: POS2 (PATCH NUMBER) = in EDITING MODE?]--------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4C30           00391 LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_CHK_POS2
               00392         ;; EDITING MODE @ PATCH NUMBER? (POS2)
               00393         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 2?
               00394         ;; IF POS = ITEM2
               00395         ;; WE MUST PRINT ACTIVE POS = "*" @ ITEM2 (PATCH NUMBER)
4C30 C200 F003 00396         movff AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4C34 0E02      00397         movlw MENU_ITEM_POS2
4C36 6203      00398         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00399                         
               00400                         ;; NO
               00401                         ;; POS < > 2
               00402                         ;; PATCH NUMBER IS NOT in EDITING MODE
               00403                         rgoto LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_PRINT_PATCH_NUMBER
4C38 D006          M         bra     label
               00404 
               00405                 ;; YES
               00406                 ;; POS = 2
               00407                 ;; ITEM: PATCH NUMBER is in EDITING MODE
               00408                 ;; PRINT "*" ON POS2
4C3A 0E42      00409                 movlw   LCD_ROW2 + 2
4C3C EC88 F016 00410                 call    MIOS_LCD_CursorSet
4C40 0E2A      00411                 movlw   '*'
4C42 EC94 F016 00412                 call    MIOS_LCD_PrintChar
               00413 
               00414                 
               00415                 ;; ------------------[STATE: EDITING MODE @ POS2 (PATCH NUMBER)]-------------
               00416                 ;; ------------------[STATE: NO BANKSTICK AVAILABLE]-------------------------
               00417                 ;; ------------------[DO   : DELITE [LOAD WRITE FORMAT] @ ROW3 and ROW4]-----
4C46           00418 LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_PRINT_PATCH_NUMBER
               00419                                 ;; PRINT PATCH NUMBER on LCD
4C46 0E44      00420                                 movlw   LCD_ROW2 + 0x04
4C48 EC88 F016 00421                                 call    MIOS_LCD_CursorSet
4C4C 507C      00422                                 movf    BROWSE_PATCH_NR, W
4C4E EC92 F016 00423                                 call    MIOS_LCD_PrintBCD3
               00424                 
4C52 0E43      00425                                 movlw   LCD_ROW2 + 3
4C54 EC88 F016 00426                                 call    MIOS_LCD_CursorSet
4C58 0E5B      00427                                 movlw   '['
4C5A EC94 F016 00428                                 call    MIOS_LCD_PrintChar
               00429                 
4C5E 0E47      00430                                 movlw   LCD_ROW2 + 7
4C60 EC88 F016 00431                                 call    MIOS_LCD_CursorSet
4C64 0E5D      00432                                 movlw   ']'
4C66 EC94 F016 00433                                 call    MIOS_LCD_PrintChar
               00434 
               00435                                 
               00436                                 ;; WRITE PATCH MENU STATUS FLAG: 
               00437                                 ;; NO BANKSTICK FOUND (BIT0 = CLEAR = NO BANKSTICK FOUND)
4C6A 907D      00438                                 bcf PATCH_MENU_STATE_FLAGS, BIT0_BANKSTICK_FOUND
               00439                                 
               00440                                 ;; THERE IS NOTHING THE USER CAN DO, IF THERE IS NO BANKSTICK
               00441                                 ;; DEL [LOAD WRT FORMAT] on LCD ROW3 and ROW4
               00442                                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_EXE_NO_LT_ERT_FMT
4C6C 0EC0          M         movlw   LOW(addr)               ; store Lo Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4C6E 6EF6          M         movwf   TBLPTRL
4C70 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4C72 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4C74 EC9E F016 00443                                 call    MIOS_LCD_PrintString
               00444 
               00445                                 ;; DO WRITE A "-" over [L] => [-]
               00446                                 ;; BECAUSE ITS PATCH 0 = INT PATCH
               00447                                 ;; NO FORMAT POSSIBLE
4C78 0E16      00448                                 movlw   LCD_ROW3 + 6
4C7A EC88 F016 00449                                 call    MIOS_LCD_CursorSet
4C7E 0E2D      00450                                 movlw   '-'
4C80 EC94 F016 00451                                 call    MIOS_LCD_PrintChar
               00452 
               00453                                 ;; DO WRITE A "-" over [W] => [-]
               00454                                 ;; BECAUSE ITS PATCH 0 = INT PATCH
               00455                                 ;; NO FORMAT POSSIBLE
4C84 0E1A      00456                                 movlw   LCD_ROW3 + 10
4C86 EC88 F016 00457                                 call    MIOS_LCD_CursorSet
4C8A 0E2D      00458                                 movlw   '-'
4C8C EC94 F016 00459                                 call    MIOS_LCD_PrintChar
               00460                                 
               00461                                 ;; DO WRITE A "-" over [F] => [-]
               00462                                 ;; BECAUSE ITS PATCH 0 = INT PATCH
               00463                                 ;; NO FORMAT POSSIBLE
4C90 0E1E      00464                                 movlw   LCD_ROW3 + 14
4C92 EC88 F016 00465                                 call    MIOS_LCD_CursorSet
4C96 0E2D      00466                                 movlw   '-'
4C98 EC94 F016 00467                                 call    MIOS_LCD_PrintChar
               00468                                         ;; EXIT HERE
4C9C 0012      00469                                         return
               00470                 ;; ------------[END - HANDLING: NO BANKSTICK]--------------------------------
               00471 
               00472 ;; --------------------------------[STATE: BANKSTICK IS AVAILABLE]---------------------------
               00473 ;; --------------------------------[DO   : CHECK: FINGERPRINT (BANKSTICK FORMATED?)]---------
4C9E           00474 LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE                               
               00475                         ;; WRITE PATCH STATUS FLAG: 
               00476                         ;; BANKSTICK FOUND
               00477                         ;; SET BIT0
4C9E 807D      00478                         bsf PATCH_MENU_STATE_FLAGS, BIT0_BANKSTICK_FOUND
               00479                         
               00480                         ;; CHECK IF THERE IS THE BANKSTICK FINGERPRINT
               00481                         ;; (THE QUESTION IS: DO WE HAVE TO FORMAT THE BANKSTICK?)
               00482                         ;; BANKSTICK_PATCH_FINGERPRINT = CURREND_PATCH_DATA_BYTE_TEMP 
               00483                         ;; (REMEMBER WE HAVE STORED THE "BANKSTICK ADR0" BYTE in CURREND_PATCH_DATA_BYTE_TEMP)
4CA0 0E88      00484                         movlw   BANKSTICK_PATCH_FINGERPRINT
4CA2 623F      00485                         cpfseq  CURREND_PATCH_DATA_BYTE_TEMP
               00486                                         ;; -------------------------------------------------
               00487                                         ;; -----[STATE: BANKSTICK IS NOT FORMATTED]---------
               00488                                         ;; -------------------------------------------------
               00489                                         ;; NO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00490                                         ;; BANKSTICK_EEPROM_FINGERPRINT < > CURREND_PATCH_DATA_BYTE_TEMP 
               00491                                         ;; SO THE BANKSTICK IS NOT FORMETTED!
               00492                                         rgoto   LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE_NO_FINGERPRINT
4CA4 D002          M         bra     label
               00493                         
               00494                                 ;; ----------------------------------------------------
               00495                                 ;; -----[STATE: BANKSTICK IS FORMATTED]----------------
               00496                                 ;; ----------------------------------------------------
               00497                                 ;; YES
               00498                                 ;; BANKSTICK_EEPROM_FINGERPRINT = CURREND_PATCH_DATA_BYTE_TEMP 
               00499                                 ;; (SAVED BYTE: BANKSTICK1 ADR0)
               00500                                 ;; OK, WRITE PATCH MENU STATUS FLAG:
               00501                                 ;; BANKSTICK = FORMATED :-)
               00502                                 ;; SET BIT1
               00503                                 ;; ----[DO: WRITE PATCH STAUS FLAG BIT1]---------------
4CA6 827D      00504                                 bsf PATCH_MENU_STATE_FLAGS, BIT1_BANKSTICK_SELECTED_PATCH_FORMATED
               00505                                                 ;; ALL DONE, EXIT HERE
4CA8 0012      00506                                                 return
               00507 
               00508                 ;; --------------------[END: CHECKING BANKSTICK FINGERPRINT]------------                        
               00509 
               00510 ;; ----------------------------------------------------------------------------------------------------
               00511 ;; --------------------------------[STATE: BANKSTICK IS AVAILABLE BUT NOT FORMATTED]-------------------         
4CAA           00512 LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE_NO_FINGERPRINT
               00513                                         ;; ---[DO: WRITE PATCH MENU STATUS FLAG]-----------------------
               00514                                         ;; BANKSTICK1 = NOT FORMATED
4CAA 927D      00515                                         bcf PATCH_MENU_STATE_FLAGS, BIT1_BANKSTICK_SELECTED_PATCH_FORMATED
               00516                                         
               00517                                         ;; IF BANKSTICK IS NOT FORMATTED ROW1
               00518                                         ;; IS NOT A VALID EDITING MODE POS (!)
               00519                                         ;; BECAUSE THERE IS A "DO FORMAT BANKSTICK" MASSAGE on LCD @ ROW1
               00520                                         ;; CHECK: CURREND POS = 1?
4CAC C200 F003 00521                                         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
4CB0 0E01      00522                                         movlw   MENU_ITEM_POS1
4CB2 6403      00523                                         cpfsgt  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00524 
               00525                                                         ;; NO
               00526                                                         ;; POS = 1 (NOT > 1)
               00527                                                         ;; POS NOT OK :-(
               00528                                                         rgoto LABEL_AY_MAIN_MENU_01_POS_1_NOT_VALID_GO_POS_2
4CB4 D001          M         bra     label
               00529                                 
               00530                                                 
               00531                                                 ;; YES
               00532                                                 ;; POS > 1
               00533                                                 ;; POS OK :-)
               00534                                                 rgoto LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE_BUT_NOT_FORMATED
4CB6 D00A          M         bra     label
               00535                                                 
               00536 
               00537                 ;; ---------------[STATE: BANKSTICK IS AVAILABLE BUT NOT FORMATTED]------
               00538                 ;; ---------------[STATE: POS = POS1]------------------------------------
               00539                 ;; ---------------[STATE: POS1 IS NOT VALID]-----------------------------
               00540                 ;; ---------------[DO   : SET POS to POS2 (SET EDITING MODE = ITEM2)]----
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4CB8           00541 LABEL_AY_MAIN_MENU_01_POS_1_NOT_VALID_GO_POS_2          
               00542                 ;; EDITING MODE @ POS1 IS NOT VALID
               00543                 ;; SET EDITING MODE POS = 2     
4CB8 C002 F003 00544                 movff   MENU_ITEM_POS2, MIOS_PARAMETER1
4CBC C003 F200 00545                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
               00546                 
               00547                 ;; PRINT "*" ON EDIT POSITION2
4CC0 0E42      00548                 movlw   LCD_ROW2 + 2
4CC2 EC88 F016 00549                 call    MIOS_LCD_CursorSet
4CC6 0E2A      00550                 movlw   '*'
4CC8 EC94 F016 00551                 call    MIOS_LCD_PrintChar
               00552                 ;; ---------------[END: SET POS to POS2 (SET EDITING MODE = ITEM2)]----
               00553                 
               00554                 ;; ---------------[DO: UPDATE LCD - JUST FORMATTING POSSIBLE]------------
               00555                 ;; ---------------[STATE: BANKSTICK IS AVAILABLE BUT NOT FORMATTED]------
               00556                 ;; ---------------[STATE: NO PATCH WRITING POSSIBLE]------
               00557                 ;; ---------------[STATE: NO PATCH LOADING POSSIBLE]------
               00558                 ;; ---------------[STATE: BANKSTICK FORMATTING POSSIBLE]------
4CCC           00559 LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE_BUT_NOT_FORMATED
               00560                                 ;; PRINT "DO FORMAT BANKSTICK1" on LCD ROW1
               00561                                 ;; NOW ROW1 is NOT a ITEM anymore
               00562                                 TABLE_ADDR TEXT_AY_MB_AY_BANKSTICK_NOT_FORMATED
4CCC 0E4C          M         movlw   LOW(addr)               ; store Lo Byte
4CCE 6EF6          M         movwf   TBLPTRL
4CD0 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4CD2 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4CD4 EC9E F016 00563                                 call    MIOS_LCD_PrintString
               00564                                 ;; -[STATE: NO PATCH LOADING POSSIBLE]------
               00565                                 ;; -[STATE: NO PATCH WRITING POSSIBLE]------
               00566                                 ;; ROW4 (STAUS):
               00567                                 ;; PRINT "---- ---- Format" on LCD ROW4
               00568                                 TABLE_ADDR TEXT_AY_MB_AY_PATCH_EXE_JUST_FORMAT
4CD8 0ED2          M         movlw   LOW(addr)               ; store Lo Byte
4CDA 6EF6          M         movwf   TBLPTRL
4CDC 0E39          M         movlw   HIGH(addr)              ; store Hi Byte
4CDE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4CE0 EC9E F016 00569                                 call    MIOS_LCD_PrintString
               00570                                 
               00571                                 ;; -[STATE: NO PATCH LOADING POSSIBLE]------
               00572                                 ;; DO WRITE A "-" over [L] => [-]
               00573                                 ;; NO PATCH LOADING POSSIBLE
4CE4 0E16      00574                                 movlw   LCD_ROW3 + 6
4CE6 EC88 F016 00575                                 call    MIOS_LCD_CursorSet
4CEA 0E2D      00576                                 movlw   '-'
4CEC EC94 F016 00577                                 call    MIOS_LCD_PrintChar
               00578                                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00579                                 ;; -[STATE: NO PATCH WRITING POSSIBLE]------
               00580                                 ;; DO WRITE A "-" over [W] => [-]
               00581                                 ;; BECAUSE ITS PATCH 0 = INT PATCH
               00582                                 ;; NO PATCH WRITING POSSIBLE
4CF0 0E1A      00583                                 movlw   LCD_ROW3 + 10
4CF2 EC88 F016 00584                                 call    MIOS_LCD_CursorSet
4CF6 0E2D      00585                                 movlw   '-'
4CF8 EC94 F016 00586                                 call    MIOS_LCD_PrintChar
               00587                                         ;; EXIT HERE                                    
4CFC 0012      00588                                         return
               00589 
               00590 
               00056 #include "main_menu_02_detune.inc"
               00001 ;; main_menu_02_detune.inc
               00002 
               00003 
               00004 ;; -----------------------------------------------------
               00005 ;; ---------[MB AY MAIN MENU 02: DETUNE ABC]------------ 
               00006 ;; =======================> (F2 has been pressed)
               00007 ;; This Menu shows the (de)tune values 
               00008 ;; detune is not transpose (!)
               00009 
4CFE           00010 LABEL_AY_MAIN_MENU_02_ABC_TUNE
               00011               ;; WRITE LCD SCREN => TUNE MENU
4CFE EC82 F016 00012               call    MIOS_LCD_Clear
               00013    
               00014                 ;; PRINT MENUE HEADLINE (LCD LINE1)
               00015                 TABLE_ADDR TEXT_AY_MENU_ABC_TUNE
4D02 0E00          M         movlw   LOW(addr)               ; store Lo Byte
4D04 6EF6          M         movwf   TBLPTRL
4D06 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4D08 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4D0A EC9E F016 00016                 call    MIOS_LCD_PrintString
               00017         
               00018 
4D0E           00019 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A
               00020 ;; ----[MAIN MENU TONE A - COARSE TUNE]------------
               00021         ;; LCD LOCATION: ROW2
               00022         ;; CHECK IF COARSE TUNE TONE A IS POSITIVE (+ZERO) or  NEGATIVE 
               00023         ;; ...
               00024         ;; 3 = -4
               00025         ;; 4 = -3
               00026         ;; 5 = -2
               00027         ;; 6 = -1
               00028         ;; 7 =  0
               00029         ;; 8 = +1
               00030         ;; 9 = +2
               00031         ;; ...
               00032         ;; TONE A COARSE TUNE USER > 6?
4D0E 0E06      00033         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4D10 6426      00034         cpfsgt  AY_TONE_A_TUNE_COARSE_USER
               00035                         ;; NO - VALUE @ LCD WILL BE NEGATIVE
               00036                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A_NEGATIVE
4D12 D017          M         bra     label
               00037 
               00038                         ;; YES - VALUE @ LCD WILL BE POSITIVE or ZERO
               00039                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A_ZERO_AND_POSITIVE
4D14 D000          M         bra     label
               00040                         
               00041 
4D16           00042 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A_ZERO_AND_POSITIVE
               00043                         ;; PRINT LCD LINE2 POSIVE VALUE
               00044                         ; CLEAR LCD ROW2
               00045                         TABLE_ADDR LCD_CLEAR_ROW2                       
4D16 0E84          M         movlw   LOW(addr)               ; store Lo Byte
4D18 6EF6          M         movwf   TBLPTRL
4D1A 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4D1C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4D1E EC9E F016 00046                         call    MIOS_LCD_PrintString
               00047 
               00048                         ; PRINT LCD TXT ROW2
               00049                         TABLE_ADDR TEXT_AY_MENU_ABC_TUNE_CHA_TUNE       
4D22 0E12          M         movlw   LOW(addr)               ; store Lo Byte
4D24 6EF6          M         movwf   TBLPTRL
4D26 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4D28 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4D2A EC9E F016 00050                         call    MIOS_LCD_PrintString
               00051         
               00052                         ;; PREPARE USER COARSE VALUE FOR LCD VIEW
4D2E 0E07      00053                         movlw   OFFSET_COARSE_TUNE_IS_7
4D30 5C26      00054                         subwf   AY_TONE_A_TUNE_COARSE_USER, W   ; - 0x07 OFFSET: FOR LCD MENU VALUE
4D32 6E03      00055                         movwf   MIOS_PARAMETER1                 ; LCD VALUE "USER DETUNE COARSE"
               00056                                                                 ; IS NOW IN MIOS_PARAMETER1 
               00057         
               00058                         ;; SET LCD POS
4D34 0E48      00059                         movlw   LCD_ROW2 + 0x08
4D36 EC88 F016 00060                         call    MIOS_LCD_CursorSet
               00061                 
               00062                         ;; WRITE "USER DETUNE COARSE" AS A *LCD VALUE*  
4D3A 5003      00063                         movf    MIOS_PARAMETER1,W               
4D3C EC8E F016 00064                         call    MIOS_LCD_PrintBCD1
               00065 
               00066                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A
4D40 D023          M         bra     label
               00067         
               00068 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00069 
               00070 
4D42           00071 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A_NEGATIVE
               00072                         ;; PRINT LCD LINE2 NEGATIVE VALUE
               00073         
               00074                          ;; CLEAR ROW2
               00075                         TABLE_ADDR LCD_CLEAR_ROW2                       
4D42 0E84          M         movlw   LOW(addr)               ; store Lo Byte
4D44 6EF6          M         movwf   TBLPTRL
4D46 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4D48 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4D4A EC9E F016 00076                         call    MIOS_LCD_PrintString
               00077         
               00078                         ; WRITE ITEM ROW2
               00079                         TABLE_ADDR TEXT_AY_MENU_ABC_TUNE_CHA_TUNE       
4D4E 0E12          M         movlw   LOW(addr)               ; store Lo Byte
4D50 6EF6          M         movwf   TBLPTRL
4D52 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4D54 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4D56 EC9E F016 00080                         call    MIOS_LCD_PrintString
               00081         
               00082                         ; POS FOR "-"  
4D5A 0E46      00083                         movlw   LCD_ROW2 + 0x06                         
4D5C EC88 F016 00084                         call    MIOS_LCD_CursorSet
               00085                         ; PRINT "-"
4D60 0E2D      00086                         movlw   '-'
4D62 EC94 F016 00087                         call    MIOS_LCD_PrintChar                      
               00088 
               00089                         ;; : MEMO :
               00090                         ;; Die folgende Prozedur ist notwendig da auf dem LCD
               00091                         ;; +/- Zahlen gewünscht sind, das bedeutet:
               00092                         ;; ...
               00093                         ;; LCD: +3 # DETUNE USER WERT ohne OFFSET
               00094                         ;; LCD: +2 # DETUNE USER WERT ohne OFFSET 
               00095                         ;; LCD: +1 # DETUNE USER WERT ohne OFFSET 
               00096                         ;; LCD:  0 # DETUNE USER WERT ohne OFFSET
               00097                         ;; LCD: -1 # DETUNE USER WERT ohne OFFSET
               00098                         ;; LCD: -2 # DETUNE USER WERT ohne OFFSET
               00099                         ;; LCD: -3 # DETUNE USER WERT ohne OFFSET
               00100                         ;; ....
               00101         
               00102                         ;; Der *Minus* Wert muss aus der Variable (die nur positive zahlen beherbergt) errechnet
               00103                         ;; werden
               00104                         ;; ...
               00105                         ;; LCD: +3 # => DETUNE USER VALUE: 10 - 0x0A (Dieser Bereich wird hier nicht behandelt)
               00106                         ;; LCD: +2 # => DETUNE USER VALUE:  9 - 0x09 (Dieser Bereich wird hier nicht behandelt)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00107                         ;; LCD: +1 # => DETUNE USER VALUE:  8 - 0x08 (Dieser Bereich wird hier nicht behandelt)
               00108                         ;; LCD:  0 # => DETUNE USER VALUE:  7 - 0x07 (Dieser Bereich wird hier nicht behandelt)
               00109                         ;; LCD: -1 # => DETUNE USER VALUE:  6 - 0x06 (Dieser Bereich ist hier relevant)
               00110                         ;; LCD: -2 # => DETUNE USER VALUE:  5 - 0x05 (Dieser Bereich ist hier relevant)
               00111                         ;; LCD: -3 # => DETUNE USER VALUE:  4 - 0x04 (Dieser Bereich ist hier relevant)
               00112                         ;; LCD: -4 # => DETUNE USER VALUE:  3 - 0x03 (Dieser Bereich ist hier relevant)
               00113                         ;; LCD: -5 # => DETUNE USER VALUE:  2 - 0x02 (Dieser Bereich ist hier relevant)
               00114                         ;; ....
               00115                         
               00116                         ;; :: MINUSZAHLBERECHNUNG FÜR DIE LCD ANZEIGE ::
               00117                         ;; Aufgabe: Ziehe 0x07 (-OFFSET) vom COARSE TUNE REG A/B/C ab und berechne die Minuszahl
               00118                         ;; 1) comf 0x07 (comf OFFSET ) => complement 0x07 = 0xF8 // 1er komplement bilden
               00119                         ;; 2) inc 0xF8 => 0xF9 // 2er komplemnt bilden
               00120                         ;; 3) add TUNE REG + 0xF9
               00121                         ;; 4) comf (TUNE REG + 0xF9) // 1er komplement bilden
               00122                         ;; 5) inc {comf (TUNE REG + 0xF9)} // 2er komplemnt bilden
               00123                         
               00124         
4D66 0E07      00125                         movlw   OFFSET_COARSE_TUNE_IS_7  ; 7 => W
4D68 6E03      00126                         movwf   MIOS_PARAMETER1                 ; W =>  MIOS_PARAMETER1
4D6A 1E03      00127                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4D6C 2A03      00128                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
4D6E 5003      00129                         movf    MIOS_PARAMETER1, W              ; MIOS_PARAMETER1 => W
4D70 2426      00130                         addwf   AY_TONE_A_TUNE_COARSE_USER, W   ; AY_TONE_A_TUNE_COARSE_USER + W => W
4D72 6E03      00131                         movwf   MIOS_PARAMETER1                 ; W => MIOS_PARAMETER1
4D74 1E03      00132                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4D76 2A03      00133                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
               00134                         ;; Nun ist die gewünschte MINUSZAHL in MIOS_PARAMETER1 hinterlegt      
               00135                 
               00136                         ; POS FOR TUNE VALUE
4D78 0E48      00137                         movlw   LCD_ROW2 + 0x08                 
4D7A EC88 F016 00138                         call    MIOS_LCD_CursorSet
               00139                         ; Print TUNE-VALUE @ LCD
4D7E 5003      00140                         movf    MIOS_PARAMETER1,W               
4D80 EC8E F016 00141                         call        MIOS_LCD_PrintBCD1                  
               00142         
4D84 EFC4 F026 00143                         goto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A
               00144         
               00145                
               00146         
               00147 ;; ----[MAIN MENU TONE A - COARSE TUNE END]------------ 
               00148 
               00149         
4D88           00150 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A
               00151 ;; ----[MAIN MENU TONE A - FINE TUNE]------------ 
               00152         ;; CHECK IF FINE TUNE TONE A IS POSITIVE (+ZERO) or NEGATIVE 
4D88 0E7F      00153         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F ;; 127
               00154         ;; TONE A COARSE TUNE > 127 DEC.? (128 DEC. = 0 DETUNE)
4D8A 6423      00155         cpfsgt  AY_TONE_A_TUNE_FINE_USER                
               00156                         ;; NO - VALUE @ LCD WILL BE NEGATIVE
               00157                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A_NEGATIVE
4D8C D00B          M         bra     label
               00158 
               00159                         ;; YES - VALUE @ LCD WILL BE 0 OR POSITIVE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00160                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A_ZERO_AND_POSITIVE
4D8E D000          M         bra     label
               00161 
4D90           00162 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A_ZERO_AND_POSITIVE
               00163                         ;; calculate *LCD VALUE* FINE TUNE TONE A 
4D90 0E80      00164                         movlw   OFFSET_FINE_TUNE_IS_128
4D92 5C23      00165                         subwf   AY_TONE_A_TUNE_FINE_USER, W
4D94 6E03      00166                         movwf   MIOS_PARAMETER1
               00167                         
               00168                                 ;; CURSER SET
4D96 0E4D      00169                                 movlw   LCD_ROW2 + 0x0d
4D98 EC88 F016 00170                                 call    MIOS_LCD_CursorSet
               00171                                 
               00172                                 ;; Print A COARSE TUNE + *LCD VALUE*
4D9C 5003      00173                                 movf            MIOS_PARAMETER1,W               
4D9E EC92 F016 00174                                 call            MIOS_LCD_PrintBCD3
               00175                 
               00176                                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B
4DA2 D016          M         bra     label
               00177 
               00178 
               00179 
               00180         
4DA4           00181 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A_NEGATIVE
               00182                         ; POS FOR "-"
4DA4 0E4C      00183                         movlw   LCD_ROW2 + 0x0c                         
4DA6 EC88 F016 00184                         call    MIOS_LCD_CursorSet
               00185                         ; WRITE "-" to LCD
4DAA 0E2D      00186                         movlw   '-'
4DAC EC94 F016 00187                         call    MIOS_LCD_PrintChar                      
               00188                                 
               00189                         ;; :: MINUSZAHLBERECHNUNG NUR FÜR DIE LCD ANZEIGE ::
               00190                         ;; Aufgabe Offset abziehen und MINUSZAHL für die LCD Anzeige berechnen 
               00191                         ;; 1) comf 0x80 => complement 0x80 => 0x7F
               00192                         ;; 2) inc 0x7F => 0x80
               00193                         ;; 3) add TUNE REG + 0x80
               00194                         ;; 4) comf (TUNE REG + 0x80)
               00195                         ;; 5) inc {comf (TUNE REG + 0x80)}
               00196                         ;; 6) PRINT TO LCD: - (inc {comf (TUNE REG + 0x80)})
               00197                         
               00198                         ;; : MEMO :
               00199                         ;; Die Prozedur ist notwendig da auf dem LCD
               00200                         ;; +/- Zahlen gewünscht sind - das bedeutet:
               00201                         ;; ...
               00202                         ;; LCD: +3 # DETUNE USER WERT ohne OFFSET: 131 - 0x83 (Dieser Bereich wird hier nicht behandelt)
               00203                         ;; LCD: +2 # DETUNE USER WERT ohne OFFSET: 130 - 0x82 (Dieser Bereich wird hier nicht behandelt)
               00204                         ;; LCD: +1 # DETUNE USER WERT ohne OFFSET: 129 - 0x81 (Dieser Bereich wird hier nicht behandelt)
               00205                         ;; LCD:  0 # DETUNE USER WERT ohne OFFSET: 128 - 0x80 (Dieser Bereich wird hier nicht behandelt)
               00206                         ;; LCD: -1 # DETUNE USER WERT ohne OFFSET: 127 - 0x7F (Dieser Bereich ist hier relevant)
               00207                         ;; LCD: -2 # DETUNE USER WERT ohne OFFSET: 126 - 0x7E (Dieser Bereich ist hier relevant)
               00208                         ;; LCD: -3 # DETUNE USER WERT ohne OFFSET: 125 - 0x7D (Dieser Bereich ist hier relevant)
               00209                         ;; ....
               00210                         
4DB0 0E80      00211                         movlw   OFFSET_FINE_TUNE_IS_128 ; 0x80 => W
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4DB2 6E03      00212                         movwf   MIOS_PARAMETER1                 ; W =>  MIOS_PARAMETER1
4DB4 1E03      00213                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4DB6 2A03      00214                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
4DB8 5003      00215                         movf    MIOS_PARAMETER1, W              ; MIOS_PARAMETER1 => W
4DBA 2423      00216                         addwf   AY_TONE_A_TUNE_FINE_USER, W     ; AY_TONE_A_TUNE_FINE_USER + W => W
4DBC 6E03      00217                         movwf   MIOS_PARAMETER1                 ; W => MIOS_PARAMETER1
4DBE 1E03      00218                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4DC0 2A03      00219                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
               00220                         ;; Das Ergebnis ist nun in MIOS_PARAMETER1 hinterlegt
               00221                         
               00222                         ; POS FOR TUNE VALUE
4DC2 0E4D      00223                         movlw   LCD_ROW2 + 0x0d                 
4DC4 EC88 F016 00224                         call    MIOS_LCD_CursorSet
               00225                         
               00226                         ; WRITE NEGATIVE *LCD VALUE* FINE TUNE USER TONE A to LCD
4DC8 5003      00227                         movf    MIOS_PARAMETER1,W               
4DCA EC92 F016 00228                         call        MIOS_LCD_PrintBCD3                  
               00229                         
               00230                                 rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B
4DCE D000          M         bra     label
               00231                 
               00232 
               00233 ;; ----[MAIN MENU TONE A - FINE TUNE END]------------ 
               00234 
               00235 
               00236 
4DD0           00237 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B        
               00238 ;; ----[MAIN MENU TONE B - COARSE TUNE]------------     
               00239         ;; CHECK IF COARSE (DE)TUNE TONE B is POSITIVE (+0) or NEGATIVE 
4DD0 0E06      00240         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06
               00241         ;; TONE A COARSE TUNE > 6?
4DD2 6427      00242         cpfsgt  AY_TONE_B_TUNE_COARSE_USER
               00243                         ;; NO - VALUE @ LCD IS NEGATIVE
               00244                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B_NEGATIVE
4DD4 D017          M         bra     label
               00245 
               00246                         ;; YES - VALUE @ LCD IS POSITIVE (or zero)
               00247                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B_ZERO_AND_POSITIVE
4DD6 D000          M         bra     label
               00248 
               00249 
4DD8           00250 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B_ZERO_AND_POSITIVE
               00251 
               00252                         ;; PRINT LCD LINE3 POSIVE VALUE
               00253                         ; CLEAR ROW3
               00254                         TABLE_ADDR LCD_CLEAR_ROW3                       
4DD8 0E96          M         movlw   LOW(addr)               ; store Lo Byte
4DDA 6EF6          M         movwf   TBLPTRL
4DDC 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4DDE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4DE0 EC9E F016 00255                         call    MIOS_LCD_PrintString
               00256                         ; PRINT TXT ROW3
               00257                         TABLE_ADDR TEXT_AY_MENU_ABC_TUNE_CHB_TUNE       
4DE4 0E18          M         movlw   LOW(addr)               ; store Lo Byte
4DE6 6EF6          M         movwf   TBLPTRL
4DE8 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4DEA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4DEC EC9E F016 00258                         call    MIOS_LCD_PrintString
               00259                         
               00260                         ;; calculate the *LCD* value
4DF0 0E07      00261                         movlw   OFFSET_COARSE_TUNE_IS_7
4DF2 5C27      00262                         subwf   AY_TONE_B_TUNE_COARSE_USER, W
               00263                         ;; save the result to MIOS_PARAMETER1
4DF4 6E03      00264                         movwf   MIOS_PARAMETER1
               00265                         
               00266                         ;; SET THE CURSOR POS
4DF6 0E18      00267                         movlw   LCD_ROW3 + 0x08
4DF8 EC88 F016 00268                         call    MIOS_LCD_CursorSet
               00269                                 ; WRITE USER COARSE TUNE TONE B to LCD
4DFC 5003      00270                                 movf            MIOS_PARAMETER1,W               
4DFE EC8E F016 00271                                 call            MIOS_LCD_PrintBCD1
               00272                                         
               00273                                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B
4E02 D022          M         bra     label
               00274         
               00275 
               00276 
4E04           00277 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B_NEGATIVE
               00278                         ;; WRITE USER DETUNE COARSE TONE B VALUE 
               00279                         ;; (is a NEGATIVE value) to  LCD LINE3 
               00280                                 
               00281                         ;; CLEAR ROW3   
               00282                         TABLE_ADDR LCD_CLEAR_ROW3                       
4E04 0E96          M         movlw   LOW(addr)               ; store Lo Byte
4E06 6EF6          M         movwf   TBLPTRL
4E08 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4E0A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4E0C EC9E F016 00283                         call    MIOS_LCD_PrintString
               00284                         
               00285                         ; PRINT ITEM ROW3
               00286                         TABLE_ADDR TEXT_AY_MENU_ABC_TUNE_CHB_TUNE       
4E10 0E18          M         movlw   LOW(addr)               ; store Lo Byte
4E12 6EF6          M         movwf   TBLPTRL
4E14 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4E16 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4E18 EC9E F016 00287                         call    MIOS_LCD_PrintString
               00288                         
               00289                         ; SET LCD POS FOR "-"
4E1C 0E16      00290                         movlw   LCD_ROW3 + 0x06                         
4E1E EC88 F016 00291                         call    MIOS_LCD_CursorSet
               00292                         ; WRITE "-" to LCD
4E22 0E2D      00293                         movlw   '-'
4E24 EC94 F016 00294                         call    MIOS_LCD_PrintChar      
               00295                 
               00296                         ;; :: MINUSZAHLBERECHNUNG FÜR DIE LCD ANZEIGE ::
               00297                         ;; Ziehe 0x07 (-OFFSET) vom COARSE TUNE REG A/B/C ab und berechne
               00298                         ;; die MINUSZAHL für die LCD Anzeige
               00299                         ;; 1) comf 0x07 (comf OFFSET ) = complement 0x07 = 0xF8 // 1er komplement bilden
               00300                         ;; 2) inc 0xF8 => 0xF9 //  2er komplemnt bilden
               00301                         ;; 3) add TUNE REG + 0xF9
               00302                         ;; 4) comf (TUNE REG + 0xF9) //  1er komplement bilden
               00303                         ;; 5) inc {comf (TUNE REG + 0xF9)} // 2er komplemnt bilden
               00304                         
               00305                         ;; : MEMO :
               00306                         ;; Die Prozedur ist notwendig da auf dem LCD
               00307                         ;; +/- Zahlen gewünscht sind - das bedeutet:
               00308                         ;; ...
               00309                         ;; LCD: +3 # DETUNE USER WERT ohne OFFSET:10 - 0x0A (Dieser Bereich wird hier nicht behandelt)
               00310                         ;; LCD: +2 # DETUNE USER WERT ohne OFFSET: 9 - 0x09 (Dieser Bereich wird hier nicht behandelt)
               00311                         ;; LCD: +1 # DETUNE USER WERT ohne OFFSET: 8 - 0x08 (Dieser Bereich wird hier nicht behandelt)
               00312                         ;; LCD:  0 # DETUNE USER WERT ohne OFFSET: 7 - 0x07 (Dieser Bereich wird hier nicht behandelt)
               00313                         ;; LCD: -1 # DETUNE USER WERT ohne OFFSET: 6 - 0x06 (Dieser Bereich ist hier relevant)
               00314                         ;; LCD: -2 # DETUNE USER WERT ohne OFFSET: 5 - 0x05 (Dieser Bereich ist hier relevant)
               00315                         ;; LCD: -3 # DETUNE USER WERT ohne OFFSET: 4 - 0x04 (Dieser Bereich ist hier relevant)
               00316                         ;; ....
               00317                         
               00318                         
4E28 0E07      00319                         movlw   OFFSET_COARSE_TUNE_IS_7  ; 7 => W
4E2A 6E03      00320                         movwf   MIOS_PARAMETER1                 ; W =>  MIOS_PARAMETER1
4E2C 1E03      00321                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4E2E 2A03      00322                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
4E30 5003      00323                         movf    MIOS_PARAMETER1, W              ; MIOS_PARAMETER1 => W
4E32 2427      00324                         addwf   AY_TONE_B_TUNE_COARSE_USER, W   ; AY_TONE_B_TUNE_COARSE_USER + W => W
4E34 6E03      00325                         movwf   MIOS_PARAMETER1                 ; W => MIOS_PARAMETER1
4E36 1E03      00326                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4E38 2A03      00327                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
               00328                 
               00329                         
               00330                         ; SET LCD POS
4E3A 0E18      00331                         movlw   LCD_ROW3 + 0x08                 
4E3C EC88 F016 00332                         call    MIOS_LCD_CursorSet
               00333                         ; WRITE the result to LCD
4E40 5003      00334                         movf    MIOS_PARAMETER1,W               
4E42 EC8E F016 00335                         call        MIOS_LCD_PrintBCD1                  
               00336                         
               00337                                 rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4E46 D000          M         bra     label
               00338                 
               00339 ;; ----[MAIN MENU TONE B - COARSE TUNE END]------------ 
               00340 
4E48           00341 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B
               00342 ;; ----[MAIN MENU TONE B - FINE (DE)TUNE]------------ 
               00343         ;; CHECK: IS USER DETUNE TONE B POSITIVE (+zero) or  NEGATIVE
4E48 0E7F      00344         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F
               00345         ;; USER DETUNE FINE TONE B > 127? (OFFSET = 128)
               00346         ;; 127 = -1
               00347         ;; 128 =  0
               00348         ;; 129 = +1
4E4A 6424      00349         cpfsgt  AY_TONE_B_TUNE_FINE_USER
               00350                         ;; NO - VALUE @ LCD WILL BE NEGATIVE
               00351                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B_NEGATIVE
4E4C D00B          M         bra     label
               00352 
               00353                         ;; YES - VALUE @ LCD WILL BE POSITIVE
               00354                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B_ZERO_AND_POSITIVE
4E4E D000          M         bra     label
               00355 
4E50           00356 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B_ZERO_AND_POSITIVE
               00357 
4E50 0E80      00358                         movlw   OFFSET_FINE_TUNE_IS_128
4E52 5C24      00359                         subwf   AY_TONE_B_TUNE_FINE_USER, W
4E54 6E03      00360                         movwf   MIOS_PARAMETER1
               00361                         
4E56 0E1D      00362                         movlw   LCD_ROW3 + 0x0d
4E58 EC88 F016 00363                         call    MIOS_LCD_CursorSet
               00364                         
4E5C 5003      00365                                 movf            MIOS_PARAMETER1,W               ; Print A COARSE TUNE + *LCD VALUE*
4E5E EC92 F016 00366                                 call            MIOS_LCD_PrintBCD3
               00367                 
               00368                                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C
4E62 D016          M         bra     label
               00369 
               00370 
               00371 
               00372         
4E64           00373 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B_NEGATIVE
               00374 
4E64 0E1C      00375                         movlw   LCD_ROW3 + 0x0c                         ; POS FOR "-"
4E66 EC88 F016 00376                         call    MIOS_LCD_CursorSet
               00377                 
4E6A 0E2D      00378                         movlw   '-'
4E6C EC94 F016 00379                         call    MIOS_LCD_PrintChar                      ; PRINT "-"
               00380                 
               00381                         ;; :: MINUSZAHLBERECHNUNG FÜR DIE LCD ANZEIGE ::
               00382                         ;; 1) comf 0x80 => complement 0x80 => 0x7F
               00383                         ;; 2) inc 0x7F => 0x80
               00384                         ;; 3) add TUNE REG + 0x80
               00385                         ;; 4) comf (TUNE REG + 0x80)
               00386                         ;; 5) inc {comf (TUNE REG + 0x80)}
               00387                         ;; 6) PRINT TO LCD: - (inc {comf (TUNE REG + 0x80)})
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00388                         
               00389                         ;; : MEMO :
               00390                         ;; Die Prozedur ist notwendig da auf dem LCD
               00391                         ;; +/- Zahlen gewünscht sind - das bedeutet:
               00392                         ;; ...
               00393                         ;; LCD: +3 # DETUNE USER WERT ohne OFFSET: 131 - 0x83 (Dieser Bereich wird hier nicht behandelt)
               00394                         ;; LCD: +2 # DETUNE USER WERT ohne OFFSET: 130 - 0x82 (Dieser Bereich wird hier nicht behandelt)
               00395                         ;; LCD: +1 # DETUNE USER WERT ohne OFFSET: 129 - 0x81 (Dieser Bereich wird hier nicht behandelt)
               00396                         ;; LCD:  0 # DETUNE USER WERT ohne OFFSET: 128 - 0x80 (Dieser Bereich wird hier nicht behandelt)
               00397                         ;; LCD: -1 # DETUNE USER WERT ohne OFFSET: 127 - 0x7F (Dieser Bereich ist hier relevant)
               00398                         ;; LCD: -2 # DETUNE USER WERT ohne OFFSET: 126 - 0x7E (Dieser Bereich ist hier relevant)
               00399                         ;; LCD: -3 # DETUNE USER WERT ohne OFFSET: 125 - 0x7D (Dieser Bereich ist hier relevant)
               00400                         ;; ....
               00401                         
4E70 0E80      00402                         movlw   OFFSET_FINE_TUNE_IS_128 ; 0x80 => W
4E72 6E03      00403                         movwf   MIOS_PARAMETER1                 ; W =>  MIOS_PARAMETER1
4E74 1E03      00404                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4E76 2A03      00405                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
4E78 5003      00406                         movf    MIOS_PARAMETER1, W              ; MIOS_PARAMETER1 => W
4E7A 2424      00407                         addwf   AY_TONE_B_TUNE_FINE_USER, W     ; AY_TONE_B_TUNE_FINE_USER + W => W
4E7C 6E03      00408                         movwf   MIOS_PARAMETER1                 ; W => MIOS_PARAMETER1
4E7E 1E03      00409                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4E80 2A03      00410                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
               00411                 
               00412                         
4E82 0E1D      00413                         movlw   LCD_ROW3 + 0x0d                 ; POS FOR TUNE VALUE
4E84 EC88 F016 00414                         call    MIOS_LCD_CursorSet
               00415                         
4E88 5003      00416                         movf    MIOS_PARAMETER1,W               
4E8A EC92 F016 00417                         call        MIOS_LCD_PrintBCD3                  ; Print TUNE-VALUE @ LCD
               00418                         
               00419                                 rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C
4E8E D000          M         bra     label
               00420                 
               00421 
               00422 ;; ----[MAIN MENU TONE B - FINE TUNE END]------------ 
               00423 
               00424 
               00425 
4E90           00426 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C        
               00427 ;; ----[MAIN MENU TONE C - COARSE TUNE]------------     
               00428         ;; CHECK POSITIVE / NEGATIVE TUNE
4E90 0E06      00429         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06
               00430         ;; TONE A COARSE TUNE > 6?
4E92 6428      00431         cpfsgt  AY_TONE_C_TUNE_COARSE_USER
               00432                         
               00433                         ;; NO - VALUE @ LCD WILL BE NEGATIVE
               00434                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C_NEGATIVE
4E94 D017          M         bra     label
               00435 
               00436                         ;; YES - VALUE @ LCD WILL BE POSITIVE
               00437                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C_ZERO_AND_POSITIVE
4E96 D000          M         bra     label
               00438 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00439 
               00440 
4E98           00441 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C_ZERO_AND_POSITIVE
               00442                         ;; PRINT LCD LINE4 POSIVE VALUE
               00443                         
               00444                         ; CLEAR ROW4
               00445                         TABLE_ADDR LCD_CLEAR_ROW4                       
4E98 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
4E9A 6EF6          M         movwf   TBLPTRL
4E9C 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4E9E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4EA0 EC9E F016 00446                         call    MIOS_LCD_PrintString
               00447                         
               00448                         ; PRINT ITEM ROW4
               00449                         TABLE_ADDR TEXT_AY_MENU_ABC_TUNE_CHC_TUNE       
4EA4 0E1E          M         movlw   LOW(addr)               ; store Lo Byte
4EA6 6EF6          M         movwf   TBLPTRL
4EA8 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4EAA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4EAC EC9E F016 00450                         call    MIOS_LCD_PrintString
               00451                         
               00452                         ;; calculate *LCD VALUE*
4EB0 0E07      00453                         movlw   OFFSET_COARSE_TUNE_IS_7
4EB2 5C28      00454                         subwf   AY_TONE_C_TUNE_COARSE_USER, W
4EB4 6E03      00455                         movwf   MIOS_PARAMETER1
               00456                         
               00457                         ;; SET LCD POS
4EB6 0E58      00458                         movlw   LCD_ROW4 + 0x08
4EB8 EC88 F016 00459                         call    MIOS_LCD_CursorSet
               00460                         
               00461                                 ; Print A COARSE TUNE *LCD VALUE*
4EBC 5003      00462                                 movf            MIOS_PARAMETER1,W               
4EBE EC8E F016 00463                                 call            MIOS_LCD_PrintBCD1
               00464                 
               00465                                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C
4EC2 D022          M         bra     label
               00466                 
               00467 
               00468 
4EC4           00469 LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C_NEGATIVE
               00470                         ;; PRINT LCD LINE4 NEGATIVE VALUE
               00471                         
               00472                         
               00473                         ; CLEAR ROW4
               00474                         TABLE_ADDR LCD_CLEAR_ROW4                       
4EC4 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4EC6 6EF6          M         movwf   TBLPTRL
4EC8 0E38          M         movlw   HIGH(addr)              ; store Hi Byte
4ECA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4ECC EC9E F016 00475                         call    MIOS_LCD_PrintString
               00476                         
               00477                         ;; WRITE LCD ITEM LINE4
               00478                         TABLE_ADDR TEXT_AY_MENU_ABC_TUNE_CHC_TUNE
4ED0 0E1E          M         movlw   LOW(addr)               ; store Lo Byte
4ED2 6EF6          M         movwf   TBLPTRL
4ED4 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
4ED6 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
4ED8 EC9E F016 00479                         call    MIOS_LCD_PrintString
               00480                         
               00481                         ; POS FOR "-"
4EDC 0E56      00482                         movlw   LCD_ROW4 + 0x06                         
4EDE EC88 F016 00483                         call    MIOS_LCD_CursorSet
               00484                         ; PRINT "-"
4EE2 0E2D      00485                         movlw   '-'
4EE4 EC94 F016 00486                         call    MIOS_LCD_PrintChar                      
               00487                 
               00488                         
               00489                         ;; :: MINUSZAHLBERECHNUNG FÜR DIE LCD ANZEIGE ::
               00490                         ;; Ziehe 0x07 vom TUNE REG A/B/C ab und errechne den
               00491                         ;; MINUSWERT für die LCD Anzeige:
               00492                         ;; 1) comf 0x07 => complement 0x07 => 0xF8
               00493                         ;; 2) inc 0xF8 => 0xF9
               00494                         ;; add TUNE REG + 0xF9
               00495                         ;; 3) comf (TUNE REG + 0xF9)
               00496                         ;; 4) inc {comf (TUNE REG + 0xF9)}
               00497                         
               00498                         
4EE8 0E07      00499                         movlw   OFFSET_COARSE_TUNE_IS_7 ; 7 => W
4EEA 6E03      00500                         movwf   MIOS_PARAMETER1                 ; W =>  MIOS_PARAMETER1
4EEC 1E03      00501                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4EEE 2A03      00502                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
4EF0 5003      00503                         movf    MIOS_PARAMETER1, W              ; MIOS_PARAMETER1 => W
4EF2 2428      00504                         addwf   AY_TONE_C_TUNE_COARSE_USER, W   ; AY_TONE_C_TUNE_COARSE_USER + W => W
4EF4 6E03      00505                         movwf   MIOS_PARAMETER1                 ; W => MIOS_PARAMETER1
4EF6 1E03      00506                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4EF8 2A03      00507                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
               00508                 ;; Nun ist das Resultat MIOS_PARAMETER1 in hinterlegt
               00509                         
4EFA 0E58      00510                         movlw   LCD_ROW4 + 0x08                 ; POS FOR TUNE VALUE
4EFC EC88 F016 00511                         call    MIOS_LCD_CursorSet
               00512                         
               00513                         ; WRITE VALUE => LCD
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4F00 5003      00514                         movf    MIOS_PARAMETER1,W               
4F02 EC8E F016 00515                         call        MIOS_LCD_PrintBCD1                  
               00516                         
               00517                                 rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C
4F06 D000          M         bra     label
               00518                 
               00519                
               00520 ;; ----[MAIN MENU TONE C - COARSE TUNE END]------------ 
               00521 
               00522 
               00523 
4F08           00524 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C
               00525 ;; ----[MAIN MENU TONE C - FINE TUNE]------------ 
               00526         ;; CHECK POSITIVE / NEGATIVE 
4F08 0E7F      00527         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F
               00528         ;; TONE A FINE DETUNE > 127?
4F0A 6425      00529         cpfsgt  AY_TONE_C_TUNE_FINE_USER
               00530                         ;; NO - VALUE @ LCD WILL BE NEGATIVE
               00531                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C_NEGATIVE
4F0C D00B          M         bra     label
               00532 
               00533                         ;; YES - VALUE @ LCD WILL BE 0 or POSITIVE
               00534                         rgoto LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C_ZERO_AND_POSITIVE
4F0E D000          M         bra     label
               00535 
4F10           00536 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C_ZERO_AND_POSITIVE
               00537                         ;; Berechnung des Pluswertes für die LCD Anzeige
               00538                         ;; Der Tune Wert bleibt davon unberührt
4F10 0E80      00539                         movlw   OFFSET_FINE_TUNE_IS_128
4F12 5C25      00540                         subwf   AY_TONE_C_TUNE_FINE_USER, W
4F14 6E03      00541                         movwf   MIOS_PARAMETER1
               00542                         
4F16 0E5D      00543                         movlw   LCD_ROW4 + 0x0d
4F18 EC88 F016 00544                         call    MIOS_LCD_CursorSet
               00545                         
4F1C 5003      00546                                 movf            MIOS_PARAMETER1,W               ; Print C FINE TUNE + *LCD VALUE*
4F1E EC92 F016 00547                                 call            MIOS_LCD_PrintBCD3
               00548                 
               00549                                         rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS1
4F22 D016          M         bra     label
               00550 
               00551 
               00552 
               00553         
4F24           00554 LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C_NEGATIVE
               00555                         ; POS FOR "-"
4F24 0E5C      00556                         movlw   LCD_ROW4 + 0x0c                         
4F26 EC88 F016 00557                         call    MIOS_LCD_CursorSet
               00558                         ; PRINT "-"
4F2A 0E2D      00559                         movlw   '-'
4F2C EC94 F016 00560                         call    MIOS_LCD_PrintChar                      
               00561                 
               00562                         ;; :: MINUSZAHLBERECHNUNG FÜR DIE LCD ANZEIGE ::
               00563                         ;; Ziehe 0x80 vom FINE TUNE REG A/B/C ab und berechne den Minuswert 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00564                         ;; für die LCD Anzeige
               00565                         
4F30 0E80      00566                         movlw   OFFSET_FINE_TUNE_IS_128 ; 0x80 => W
4F32 6E03      00567                         movwf   MIOS_PARAMETER1                 ; W =>  MIOS_PARAMETER1
4F34 1E03      00568                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4F36 2A03      00569                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
4F38 5003      00570                         movf    MIOS_PARAMETER1, W              ; MIOS_PARAMETER1 => W
4F3A 2425      00571                         addwf   AY_TONE_C_TUNE_FINE_USER, W     ; AY_TONE_C_TUNE_COARSE_USER + W => W
4F3C 6E03      00572                         movwf   MIOS_PARAMETER1                 ; W => MIOS_PARAMETER1
4F3E 1E03      00573                         comf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 1er komplement
4F40 2A03      00574                         incf    MIOS_PARAMETER1, F              ; MIOS_PARAMETER1 2er komplemnt
               00575                 
               00576                         
4F42 0E5D      00577                         movlw   LCD_ROW4 + 0x0d                 ; POS FOR TUNE VALUE
4F44 EC88 F016 00578                         call    MIOS_LCD_CursorSet
               00579                         
4F48 5003      00580                         movf    MIOS_PARAMETER1,W               
4F4A EC92 F016 00581                         call        MIOS_LCD_PrintBCD3                  ; Print TUNE-VALUE @ LCD
               00582                         
               00583                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS1
4F4E D000          M         bra     label
               00584                 
               00585 
               00586 ;; ----[MAIN MENU TONE C - FINE TUNE END]------------ 
               00587 
               00588 
               00589 ;; -----------------------------------------------------------------------------------
               00590 
               00591 
4F50           00592 LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS1
               00593 ;; MAIN MENU 2 => CH ABC TUNE:
               00594 ;; Show the POSITION of * [LCD: MAIN MENU EDIT POINTER] for Main Menu EDITING Posiotion
               00595 
               00596         ;; CH A COARSE:
               00597         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 1?
4F50 C201 F003 00598         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00599         
4F54 0E01      00600         movlw MENU_ITEM_POS1
4F56 6203      00601         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00602                         
               00603                 ;; NO
               00604                 rgoto LABEL_AY_MAIN_MENU_02_NOT_POS1
4F58 D008          M         bra     label
               00605 
               00606                 ;; YES
               00607                 rgoto LABEL_AY_MAIN_MENU_02_POS1
4F5A D000          M         bra     label
               00608 
               00609 
4F5C           00610 LABEL_AY_MAIN_MENU_02_POS1
               00611                 ;; CH A COARSE EDIT MODE *ON*
               00612                 ;; PRINT "*" ON EDIT POSITION1
4F5C 0E45      00613                 movlw   LCD_ROW2 + 5
4F5E EC88 F016 00614                 call    MIOS_LCD_CursorSet
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4F62 0E2A      00615                 movlw   '*'
4F64 EC94 F016 00616                 call    MIOS_LCD_PrintChar
               00617                         
               00618                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS2
4F68 D007          M         bra     label
               00619 
               00620 
4F6A           00621 LABEL_AY_MAIN_MENU_02_NOT_POS1
               00622                 ;; CH A COARSE EDIT MODE *OFF*
               00623                 ;; PRINT ":" ON EDIT POSITION1
4F6A 0E45      00624                 movlw   LCD_ROW2 + 5
4F6C EC88 F016 00625                 call    MIOS_LCD_CursorSet
4F70 0E3A      00626                 movlw   ':'
4F72 EC94 F016 00627                 call    MIOS_LCD_PrintChar
               00628                         
               00629                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS2
4F76 D000          M         bra     label
               00630 
               00631 
               00632         ;; --------------------------------
               00633         
4F78           00634 LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS2
               00635         ;; CH A FINE:
               00636         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 2?
4F78 C201 F003 00637         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00638         
4F7C 0E02      00639         movlw MENU_ITEM_POS2
4F7E 6203      00640         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00641                         
               00642                 ;; NO
               00643                 rgoto LABEL_AY_MAIN_MENU_02_NOT_POS2
4F80 D008          M         bra     label
               00644 
               00645                 ;; YES
               00646                 rgoto LABEL_AY_MAIN_MENU_02_POS2
4F82 D000          M         bra     label
               00647 
               00648 
4F84           00649 LABEL_AY_MAIN_MENU_02_POS2
               00650                 ;; EDIT MODE *ON* @ CH A FINE
               00651                 ;; PRINT "*" ON EDIT POSITION2
4F84 0E4B      00652                 movlw   LCD_ROW2 + 0x0b
4F86 EC88 F016 00653                 call    MIOS_LCD_CursorSet
4F8A 0E2A      00654                 movlw   '*'
4F8C EC94 F016 00655                 call    MIOS_LCD_PrintChar
               00656                         
               00657                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS3
4F90 D007          M         bra     label
               00658 
               00659 
4F92           00660 LABEL_AY_MAIN_MENU_02_NOT_POS2
               00661                 ;; EDIT MODE *OFF* @ CH A FINE
               00662                 ;; PRINT ":" ON EDIT POSITION2
4F92 0E4B      00663                 movlw   LCD_ROW2 + 0x0b
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4F94 EC88 F016 00664                 call    MIOS_LCD_CursorSet
4F98 0E3A      00665                 movlw   ':'
4F9A EC94 F016 00666                 call    MIOS_LCD_PrintChar
               00667                         
               00668                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS3
4F9E D000          M         bra     label
               00669 
               00670 
               00671         ;; --------------------------------
               00672 
               00673 
4FA0           00674 LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS3
               00675 
               00676         ;; CH B COARSE TUNE:
               00677         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 3?
4FA0 C201 F003 00678         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00679         
4FA4 0E03      00680         movlw MENU_ITEM_POS3
4FA6 6203      00681         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00682                         
               00683                 ;; NO
               00684                 rgoto LABEL_AY_MAIN_MENU_02_NOT_POS3
4FA8 D008          M         bra     label
               00685 
               00686                 ;; YES
               00687                 rgoto LABEL_AY_MAIN_MENU_02_POS3
4FAA D000          M         bra     label
               00688 
               00689 
4FAC           00690 LABEL_AY_MAIN_MENU_02_POS3
               00691                 ;; EDIT MODE *ON* @ CH B COARSE TUNE
               00692                 ;; PRINT "*" ON EDIT POSITION3
4FAC 0E15      00693                 movlw   LCD_ROW3 + 5
4FAE EC88 F016 00694                 call    MIOS_LCD_CursorSet
4FB2 0E2A      00695                 movlw   '*'
4FB4 EC94 F016 00696                 call    MIOS_LCD_PrintChar
               00697                         
               00698                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS4
4FB8 D007          M         bra     label
               00699 
               00700 
4FBA           00701 LABEL_AY_MAIN_MENU_02_NOT_POS3
               00702                 ;; EDIT MODE *OFF* @ CH B COARSE TUNE
               00703                 ;; PRINT ":" ON EDIT POSITION3
4FBA 0E15      00704                 movlw   LCD_ROW3 + 5
4FBC EC88 F016 00705                 call    MIOS_LCD_CursorSet
4FC0 0E3A      00706                 movlw   ':'
4FC2 EC94 F016 00707                 call    MIOS_LCD_PrintChar
               00708                         
               00709                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS4
4FC6 D000          M         bra     label
               00710 
               00711 
               00712         ;; --------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00713 
               00714 
               00715 
4FC8           00716 LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS4
               00717 
               00718         ;; CH B FINE TUNE:
               00719         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 4?
4FC8 C201 F003 00720         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00721         
4FCC 0E04      00722         movlw MENU_ITEM_POS4
4FCE 6203      00723         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00724                         
               00725                 ;; NO
               00726                 rgoto LABEL_AY_MAIN_MENU_02_NOT_POS4
4FD0 D008          M         bra     label
               00727 
               00728                 ;; YES
               00729                 rgoto LABEL_AY_MAIN_MENU_02_POS4
4FD2 D000          M         bra     label
               00730 
               00731 
4FD4           00732 LABEL_AY_MAIN_MENU_02_POS4
               00733                 ;; CH B FINE TUNE EDIT MODE *ON*
               00734                 ;; PRINT "*" ON EDIT POSITION4
4FD4 0E1B      00735                 movlw   LCD_ROW3 + 0x0b
4FD6 EC88 F016 00736                 call    MIOS_LCD_CursorSet
4FDA 0E2A      00737                 movlw   '*'
4FDC EC94 F016 00738                 call    MIOS_LCD_PrintChar
               00739                         
               00740                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS5
4FE0 D007          M         bra     label
               00741 
               00742 
4FE2           00743 LABEL_AY_MAIN_MENU_02_NOT_POS4
               00744                 ;; CH B FINE TUNE EDIT MODE *OFF*
               00745                 ;; PRINT ":" ON EDIT POSITION4
4FE2 0E1B      00746                 movlw   LCD_ROW3 + 0x0b
4FE4 EC88 F016 00747                 call    MIOS_LCD_CursorSet
4FE8 0E3A      00748                 movlw   ':'
4FEA EC94 F016 00749                 call    MIOS_LCD_PrintChar
               00750                         
               00751                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS5
4FEE D000          M         bra     label
               00752 
               00753 
               00754 ;;--------
               00755 
               00756 
4FF0           00757 LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS5
               00758 
               00759         ;; CH C COARSE TUNE:
               00760         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 5?
4FF0 C201 F003 00761         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00762         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
4FF4 0E05      00763         movlw MENU_ITEM_POS5
4FF6 6203      00764         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00765                         
               00766                 ;; NO
               00767                 rgoto LABEL_AY_MAIN_MENU_02_NOT_POS5
4FF8 D008          M         bra     label
               00768 
               00769                 ;; YES
               00770                 rgoto LABEL_AY_MAIN_MENU_02_POS5
4FFA D000          M         bra     label
               00771 
               00772 
4FFC           00773 LABEL_AY_MAIN_MENU_02_POS5
               00774                 ;; CH C COARSE TUNE EDIT MODE *ON*
               00775                 ;; PRINT "*" ON EDIT POSITION4
4FFC 0E55      00776                 movlw   LCD_ROW4 + 0x05
4FFE EC88 F016 00777                 call    MIOS_LCD_CursorSet
5002 0E2A      00778                 movlw   '*'
5004 EC94 F016 00779                 call    MIOS_LCD_PrintChar
               00780                         
               00781                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS6
5008 D007          M         bra     label
               00782 
               00783 
500A           00784 LABEL_AY_MAIN_MENU_02_NOT_POS5
               00785                 ;; CH C COARSE TUNE EDIT MODE *OFF*
               00786                 ;; PRINT ":" ON EDIT POSITION4
500A 0E55      00787                 movlw   LCD_ROW4 + 0x05
500C EC88 F016 00788                 call    MIOS_LCD_CursorSet
5010 0E3A      00789                 movlw   ':'
5012 EC94 F016 00790                 call    MIOS_LCD_PrintChar
               00791                         
               00792                                 rgoto LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS6
5016 D000          M         bra     label
               00793 
               00794 ;; -------
               00795 
5018           00796 LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS6
               00797         ;; CH C FINE TUNE:
               00798         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 6?
5018 C201 F003 00799         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00800         
501C 0E06      00801         movlw MENU_ITEM_POS6
501E 6203      00802         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00803                         
               00804                 ;; NO
               00805                 rgoto LABEL_AY_MAIN_MENU_02_NOT_POS6
5020 D008          M         bra     label
               00806 
               00807                 ;; YES
               00808                 rgoto LABEL_AY_MAIN_MENU_02_POS6
5022 D000          M         bra     label
               00809 
               00810 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5024           00811 LABEL_AY_MAIN_MENU_02_POS6
               00812                 ;; CH C FINE TUNE EDIT MODE *ON*
               00813                 ;; PRINT "*" ON EDIT POSITION4
5024 0E5B      00814                 movlw   LCD_ROW4 + 0x0b
5026 EC88 F016 00815                 call    MIOS_LCD_CursorSet
502A 0E2A      00816                 movlw   '*'
502C EC94 F016 00817                 call    MIOS_LCD_PrintChar
               00818                         
               00819                                 rgoto LABEL_AY_MAIN_MENU_02_DONE
5030 D007          M         bra     label
               00820 
               00821 
5032           00822 LABEL_AY_MAIN_MENU_02_NOT_POS6
               00823                 ;; CH C FINE TUNE EDIT MODE *OFF*
               00824                 ;; PRINT ":" ON EDIT POSITION4
5032 0E5B      00825                 movlw   LCD_ROW4 + 0x0b
5034 EC88 F016 00826                 call    MIOS_LCD_CursorSet
5038 0E3A      00827                 movlw   ':'
503A EC94 F016 00828                 call    MIOS_LCD_PrintChar
               00829                         
               00830                                 rgoto LABEL_AY_MAIN_MENU_02_DONE
503E D000          M         bra     label
               00831 
               00832         
               00833 ;; --------------------------------
               00834 
5040           00835 LABEL_AY_MAIN_MENU_02_DONE
               00836         ;; END of MAIN MENU 2 ROUTINE
5040 0012      00837         return
               00838         
               00839         
               00057 #include "main_menu_03_mixer.inc"
               00001 ;; main_menu_03_mixer.inc
               00002 
               00003 ;; ----------------------------------------------------------------------------
               00004 ;; -------------------------[MB AY MENU 3: MIX CH ABC / FX / NOISE PERIOD]------------ 
               00005 ;; =======================> (F3 has been pressed)
               00006 
               00007 
               00008 ;; ---------------[WRITE MAIN MENU3 (MIXER) TO LCD]----------------------------------
               00009 
5042           00010 LABEL_AY_MAIN_MENU_03_ABC_MIXER
               00011         
5042 EC82 F016 00012         call    MIOS_LCD_Clear
               00013    
               00014         ;; PRINT MENUE MIXER [Fx] ON/OFF
               00015         TABLE_ADDR TEXT_AY_MENU_MIXER_FX_ON_OFF
5046 0E24          M         movlw   LOW(addr)               ; store Lo Byte
5048 6EF6          M         movwf   TBLPTRL
504A 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
504C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #endif
504E EC9E F016 00016         call    MIOS_LCD_PrintString
               00017         ;; PRINT LCD ROW 2 - TONE ABC on/off
               00018         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_NOISE_MIX
5052 0E44          M         movlw   LOW(addr)               ; store Lo Byte
5054 6EF6          M         movwf   TBLPTRL
5056 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5058 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
505A EC9E F016 00019         call    MIOS_LCD_PrintString
               00020         ;; PRINT LCD ROW 3 MIX - add noise
               00021         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_NOISE_MIX2
505E 0E66          M         movlw   LOW(addr)               ; store Lo Byte
5060 6EF6          M         movwf   TBLPTRL
5062 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5064 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5066 EC9E F016 00022         call    MIOS_LCD_PrintString
               00023         ;; LCD ROW 4 - SHOW AY NOISE PERIOD
               00024         TABLE_ADDR TEXT_AY_MENU_NOISE_PERIOD
506A 0E8A          M         movlw   LOW(addr)               ; store Lo Byte
506C 6EF6          M         movwf   TBLPTRL
506E 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5070 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5072 EC9E F016 00025         call    MIOS_LCD_PrintString
               00026 
               00027 
               00028 ;; ---------------[CHECK: NOISE PERIOD = VELOCITY CONTROLED?]-------------------
               00029 
5076           00030 LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_A
               00031         ;; check if velosity control noise period => velocity from TONE A ?
               00032         ;; CHECK IF IT NOISE PERIOD IS CONTROLLED By VELOCITY from TONE A
               00033         ;; BIT Test 5, skip if set
5076 AA33      00034         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_A_ON_OFF
               00035                 ;; NO - CHECK TONE B
               00036                 rgoto LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_B
5078 D001          M         bra     label
               00037                 ;; YES - IT's TONE A - GO AND WRIT IT TO LCD
               00038                 rgoto LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_A_NOISE_PERIOD
507A D0F8          M         bra     label
               00039                 
               00040 
507C           00041 LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_B
               00042         ;; BIT Test 6, skip if set
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00043         ;; CHECK IF IT NOISE PERIOD IS CONTROLLED by VELOCITY from TONE B
507C AC33      00044         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_B_ON_OFF
               00045                 ;; NO - Check next Tone
               00046                 rgoto LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_C
507E D001          M         bra     label
               00047                 ;; YES - IT's TONE B - GO AND WRIT IT TO LCD
               00048                 rgoto LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_B_NOISE_PERIOD
5080 D0FC          M         bra     label
               00049 
               00050 
5082           00051 LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_C
               00052         ;; BIT Test 7, skip if set
               00053         ;; CHECK IF IT NOISE PERIOD IS CONTROLLED BY VELOCITY from TONE C
5082 AE33      00054         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_C_ON_OFF
               00055                 ;; NO - NOW WE CHECKED TONE ABC
               00056                 ;; THERE WAS NO VELOCITY AT TONE ABC, SO
               00057                 ;; JUST WRITE THE NOISE PERIOD VALUE ON LCD
               00058                 rgoto LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VALUE_TO_LCD
5084 D001          M         bra     label
               00059                 ;; YES - IT's TONE C - GO AND WRIT IT TO LCD
               00060                 rgoto LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_C_NOISE_PERIOD
5086 D100          M         bra     label
               00061 
5088           00062 LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VALUE_TO_LCD
5088 0E5D      00063         movlw   LCD_ROW4 + 0x0d
508A EC88 F016 00064         call    MIOS_LCD_CursorSet
               00065         
               00066         ;; SHOW REVERSE VALUE ON LCD
               00067         ;; 0  => LCD 31
               00068         ;; 31 => LCD 0
508E 0E1F      00069         movlw NOISE_PERIOD_MAX_VALUE  ;; 31
5090 6E36      00070         movwf AY_R6_NOISE_PERIOD_REVERSE_VALUE
5092 506A      00071         movf AY_R6_NOISE_PERIOD, W
5094 5C36      00072         subwf AY_R6_NOISE_PERIOD_REVERSE_VALUE, W
               00073         ;; PRINT REVERSE NOISE PERIOD VALUE
               00074         ;; TO LCD 
5096 EC92 F016 00075         call        MIOS_LCD_PrintBCD3
               00076 
               00077 
               00078 ;; -----------------------[CHECK: FX A|B|C ON or OFF]---------------------------------------            
               00079 
               00080 
509A           00081 LABEL_AY_MENU_FX_A
               00082         
               00083         ;; IS FX @ A ON OR OFF? (BIT0 SET or CLEAR?)
               00084         ;; btfsc = Überspringe wenn BIT0 = 0 ist
509A B04D      00085         btfsc FX_USER_ON_OFF_ABC, BIT0_FX_ON_OFF_TONE_A
               00086                 
               00087                 ;; NO, BIT0 = 1  
               00088                 ;; SO FX @ CH A IS ENABLED 
               00089                 rgoto  LABEL_AY_MENU_FX_A_ON
509C D070          M         bra     label
               00090                 
               00091                 ;; YES, BIT0 = 0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00092                 ;; FX @ CH A IS NOT ENABLED 
               00093                 rgoto LABEL_AY_MENU_FX_A_OFF
509E D068          M         bra     label
               00094 
50A0           00095 LABEL_AY_MENU_FX_B
               00096         
               00097         ;; IS FX @ B ON OR OFF? (BIT1 SET or CLEAR?)
50A0 B24D      00098         btfsc FX_USER_ON_OFF_ABC, BIT1_FX_ON_OFF_TONE_B
               00099                 
               00100                 ;; NO, BIT1 = 1  
               00101                 rgoto LABEL_AY_MENU_FX_B_ON
50A2 D07B          M         bra     label
               00102                 
               00103                 ;; YES, BIT1 = 0
               00104                 rgoto  LABEL_AY_MENU_FX_B_OFF
50A4 D073          M         bra     label
               00105 
50A6           00106 LABEL_AY_MENU_FX_C
               00107 
               00108         ;; IS FX @ C ON OR OFF? (BIT2 SET or CLEAR?)
50A6 B44D      00109         btfsc FX_USER_ON_OFF_ABC, BIT2_FX_ON_OFF_TONE_C
               00110                 
               00111                 ;; NO, BIT2 = 1  
               00112                 rgoto  LABEL_AY_MENU_FX_C_ON
50A8 D086          M         bra     label
               00113                 
               00114                 ;; YES, BIT2 = 0
               00115                 rgoto  LABEL_AY_MENU_FX_C_OFF   
50AA D07E          M         bra     label
               00116 
               00117         
               00118 
               00119 ;; -----------------------[CHECK: TONE A|B|C ON or OFF]---------------------------------------          
               00120 
               00121 
50AC           00122 LABEL_AY_MENU_MIX_A
               00123         
               00124         ;; IS TONE A ON OR OFF?
               00125         ;; btfsc: If bit 'b' in register ’f' is 0, then the
               00126         ;; next instruction is skipped
               00127         ;; IS BIT 0 IN AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?
50AC B020      00128         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT0_TONE_A_ON_OFF
               00129                 
               00130                 ;; NO - BIT0 IS *NOT* = 0
               00131                 ;; BIT0 = 1 => SO TONE A IS *NOT* ON 
               00132                 rgoto LABEL_AY_MENU_MIX_ABC_NOISE_A_NOT 
50AE D08A          M         bra     label
               00133                 
               00134                 ;; YES - BIT0 = 0
               00135                 ;; BIT0 = 0 => SO TONE A *IS* ON 
               00136                 rgoto LABEL_AY_MENU_MIX_ABC_NOISE_A_SET 
50B0 D090          M         bra     label
               00137 
50B2           00138 LABEL_AY_MENU_MIX_B
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00139 
               00140         ;; IS TONE B ON OR OFF?
               00141         ;; IS BIT 1 IN AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?
50B2 B220      00142         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF
               00143                 
               00144                 ;; NO - SO BIT1 *IS* SET
               00145                 rgoto LABEL_AY_MENU_MIX_ABC_NOISE_B_NOT
50B4 D095          M         bra     label
               00146                 
               00147                 ;; YES - SO BIT1 IS *NOT* SET
               00148                 rgoto  LABEL_AY_MENU_MIX_ABC_NOISE_B_SET
50B6 D09B          M         bra     label
               00149 
50B8           00150 LABEL_AY_MENU_MIX_C
               00151 
               00152         ;; IS TONE C ON OR OFF?
               00153         ;; IS BIT2 IN AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?
50B8 B420      00154         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_TONE_C_ON_OFF
               00155                 
               00156                 ;; NO - SO BIT2 *IS* SET
               00157                 rgoto   LABEL_AY_MENU_MIX_ABC_NOISE_C_NOT
50BA D0A0          M         bra     label
               00158                 
               00159                 ;; YES - SO BIT2 IS *NOT* SET
               00160                 rgoto   LABEL_AY_MENU_MIX_ABC_NOISE_C_SET
50BC D0A6          M         bra     label
               00161 
               00162 
               00163 
               00164 ;; -----------------------[CHECK: NOISE A|B|C ON or OFF]---------------------------------------         
               00165 
50BE           00166 LABEL_AY_MENU_NOISE_MIX_A
               00167         
               00168         ;; NOISE CH. A - ON OR OFF?
               00169         ;; IS BIT3 IN AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?
50BE B620      00170         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF
               00171                 
               00172                 ;; NO - SO BIT3 *IS* SET
               00173                 rgoto  LABEL_AY_MENU_MIX_NOISE_A_NOT
50C0 D0AB          M         bra     label
               00174                 
               00175                 ;; YES - SO BIT2 IS *NOT* SET
               00176                 rgoto  LABEL_AY_MENU_MIX_NOISE_A_SET
50C2 D0B1          M         bra     label
               00177 
               00178 
50C4           00179 LABEL_AY_MENU_NOISE_MIX_B
               00180         
               00181         ;; NOISE CH. B - ON OR OFF?
               00182         ;; IS BIT4 IN AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?
50C4 B820      00183         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF
               00184                 
               00185                 ;; NO - SO BIT4 *IS* SET
               00186                 rgoto  LABEL_AY_MENU_MIX_NOISE_B_NOT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
50C6 D0B6          M         bra     label
               00187                 
               00188                 ;; YES - SO BIT4 IS *NOT* SET
               00189                 rgoto   LABEL_AY_MENU_MIX_NOISE_B_SET
50C8 D0BC          M         bra     label
               00190 
               00191 
50CA           00192 LABEL_AY_MENU_NOISE_MIX_C
               00193         
               00194         ;; NOISE CH. C - ON OR OFF?
               00195         ;; ;; IS BIT5 IN AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?
50CA BA20      00196         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
               00197                 
               00198                 ;; NO - SO BIT5 *IS* SET
               00199                 rgoto LABEL_AY_MENU_MIX_NOISE_C_NOT 
50CC D0C1          M         bra     label
               00200                 
               00201                 ;; YES - SO BIT5 IS *NOT* SET
               00202                 rgoto  LABEL_AY_MENU_MIX_NOISE_C_SET
50CE D0C7          M         bra     label
               00203 
               00204 
               00205 
               00206 ;; -------------------[CHECK: ITEM POS @ MAIN MENU 3]------------------------------------
               00207 ;; -------------------[POS1 ?]------------------------------------
               00208 ;; ------------------------------
               00209 ;; MAIN MENU 3: MIXER ABC +NOISE
               00210 ;; Show the POSITION of * 
               00211 ;; [LCD: MAIN MENU EDIT POINTER] 
               00212 ;; for Main Menu EDITING Posiotion
               00213 
50D0           00214 LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS1
               00215         ;; POS1 = Fx TONE ABC on off 
               00216         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 1?
50D0 C202 F003 00217         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00218         
50D4 0E01      00219         movlw MENU_ITEM_POS1
50D6 6203      00220         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00221                         
               00222                 ;; NO
               00223                 rgoto LABEL_AY_MAIN_MENU_03_NOT_POS1
50D8 D008          M         bra     label
               00224 
               00225                 ;; YES
               00226                 rgoto LABEL_AY_MAIN_MENU_03_POS1
50DA D000          M         bra     label
               00227 
               00228 
50DC           00229 LABEL_AY_MAIN_MENU_03_POS1
               00230                 ;; EDITING MODE
               00231                 ;; PRINT "*" ON EDIT POSITION1
50DC 0E0C      00232                 movlw   LCD_ROW1 + 12
50DE EC88 F016 00233                 call    MIOS_LCD_CursorSet
50E2 0E2A      00234                 movlw   '*'
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
50E4 EC94 F016 00235                 call    MIOS_LCD_PrintChar
               00236                 
               00237                         rgoto LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS2
50E8 D007          M         bra     label
               00238 
               00239 
50EA           00240 LABEL_AY_MAIN_MENU_03_NOT_POS1
               00241                 ;; NO EDITING MODE 
               00242                 ;; PRINT ":" ON EDIT POSITION1
50EA 0E0C      00243                 movlw   LCD_ROW1 + 12
50EC EC88 F016 00244                 call    MIOS_LCD_CursorSet
50F0 0E3A      00245                 movlw   ':'
50F2 EC94 F016 00246                 call    MIOS_LCD_PrintChar
               00247                         
               00248                         rgoto LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS2
50F6 D000          M         bra     label
               00249 
               00250 
               00251 ;; -------------------[POS2 ?]------------------------------------
               00252 
50F8           00253 LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS2
               00254         
               00255         ;; EDITING MODE @ POS CH ABC TONE ON/OFF ?
               00256         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 2?
50F8 C202 F003 00257         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00258         
50FC 0E02      00259         movlw MENU_ITEM_POS2
50FE 6203      00260         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00261                         
               00262                 ;; NO
               00263                 rgoto LABEL_AY_MAIN_MENU_03_NOT_POS2
5100 D008          M         bra     label
               00264 
               00265                 ;; YES
               00266                 rgoto LABEL_AY_MAIN_MENU_03_POS2
5102 D000          M         bra     label
               00267 
               00268 
5104           00269 LABEL_AY_MAIN_MENU_03_POS2
               00270                 ;; EDITING MODE @ POS CH ABC TONE ON/OFF
               00271                 ;; PRINT "*" ON EDIT POSITION2
5104 0E4C      00272                 movlw   LCD_ROW2 + 12
5106 EC88 F016 00273                 call    MIOS_LCD_CursorSet
510A 0E2A      00274                 movlw   '*'
510C EC94 F016 00275                 call    MIOS_LCD_PrintChar
               00276                 
               00277                         rgoto LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS3
5110 D007          M         bra     label
               00278 
               00279 
5112           00280 LABEL_AY_MAIN_MENU_03_NOT_POS2
               00281                 ;; NO EDITING MODE @ POS CH ABC TONE ON/OFF 
               00282                 ;; PRINT ":" ON EDIT POSITION2
5112 0E4C      00283                 movlw   LCD_ROW2 + 12
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5114 EC88 F016 00284                 call    MIOS_LCD_CursorSet
5118 0E3A      00285                 movlw   ':'
511A EC94 F016 00286                 call    MIOS_LCD_PrintChar
               00287                         
               00288                         rgoto LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS3
511E D000          M         bra     label
               00289 
               00290 
               00291 ;; -------------------[POS3 ?]------------------------------------      
               00292         
5120           00293 LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS3
               00294 
               00295         ;; EDITING MODE @ ADD NOISE TO CH ABC ?
               00296         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 3?
5120 C202 F003 00297         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00298         
5124 0E03      00299         movlw MENU_ITEM_POS3
5126 6203      00300         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00301                         
               00302                 ;; NO
               00303                 rgoto LABEL_AY_MAIN_MENU_03_NOT_POS3
5128 D008          M         bra     label
               00304 
               00305                 ;; YES
               00306                 rgoto LABEL_AY_MAIN_MENU_03_POS3
512A D000          M         bra     label
               00307 
               00308 
               00309 
512C           00310 LABEL_AY_MAIN_MENU_03_POS3      
               00311                 ;; EDITING MODE @ ADD NOISE TO CH ABC
               00312                 ;; PRINT "*" ON EDIT POSITION3
512C 0E1C      00313                 movlw   LCD_ROW3 + 12
512E EC88 F016 00314                 call    MIOS_LCD_CursorSet
5132 0E2A      00315                 movlw   '*'
5134 EC94 F016 00316                 call    MIOS_LCD_PrintChar
               00317                 
               00318                 rgoto LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS4
5138 D007          M         bra     label
               00319 
               00320 
513A           00321 LABEL_AY_MAIN_MENU_03_NOT_POS3
               00322                 ;; NO EDITING MODE @ ADD NOISE TO CH ABC
               00323                 ;; PRINT ":" ON EDIT POSITION3
513A 0E1C      00324                 movlw   LCD_ROW3 + 12
513C EC88 F016 00325                 call    MIOS_LCD_CursorSet
5140 0E3A      00326                 movlw   ':'
5142 EC94 F016 00327                 call    MIOS_LCD_PrintChar
               00328                         
               00329                         rgoto LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS4
5146 D000          M         bra     label
               00330 
               00331 ;; -------------------[POS4 ?]------------------------------------
               00332 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5148           00333 LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS4
               00334 
               00335         ;; EDITING MODE @ NOISE PERIOD ?
               00336         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE = 4?
5148 C202 F003 00337         movff AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00338         
514C 0E04      00339         movlw MENU_ITEM_POS4
514E 6203      00340         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00341                         
               00342                 ;; NO
               00343                 rgoto LABEL_AY_MAIN_MENU_03_NOT_POS4
5150 D008          M         bra     label
               00344 
               00345                 ;; YES
               00346                 rgoto LABEL_AY_MAIN_MENU_03_POS4
5152 D000          M         bra     label
               00347 
               00348 
               00349 
5154           00350 LABEL_AY_MAIN_MENU_03_POS4
               00351                 ;; EDITING MODE @ NOISE PERIOD
               00352                 ;; PRINT "*" ON EDIT POSITION4
5154 0E5C      00353                 movlw   LCD_ROW4 + 12
5156 EC88 F016 00354                 call    MIOS_LCD_CursorSet
515A 0E2A      00355                 movlw   '*'
515C EC94 F016 00356                 call    MIOS_LCD_PrintChar
               00357                                 
               00358                                 ;; Exit Here
5160 0012      00359                                 return
               00360 
               00361 
5162           00362 LABEL_AY_MAIN_MENU_03_NOT_POS4
               00363                 ;; NO EDITING MODE @ NOISE PERIOD
               00364                 ;; PRINT ":" ON EDIT POSITION4
5162 0E5C      00365                 movlw   LCD_ROW4 + 12
5164 EC88 F016 00366                 call    MIOS_LCD_CursorSet
5168 0E3A      00367                 movlw   ':'
516A EC94 F016 00368                 call    MIOS_LCD_PrintChar
               00369                         
               00370                                 ;; Exit Here
516E 0012      00371                                 return
               00372 
               00373 
               00374 ;; --------------------------------------------------
               00375 ;; ---[END OF MAIN MENU3 ROUTINE]--------------------
               00376 
               00377 
               00378 
               00379 
               00380 
               00381 
               00382 ;; ---------------------------------------------------------------------------------------
               00383 ;; ----------[START LCD SUB ROUTINE FOR MENU: FX ABC / CH ABC / NOISE PERIOD]------------------
               00384 ;; ---------------------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00385 
               00386 
               00387 ;; ----------------[PRINT FX ABC on or off]--------------------------------------------
               00388 
               00389 ;; MIXER FX ITEM:
               00390 ;; PRINT "A" or "-" LCD ROW1 
               00391 ;; FX @ TONE A on or of
5170           00392 LABEL_AY_MENU_FX_A_OFF
               00393         TABLE_ADDR      TEXT_AY_MENU3_FX_A_OFF
5170 0E2C          M         movlw   LOW(addr)               ; store Lo Byte
5172 6EF6          M         movwf   TBLPTRL
5174 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5176 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5178 EC9E F016 00394         call    MIOS_LCD_PrintString
               00395         rgoto   LABEL_AY_MENU_FX_B
517C D791          M         bra     label
               00396 
517E           00397 LABEL_AY_MENU_FX_A_ON
               00398         TABLE_ADDR      TEXT_AY_MENU3_FX_A_ON
517E 0E30          M         movlw   LOW(addr)               ; store Lo Byte
5180 6EF6          M         movwf   TBLPTRL
5182 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5184 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5186 EC9E F016 00399         call    MIOS_LCD_PrintString
               00400         rgoto   LABEL_AY_MENU_FX_B
518A D78A          M         bra     label
               00401 
               00402 ;; PRINT "B" or "-" LCD ROW1 
               00403 ;; FX @ TONE B on or off
518C           00404 LABEL_AY_MENU_FX_B_OFF
               00405         TABLE_ADDR      TEXT_AY_MENU3_FX_B_OFF
518C 0E34          M         movlw   LOW(addr)               ; store Lo Byte
518E 6EF6          M         movwf   TBLPTRL
5190 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5192 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5194 EC9E F016 00406         call    MIOS_LCD_PrintString
               00407         rgoto   LABEL_AY_MENU_FX_C
5198 D786          M         bra     label
               00408 
519A           00409 LABEL_AY_MENU_FX_B_ON
               00410         TABLE_ADDR      TEXT_AY_MENU3_FX_B_ON
519A 0E38          M         movlw   LOW(addr)               ; store Lo Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
519C 6EF6          M         movwf   TBLPTRL
519E 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51A0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51A2 EC9E F016 00411         call    MIOS_LCD_PrintString
               00412         rgoto   LABEL_AY_MENU_FX_C
51A6 D77F          M         bra     label
               00413         
               00414 
               00415 ;; PRINT "C" or "-" LCD ROW1 
               00416 ;; FX @ TONE C on or off
51A8           00417 LABEL_AY_MENU_FX_C_OFF
               00418         TABLE_ADDR      TEXT_AY_MENU3_FX_C_OFF
51A8 0E3C          M         movlw   LOW(addr)               ; store Lo Byte
51AA 6EF6          M         movwf   TBLPTRL
51AC 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51AE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51B0 EC9E F016 00419         call    MIOS_LCD_PrintString
               00420         rgoto   LABEL_AY_MENU_MIX_A
51B4 D77B          M         bra     label
               00421 
51B6           00422 LABEL_AY_MENU_FX_C_ON
               00423         TABLE_ADDR      TEXT_AY_MENU3_FX_C_ON
51B6 0E40          M         movlw   LOW(addr)               ; store Lo Byte
51B8 6EF6          M         movwf   TBLPTRL
51BA 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51BC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51BE EC9E F016 00424         call    MIOS_LCD_PrintString
               00425         rgoto   LABEL_AY_MENU_MIX_A
51C2 D774          M         bra     label
               00426 
               00427 
               00428 
               00429 ;; ----------------[PRINT TONE ABC on or off]--------------------------------------------
               00430 
               00431 ;; JUMPED IN HERE FROM: MIX CH ABC 
               00432 ;; SEE: LABEL_AY_MENU_MIX_A
               00433 ;; PRINT "A" or "-" LCD ROW2 
               00434 ;; TONE A
51C4           00435 LABEL_AY_MENU_MIX_ABC_NOISE_A_NOT
               00436         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_A_NOT
51C4 0E4E          M         movlw   LOW(addr)               ; store Lo Byte
51C6 6EF6          M         movwf   TBLPTRL
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
51C8 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51CA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51CC EC9E F016 00437         call    MIOS_LCD_PrintString
               00438         rgoto   LABEL_AY_MENU_MIX_B
51D0 D770          M         bra     label
               00439 
51D2           00440 LABEL_AY_MENU_MIX_ABC_NOISE_A_SET
               00441         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_A_SET
51D2 0E52          M         movlw   LOW(addr)               ; store Lo Byte
51D4 6EF6          M         movwf   TBLPTRL
51D6 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51D8 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51DA EC9E F016 00442         call    MIOS_LCD_PrintString
               00443         rgoto   LABEL_AY_MENU_MIX_B
51DE D769          M         bra     label
               00444 
               00445 ;; SEE: LABEL_AY_MENU_MIX_B
               00446 ;; PRINT "B" or "-" LCD ROW2 
               00447 ;; TONE B
51E0           00448 LABEL_AY_MENU_MIX_ABC_NOISE_B_NOT
               00449         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_B_NOT
51E0 0E56          M         movlw   LOW(addr)               ; store Lo Byte
51E2 6EF6          M         movwf   TBLPTRL
51E4 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51E6 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51E8 EC9E F016 00450         call    MIOS_LCD_PrintString
               00451         rgoto   LABEL_AY_MENU_MIX_C
51EC D765          M         bra     label
               00452 
51EE           00453 LABEL_AY_MENU_MIX_ABC_NOISE_B_SET
               00454         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_B_SET
51EE 0E5A          M         movlw   LOW(addr)               ; store Lo Byte
51F0 6EF6          M         movwf   TBLPTRL
51F2 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
51F4 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
51F6 EC9E F016 00455         call    MIOS_LCD_PrintString
               00456         rgoto   LABEL_AY_MENU_MIX_C
51FA D75E          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 206


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00457         
               00458 
               00459 ;; PRINT "C" or "-" LCD ROW2 
               00460 ;; TONE C
51FC           00461 LABEL_AY_MENU_MIX_ABC_NOISE_C_NOT
               00462         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_C_NOT
51FC 0E5E          M         movlw   LOW(addr)               ; store Lo Byte
51FE 6EF6          M         movwf   TBLPTRL
5200 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5202 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5204 EC9E F016 00463         call    MIOS_LCD_PrintString
               00464         rgoto   LABEL_AY_MENU_NOISE_MIX_A
5208 D75A          M         bra     label
               00465 
520A           00466 LABEL_AY_MENU_MIX_ABC_NOISE_C_SET
               00467         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_C_SET
520A 0E62          M         movlw   LOW(addr)               ; store Lo Byte
520C 6EF6          M         movwf   TBLPTRL
520E 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5210 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5212 EC9E F016 00468         call    MIOS_LCD_PrintString
               00469         rgoto   LABEL_AY_MENU_NOISE_MIX_A
5216 D753          M         bra     label
               00470 
               00471 
               00472 ;; ----------------[PRINT NOISE ABC on or off]--------------------------------------------
               00473 
               00474 ;; PRINT IF NOISE IS ENABLED OR NOT
               00475 ;; PRINT "A" or "-" LCD ROW2 
               00476 ;; NOISE MIX CH. A
5218           00477 LABEL_AY_MENU_MIX_NOISE_A_NOT
               00478         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_NOISE_A_NOT
5218 0E72          M         movlw   LOW(addr)               ; store Lo Byte
521A 6EF6          M         movwf   TBLPTRL
521C 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
521E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5220 EC9E F016 00479         call    MIOS_LCD_PrintString
               00480         rgoto   LABEL_AY_MENU_NOISE_MIX_B
5224 D74F          M         bra     label
               00481 
               00482 
5226           00483 LABEL_AY_MENU_MIX_NOISE_A_SET
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 207


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00484         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_NOISE_A_SET
5226 0E76          M         movlw   LOW(addr)               ; store Lo Byte
5228 6EF6          M         movwf   TBLPTRL
522A 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
522C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
522E EC9E F016 00485         call    MIOS_LCD_PrintString
               00486         rgoto   LABEL_AY_MENU_NOISE_MIX_B
5232 D748          M         bra     label
               00487 
               00488 ;; PRINT "B" or "-" LCD ROW2 
               00489 ;; NOISE MIX CH. B
5234           00490 LABEL_AY_MENU_MIX_NOISE_B_NOT
               00491         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_NOISE_B_NOT
5234 0E7A          M         movlw   LOW(addr)               ; store Lo Byte
5236 6EF6          M         movwf   TBLPTRL
5238 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
523A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
523C EC9E F016 00492         call    MIOS_LCD_PrintString
               00493         rgoto   LABEL_AY_MENU_NOISE_MIX_C
5240 D744          M         bra     label
               00494 
               00495 
5242           00496 LABEL_AY_MENU_MIX_NOISE_B_SET
               00497         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_NOISE_B_SET
5242 0E7E          M         movlw   LOW(addr)               ; store Lo Byte
5244 6EF6          M         movwf   TBLPTRL
5246 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5248 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
524A EC9E F016 00498         call    MIOS_LCD_PrintString
               00499         rgoto   LABEL_AY_MENU_NOISE_MIX_C
524E D73D          M         bra     label
               00500 
               00501 
               00502 ;; PRINT "C" or "-" LCD ROW2 
               00503 ;; NOISE MIX CH. C
5250           00504 LABEL_AY_MENU_MIX_NOISE_C_NOT
               00505         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_NOISE_C_NOT
5250 0E82          M         movlw   LOW(addr)               ; store Lo Byte
5252 6EF6          M         movwf   TBLPTRL
5254 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5256 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 208


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5258 EC9E F016 00506         call    MIOS_LCD_PrintString
               00507         rgoto   LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS1
525C D739          M         bra     label
               00508 
               00509 
525E           00510 LABEL_AY_MENU_MIX_NOISE_C_SET
               00511         TABLE_ADDR TEXT_AY_MENU_TONE_ABC_MIX_NOISE_C_SET
525E 0E86          M         movlw   LOW(addr)               ; store Lo Byte
5260 6EF6          M         movwf   TBLPTRL
5262 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5264 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5266 EC9E F016 00512         call    MIOS_LCD_PrintString
               00513         rgoto   LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS1
526A D732          M         bra     label
               00514 
               00515 
               00516 ;; -----------------[IF VELOCITY TO NOISE PERIOD IS ACTIVATED]--------------------
               00517 ;; -----------------PRINT THIS INFORMATION ON LCD---------------------------------
               00518 
526C           00519 LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_A_NOISE_PERIOD
               00520                         TABLE_ADDR TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_A
526C 0E98          M         movlw   LOW(addr)               ; store Lo Byte
526E 6EF6          M         movwf   TBLPTRL
5270 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5272 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5274 EC9E F016 00521                         call    MIOS_LCD_PrintString
               00522                                 rgoto   LABEL_AY_MENU_FX_A
5278 D710          M         bra     label
               00523 
               00524                         
527A           00525 LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_B_NOISE_PERIOD
               00526                         TABLE_ADDR TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_B
527A 0E9E          M         movlw   LOW(addr)               ; store Lo Byte
527C 6EF6          M         movwf   TBLPTRL
527E 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5280 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5282 EC9E F016 00527                         call    MIOS_LCD_PrintString
               00528                                 rgoto   LABEL_AY_MENU_FX_A
5286 D709          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 209


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00529 
               00530 
5288           00531 LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_C_NOISE_PERIOD
               00532                         TABLE_ADDR TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_C
5288 0EA4          M         movlw   LOW(addr)               ; store Lo Byte
528A 6EF6          M         movwf   TBLPTRL
528C 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
528E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5290 EC9E F016 00533                         call    MIOS_LCD_PrintString
               00534                                 rgoto   LABEL_AY_MENU_FX_A
5294 D702          M         bra     label
               00535 
               00536 
               00537 ;; ---------------------[END LCD SUB ROUTINES]----------------------------------------
               00538 
               00539 
               00540 
               00058 #include "main_menu_04_amplitude.inc"
               00001 ;; main_menu_04_amplitude.inc
               00002 
               00003 
               00004 ;; FUNCTION:
               00005 ;; WRITE TONE ABC VOLUME (AMPLITUDE) MAIN MENU TO THE LCD
               00006 ;; CHECK IF ENVELOPE MODE IS ON - IF YES THAN PRINT [ENV.ON] (priority 1)
               00007 ;; CHECK IF VELOCITY TO VOLUME IS ON - IF YES THAN PRINT [VELOCITY] (priority 2)
               00008 ;; CHECK THE AMPLITUDE/VOLUME - PRINT THE VALUE (0-15) ON LCD (priority 3)
               00009 
               00010 ;; ----------------------------------------------------------------------------
               00011 ;; -------------------------[MB AY MENU 4: TONE ABC VOLUME/AMPLITUDE]----------------------------- 
               00012 ;; ========================= F4 = MAIN MENU 4 SHORTCUT
               00013 
               00014 
5296           00015 LABEL_AY_MAIN_MENU_04_ABC_AMPLITUDE
               00016 
               00017 ;; ------[AMPLITUDE CH A]-------
               00018 
5296           00019 LABEL_AY_MENU_AMPLITUDE_CH_A
5296 EC82 F016 00020         call    MIOS_LCD_Clear
               00021    
               00022         ;; PRINT MENUE HEADLINE (LCD ROW1)
               00023         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_HEADLINE
529A 0EAA          M         movlw   LOW(addr)               ; store Lo Byte
529C 6EF6          M         movwf   TBLPTRL
529E 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
52A0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
52A2 EC9E F016 00024         call    MIOS_LCD_PrintString
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 210


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00025 
               00026 
               00027         ;; AMPLITUDE CH A
               00028         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_A
52A6 0EBC          M         movlw   LOW(addr)               ; store Lo Byte
52A8 6EF6          M         movwf   TBLPTRL
52AA 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
52AC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
52AE EC9E F016 00029         call    MIOS_LCD_PrintString
               00030 
52B2 0E4D      00031         movlw   LCD_ROW2 + 13
52B4 EC88 F016 00032         call    MIOS_LCD_CursorSet
               00033 
52B8 506C      00034         movf    AY_R8_CH_A_AMPLITUDE,W
52BA EC92 F016 00035         call        MIOS_LCD_PrintBCD3
               00036 
52BE           00037 LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY
               00038         ;; CHECK if VELOCITY @ TONE A is ON or OFF
               00039         ;; BIT0 CLEAR? 
52BE B033      00040         btfsc AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_VELOCITY_ON_OFF_TONE_A
               00041                 ;; NO - BIT0 = SET => VELOCITY TO VOLUME
               00042                 rgoto  LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY_ON
52C0 D001          M         bra     label
               00043                 ;; YES - BIT0 = CLEAR => VELOCITY IS *NOT* VOLUME
               00044                 rgoto  LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY_OFF
52C2 D007          M         bra     label
               00045 
               00046 
52C4           00047 LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY_ON
               00048                 TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_A_VELOC
52C4 0EF8          M         movlw   LOW(addr)               ; store Lo Byte
52C6 6EF6          M         movwf   TBLPTRL
52C8 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
52CA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
52CC EC9E F016 00049                 call    MIOS_LCD_PrintString
               00050                       rgoto LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_A
52D0 D001          M         bra     label
               00051 
52D2           00052 LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY_OFF
               00053                 rgoto LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_A
52D2 D000          M         bra     label
               00054 
               00055 
52D4           00056 LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_A
               00057         ;; IS ENVELOPE MODE (BIT4) ON OR OFF?
52D4 B86C      00058         btfsc AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 211


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00059               rgoto LABEL_AY_MENU_AMPLITUDE_MODE_CH_A_SET
52D6 D072          M         bra     label
               00060               rgoto LABEL_AY_MENU_AMPLITUDE_CH_B
52D8 D000          M         bra     label
               00061 
               00062 ;; ------[AMPLITUDE CH B]-------
               00063 
               00064         
52DA           00065 LABEL_AY_MENU_AMPLITUDE_CH_B
               00066         ;; AMPLITUDE CH B
               00067         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_B
52DA 0EC6          M         movlw   LOW(addr)               ; store Lo Byte
52DC 6EF6          M         movwf   TBLPTRL
52DE 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
52E0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
52E2 EC9E F016 00068         call    MIOS_LCD_PrintString
               00069         
52E6 0E1D      00070         movlw   LCD_ROW3 + 13
52E8 EC88 F016 00071         call    MIOS_LCD_CursorSet
               00072 
52EC 506D      00073         movf    AY_R9_CH_B_AMPLITUDE,W
52EE EC92 F016 00074               call   MIOS_LCD_PrintBCD3
               00075 
               00076 
52F2           00077 LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY
               00078         ;; BIT1 CLEAR? 
52F2 B233      00079         btfsc AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT1_VELOCITY_ON_OFF_TONE_B
               00080                 ;; NO - BIT1 = SET => VELOCITY TO VOLUME
               00081                 rgoto  LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY_ON
52F4 D001          M         bra     label
               00082                 ;; YES - BIT1 = CLEAR => VELOCITY IS *NOT* VOLUME
               00083                 rgoto  LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY_OFF
52F6 D007          M         bra     label
               00084 
               00085 
52F8           00086 LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY_ON
               00087                 TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_B_VELOC
52F8 0E02          M         movlw   LOW(addr)               ; store Lo Byte
52FA 6EF6          M         movwf   TBLPTRL
52FC 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
52FE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5300 EC9E F016 00088                 call    MIOS_LCD_PrintString
               00089                         rgoto LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_B
5304 D001          M         bra     label
               00090 
5306           00091 LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY_OFF
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 212


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00092                         rgoto LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_B
5306 D000          M         bra     label
               00093 
               00094 
               00095 
5308           00096 LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_B
               00097         ;; IS ENVELOPE MODE (BIT4) ON OR OFF?
5308 B86D      00098         btfsc AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00099                         rgoto LABEL_AY_MENU_AMPLITUDE_MODE_CH_B_SET
530A D05F          M         bra     label
               00100                         rgoto LABEL_AY_MENU_AMPLITUDE_CH_C
530C D000          M         bra     label
               00101 
               00102 ;; ------[AMPLITUDE CH C]-------
               00103         
530E           00104 LABEL_AY_MENU_AMPLITUDE_CH_C     
               00105         ;; AMPLITUDE CH C
               00106         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_C
530E 0ED0          M         movlw   LOW(addr)               ; store Lo Byte
5310 6EF6          M         movwf   TBLPTRL
5312 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
5314 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5316 EC9E F016 00107         call    MIOS_LCD_PrintString
               00108         
531A 0E5D      00109         movlw   LCD_ROW4 + 13
531C EC88 F016 00110         call    MIOS_LCD_CursorSet
               00111 
5320 506E      00112         movf    AY_R10_CH_C_AMPLITUDE,W
5322 EC92 F016 00113               call        MIOS_LCD_PrintBCD3
               00114 
               00115 
5326           00116 LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY
               00117         ;; IS VELOCITY TONE C ON or OFF
               00118         ;; BIT2 CLEAR? 
5326 B433      00119         btfsc AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT2_VELOCITY_ON_OFF_TONE_C
               00120                 ;; NO - BIT2 = SET => VELOCITY TO VOLUME
               00121                 rgoto  LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY_ON
5328 D001          M         bra     label
               00122                 ;; YES - BIT2 = CLEAR => VELOCITY IS *NOT* VOLUME
               00123                 rgoto  LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY_OFF
532A D007          M         bra     label
               00124 
532C           00125 LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY_ON
               00126                 TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_C_VELOC
532C 0E0C          M         movlw   LOW(addr)               ; store Lo Byte
532E 6EF6          M         movwf   TBLPTRL
5330 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5332 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 213


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movwf   TBLPTRU
                   M #endif
5334 EC9E F016 00127                 call    MIOS_LCD_PrintString
               00128                         rgoto LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_C
5338 D001          M         bra     label
               00129 
533A           00130 LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY_OFF
               00131                         rgoto LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_C
533A D000          M         bra     label
               00132 
               00133         
533C           00134 LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_C
               00135         ;; IS ENVELOPE MODE @ TONE C (BIT4) ON OR OFF?
533C B86E      00136         btfsc AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00137                         ;; ENVELOPE MODE ON
               00138                         rgoto LABEL_AY_MENU_AMPLITUDE_MODE_CH_C_SET
533E D04C          M         bra     label
               00139                         ;; ENVELOPE MODE OFF
               00140                         rgoto LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS1 ;; GO ON WITH POSITION of *
5340 D000          M         bra     label
               00141 
               00142 
               00143 ;; ------------------------
               00144 ;; MAIN MENU 4: AMPLITUDE ABC EDITING MODE...
               00145 ;; Show the POSITION of * [LCD: MAIN MENU EDIT POINTER] for Main Menu EDITING Posiotion
5342           00146 LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS1
               00147 
               00148         ;; EDITING MODE @ AMPLITUDE A?
               00149         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE = 1?
5342 C203 F003 00150         movff AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
               00151         
5346 0E01      00152         movlw MENU_ITEM_POS1
5348 6203      00153         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG   
               00154                 ;; NO
               00155                 rgoto LABEL_AY_MAIN_MENU_04_NOT_POS1
534A D008          M         bra     label
               00156                 ;; YES
               00157                 rgoto LABEL_AY_MAIN_MENU_04_POS1
534C D000          M         bra     label
               00158 
               00159 
534E           00160 LABEL_AY_MAIN_MENU_04_POS1
               00161                 ;; EDITING MODE @ AMPLITUDE A
               00162                 ;; PRINT "*" ON EDIT POSITION1
534E 0E47      00163                 movlw   LCD_ROW2 + 7
5350 EC88 F016 00164                 call    MIOS_LCD_CursorSet
5354 0E2A      00165                 movlw   '*'
5356 EC94 F016 00166                 call    MIOS_LCD_PrintChar
               00167                         
               00168                         rgoto LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS2
535A D007          M         bra     label
               00169 
               00170 
535C           00171 LABEL_AY_MAIN_MENU_04_NOT_POS1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 214


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00172                 ;; NO EDITING MODE @ AMPLITUDE A 
               00173                 ;; PRINT ":" ON EDIT POSITION1
535C 0E47      00174                 movlw   LCD_ROW2 + 7
535E EC88 F016 00175                 call    MIOS_LCD_CursorSet
5362 0E3A      00176                 movlw   ':'
5364 EC94 F016 00177                 call    MIOS_LCD_PrintChar
               00178                         
               00179                         rgoto LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS2
5368 D000          M         bra     label
               00180 
               00181 
               00182         
               00183         
536A           00184 LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS2
               00185 
               00186         ;; EDITING MODE @ AMPLITUDE B
               00187         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE = 2?
536A C203 F003 00188         movff AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
               00189         
536E 0E02      00190         movlw MENU_ITEM_POS2
5370 6203      00191         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00192                         
               00193                 ;; NO
               00194                 rgoto LABEL_AY_MAIN_MENU_04_NOT_POS2
5372 D008          M         bra     label
               00195 
               00196                 ;; YES
               00197                 rgoto LABEL_AY_MAIN_MENU_04_POS2
5374 D000          M         bra     label
               00198 
               00199 
               00200 
5376           00201 LABEL_AY_MAIN_MENU_04_POS2      
               00202                 ;; EDITING MODE @ AMPLITUDE B
               00203                 ;; PRINT "*" ON EDIT POSITION2
5376 0E17      00204                 movlw   LCD_ROW3 + 7
5378 EC88 F016 00205                 call    MIOS_LCD_CursorSet
537C 0E2A      00206                 movlw   '*'
537E EC94 F016 00207                 call    MIOS_LCD_PrintChar
               00208                         
               00209                         rgoto LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS3
5382 D007          M         bra     label
               00210 
               00211 
5384           00212 LABEL_AY_MAIN_MENU_04_NOT_POS2
               00213                 ;; NO EDITING MODE @ AMPLITUDE B
               00214                 ;; PRINT ":" ON EDIT POSITION2
5384 0E17      00215                 movlw   LCD_ROW3 + 7
5386 EC88 F016 00216                 call    MIOS_LCD_CursorSet
538A 0E3A      00217                 movlw   ':'
538C EC94 F016 00218                 call    MIOS_LCD_PrintChar
               00219                 
               00220                         rgoto LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS3
5390 D000          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 215


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00221 
               00222 
               00223 
5392           00224 LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS3
               00225         ;; EDITING MODE @ AMPLITUDE C?
               00226         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE = 3?
5392 C203 F003 00227         movff AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
               00228         
5396 0E03      00229         movlw MENU_ITEM_POS3
5398 6203      00230         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00231                 ;; NO
               00232                 rgoto LABEL_AY_MAIN_MENU_04_NOT_POS3
539A D008          M         bra     label
               00233                 ;; YES
               00234                 rgoto LABEL_AY_MAIN_MENU_04_POS3
539C D000          M         bra     label
               00235 
539E           00236 LABEL_AY_MAIN_MENU_04_POS3
               00237                 ;; EDITING MODE @ AMPLITUDE C
               00238                 ;; PRINT "*" ON EDIT POSITION3
539E 0E57      00239                 movlw   LCD_ROW4 + 7
53A0 EC88 F016 00240                 call    MIOS_LCD_CursorSet
53A4 0E2A      00241                 movlw   '*'
53A6 EC94 F016 00242                 call    MIOS_LCD_PrintChar
               00243                 
               00244                         rgoto LABEL_AY_MENU_AMPLITUDE_END
53AA D007          M         bra     label
               00245 
               00246 
53AC           00247 LABEL_AY_MAIN_MENU_04_NOT_POS3
               00248                 ;; NO EDITING MODE @ AMPLITUDE C
               00249                 ;; PRINT ":" ON EDIT POSITION2
53AC 0E57      00250                 movlw   LCD_ROW4 + 7
53AE EC88 F016 00251                 call    MIOS_LCD_CursorSet
53B2 0E3A      00252                 movlw   ':'
53B4 EC94 F016 00253                 call    MIOS_LCD_PrintChar
               00254                         
               00255                         rgoto LABEL_AY_MENU_AMPLITUDE_END
53B8 D000          M         bra     label
               00256 
53BA           00257 LABEL_AY_MENU_AMPLITUDE_END
               00258         ;; Exit here
53BA 0012      00259         return
               00260 
               00261 ;; -----------------------------------------------------------------------------
               00262 
               00263 
               00264 ;; SUB ROUTINE:
               00265 ;; --------------------------------------------------------------------------------------------------   
               00266 ;; [IF "RELATIVE AMPLITUDE MODE" IS SET SO WRITE AMPLITUDE MODE INFO OVER FIXED AMPLITUE VALUE ON LCD]
               00267 ;; ---------------------------------------------------------------------------------------------------
               00268 
               00269 
               00270 ;; WRITE TO LCD IF "AMPLITUDE MODE IS SET" - CH A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 216


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
53BC           00271 LABEL_AY_MENU_AMPLITUDE_MODE_CH_A_SET
               00272         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_A_ENV
53BC 0EDA          M         movlw   LOW(addr)               ; store Lo Byte
53BE 6EF6          M         movwf   TBLPTRL
53C0 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
53C2 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
53C4 EC9E F016 00273         call    MIOS_LCD_PrintString
               00274                 rgoto   LABEL_AY_MENU_AMPLITUDE_CH_B
53C8 D788          M         bra     label
               00275 
               00276 ;; WRITE TO LCD IF "AMPLITUDE MODE IS SET" - CH B
53CA           00277 LABEL_AY_MENU_AMPLITUDE_MODE_CH_B_SET
               00278         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_B_ENV
53CA 0EE4          M         movlw   LOW(addr)               ; store Lo Byte
53CC 6EF6          M         movwf   TBLPTRL
53CE 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
53D0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
53D2 EC9E F016 00279         call    MIOS_LCD_PrintString
               00280                 rgoto   LABEL_AY_MENU_AMPLITUDE_CH_C
53D6 D79B          M         bra     label
               00281 
               00282 
               00283 ;; WRITE TO LCD IF "AMPLITUDE MODE IS SET" - CH C
53D8           00284 LABEL_AY_MENU_AMPLITUDE_MODE_CH_C_SET   
               00285         TABLE_ADDR TEXT_AY_MENU_AMPLITUDE_CH_C_ENV
53D8 0EEE          M         movlw   LOW(addr)               ; store Lo Byte
53DA 6EF6          M         movwf   TBLPTRL
53DC 0E3A          M         movlw   HIGH(addr)              ; store Hi Byte
53DE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
53E0 EC9E F016 00286         call    MIOS_LCD_PrintString
               00287                 rgoto   LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS1 ;; GO ON WITH POSITION of *
53E4 D7AE          M         bra     label
               00288 
               00289 ;; --------[END SUB ROUTINE]
               00290 
               00291 
               00292         
               00059 #include "main_menu_05_envelope.inc"
               00001 ;; main_menu_05_envelope.inc
               00002 
               00003 
               00004 ;; ----------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 217


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00005 ;; -------------------------[MB AY MENU 5: ENVELOPE]----------------------------- 
               00006 ;; =======================> (F5 has been pressed)
               00007 
53E6           00008 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE
               00009         ;; print the envelope menu on LCD
               00010         ;; ------------------------------
53E6 EC82 F016 00011         call    MIOS_LCD_Clear
               00012    
               00013         ;; ENVELOPE TIME COASE
               00014         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_COASE
53EA 0E16          M         movlw   LOW(addr)               ; store Lo Byte
53EC 6EF6          M         movwf   TBLPTRL
53EE 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
53F0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
53F2 EC9E F016 00015         call    MIOS_LCD_PrintString
               00016         ;; SET CURSOR ROW1 ENV. TIME COASE
53F6 0E0D      00017         movlw   LCD_ROW1 + 0x0d
53F8 EC88 F016 00018         call    MIOS_LCD_CursorSet
53FC 5070      00019         movf    AY_R12_ENV_PERIOD_COARSE,W
53FE EC92 F016 00020         call    MIOS_LCD_PrintBCD3
               00021         
               00022         
               00023         ;; AY_R11_ENV_PERIOD_FINE 
               00024         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_FINE
5402 0E22          M         movlw   LOW(addr)               ; store Lo Byte
5404 6EF6          M         movwf   TBLPTRL
5406 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5408 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
540A EC9E F016 00025         call    MIOS_LCD_PrintString
               00026         ;; SET CURSOR FOR ENV. PERIOD TIME FINE 
540E 0E4D      00027         movlw   LCD_ROW2 + 0x0d
5410 EC88 F016 00028         call    MIOS_LCD_CursorSet
               00029             
5414 506F      00030         movf    AY_R11_ENV_PERIOD_FINE, W
5416 EC92 F016 00031         call    MIOS_LCD_PrintBCD3
               00032         
               00033         ;; PRINT MENUE ENVELOPE ENV. SHAPE VALUE
               00034         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE
541A 0E2E          M         movlw   LOW(addr)               ; store Lo Byte
541C 6EF6          M         movwf   TBLPTRL
541E 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5420 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 218


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5422 EC9E F016 00035         call    MIOS_LCD_PrintString
               00036 
               00037         ;; FUNCTION:
               00038         ;; 1) TRANSLATE ENV SHAPE 1-8 (ENV SHAPES) to 0-15 (AY CHIP REG) 
               00039         ;; 2) Write Value to AY_R13_ENV_SHAPE_CYCLE (but do not write the AY_R13_ENV_SHAPE_CYCLE
               00040         ;;    Value to AY Chip)
               00041         ;; 3) Set ENV CS LED
5426 ECA1 F02A 00042         call ENVELOPE_TRANSLATOR_CALL
               00043 
               00044 
               00045         ;; WRITE ENV 1|2|3|4|5|6|7|8 Text to LCD
542A ECE9 F02A 00046         call WRITE_ENV_NAME_TO_LCD_CALL
               00047 
               00048 
               00049 
               00050 
542E           00051 LABEL_AY_MENU_ENVELOPE_CHK_ENV_MODE_ABC
               00052 
               00053         ;; SHOW ON LCD TONE A,B and C MODE (ENV or VOLUME 0-15)
               00054         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE
542E 0E36          M         movlw   LOW(addr)               ; store Lo Byte
5430 6EF6          M         movwf   TBLPTRL
5432 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5434 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5436 EC9E F016 00055         call    MIOS_LCD_PrintString
               00056         
               00057 
543A           00058 LABEL_AY_MENU_ENVELOPE_CHK_MODE_A
               00059         
               00060         ;; IS ENVELOPE MODE (BIT4) ON OR OFF?
543A B86C      00061         btfsc AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00062                 ;; BIT 4 is SET
               00063                 rgoto LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_A
543C D058          M         bra     label
               00064                 ;; BIT 4 is CLEAR
               00065                 rgoto LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_A
543E D05E          M         bra     label
               00066 
5440           00067 LABEL_AY_MENU_ENVELOPE_CHK_MODE_B
               00068 
               00069         ;; IS ENVELOPE MODE (BIT4) ON OR OFF?
5440 B86D      00070         btfsc AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00071                 rgoto LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_B
5442 D063          M         bra     label
               00072                 rgoto LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_B
5444 D069          M         bra     label
               00073 
               00074 
               00075 
5446           00076 LABEL_AY_MENU_ENVELOPE_CHK_MODE_C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 219


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00077 
               00078         ;; IS ENVELOPE MODE (BIT4) ON OR OFF?
5446 B86E      00079         btfsc AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00080                 rgoto LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_C
5448 D06E          M         bra     label
               00081                 rgoto LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_C
544A D074          M         bra     label
               00082 
               00083 
               00084 
               00085 ;; -----------
               00086 ;; JUMP IN HEE FROM LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_C
               00087 ;; OR LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_C
               00088 ;; ------------------------
               00089 ;; MAIN MENU 5 = ENVELOPE ABC: CHECK THE EDITING MODE POSITION...
               00090 ;; Show the POSITION of * [LCD: MAIN MENU EDIT POINTER] for Main Menu EDITING Posiotion
544C           00091 LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS1
               00092 
               00093         ;; EDITING MODE @ ENV COASE PERIOD ?
               00094         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE = 1?
544C C204 F003 00095         movff AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
5450 0E01      00096         movlw MENU_ITEM_POS1    ; WRITE 1 TO WREG
5452 6203      00097         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00098                         
               00099                 ;; NO
               00100                 rgoto LABEL_AY_MAIN_MENU_05_NOT_POS1
5454 D008          M         bra     label
               00101 
               00102                 ;; YES
               00103                 rgoto LABEL_AY_MAIN_MENU_05_POS1
5456 D000          M         bra     label
               00104 
               00105 
5458           00106 LABEL_AY_MAIN_MENU_05_POS1
               00107         ;; EDITING MODE @ ENV COASE PERIOD
               00108         ;; PRINT "*" ON EDIT POSITION1
5458 0E0B      00109         movlw   LCD_ROW1 + 11
545A EC88 F016 00110         call    MIOS_LCD_CursorSet
545E 0E2A      00111         movlw   '*'
5460 EC94 F016 00112         call    MIOS_LCD_PrintChar
               00113                 
               00114                         rgoto LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS2
5464 D007          M         bra     label
               00115 
               00116 
5466           00117 LABEL_AY_MAIN_MENU_05_NOT_POS1
               00118         ;; NO EDITING MODE @ ENV COASE PERIOD
               00119         ;; PRINT ":" ON EDIT POSITION1
5466 0E0B      00120         movlw   LCD_ROW1 + 11
5468 EC88 F016 00121         call    MIOS_LCD_CursorSet
546C 0E3A      00122         movlw   ':'
546E EC94 F016 00123         call    MIOS_LCD_PrintChar
               00124                 
               00125                         rgoto LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 220


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5472 D000          M         bra     label
               00126 
               00127 
5474           00128 LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS2
               00129 
               00130         ;; EDITING MODE @ ENV FINE PERIOD
               00131         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE = 2?
5474 C204 F003 00132         movff AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
5478 0E02      00133         movlw MENU_ITEM_POS2    ; WRITE 2 TO WREG
547A 6203      00134         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00135                         
               00136                 ;; NO
               00137                 rgoto LABEL_AY_MAIN_MENU_05_NOT_POS2
547C D008          M         bra     label
               00138 
               00139                 ;; YES
               00140                 rgoto LABEL_AY_MAIN_MENU_05_POS2
547E D000          M         bra     label
               00141 
               00142 
               00143 
5480           00144 LABEL_AY_MAIN_MENU_05_POS2
               00145         ;; EDITING MODE @ ENV FINE PERIOD
               00146         ;; PRINT "*" ON EDIT POSITION1
5480 0E4B      00147         movlw   LCD_ROW2 + 11
5482 EC88 F016 00148         call    MIOS_LCD_CursorSet
5486 0E2A      00149         movlw   '*'
5488 EC94 F016 00150         call    MIOS_LCD_PrintChar
               00151                 
               00152                 rgoto LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS3
548C D007          M         bra     label
               00153 
               00154 
548E           00155 LABEL_AY_MAIN_MENU_05_NOT_POS2
               00156         ;; NO EDITING MODE @ ENV COASE PERIOD
               00157         ;; PRINT ":" ON EDIT POSITION1
548E 0E4B      00158         movlw   LCD_ROW2 + 11
5490 EC88 F016 00159         call    MIOS_LCD_CursorSet
5494 0E3A      00160         movlw   ':'
5496 EC94 F016 00161         call    MIOS_LCD_PrintChar
               00162                 
               00163                 rgoto LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS3
549A D000          M         bra     label
               00164 
               00165 
               00166         
549C           00167 LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS3
               00168 
               00169         ;; EDITING MODE @ ENV SHAPE?
               00170         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE = 3?
549C C204 F003 00171         movff AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
54A0 0E03      00172         movlw MENU_ITEM_POS3; WRITE 2 TO WREG
54A2 6203      00173         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00174                         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 221


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00175                 ;; NO
               00176                 rgoto LABEL_AY_MAIN_MENU_05_NOT_POS3
54A4 D008          M         bra     label
               00177 
               00178                 ;; YES
               00179                 rgoto LABEL_AY_MAIN_MENU_05_POS3
54A6 D000          M         bra     label
               00180 
               00181 
               00182 
54A8           00183 LABEL_AY_MAIN_MENU_05_POS3      
               00184         ;; EDITING MODE @ ENV SHAPE
               00185         ;; PRINT "*" ON EDIT POSITION2
54A8 0E15      00186         movlw   LCD_ROW3 + 5
54AA EC88 F016 00187         call    MIOS_LCD_CursorSet
54AE 0E2A      00188         movlw   '*'
54B0 EC94 F016 00189         call    MIOS_LCD_PrintChar
               00190                 
               00191                         rgoto LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS4
54B4 D007          M         bra     label
               00192 
               00193 
54B6           00194 LABEL_AY_MAIN_MENU_05_NOT_POS3
               00195         ;; NO EDITING MODE @ ENV SHAPE
               00196         ;; PRINT ":" ON EDIT POSITION2
54B6 0E15      00197         movlw   LCD_ROW3 + 5
54B8 EC88 F016 00198         call    MIOS_LCD_CursorSet
54BC 0E3A      00199         movlw   ':'
54BE EC94 F016 00200         call    MIOS_LCD_PrintChar
               00201                 
               00202                         rgoto LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS4
54C2 D000          M         bra     label
               00203 
               00204 
               00205 
54C4           00206 LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS4
               00207 
               00208         ;; EDITING MODE @ ENV R.MODE?
               00209         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE = 4?
54C4 C204 F003 00210         movff AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
54C8 0E04      00211         movlw MENU_ITEM_POS4    ; WRITE 4 TO WREG
54CA 6203      00212         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00213                         
               00214                 ;; NO
               00215                 rgoto LABEL_AY_MAIN_MENU_05_NOT_POS4
54CC D008          M         bra     label
               00216 
               00217                 ;; YES
               00218                 rgoto LABEL_AY_MAIN_MENU_05_POS4
54CE D000          M         bra     label
               00219 
               00220 
               00221 
54D0           00222 LABEL_AY_MAIN_MENU_05_POS4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 222


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00223         ;; EDITING MODE @ ENV R.MODE
               00224         ;; PRINT "*" ON EDIT POSITION3
54D0 0E5A      00225         movlw   LCD_ROW4 + 10
54D2 EC88 F016 00226         call    MIOS_LCD_CursorSet
54D6 0E2A      00227         movlw   '*'
54D8 EC94 F016 00228         call    MIOS_LCD_PrintChar
               00229                 
               00230                 rgoto LABEL_AY_MENU_ENVELOPE_CHK_MODE_END
54DC D007          M         bra     label
               00231 
               00232 
54DE           00233 LABEL_AY_MAIN_MENU_05_NOT_POS4
               00234         ;; NO EDITING MODE @ ENV R.MODE
               00235         ;; PRINT ":" ON EDIT POSITION3
54DE 0E5A      00236         movlw   LCD_ROW4 + 10
54E0 EC88 F016 00237         call    MIOS_LCD_CursorSet
54E4 0E3A      00238         movlw   ':'
54E6 EC94 F016 00239         call    MIOS_LCD_PrintChar
               00240                 
               00241                 rgoto LABEL_AY_MENU_ENVELOPE_CHK_MODE_END
54EA D000          M         bra     label
               00242 
               00243 ;; ---------END OF Show the POSITION of * ]--------------- 
               00244 
               00245 
54EC           00246 LABEL_AY_MENU_ENVELOPE_CHK_MODE_END
54EC 0012      00247         return
               00248 
               00249 
               00250 ;; -------------------------------------------------------
               00251 
               00252 
               00253 
               00254 ;; --------------------------------------------------------------------------   
               00255 ;; [IF "RELATIVE AMPLITUDE MODE" IS SET SO WRITE AMPLITUDE MODE VALUE ON LCD]
               00256 ;; ---------------------------[SUBROUTINE]------------------------------------  
               00257 
               00258         
54EE           00259 LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_A
               00260         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE_SET_A
54EE 0E42          M         movlw   LOW(addr)               ; store Lo Byte
54F0 6EF6          M         movwf   TBLPTRL
54F2 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
54F4 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
54F6 EC9E F016 00261         call    MIOS_LCD_PrintString
               00262                 rgoto   LABEL_AY_MENU_ENVELOPE_CHK_MODE_B
54FA D7A2          M         bra     label
               00263 
               00264 
54FC           00265 LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 223


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00266         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_A
54FC 0E4E          M         movlw   LOW(addr)               ; store Lo Byte
54FE 6EF6          M         movwf   TBLPTRL
5500 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5502 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5504 EC9E F016 00267         call    MIOS_LCD_PrintString
               00268                 rgoto   LABEL_AY_MENU_ENVELOPE_CHK_MODE_B
5508 D79B          M         bra     label
               00269 
               00270 
               00271 
550A           00272 LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_B
               00273         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE_SET_B
550A 0E46          M         movlw   LOW(addr)               ; store Lo Byte
550C 6EF6          M         movwf   TBLPTRL
550E 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5510 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5512 EC9E F016 00274         call    MIOS_LCD_PrintString
               00275                 rgoto   LABEL_AY_MENU_ENVELOPE_CHK_MODE_C
5516 D797          M         bra     label
               00276 
               00277 
5518           00278 LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_B
               00279         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_B
5518 0E52          M         movlw   LOW(addr)               ; store Lo Byte
551A 6EF6          M         movwf   TBLPTRL
551C 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
551E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5520 EC9E F016 00280         call    MIOS_LCD_PrintString
               00281                 rgoto   LABEL_AY_MENU_ENVELOPE_CHK_MODE_C
5524 D790          M         bra     label
               00282 
               00283 
5526           00284 LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_C
               00285         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE_SET_C
5526 0E4A          M         movlw   LOW(addr)               ; store Lo Byte
5528 6EF6          M         movwf   TBLPTRL
552A 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
552C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 224


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #endif
552E EC9E F016 00286         call    MIOS_LCD_PrintString
               00287                 ;; GO ON WITH CHK EDITING MODE "*"
               00288                 rgoto   LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS1 
5532 D78C          M         bra     label
               00289 
               00290 
5534           00291 LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_C
               00292         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_C
5534 0E56          M         movlw   LOW(addr)               ; store Lo Byte
5536 6EF6          M         movwf   TBLPTRL
5538 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
553A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
553C EC9E F016 00293         call    MIOS_LCD_PrintString
               00294                 ;; GO ON WITH CHK EDITING MODE "*"      
               00295                 rgoto   LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS1 
5540 D785          M         bra     label
               00296 
               00297 
               00298 
               00299 ;; ---------------------------------------
               00300 
               00301 
               00302 
5542           00303 ENVELOPE_TRANSLATOR_CALL
               00304 ;; USED BY MAIN MENU 5 and ENV MIDI Controller 
               00305 
               00306         ;; ENVELOPE SHAPE TOGGLE CALL
               00307 
               00308         ;; ENVELOPE SHAPES:
               00309         ;; => ENV_SHAPE_0_15_to_1_8_TRANSLATOR:
               00310         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 1 => AY_R13_ENV_SHAPE_CYCLE: 0-3   => \__          [LED 1]
               00311         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 2 => AY_R13_ENV_SHAPE_CYCLE: 4-7   => /|_          [LED 2]
               00312         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 3 => AY_R13_ENV_SHAPE_CYCLE: 8     => |\|\         [LED 3]
               00313         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 4 => AY_R13_ENV_SHAPE_CYCLE: 10    => \/\/\        [LED 4]
               00314         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 5 => AY_R13_ENV_SHAPE_CYCLE: 11    => \|           [LED 5]
               00315         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 6 => AY_R13_ENV_SHAPE_CYCLE: 12    => /|/|         [LED 6]
               00316         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 7 => AY_R13_ENV_SHAPE_CYCLE: 13    => /            [LED 7]
               00317         ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR: 8 => AY_R13_ENV_SHAPE_CYCLE: 14    => /\/\         [LED 8]
               00318 
               00319         ;; JUMP TO SHAPE
5542 507A      00320         movf ENV_SHAPE_0_15_to_1_8_TRANSLATOR, W
               00321         JUMPTABLE_2BYTES 9 ;; [0-8 => ENV SHAPE 1-8]
5544 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5546 B0D8          M         skpnc
5548 0EF7          M         movlw   -(max_value)
554A 0F09          M         addlw   max_value
554C ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00322                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_0_3     ;; if CC < 8 set ENV 1
5550 D008          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 225


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00323                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_0_3     ;; 1 [LED 1]
5552 D007          M         bra     label
               00324                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_4_7     ;; 2 [LED 2]
5554 D00D          M         bra     label
               00325                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_8       ;; 3 [LED 3]
5556 D013          M         bra     label
               00326                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_10      ;; 4 [LED 4]
5558 D019          M         bra     label
               00327                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_11      ;; 5 [LED 5]
555A D01F          M         bra     label
               00328                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_12      ;; 6 [LED 6]
555C D025          M         bra     label
               00329                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_13      ;; 7 [LED 7]
555E D02B          M         bra     label
               00330                 rgoto   LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_14      ;; 8 [LED 8]
5560 D031          M         bra     label
               00331                 
               00332         
               00333         
5562           00334 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_0_3
               00335         ;; SET ENV SHAPE 
5562 0E03      00336         movlw 0x03
5564 6E71      00337         movwf AY_R13_ENV_SHAPE_CYCLE
               00338         ;; SET CS LED
5566 ECF3 F03E 00339         call LED_Envelope_Shape_all_off
556A ECD3 F03E 00340         call LED_Envelope_Shape_1_on
556E 0012      00341                         return
               00342 
5570           00343 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_4_7
               00344         ;; SET ENV SHAPE
5570 0E07      00345         movlw 0x07
5572 6E71      00346         movwf AY_R13_ENV_SHAPE_CYCLE
               00347         ;; CS LED
5574 ECF3 F03E 00348         call LED_Envelope_Shape_all_off
5578 ECD7 F03E 00349         call LED_Envelope_Shape_2_on
557C 0012      00350                         return
               00351 
557E           00352 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_8
               00353         ;; SET ENV SHAPE
557E 0E08      00354         movlw 0x08
5580 6E71      00355         movwf AY_R13_ENV_SHAPE_CYCLE
               00356         ;; CS LED
5582 ECF3 F03E 00357         call LED_Envelope_Shape_all_off
5586 ECDB F03E 00358         call LED_Envelope_Shape_3_on
558A 0012      00359                         return
               00360 
               00361 
558C           00362 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_10
               00363         ;; SET ENV SHAPE
558C 0E0A      00364         movlw 0x0A
558E 6E71      00365         movwf AY_R13_ENV_SHAPE_CYCLE
               00366         ;; CS LED
5590 ECF3 F03E 00367         call LED_Envelope_Shape_all_off
5594 ECDF F03E 00368         call LED_Envelope_Shape_4_on
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 226


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5598 0012      00369                         return
               00370 
559A           00371 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_11
               00372         ;; SET ENV SHAPE
559A 0E0B      00373         movlw 0x0B
559C 6E71      00374         movwf AY_R13_ENV_SHAPE_CYCLE
               00375         ;; CS LED
559E ECF3 F03E 00376         call LED_Envelope_Shape_all_off
55A2 ECE3 F03E 00377         call LED_Envelope_Shape_5_on
55A6 0012      00378                         return
               00379 
               00380 
55A8           00381 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_12
               00382     ;; SET ENV SHAPE
55A8 0E0C      00383         movlw 0x0C
55AA 6E71      00384         movwf AY_R13_ENV_SHAPE_CYCLE
               00385         ;; CS LED
55AC ECF3 F03E 00386         call LED_Envelope_Shape_all_off
55B0 ECE7 F03E 00387         call LED_Envelope_Shape_6_on
55B4 0012      00388                         return
               00389 
55B6           00390 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_13
               00391         ;; SET ENV SHAPE
55B6 0E0D      00392         movlw 0x0D
55B8 6E71      00393         movwf AY_R13_ENV_SHAPE_CYCLE
               00394         ;; CS LED
55BA ECF3 F03E 00395         call LED_Envelope_Shape_all_off
55BE ECEB F03E 00396         call LED_Envelope_Shape_7_on
55C2 0012      00397                         return
               00398 
55C4           00399 LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_14
               00400         ;; SET ENV SHAPE
55C4 0E0E      00401         movlw 0x0E
55C6 6E71      00402         movwf AY_R13_ENV_SHAPE_CYCLE
               00403         ;; CS LED
55C8 ECF3 F03E 00404         call LED_Envelope_Shape_all_off
55CC ECEF F03E 00405         call LED_Envelope_Shape_8_on
55D0 0012      00406                         return
               00407 
               00408 
               00409 ;; ----------------------------------
               00410 
               00411 ;; WRITE ENV 1-8 Text to LCD
55D2           00412 WRITE_ENV_NAME_TO_LCD_CALL
               00413 
               00414 ;; WRITE THE ENV SHAPE NAME [1-8] TO LCD
55D2 507A      00415         movf ENV_SHAPE_0_15_to_1_8_TRANSLATOR, W
               00416         JUMPTABLE_2BYTES 9 ;; [0-8 => ENV SHAPE 1-8]
55D4 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
55D6 B0D8          M         skpnc
55D8 0EF7          M         movlw   -(max_value)
55DA 0F09          M         addlw   max_value
55DC ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00417                 rgoto   WRITE_ENV_01_TO_LCD     ;; ERROR - OUT OF RANGE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 227


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
55E0 D008          M         bra     label
               00418                 rgoto   WRITE_ENV_01_TO_LCD     ;; 1 [LED 1]
55E2 D007          M         bra     label
               00419                 rgoto   WRITE_ENV_02_TO_LCD     ;; 2 [LED 2]
55E4 D00D          M         bra     label
               00420                 rgoto   WRITE_ENV_03_TO_LCD     ;; 3 [LED 3]
55E6 D013          M         bra     label
               00421                 rgoto   WRITE_ENV_04_TO_LCD     ;; 4 [LED 4]
55E8 D019          M         bra     label
               00422                 rgoto   WRITE_ENV_05_TO_LCD     ;; 5 [LED 5]
55EA D01F          M         bra     label
               00423                 rgoto   WRITE_ENV_06_TO_LCD     ;; 6 [LED 6]
55EC D025          M         bra     label
               00424                 rgoto   WRITE_ENV_07_TO_LCD     ;; 7 [LED 7]
55EE D02B          M         bra     label
               00425                 rgoto   WRITE_ENV_08_TO_LCD     ;; 8 [LED 8]
55F0 D031          M         bra     label
               00426                 
               00427         
               00428         
55F2           00429 WRITE_ENV_01_TO_LCD
               00430         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_0_3
55F2 0E5A          M         movlw   LOW(addr)               ; store Lo Byte
55F4 6EF6          M         movwf   TBLPTRL
55F6 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
55F8 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
55FA EC9E F016 00431         call    MIOS_LCD_PrintString
55FE 0012      00432                 return
               00433 
5600           00434 WRITE_ENV_02_TO_LCD
               00435         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_4_7
5600 0E60          M         movlw   LOW(addr)               ; store Lo Byte
5602 6EF6          M         movwf   TBLPTRL
5604 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5606 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5608 EC9E F016 00436         call    MIOS_LCD_PrintString
560C 0012      00437                 return
               00438 
560E           00439 WRITE_ENV_03_TO_LCD
               00440         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_8
560E 0E6A          M         movlw   LOW(addr)               ; store Lo Byte
5610 6EF6          M         movwf   TBLPTRL
5612 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5614 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 228


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movwf   TBLPTRU
                   M #endif
5616 EC9E F016 00441         call    MIOS_LCD_PrintString
561A 0012      00442                 return
               00443 
561C           00444 WRITE_ENV_04_TO_LCD
               00445         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_10
561C 0E74          M         movlw   LOW(addr)               ; store Lo Byte
561E 6EF6          M         movwf   TBLPTRL
5620 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5622 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5624 EC9E F016 00446         call    MIOS_LCD_PrintString
5628 0012      00447                 return
               00448 
562A           00449 WRITE_ENV_05_TO_LCD
               00450         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_11
562A 0E80          M         movlw   LOW(addr)               ; store Lo Byte
562C 6EF6          M         movwf   TBLPTRL
562E 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5630 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5632 EC9E F016 00451         call    MIOS_LCD_PrintString
5636 0012      00452                 return
               00453 
               00454 
5638           00455 WRITE_ENV_06_TO_LCD
               00456         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_12
5638 0E88          M         movlw   LOW(addr)               ; store Lo Byte
563A 6EF6          M         movwf   TBLPTRL
563C 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
563E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5640 EC9E F016 00457         call    MIOS_LCD_PrintString
5644 0012      00458                 return
               00459 
5646           00460 WRITE_ENV_07_TO_LCD
               00461         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_13
5646 0E92          M         movlw   LOW(addr)               ; store Lo Byte
5648 6EF6          M         movwf   TBLPTRL
564A 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
564C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 229


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #endif
564E EC9E F016 00462         call    MIOS_LCD_PrintString
5652 0012      00463                 return
               00464 
5654           00465 WRITE_ENV_08_TO_LCD
               00466         TABLE_ADDR TEXT_AY_MENU_ENVELOPE_SHAPE_14
5654 0E96          M         movlw   LOW(addr)               ; store Lo Byte
5656 6EF6          M         movwf   TBLPTRL
5658 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
565A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
565C EC9E F016 00467         call    MIOS_LCD_PrintString
5660 0012      00468                 return
               00469 
               00060 #include "main_menu_06_midi_ch.inc"
               00001 ;; main_menu_06_midi_ch.inc
               00002 
               00003 
               00004 ;; ----------------------------------------------------------------------------
               00005 ;; -------------------------[MB AY MENU 6: MIDI CH A B C CONFIG]----------------------------- 
               00006 ;; =======================> (F6 has been pressed)
               00007 
               00008 
5662           00009 LABEL_AY_MAIN_MENU_06_MIDI_CONFIG
               00010 
5662 EC82 F016 00011         call    MIOS_LCD_Clear
               00012         
               00013         ;; LCD ROW 1 TO 4
               00014         TABLE_ADDR TEXT_AY_MIDI_CONFIG_ROW1
5666 0EA0          M         movlw   LOW(addr)               ; store Lo Byte
5668 6EF6          M         movwf   TBLPTRL
566A 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
566C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
566E EC9E F016 00015         call    MIOS_LCD_PrintString
               00016         
               00017         TABLE_ADDR TEXT_AY_MIDI_CONFIG_ROW2
5672 0EB2          M         movlw   LOW(addr)               ; store Lo Byte
5674 6EF6          M         movwf   TBLPTRL
5676 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5678 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
567A EC9E F016 00018         call    MIOS_LCD_PrintString
               00019         
567E 0E4E      00020         movlw   LCD_ROW2 + 14
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 230


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5680 EC88 F016 00021         call    MIOS_LCD_CursorSet
5684 5030      00022         movf    AY_TONE_A_MIDI_CHANNEL_USER, W
5686 0F01      00023         addlw   MIDI_CH_PLUS_1_OFFSETT ;; MIDI CH. 0-15 => 1 - 16
5688 EC90 F016 00024         call    MIOS_LCD_PrintBCD2
               00025         
               00026         TABLE_ADDR TEXT_AY_MIDI_CONFIG_ROW3
568C 0EC4          M         movlw   LOW(addr)               ; store Lo Byte
568E 6EF6          M         movwf   TBLPTRL
5690 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5692 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5694 EC9E F016 00027         call    MIOS_LCD_PrintString
               00028         
5698 0E1E      00029         movlw   LCD_ROW3 + 14
569A EC88 F016 00030         call    MIOS_LCD_CursorSet
569E 5031      00031         movf    AY_TONE_B_MIDI_CHANNEL_USER, W
56A0 0F01      00032         addlw   MIDI_CH_PLUS_1_OFFSETT ;; MIDI CH. 0-15 => 1 - 16
56A2 EC90 F016 00033         call    MIOS_LCD_PrintBCD2
               00034         
               00035         TABLE_ADDR TEXT_AY_MIDI_CONFIG_ROW4
56A6 0ED6          M         movlw   LOW(addr)               ; store Lo Byte
56A8 6EF6          M         movwf   TBLPTRL
56AA 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
56AC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
56AE EC9E F016 00036         call    MIOS_LCD_PrintString
               00037         
56B2 0E5E      00038         movlw   LCD_ROW4 + 14
56B4 EC88 F016 00039         call    MIOS_LCD_CursorSet
56B8 5032      00040         movf    AY_TONE_C_MIDI_CHANNEL_USER, W
56BA 0F01      00041         addlw   MIDI_CH_PLUS_1_OFFSETT ;; MIDI CH. 0-15 => 1 - 16
56BC EC90 F016 00042         call    MIOS_LCD_PrintBCD2
               00043 
               00044 
56C0           00045 LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS1
               00046 ;; Show the POSITION of * 
               00047 ;; [LCD: MAIN MENU EDIT POINTER] 
               00048 ;; for Main Menu EDITING Posiotion
               00049 ;; WHICH ITEM IS IN EDITING MODE?
               00050 
               00051         ;; EDITING MODE @ Tone A?
               00052         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG = 1?
56C0 C205 F003 00053         movff AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
56C4 0E01      00054         movlw MENU_ITEM_POS1    ; WRITE 1 TO WREG
56C6 6203      00055         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00056                         
               00057                 ;; NO
               00058                 rgoto LABEL_AY_MAIN_MENU_06_NOT_POS1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 231


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
56C8 D001          M         bra     label
               00059 
               00060                 ;; YES
               00061                 rgoto LABEL_AY_MAIN_MENU_06_POS1                
56CA D007          M         bra     label
               00062 
56CC           00063 LABEL_AY_MAIN_MENU_06_NOT_POS1
               00064         ;; NO EDITING MODE @ MIDI CH TONE A 
               00065         ;; PRINT ":" ON EDIT POSITION1
56CC 0E4C      00066         movlw   LCD_ROW2 + 12
56CE EC88 F016 00067         call    MIOS_LCD_CursorSet
56D2 0E3A      00068         movlw   ':'
56D4 EC94 F016 00069         call    MIOS_LCD_PrintChar
               00070                   rgoto LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS2
56D8 D007          M         bra     label
               00071 
               00072 
56DA           00073 LABEL_AY_MAIN_MENU_06_POS1
               00074         ;; EDITING MODE @ MIDI CH TONE A
               00075         ;; PRINT "*" ON EDIT POSITION1
56DA 0E4C      00076         movlw   LCD_ROW2 + 12
56DC EC88 F016 00077         call    MIOS_LCD_CursorSet
56E0 0E2A      00078         movlw   '*'
56E2 EC94 F016 00079         call    MIOS_LCD_PrintChar
               00080                   rgoto LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS2
56E6 D000          M         bra     label
               00081 
               00082 
56E8           00083 LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS2
               00084         ;; EDITING MODE @ MIDI CH Tone B?
               00085         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG = 2?
56E8 C205 F003 00086         movff AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
56EC 0E02      00087         movlw MENU_ITEM_POS2    ; WRITE 2 TO WREG
56EE 6203      00088         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00089                         
               00090                 ;; NO
               00091                 rgoto LABEL_AY_MAIN_MENU_06_NOT_POS2
56F0 D001          M         bra     label
               00092 
               00093                 ;; YES
               00094                 rgoto LABEL_AY_MAIN_MENU_06_POS2                
56F2 D007          M         bra     label
               00095 
56F4           00096 LABEL_AY_MAIN_MENU_06_NOT_POS2
               00097         ;; NO EDITING MODE @ MIDI CH TONE B 
               00098         ;; PRINT ":" ON EDIT POSITION 2
56F4 0E1C      00099         movlw   LCD_ROW3 + 12
56F6 EC88 F016 00100         call    MIOS_LCD_CursorSet
56FA 0E3A      00101         movlw   ':'
56FC EC94 F016 00102         call    MIOS_LCD_PrintChar
               00103                   rgoto LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS3
5700 D007          M         bra     label
               00104 
               00105 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 232


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5702           00106 LABEL_AY_MAIN_MENU_06_POS2
               00107         ;; EDITING MODE @ MIDI CH TONE B
               00108         ;; PRINT "*" ON EDIT POSITION 2
5702 0E1C      00109         movlw   LCD_ROW3 + 12
5704 EC88 F016 00110         call    MIOS_LCD_CursorSet
5708 0E2A      00111         movlw   '*'
570A EC94 F016 00112         call    MIOS_LCD_PrintChar
               00113                   rgoto LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS3
570E D000          M         bra     label
               00114 
               00115 
               00116 
               00117 
5710           00118 LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS3
               00119         ;; EDITING MODE @ MIDI CH Tone C?
               00120         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG = 3?
5710 C205 F003 00121         movff   AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
5714 0E03      00122         movlw   MENU_ITEM_POS3  ; WRITE 3 TO WREG
5716 6203      00123         cpfseq  MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00124                         
               00125                 ;; NO
               00126                 rgoto LABEL_AY_MAIN_MENU_06_NOT_POS3
5718 D001          M         bra     label
               00127 
               00128                 ;; YES
               00129                 rgoto LABEL_AY_MAIN_MENU_06_POS3                
571A D007          M         bra     label
               00130 
571C           00131 LABEL_AY_MAIN_MENU_06_NOT_POS3
               00132         ;; NO EDITING MODE @ MIDI CH TONE C 
               00133         ;; PRINT ":" ON EDIT POSITION 3
571C 0E5C      00134         movlw   LCD_ROW4 + 12
571E EC88 F016 00135         call    MIOS_LCD_CursorSet
5722 0E3A      00136         movlw   ':'
5724 EC94 F016 00137         call    MIOS_LCD_PrintChar
               00138                   rgoto LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_DONE
5728 D007          M         bra     label
               00139 
               00140 
572A           00141 LABEL_AY_MAIN_MENU_06_POS3
               00142         ;; EDITING MODE @ MIDI CH TONE C
               00143         ;; PRINT "*" ON EDIT POSITION 3
572A 0E5C      00144         movlw   LCD_ROW4 + 12
572C EC88 F016 00145         call    MIOS_LCD_CursorSet
5730 0E2A      00146         movlw   '*'
5732 EC94 F016 00147         call    MIOS_LCD_PrintChar
               00148                   rgoto LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_DONE
5736 D000          M         bra     label
               00149 
5738           00150 LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_DONE
               00151         
5738 0012      00152                 return
               00153 
               00154 ;; ------------------------[END OF MAIN MENU 6 FUNCTIONS]----------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 233


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00061 #include "main_menu_07_velocity_conf.inc"
               00001 ;; main_menu_07_velocity_conf.inc
               00002 
               00003 ;; ---------------------------------------------------------------------------------------
               00004 ;; -------------------------[MB AY MENU 7: MIDI VELOCITY A B C NOISE RATE CONFIG]---------- 
               00005 ;; =======================> (F6 has been pressed)
               00006 
               00007 
573A           00008 LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG
               00009 
573A           00010 LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_A
573A EC82 F016 00011         call    MIOS_LCD_Clear
               00012    
               00013         ;; PRINT - VELOCITY To TONE A - LCD ROW1
               00014         TABLE_ADDR TEXT_AY_VELOCITY_CONFIG_ROW1
573E 0EE8          M         movlw   LOW(addr)               ; store Lo Byte
5740 6EF6          M         movwf   TBLPTRL
5742 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5744 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
5746 EC9E F016 00015         call    MIOS_LCD_PrintString
               00016 
               00017         ;; SET CURSOR ROW1 VELOCITY TONE A
574A 0E0E      00018         movlw   LCD_ROW1 + 0x0e
574C EC88 F016 00019         call    MIOS_LCD_CursorSet
               00020         
               00021         ;; CHECK AY_VELOCITY_ON_OFF @TONE A
5750 A033      00022         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_VELOCITY_ON_OFF_TONE_A
               00023                 
               00024                 ;; NO, BIT IS NOT SET
               00025                 ;; NO VELOCITY TO VOLUME @ TONE A
               00026                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_A
5752 D001          M         bra     label
               00027         
               00028                 ;; YES - BIT IS SET
               00029                 ;; VELOCITY IS SET TO VOLUME @ TONE A
               00030                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_A
5754 D007          M         bra     label
               00031 
5756           00032 LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_A
5756 0E2D      00033         movlw   '-'
5758 EC94 F016 00034         call    MIOS_LCD_PrintChar
575C 0E2D      00035         movlw   '-'
575E EC94 F016 00036         call    MIOS_LCD_PrintChar
               00037               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_B
5762 D007          M         bra     label
               00038 
               00039 
5764           00040 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_A
5764 0E4F      00041         movlw   'O'
5766 EC94 F016 00042         call    MIOS_LCD_PrintChar
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 234


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
576A 0E4E      00043         movlw   'N'
576C EC94 F016 00044         call    MIOS_LCD_PrintChar
               00045               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_B
5770 D000          M         bra     label
               00046       
5772           00047 LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_B  
               00048         ;; PRINT - VELOCITY TO TONE B - LCD ROW2
               00049         TABLE_ADDR TEXT_AY_VELOCITY_CONFIG_ROW2
5772 0EF4          M         movlw   LOW(addr)               ; store Lo Byte
5774 6EF6          M         movwf   TBLPTRL
5776 0E3B          M         movlw   HIGH(addr)              ; store Hi Byte
5778 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
577A EC9E F016 00050         call    MIOS_LCD_PrintString
               00051 
               00052         ;; SET CURSOR ROW2 VELOCITY TONE B
577E 0E4E      00053         movlw   LCD_ROW2 + 0x0e
5780 EC88 F016 00054         call    MIOS_LCD_CursorSet
               00055         
               00056         ;; CHECK AY_VELOCITY_ON_OFF @TONE B
5784 A233      00057         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT1_VELOCITY_ON_OFF_TONE_B
               00058                 
               00059                 ;; NO, BIT IS NOT SET
               00060                 ;; NO VELOCITY TO VOLUME @ TONE B
               00061                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_B
5786 D001          M         bra     label
               00062         
               00063                 ;; YES - BIT IS SET
               00064                 ;; VELOCITY IS SET TO VOLUME @ TONE B
               00065                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_B
5788 D007          M         bra     label
               00066 
578A           00067 LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_B
578A 0E2D      00068         movlw   '-'
578C EC94 F016 00069         call    MIOS_LCD_PrintChar
5790 0E2D      00070         movlw   '-'
5792 EC94 F016 00071         call    MIOS_LCD_PrintChar
               00072               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_C
5796 D007          M         bra     label
               00073 
               00074 
5798           00075 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_B
5798 0E4F      00076         movlw   'O'
579A EC94 F016 00077         call    MIOS_LCD_PrintChar
579E 0E4E      00078         movlw   'N'
57A0 EC94 F016 00079         call    MIOS_LCD_PrintChar
               00080               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_C
57A4 D000          M         bra     label
               00081 
57A6           00082 LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_C 
               00083         ;; PRINT - VELOCITY TO TONE C-- LCD ROW3
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 235


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00084         TABLE_ADDR TEXT_AY_VELOCITY_CONFIG_ROW3
57A6 0E00          M         movlw   LOW(addr)               ; store Lo Byte
57A8 6EF6          M         movwf   TBLPTRL
57AA 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
57AC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
57AE EC9E F016 00085         call    MIOS_LCD_PrintString
               00086 
               00087         ;; SET CURSOR ROW3 VELOCITY TONE C
57B2 0E1E      00088         movlw   LCD_ROW3 + 0x0e
57B4 EC88 F016 00089         call    MIOS_LCD_CursorSet
               00090         
               00091         ;; CHECK AY_VELOCITY_ON_OFF @TONE C
57B8 A433      00092         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT2_VELOCITY_ON_OFF_TONE_C
               00093                 
               00094                 ;; NO, BIT IS NOT SET
               00095                 ;; NO VELOCITY TO VOLUME @ TONE C
               00096                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_C
57BA D001          M         bra     label
               00097         
               00098                 ;; YES - BIT IS SET
               00099                 ;; VELOCITY IS SET TO VOLUME @ TONE C
               00100                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_C
57BC D007          M         bra     label
               00101 
57BE           00102 LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_C
57BE 0E2D      00103         movlw   '-'
57C0 EC94 F016 00104         call    MIOS_LCD_PrintChar
57C4 0E2D      00105         movlw   '-'
57C6 EC94 F016 00106         call    MIOS_LCD_PrintChar
               00107               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_NOISE_RATE
57CA D007          M         bra     label
               00108 
               00109 
57CC           00110 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_C
57CC 0E4F      00111         movlw   'O'
57CE EC94 F016 00112         call    MIOS_LCD_PrintChar
57D2 0E4E      00113         movlw   'N'
57D4 EC94 F016 00114         call    MIOS_LCD_PrintChar
               00115               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_NOISE_RATE
57D8 D000          M         bra     label
               00116 
57DA           00117 LABEL_AY_MAIN_MENU_07_VELOCITY_NOISE_RATE
               00118         ;; PRINT - VELOCITY TO NOISE RATE - LCD ROW4
               00119         TABLE_ADDR TEXT_AY_VELOCITY_CONFIG_ROW4
57DA 0E0C          M         movlw   LOW(addr)               ; store Lo Byte
57DC 6EF6          M         movwf   TBLPTRL
57DE 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
57E0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 236


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movwf   TBLPTRU
                   M #endif
57E2 EC9E F016 00120         call    MIOS_LCD_PrintString
               00121 
               00122         
               00123         
               00124 ;;------------ CHECK AY_VELOCITY_ON_OFF @NOISE PERIOD]--------
57E6 A633      00125         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00126                 
               00127                 ;; NO, BIT IS NOT SET
               00128                 ;; NO VELOCITY TO RATE @ NOISE
               00129                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_NOISE_RATE
57E8 D001          M         bra     label
               00130         
               00131                 ;; YES - BIT IS SET
               00132                 ;; VELOCITY IS SET TO RATE @ NOISE
               00133                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE
57EA D00A          M         bra     label
               00134 
57EC           00135 LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_NOISE_RATE
               00136         ;; SET CURSOR ROW4 VELOCITY TO NOISE RATE
57EC 0E5E      00137         movlw   LCD_ROW4 + 0x0e
57EE EC88 F016 00138         call    MIOS_LCD_CursorSet
57F2 0E2D      00139         movlw   '-'
57F4 EC94 F016 00140         call    MIOS_LCD_PrintChar
57F8 0E2D      00141         movlw   '-'
57FA EC94 F016 00142         call    MIOS_LCD_PrintChar
               00143               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1
57FE D03A          M         bra     label
               00144 
               00145 
5800           00146 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE
               00147 
               00148         ;; CHECK VELOCITY NOISE RATE = TONE A
5800 AA33      00149         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               00150                 
               00151                 ;; NO, BIT5 IS NOT SET
               00152                 ;; CHECK TONE B
               00153                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_CHK_TONE_B
5802 D011          M         bra     label
               00154         
               00155                 ;; YES - BIT5 IS SET
               00156                 ;; VELOCITY IS @ TONE A
               00157                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_A
5804 D000          M         bra     label
               00158 
               00159 
5806           00160 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_A
               00161         ;; PRINT @ VELOCITY NOISE PERIOD: A ON 
5806 0E5C      00162         movlw   LCD_ROW4 + 0x0c
5808 EC88 F016 00163         call    MIOS_LCD_CursorSet
580C 0E41      00164         movlw   'A'
580E EC94 F016 00165         call    MIOS_LCD_PrintChar
               00166         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 237


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5812 0E5E      00167         movlw   LCD_ROW4 + 0x0e
5814 EC88 F016 00168         call    MIOS_LCD_CursorSet
5818 0E4F      00169         movlw   'O'
581A EC94 F016 00170         call    MIOS_LCD_PrintChar
581E 0E4E      00171         movlw   'N'
5820 EC94 F016 00172         call    MIOS_LCD_PrintChar
               00173               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1
5824 D027          M         bra     label
               00174 
               00175 
5826           00176 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_CHK_TONE_B
               00177         ;; CHECK VELOCITY NOISE RATE = TONE B
5826 AC33      00178         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               00179                 
               00180                 ;; NO, BIT6 IS NOT SET
               00181                 ;; CHECK TONE C
               00182                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_CHK_TONE_C
5828 D011          M         bra     label
               00183         
               00184                 ;; YES - BIT6 IS SET
               00185                 ;; VELOCITY IS @ TONE b
               00186                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_B
582A D000          M         bra     label
               00187 
582C           00188 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_B
               00189         ;; PRINT @ VELOCITY NOISE PERIOD: A ON 
582C 0E5C      00190         movlw   LCD_ROW4 + 0x0c
582E EC88 F016 00191         call    MIOS_LCD_CursorSet
5832 0E42      00192         movlw   'B'
5834 EC94 F016 00193         call    MIOS_LCD_PrintChar
               00194         
5838 0E5E      00195         movlw   LCD_ROW4 + 0x0e
583A EC88 F016 00196         call    MIOS_LCD_CursorSet
583E 0E4F      00197         movlw   'O'
5840 EC94 F016 00198         call    MIOS_LCD_PrintChar
5844 0E4E      00199         movlw   'N'
5846 EC94 F016 00200         call    MIOS_LCD_PrintChar
               00201               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1
584A D014          M         bra     label
               00202 
               00203 
584C           00204 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_CHK_TONE_C
               00205         ;; CHECK VELOCITY NOISE RATE = TONE C
584C AE33      00206         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               00207                 
               00208                 ;; NO, BIT7 IS NOT SET
               00209                 ;; ERROR
               00210                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_ERROR
584E D001          M         bra     label
               00211         
               00212                 ;; YES - BIT7 IS SET
               00213                 ;; VELOCITY IS @ TONE C
               00214                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_C
5850 D001          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 238


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00215 
5852           00216 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_ERROR
               00217         ;; ERROR - DONT WRITE TO LCD BUT GO ON
               00218         rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1
5852 D010          M         bra     label
               00219 
               00220 
5854           00221 LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_C
               00222         ;; PRINT @ VELOCITY NOISE PERIOD: A ON 
5854 0E5C      00223         movlw   LCD_ROW4 + 0x0c
5856 EC88 F016 00224         call    MIOS_LCD_CursorSet
585A 0E43      00225         movlw   'C'
585C EC94 F016 00226         call    MIOS_LCD_PrintChar
               00227         
5860 0E5E      00228         movlw   LCD_ROW4 + 0x0e
5862 EC88 F016 00229         call    MIOS_LCD_CursorSet
5866 0E4F      00230         movlw   'O'
5868 EC94 F016 00231         call    MIOS_LCD_PrintChar
586C 0E4E      00232         movlw   'N'
586E EC94 F016 00233         call    MIOS_LCD_PrintChar
               00234               rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1
5872 D000          M         bra     label
               00235         
               00236         
               00237 ;; -------------[CHECK EDITING MODE]----------
               00238 
5874           00239 LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1
               00240         ;; EDITING MODE @ VELOCITY TONE A?
               00241         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG = 1?
5874 C206 F003 00242         movff AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
5878 0E01      00243         movlw MENU_ITEM_POS1    ; WRITE 1 TO WREG
587A 6203      00244         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00245                         
               00246                 ;; NO
               00247                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_A
587C D008          M         bra     label
               00248 
               00249                 ;; YES
               00250                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_A
587E D000          M         bra     label
               00251 
               00252 
5880           00253 LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_A
               00254         ;; EDITING MODE @ VELOCITY TONE A
               00255         ;; PRINT "*" ON EDITING MODE POSITION
5880 0E0A      00256         movlw   LCD_ROW1 + 10
5882 EC88 F016 00257         call    MIOS_LCD_CursorSet
5886 0E2A      00258         movlw   '*'
5888 EC94 F016 00259               call    MIOS_LCD_PrintChar
               00260                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_2
588C D007          M         bra     label
               00261 
               00262 
588E           00263 LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 239


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00264         ;; NO EDITING MODE @ VELOCITY TONE A
               00265         ;; PRINT ":" ON EDIT POSITION1
588E 0E0A      00266         movlw   LCD_ROW1 + 10
5890 EC88 F016 00267         call    MIOS_LCD_CursorSet
5894 0E3A      00268         movlw   ':'
5896 EC94 F016 00269               call    MIOS_LCD_PrintChar
               00270                         rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_2
589A D000          M         bra     label
               00271 
               00272 ;;------------------
               00273 
589C           00274 LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_2
               00275         ;; EDITING MODE @ VELOCITY TONE B?
               00276         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG = 2?
589C C206 F003 00277         movff AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
58A0 0E02      00278         movlw MENU_ITEM_POS2    ; WRITE 2 TO WREG
58A2 6203      00279         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00280                         
               00281                 ;; NO
               00282                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_B
58A4 D008          M         bra     label
               00283 
               00284                 ;; YES
               00285                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_B
58A6 D000          M         bra     label
               00286 
               00287 
58A8           00288 LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_B
               00289         ;; EDITING MODE @ VELOCITY TONE B
               00290         ;; PRINT "*" ON EDITING MODE POSITION
58A8 0E4A      00291         movlw   LCD_ROW2 + 10
58AA EC88 F016 00292         call    MIOS_LCD_CursorSet
58AE 0E2A      00293         movlw   '*'
58B0 EC94 F016 00294               call    MIOS_LCD_PrintChar
               00295                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_3
58B4 D007          M         bra     label
               00296 
               00297 
58B6           00298 LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_B
               00299         ;; NO EDITING MODE @ VELOCITY TONE B
               00300         ;; PRINT ":" ON EDIT POSITION2
58B6 0E4A      00301         movlw   LCD_ROW2 + 10
58B8 EC88 F016 00302         call    MIOS_LCD_CursorSet
58BC 0E3A      00303         movlw   ':'
58BE EC94 F016 00304               call    MIOS_LCD_PrintChar
               00305                         rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_3
58C2 D000          M         bra     label
               00306 
               00307 ;; ------------
               00308 
58C4           00309 LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_3
               00310         ;; EDITING MODE @ VELOCITY TONE C?
               00311         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG = 3?
58C4 C206 F003 00312         movff AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 240


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
58C8 0E03      00313         movlw MENU_ITEM_POS3    ; WRITE 3 TO WREG
58CA 6203      00314         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00315                         
               00316                 ;; NO
               00317                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_C
58CC D008          M         bra     label
               00318 
               00319                 ;; YES
               00320                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_C
58CE D000          M         bra     label
               00321 
               00322 
58D0           00323 LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_C
               00324         ;; EDITING MODE @ VELOCITY TONE C
               00325         ;; PRINT "*" ON EDITING MODE POSITION
58D0 0E1A      00326         movlw   LCD_ROW3 + 10
58D2 EC88 F016 00327         call    MIOS_LCD_CursorSet
58D6 0E2A      00328         movlw   '*'
58D8 EC94 F016 00329               call    MIOS_LCD_PrintChar
               00330                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_4
58DC D007          M         bra     label
               00331 
               00332 
58DE           00333 LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_C
               00334         ;; NO EDITING MODE @ VELOCITY TONE C
               00335         ;; PRINT ":" ON EDIT POSITION3
58DE 0E1A      00336         movlw   LCD_ROW3 + 10
58E0 EC88 F016 00337         call    MIOS_LCD_CursorSet
58E4 0E3A      00338         movlw   ':'
58E6 EC94 F016 00339               call    MIOS_LCD_PrintChar
               00340                         rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_4
58EA D000          M         bra     label
               00341 
               00342 ;; ------------
               00343 
58EC           00344 LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_4
               00345 
               00346         ;; EDITING MODE @ NOISE RATE?
               00347         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG = 4?
58EC C206 F003 00348         movff AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
58F0 0E04      00349         movlw MENU_ITEM_POS4; WRITE 4 TO WREG
58F2 6203      00350         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00351                         
               00352                 ;; NO
               00353                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_NOISE_RATE
58F4 D008          M         bra     label
               00354 
               00355                 ;; YES
               00356                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_NOISE_RATE
58F6 D000          M         bra     label
               00357 
               00358 
58F8           00359 LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_NOISE_RATE
               00360         ;; EDITING MODE @ NOISE RATE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 241


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00361         ;; PRINT "*" ON EDITING MODE POSITION
58F8 0E5A      00362         movlw   LCD_ROW4 + 10
58FA EC88 F016 00363         call    MIOS_LCD_CursorSet
58FE 0E2A      00364         movlw   '*'
5900 EC94 F016 00365               call    MIOS_LCD_PrintChar
               00366                 rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG_END
5904 D007          M         bra     label
               00367 
               00368 
5906           00369 LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_NOISE_RATE
               00370         ;; NO EDITING MODE @ NOISE RATE
               00371         ;; PRINT ":" ON EDIT POSITION
5906 0E5A      00372         movlw   LCD_ROW4 + 10
5908 EC88 F016 00373         call    MIOS_LCD_CursorSet
590C 0E3A      00374         movlw   ':'
590E EC94 F016 00375               call    MIOS_LCD_PrintChar
               00376                         rgoto LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG_END
5912 D000          M         bra     label
               00377 
               00378 
               00379 ;; ------------
               00380 
5914           00381 LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG_END       
5914 0012      00382                 return
               00383 
               00384 ;; ------------------------[END OF MAIN MENU 7 FUNCTIONS]----------------------------------
               00385 
               00062 
               00063 
               00064 ;; ----[AY SUB MENU CODE]----------------------------
               00065 #include "sub_menu_functions.inc"
               00001 ;; -----------------------
               00002 ;; sub_menu_functions.inc
               00003 ;; -----------------------
               00004 
5916           00005 LABEL_SUB_MENUE_SWITCH
               00006 
               00007 ;; ----------[SUB MENU SWITCH]------------------
               00008 ;; ----------------------------------------------
               00009 ;; JUMP IN HERE FROM get_key.inc
               00010 ;; A KEY ON THE KEYBOARD HAS BEEN PRESSED
               00011 ;; AND A VALUE COULD HAVE BEEN WRITTEN TO:
               00012 ;; ==> AY_SUB_MENUE_KEY_SWITCH and/or to 
               00013 ;; ==> PATCH_NAME_ASC_KEY 
               00014 
               00015 
               00016         ;; -------------[PATCHNAME interception]--------------------------
               00017         ;; CHECK IF THERE IS A NEED FOR GOING TO 
               00018         ;; THE *WRITE THE PATCH NAME* SUBMENU ROUTINE
               00019         ;; @ Main MENU1 (write patch name @ Patch menu)
               00020         ;; MENU, ITEM an ASCII CODE KEY Checking for PATCH NAME WRITING
               00021         ;; @ eeprom_patch_name_writing.inc
5916 EFCF F021 00022         goto CHCK_NEED_FOR_PATCHNAME_EDITING
               00023         ;; -------------[END of WRITE PATCHNAME interception]----------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 242


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00024 
               00025 
               00026 ;; BRANCH TO SUB MENU FUNCTION 
               00027 ;; SUBMENU KEY => SUB MENU FUNCTION 
591A           00028 BRANCH_TO_SUB_MENUE_KEY
               00029 
               00030         ;; KEYBORAD: KEY HANDLING
               00031         ;; IF MAIN MENU KEY 
               00032         ;; IS = DEPRESSED (AY_KEY_STATE=1)
               00033         ;; THEN DO NOT EXECUTE A
               00034         ;; MAIN MENU FUNCTION
591A 0E00      00035         movlw 0x00                      ;; 0 = KEY PRESSED, 1 = DEPRESSED
591C 6277      00036         cpfseq SM_KEYB_KEY_STATE        ;; = 0?
               00037                 
               00038                 ;; NO, Exit Here
591E EFAF F02C 00039                 goto LABEL_AY_SUB_MENU_EXIT
               00040 
               00041                 ;; YES
               00042                 rgoto BRANCH_TO_SUB_MENUE_KEY_GO
5922 D000          M         bra     label
               00043 
               00044 
5924           00045 BRANCH_TO_SUB_MENUE_KEY_GO
               00046 
               00047         ;; YES KEY WAS PRESSED  
               00048         ;; ------[WHICH SUBMENU KEY HAT BEEN PRESSED?]-------------------
               00049         ;; JUMP TO SUB MENU KEY 
5924 5075      00050         movf AY_SUB_MENUE_KEY_SWITCH, W
               00051         JUMPTABLE_4BYTES 11     ;; [0 - 10]
5926 0FF5          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5928 B0D8          M         skpnc
592A 0012          M         return
592C 0F0B          M         addlw   (max_value)
592E ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
5932 EFAF F02C 00052                 goto        LABEL_AY_SUB_MENU_EXIT      ;; 0 ==> SKIP HERE
5936 EFB0 F02C 00053                 goto        LABEL_AY_SUB_MENU_UP        ;; 1 ==> sub_menu_key_up.inc - CUSOR UP etc
593A EF31 F02D 00054                 goto        LABEL_AY_SUB_MENU_DOWN      ;; 2 ==> sub_menu_key_down.inc - RETURN, CUSOR DOWN etc
593E EFBA F02D 00055                 goto        LABEL_AY_SUB_MENU_PLUS      ;; 3 ==> sub_menu_key_plus.inc - [+], CUSOR R etc
5942 EF5F F02F 00056                 goto        LABEL_AY_SUB_MENU_MINUS     ;; 4 ==> sub_menu_key_minus.inc - [-], CUSOR L etc
5946 EF07 F031 00057                 goto        LABEL_AY_SUB_MENU_A         ;; 5 ==> sub_menu_key_a.inc [SUB MENU KEY: [A]]
594A EF6A F031 00058                 goto        LABEL_AY_SUB_MENU_B         ;; 6 ==> sub_menu_key_b.inc [SUB MENU KEY: [B]]
594E EFC9 F031 00059                 goto        LABEL_AY_SUB_MENU_C         ;; 7 ==> sub_menu_key_c.inc [SUB MENU KEY: [C]]
5952 EF27 F01F 00060                 goto        PATCH_WRITE                 ;; 8 ==> patch_write.inc [SUB MENU KEY:    [W]]
5956 EF3E F020 00061                 goto        PATCH_LOAD                  ;; 9 ==> patch_load.inc [SUB MENU KEY:     [L]]
595A EF0B F01C 00062                 goto        FORMAT_BANKSTICK            ;;10 ==> format_bankstick.inc[SUB MENU KEY:[F]]
               00063                                                         ;; --    see allso patch_write.inc 
               00064 
               00065         ;; SUB FUNCTIONS:
               00066         ;; IF NO BUTTON MATCHED AY_SUB_MENUE_KEY_SWITCH = 0
               00067         ;; UP           - => AY_SUB_MENUE_KEY_SWITCH = 0x01 / SUB MENU FUNC.:EDITING MODE DEC. POS -1  
               00068         ;; DOWN         - => AY_SUB_MENUE_KEY_SWITCH = 0x02 / SUB MENU FUNC.:EDITING MODE INC. POS +1 
               00069         ;; + (PLUS)     - => AY_SUB_MENUE_KEY_SWITCH = 0x03 / SUB MENU FUNC.:VALUE = VALUE +1
               00070         ;; - (MINUS)    - => AY_SUB_MENUE_KEY_SWITCH = 0x04 / SUB MENU FUNC.:VALUE = VALUE -1
               00071         ;; A            - => AY_SUB_MENUE_KEY_SWITCH = 0x05 / TOGGLE TONE A @ TONE A USER MENU etc
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 243


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00072         ;; B            - => AY_SUB_MENUE_KEY_SWITCH = 0x06 / TOGGLE TONE B @ TONE B USER MENU etc 
               00073         ;; C            - => AY_SUB_MENUE_KEY_SWITCH = 0x07 / TOGGLE TONE C @ TONE C USER MENU etc      
               00074         ;; ...
               00075                           
               00076 
               00077 
               00078 ;; ----------[SUB MENU SWITCH END]-----------------------
               00079 ;; ------------------------------------------------------
               00080 
               00081 ;; -----[EXIT FROM SUB MENU FUNCTIONS]-------------------
595E           00082 LABEL_AY_SUB_MENU_EXIT
               00083         ;; NOTHING TO DO EXIT
595E 0012      00084         return
               00085 
               00086 
               00087 
               00066 #include "sub_menu_key_up.inc"
               00001 ;; sub_menu_key_up.inc
               00002 
               00003 ;; ----------------------------------------------------------------------------
               00004 ;; -------------------------[SUB MENU ROUTINE FOR UP]--------------------- 
               00005 ;; =======================> UP @ keyb_decoding.inc HAS BEEN PRESSED
               00006 
5960           00007 LABEL_AY_SUB_MENU_UP
               00008 
5960           00009 LABEL_AY_SUB_MENU_UP_CHK_MAINMENU
               00010         ;; 1) CHECK WHICH MAIN MENU IS ACTIVATED
               00011         ;; ==> VIA CURRENT_MAIN_MENU
               00012         ;;
               00013         ;; 2) GOTO THE NEEDED SUB ROUTINE OF THE ACTIVATED
               00014         ;;    MAIN MENU
               00015         
               00016 
5960 5074      00017         movf CURRENT_MAIN_MENU, W
               00018         JUMPTABLE_2BYTES 9 ;; [MENU 0 - 8]
5962 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5964 B0D8          M         skpnc
5966 0EF7          M         movlw   -(max_value)
5968 0F09          M         addlw   max_value
596A ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00019                 rgoto        SUB_MENU_UP_MAIN_MENU0
596E D008          M         bra     label
               00020                 rgoto        SUB_MENU_UP_MAIN_MENU1
5970 D008          M         bra     label
               00021                 rgoto        SUB_MENU_UP_MAIN_MENU2
5972 D015          M         bra     label
               00022                 rgoto        SUB_MENU_UP_MAIN_MENU3
5974 D022          M         bra     label
               00023                 rgoto        SUB_MENU_UP_MAIN_MENU4
5976 D02F          M         bra     label
               00024                 rgoto        SUB_MENU_UP_MAIN_MENU5
5978 D03C          M         bra     label
               00025                 rgoto        SUB_MENU_UP_MAIN_MENU6
597A D049          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 244


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00026                 rgoto        SUB_MENU_UP_MAIN_MENU7
597C D056          M         bra     label
               00027                 rgoto        SUB_MENU_UP_MAIN_MENU8
597E D063          M         bra     label
               00028                 
               00029 
               00030 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00031 ;; ----------------------------------------------------------------
               00032 
               00033 
               00034 ;; --------[UP @ MAIN MENU0]------------------
               00035 
5980           00036 SUB_MENU_UP_MAIN_MENU0
               00037         ;; UP @ MENU SWITCH MENU - NO Function
               00038         
5980 0012      00039                 return
               00040 
               00041 
               00042 ;; --------[UP @ MAIN MENU1]------------------
               00043 ;; -------------------------------------------
5982           00044 SUB_MENU_UP_MAIN_MENU1
               00045         ;; MAIN MENU1 = PATCH INFO MENU
               00046         ;; UPIS NEEDED HERE TO:
               00047         ;; DECREMENT EDITING MODE POSITION => "*"
               00048         ;; IN PATCH INFO MENU
               00049         ;; VIA:
               00050         ;; AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO 
               00051         ;; = AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO -1
               00052         
               00053         
               00054         ;; DEC AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
5982 C200 F003 00055         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
5986 0603      00056         decf    MIOS_PARAMETER1, F
5988 C003 F200 00057         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
               00058         
               00059         ;; CHECK:
               00060         ;; ITEM POS IS NOT ALLOWED TO BE = 0
               00061         ;; IS AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 0?
598C 0E00      00062         movlw   MENU_ITEM_POS0_NOT_VALID
598E 6203      00063         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00064 
               00065                                 ;; NO  (NOT POS 0)
               00066                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU1_DONE
5990 D004          M         bra     label
               00067 
               00068                 ;; YES, OK
               00069                 ;; POS 0 (NOT VALID) WILL BE SWITCHED TO POS 3
               00070                 ;; -------------------------------------------          
               00071                 ;; AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO = 0 (NOT VALID) SO 
               00072                 ;; AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO MUST BE SWITCHED TO 4 (LAST POS)
5992 0E03      00073                 movlw   MENU_ITEM_POS3
5994 6E03      00074                 movwf   MIOS_PARAMETER1
5996 C003 F200 00075                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
               00076                         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 245


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
599A           00077 LABEL_AY_SUB_MENU_UP_MAIN_MENU1_DONE
               00078                                 ;; SUB ROUTINE IS DONE - EXIT HERE
               00079                                 ;; JUMP TO MAIN MENU    
599A EF1E F025 00080                                 goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00081 
               00082 ;; ----- --------------------------[END: UP @ MAIN MENU1]------------------     
               00083                                 
               00084 
               00085 ;; ------------------------------[START: UP @ MAIN MENU2]------------------
599E           00086 SUB_MENU_UP_MAIN_MENU2
               00087         ;; MAIN MENU2 = TUNE MENU
               00088 
               00089         ;; UP IS NEEDED HERE TO:
               00090         ;; DECREMENT EDITING MODE POSITION => "*"
               00091                 
               00092         ;; DEC EDITING MODE POS "*" in MAIN MENU2
               00093         ;; MOV EDITING MODE POS "*" TO MIOS_PARAMETER1
599E C201 F003 00094         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
59A2 0603      00095         decf    MIOS_PARAMETER1, F
59A4 C003 F201 00096         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00097         
               00098         ;; CHECK:
               00099         ;; EDITING MODE POS "*" in MAIN MENU2 - POS OF "*" IS NOT ALLOWED TO BE = 0
               00100         ;; EDITING MODE POS "*" in MAIN MENU2 = 0?
59A8 0E00      00101         movlw   MENU_ITEM_POS0_NOT_VALID
59AA 6203      00102         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00103 
               00104                                 ;; NO (NOT POS 0)
               00105                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU2_DONE
59AC D004          M         bra     label
               00106 
               00107                 ;; YES
               00108                 ;; SO SET POS LAST POS
               00109                 ;; -----------------------
               00110                 ;; EDITING MODE POS "*" = 0
               00111                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 6
59AE 0E06      00112                 movlw   MENU_ITEM_POS6
59B0 6E03      00113                 movwf   MIOS_PARAMETER1
59B2 C003 F201 00114                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00115                         
59B6           00116 LABEL_AY_SUB_MENU_UP_MAIN_MENU2_DONE
               00117                                 ;; SWITCH MAIN MENU TO: TUNE MENU
59B6 EFDD F024 00118                                 goto LABEL_MAIN_MENUE_SWITCH
               00119 
               00120 ;; ----------------------------[END: UP @ MAIN MENU2]------------------
               00121 
               00122 
               00123 ;; ----------------------------[START: UP @ MAIN MENU3]-----------
               00124 ;; ---------------------------------------------------------------
59BA           00125 SUB_MENU_UP_MAIN_MENU3
               00126         ;; MAIN MENU3 = MIXER MENU
               00127 
               00128         ;; UP IS NEEDED HERE TO:
               00129         ;; DECREMENT EDITING MODE POSITION => "*"
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 246


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00130                 
               00131         ;; DEC EDITING MODE POS "*" in MAIN MENU3
               00132         ;; MOV EDITING MODE POS "*" TO MIOS_PARAMETER1
59BA C202 F003 00133         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
59BE 0603      00134         decf    MIOS_PARAMETER1, F
59C0 C003 F202 00135         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00136         
               00137         ;; CHECK:
               00138         ;; EDITING MODE POS "*" in MAIN MENU3 - POS OF "*" IS NOT ALLOWED TO BE = 0
               00139         ;; EDITING MODE POS "*" in MAIN MENU3 = 0?
59C4 0E00      00140         movlw   MENU_ITEM_POS0_NOT_VALID
59C6 6203      00141         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00142 
               00143                         ;; NO (NOT POS 0)
               00144                         rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU3_DONE
59C8 D004          M         bra     label
               00145 
               00146                 ;; YES
               00147                 ;; POS = 0
               00148                 ;; WE MUST SWITCH BACK TO LAST ITEM POS
               00149 
               00150                 ;; EDITING MODE POS "*" = 0
               00151                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 4 (LAST POS)
59CA 0E04      00152                 movlw   MENU_ITEM_POS4
59CC 6E03      00153                 movwf   MIOS_PARAMETER1
59CE C003 F202 00154                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00155                         
59D2           00156 LABEL_AY_SUB_MENU_UP_MAIN_MENU3_DONE
               00157                         ;; SUB ROUTINE IS DONE          
59D2 EFDD F024 00158                         goto LABEL_MAIN_MENUE_SWITCH
               00159 
               00160 ;; ----------------------------[END: UP @ MAIN MENU3]-----------
               00161         
               00162 
               00163 ;; ----------------------------[UP @ MAIN MENU4]------------------
59D6           00164 SUB_MENU_UP_MAIN_MENU4
               00165         ;; MAIN MENU4 = AMPLITUDE/VOLUME MENU
               00166         ;; --------------------------------------
               00167         ;; UP IS NEEDED HERE TO:
               00168         ;; DECREMENT EDITING MODE POSITION => "*"
               00169         ;; --------------------------------------
               00170         ;; DEC EDITING MODE POS "*" in MAIN MENU4
               00171         ;; MOV EDITING MODE POS "*" TO MIOS_PARAMETER1
59D6 C203 F003 00172         movff   AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
59DA 0603      00173         decf    MIOS_PARAMETER1, F
59DC C003 F203 00174         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE
               00175         
               00176         ;; CHECK:
               00177         ;; EDITING MODE POS "*" in MAIN MENU4 - POS OF "*" IS NOT ALLOWED TO BE = 0
               00178         ;; EDITING MODE POS "*" in MAIN MENU4 = 0?
59E0 0E00      00179         movlw   MENU_ITEM_POS0_NOT_VALID
59E2 6203      00180         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00181 
               00182                                 ;; NO (NOT POS 0)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 247


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00183                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU4_DONE
59E4 D004          M         bra     label
               00184 
               00185                 ;; YES
               00186                 ;; EDITING MODE POS "*" = 0
               00187                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 3 (LAST POS)
59E6 0E03      00188                 movlw   MENU_ITEM_POS3
59E8 6E03      00189                 movwf   MIOS_PARAMETER1
59EA C003 F203 00190                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE
               00191                         
59EE           00192 LABEL_AY_SUB_MENU_UP_MAIN_MENU4_DONE
               00193                                 ;; SUB ROUTINE IS DONE          
59EE EFDD F024 00194                                 goto LABEL_MAIN_MENUE_SWITCH
               00195 
               00196 
               00197 ;; --------[UP @ MAIN MENU5]------------------
59F2           00198 SUB_MENU_UP_MAIN_MENU5
               00199         ;; MAIN MENU5 = ENVELOPE MENU
               00200         ;; --------------------------
               00201         ;; UP IS NEEDED HERE TO:
               00202         ;; DECREMENT EDITING MODE POSITION => "*"
               00203         ;; --------------------------------------
               00204         ;; DEC EDITING MODE POS "*" in MAIN MENU5
               00205         ;; MOV EDITING MODE POS "*" TO MIOS_PARAMETER1
59F2 C204 F003 00206         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
59F6 0603      00207         decf    MIOS_PARAMETER1, F
59F8 C003 F204 00208         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00209         
               00210         ;; CHECK:
               00211         ;; EDITING MODE POS "*" in MAIN MENU5 - POS OF "*" IS NOT ALLOWED TO BE = 0
               00212         ;; EDITING MODE POS "*" in MAIN MENU5 = 0?
59FC 0E00      00213         movlw   MENU_ITEM_POS0_NOT_VALID
59FE 6203      00214         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00215 
               00216                                 ;; NO (NOT POS 0)
               00217                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU5_DONE
5A00 D004          M         bra     label
               00218 
               00219                 ;; YES
               00220                 ;; EDITING MODE POS "*" = 0
               00221                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 4 (LAST POS)
5A02 0E04      00222                 movlw   MENU_ITEM_POS4
5A04 6E03      00223                 movwf   MIOS_PARAMETER1
5A06 C003 F204 00224                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00225                         
5A0A           00226 LABEL_AY_SUB_MENU_UP_MAIN_MENU5_DONE
               00227                                 ;; SUB ROUTINE IS DONE          
5A0A EFDD F024 00228                                 goto LABEL_MAIN_MENUE_SWITCH
               00229 
               00230 
               00231 ;; -----------------[UP @ MAIN MENU 6]---------------------------------------------     
5A0E           00232 SUB_MENU_UP_MAIN_MENU6
               00233         ;; MAIN MENU6 = TONE ABC MIDI-CHANNEL CONTROL
               00234         ;; ------------------------------------------   
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 248


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00235         ;; UP IS NEEDED HERE TO:
               00236         ;; DECREMENT EDITING MODE POSITION => "*"
               00237         ;; ------------------------------------------
               00238         ;; DEC EDITING MODE POS "*" in MAIN MENU6
               00239         ;; MOV EDITING MODE POS "*" TO MIOS_PARAMETER1
5A0E C205 F003 00240         movff   AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
5A12 0603      00241         decf    MIOS_PARAMETER1, F
5A14 C003 F205 00242         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG   
               00243 
               00244         ;; CHECK:
               00245         ;; EDITING MODE POS "*" in MAIN MENU6 - POS. OF "*" IS NOT ALLOWED TO BE = 0
               00246         ;; EDITING MODE POS "*" in MAIN MENU6 = 0?
5A18 0E00      00247         movlw   MENU_ITEM_POS0_NOT_VALID
5A1A 6203      00248         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00249 
               00250                                 ;; NO (NOT POS 0)
               00251                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU6_DONE
5A1C D004          M         bra     label
               00252 
               00253                 ;; YES (POS 0)
               00254                 ;; EDITING MODE POS "*" = 0
               00255                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 3 (LAST POS)
5A1E 0E03      00256                 movlw   MENU_ITEM_POS3
5A20 6E03      00257                 movwf   MIOS_PARAMETER1
5A22 C003 F205 00258                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG
               00259         
5A26           00260 LABEL_AY_SUB_MENU_UP_MAIN_MENU6_DONE
               00261                         ;; SUBROUTINE IS DONE 
5A26 EFDD F024 00262                         goto LABEL_MAIN_MENUE_SWITCH
               00263 
               00264 ;; --------
               00265 
5A2A           00266 SUB_MENU_UP_MAIN_MENU7
               00267         ;; KEYBORAD: KEY HANDLING
               00268         ;; IF KEY [UP] IS = DEPRESSED THEN DO NOT DEC POS OF
               00269         ;; EDITING MODE "*"     
               00270 
               00271         ;; POS=POS-1 - DEC POS @ MAIN MENU 7 
               00272         ;; VELOCITY TO => ABC + NOISE PERIOD
5A2A C206 F003 00273         movff   AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
5A2E 0603      00274         decf    MIOS_PARAMETER1, F
5A30 C003 F206 00275         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
               00276         
               00277         ;; CHECK:
               00278         ;; POS IS NOT ALLOWED TO BE = 0
               00279         ;; IS POS = 0?
5A34 0E00      00280         movlw   MENU_ITEM_POS0_NOT_VALID
5A36 6203      00281         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00282 
               00283                                 ;; NO (NOT POS 0)
               00284                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU7_DONE
5A38 D004          M         bra     label
               00285                 ;; YES
               00286                 ;; POS = 0 SO 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 249


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00287                 ;; POS MUST BE SWITCHED TO 4 (LAST POS)
5A3A 0E04      00288                 movlw   MENU_ITEM_POS4
5A3C 6E03      00289                 movwf   MIOS_PARAMETER1
5A3E C003 F206 00290                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
               00291 
5A42           00292 LABEL_AY_SUB_MENU_UP_MAIN_MENU7_DONE
               00293                                 ;; SUB ROUTINE IS DONE EXIT HERE TO MAIN MENU           
5A42 EFDD F024 00294                                 goto LABEL_MAIN_MENUE_SWITCH
               00295 
               00296 
               00297 
               00298 ;; -----------------------------------
5A46           00299 SUB_MENU_UP_MAIN_MENU8
               00300         ;; UP IS NEEDED HERE TO:
               00301         ;; DECREMENT EDITING MODE POSITION => "*"
               00302                 
               00303         ;; DEC EDITING MODE POS "*" in MAIN MENU8
               00304         ;; MOV EDITING MODE POS "*" TO MIOS_PARAMETER1
5A46 C207 F003 00305         movff   AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
5A4A 0603      00306         decf    MIOS_PARAMETER1, F
5A4C C003 F207 00307         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_FX
               00308         
               00309         ;; CHECK:
               00310         ;; EDITING MODE POS "*" in MAIN MENU8 - POS OF "*" IS NOT ALLOWED TO BE = 0
               00311         ;; EDITING MODE POS "*" in MAIN MENU8 = 0?
5A50 0E00      00312         movlw   MENU_ITEM_POS0_NOT_VALID
5A52 6203      00313         cpfseq  MIOS_PARAMETER1 ;; POS = 0?
               00314                                 ;; NO (NOT POS 0)
               00315                                 rgoto LABEL_AY_SUB_MENU_UP_MAIN_MENU8_DONE
5A54 D004          M         bra     label
               00316 
               00317                 ;; YES
               00318                 ;; EDITING MODE POS "*" = 0
               00319                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 4 (LAST POS)
5A56 0E04      00320                 movlw   MENU_ITEM_POS4
5A58 6E03      00321                 movwf   MIOS_PARAMETER1
5A5A C003 F207 00322                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_FX
               00323 ;; --------
5A5E           00324 LABEL_AY_SUB_MENU_UP_MAIN_MENU8_DONE
               00325                                 ;; SUB ROUTINE IS DONE          
5A5E EFDD F024 00326                                 goto LABEL_MAIN_MENUE_SWITCH
               00327 
               00328         
               00329 
               00330 
               00331 
               00332 ;; -------------------------[END - SUB MENU ROUTINE FOR *UP* [KEY]]---------- 
               00333         
               00067 #include "sub_menu_key_down.inc"
               00001 ;; sub_menu_key_down.inc
               00002 
               00003 ;; -------------------------------------------------------------------------
               00004 ;; ----[SUB FUNCTIONS: DOWN ⇒ [CRSR DOWN] (or [RETURN]) HAS BEEN PRESSED]---
               00005 ;; =======================> CHECK WHICH MAIN MENU IS ACTIVE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 250


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00006 
5A62           00007 LABEL_AY_SUB_MENU_DOWN
               00008         ;; 1) CHECK WHICH MAIN MENU IS ACTIVATED
               00009         ;; ==> VIA CURRENT_MAIN_MENU
               00010         ;;
               00011         ;; 2) GOTO THE NEEDED SUB ROUTINE OF THE ACTIVATED
               00012         ;;    MAIN MENU
               00013         
               00014         ;; JUMP TO KEY @ MENU X
5A62 5074      00015         movf CURRENT_MAIN_MENU, W
               00016         JUMPTABLE_2BYTES 9 ;; [MAIN MENU 0-8]
5A64 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5A66 B0D8          M         skpnc
5A68 0EF7          M         movlw   -(max_value)
5A6A 0F09          M         addlw   max_value
5A6C ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00017                 rgoto        SUB_MENU_DOWN_MAIN_MENU0
5A70 D008          M         bra     label
               00018                 rgoto        SUB_MENU_DOWN_MAIN_MENU1
5A72 D009          M         bra     label
               00019                 rgoto        SUB_MENU_DOWN_MAIN_MENU2
5A74 D017          M         bra     label
               00020                 rgoto        SUB_MENU_DOWN_MAIN_MENU3
5A76 D025          M         bra     label
               00021                 rgoto        SUB_MENU_DOWN_MAIN_MENU4
5A78 D032          M         bra     label
               00022                 rgoto        SUB_MENU_DOWN_MAIN_MENU5
5A7A D040          M         bra     label
               00023                 rgoto        SUB_MENU_DOWN_MAIN_MENU6
5A7C D04E          M         bra     label
               00024                 rgoto        SUB_MENU_DOWN_MAIN_MENU7
5A7E D05C          M         bra     label
               00025                 rgoto        SUB_MENU_DOWN_MAIN_MENU8
5A80 D06A          M         bra     label
               00026                 
               00027 
               00028 
               00029 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00030 ;; ----------------------------------------------------------------
               00031 
               00032 ;; --------[RETURN @ MAIN MENU0]------------------
5A82           00033 SUB_MENU_DOWN_MAIN_MENU0
               00034         ;; RETURN @ MENU SWITCH MENU - NO Function
5A82 EFDD F024 00035         goto LABEL_MAIN_MENUE_SWITCH
               00036 
               00037         
               00038 ;; --------[RETURN @ MAIN MENU1]------------------
               00039 
5A86           00040 SUB_MENU_DOWN_MAIN_MENU1
               00041         ;; MAIN MENU1 = PATCH INFO MENU
               00042         ;; RETURN IS NEEDED HERE TO:
               00043         ;; INCREMENT EDITING MODE POSITION => "*" (ITEM POS)
               00044         ;; IN PATCH INFO MENU
               00045         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 251


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00046         ;; ITEM POS +1  
5A86 C200 F003 00047         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
5A8A 2A03      00048         incf    MIOS_PARAMETER1, F
5A8C C003 F200 00049         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
               00050         
               00051         ;; CHECK:
               00052         ;; AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO IS NOT ALLOWED TO BE > 3
5A90 0E03      00053         movlw   MENU_ITEM_POS3
5A92 6403      00054         cpfsgt  MIOS_PARAMETER1 ;; POS > 3?
               00055 
               00056                                 ;; NO
               00057                                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU1_DONE
5A94 D005          M         bra     label
               00058 
               00059                 ;; YES
               00060                 ;; SWITCH POS BACK TO POS1
               00061                 ;; -----------------------
               00062                 ;; MENU ITEM > 3 SO 
               00063                 ;; MENUE ITEM MUST BE SWITCHED BACK TO 1
5A96 0E01      00064                 movlw   MENU_ITEM_POS1
5A98 6E03      00065                 movwf   MIOS_PARAMETER1
5A9A C003 F200 00066                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
               00067                                 rgoto    LABEL_AY_SUB_MENU_DOWN_MAIN_MENU1_DONE
5A9E D000          M         bra     label
               00068                         
5AA0           00069 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU1_DONE
               00070                                 ;; SUB ROUTINE IS DONE          
5AA0 EF1E F025 00071                                 goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00072 
               00073 
               00074 ;; -----------------------------------------------
               00075 ;; --------[RETURN @ MAIN MENU2]------------------
               00076 ;; -----------------------------------------------
               00077 
5AA4           00078 SUB_MENU_DOWN_MAIN_MENU2
               00079         ;; MAIN MENU2 = TUNE MENU
               00080         ;; INC POS +1
               00081         ;; RETURN IS NEEDED HERE TO:
               00082         ;; INC. AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00083         ;; => POS OF "*" = EDITING MODE
               00084         
               00085                 
               00086         ;; INC ITEM POS +1
5AA4 C201 F003 00087         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
5AA8 2A03      00088         incf    MIOS_PARAMETER1, F
5AAA C003 F201 00089         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00090         
               00091         ;; CHECK:
               00092         ;; ITEM POS IS NOT ALLOWED TO BE >6
               00093         ;; IS ITEM POS > 6?
5AAE 0E06      00094         movlw   MENU_ITEM_POS6
5AB0 6403      00095         cpfsgt  MIOS_PARAMETER1 ;; POS > 6?
               00096 
               00097                 ;; NO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 252


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00098                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU2_DONE
5AB2 D005          M         bra     label
               00099 
               00100                 ;; YES
               00101                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU2_BACK_POS1
5AB4 D000          M         bra     label
               00102 
               00103 
               00104 
               00105 
               00106 
5AB6           00107 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU2_BACK_POS1
               00108 ;; ITEM > 6 SO 
               00109 ;; MENUE ITEM MUST BE SWITCHED BACK TO 1
               00110 
5AB6 0E01      00111                 movlw   MENU_ITEM_POS1
5AB8 6E03      00112                 movwf   MIOS_PARAMETER1
5ABA C003 F201 00113                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00114 
               00115 ;; --------
               00116                         
5ABE           00117 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU2_DONE
               00118                 ;; SUB ROUTINE IS DONE          
5ABE EFDD F024 00119                 goto LABEL_MAIN_MENUE_SWITCH
               00120 
               00121 
               00122 
               00123 
               00124 ;; -----------------------------------------------
               00125 ;; --------[RETURN @ MAIN MENU3]------------------
               00126 ;; -----------------------------------------------
               00127 
5AC2           00128 SUB_MENU_DOWN_MAIN_MENU3
               00129         ;; MAIN MENU3 = MIXER MENU
               00130         ;; INC POS +1
               00131         ;; RETURN IS NEEDED HERE TO:
               00132         ;; INC. AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00133         ;; => POS OF "*" = EDITING MODE
               00134                 
               00135         ;; INC AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
5AC2 C202 F003 00136         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
5AC6 2A03      00137         incf    MIOS_PARAMETER1, F
5AC8 C003 F202 00138         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00139         
               00140         ;; CHECK:
               00141         ;; EDITING POS. "*" IS NOT ALLOWED TO BE >4
               00142         ;; IS EDITING MODE POS "*" > 4?
5ACC 0E04      00143         movlw   MENU_ITEM_POS4
5ACE 6403      00144         cpfsgt  MIOS_PARAMETER1 ;; POS > 4?
               00145 
               00146                         ;; NO
               00147                         rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU3_DONE
5AD0 D004          M         bra     label
               00148 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 253


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00149                 ;; YES
               00150                 ;; POS > 3
               00151                 ;; SWITCH POS BACK TO POS 1
               00152                 ;; EDITING MODE "*" POS. SWITCHED TO 1
5AD2 0E01      00153                 movlw   MENU_ITEM_POS1
5AD4 6E03      00154                 movwf   MIOS_PARAMETER1
5AD6 C003 F202 00155                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00156 
5ADA           00157 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU3_DONE
               00158                         ;; SUB ROUTINE IS DONE          
               00159                         ;; JUMP TO MAIN MENU (REDRAW LCD MENU3) 
               00160                         ;; => LABEL_MAIN_MENUE_SWITCH
               00161                         ;; =>  @ main_menu_functions.inc        
5ADA EFDD F024 00162                         goto LABEL_MAIN_MENUE_SWITCH
               00163                                 
               00164 
               00165 
               00166 ;; -----------------------------------------------
               00167 ;; --------[RETURN @ MAIN MENU4]------------------
               00168 ;; -----------------------------------------------
               00169 
5ADE           00170 SUB_MENU_DOWN_MAIN_MENU4
               00171         ;; MAIN MENU4 = AMPLITUDE/VOLUME MENU
               00172         ;; INC POS +1
               00173         ;; RETURN IS NEEDED HERE TO:
               00174         ;; INC. AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00175         ;; => POS OF "*" = EDITING MODE
               00176                 
               00177         ;; INC AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO
5ADE C203 F003 00178         movff   AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
5AE2 2A03      00179         incf    MIOS_PARAMETER1, F
5AE4 C003 F203 00180         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE
               00181         
               00182         ;; CHECK:
               00183         ;; EDITING POS. "*" IS NOT ALLOWED TO BE >3
               00184         ;; IS EDITING MODE POS "*" > 3?
5AE8 0E03      00185         movlw   MENU_ITEM_POS3
5AEA 6403      00186         cpfsgt  MIOS_PARAMETER1 ;; POS > 3?
               00187 
               00188                 ;; NO
               00189                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU4_DONE
5AEC D005          M         bra     label
               00190 
               00191                 ;; YES
               00192                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU4_BACK_POS1
5AEE D000          M         bra     label
               00193 
               00194 
               00195 
               00196 
               00197 
5AF0           00198 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU4_BACK_POS1
               00199 ;; EDITING MODE "*" POS. SWITCHED TO 1
5AF0 0E01      00200                 movlw   MENU_ITEM_POS1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 254


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5AF2 6E03      00201                 movwf   MIOS_PARAMETER1
5AF4 C003 F203 00202                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE
               00203 
               00204 ;; --------
               00205                         
5AF8           00206 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU4_DONE
               00207                 ;; SUB ROUTINE IS DONE          
5AF8 EFDD F024 00208                 goto LABEL_MAIN_MENUE_SWITCH
               00209 
               00210 
               00211 
               00212 ;; -----------------------------------------------
               00213 ;; --------[RETURN @ MAIN MENU5]------------------
               00214 ;; -----------------------------------------------
               00215 
5AFC           00216 SUB_MENU_DOWN_MAIN_MENU5
               00217         ;; MAIN MENU5 = ENVELOPE MENU
               00218         ;; INC POS +1
               00219         ;; => POS OF "*" = EDITING MODE
               00220 
               00221         ;; INC ITEM POS
5AFC C204 F003 00222         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
5B00 2A03      00223         incf    MIOS_PARAMETER1, F
5B02 C003 F204 00224         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00225         
               00226         ;; CHECK:
               00227         ;; EDITING POS. "*" IS NOT ALLOWED TO BE >4
               00228         ;; IS EDITING MODE POS "*" > 4?
5B06 0E04      00229         movlw   MENU_ITEM_POS4
5B08 6403      00230         cpfsgt  MIOS_PARAMETER1 ;; POS > 4?
               00231 
               00232                 ;; NO
               00233                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU5_DONE
5B0A D005          M         bra     label
               00234 
               00235                 ;; YES
               00236                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU5_BACK_POS1
5B0C D000          M         bra     label
               00237 
               00238 
5B0E           00239 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU5_BACK_POS1
               00240 ;; EDITING MODE "*" POS. SWITCHED TO POS 1
5B0E 0E01      00241                 movlw   MENU_ITEM_POS1
5B10 6E03      00242                 movwf   MIOS_PARAMETER1
5B12 C003 F204 00243                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00244 
               00245 ;; --------
               00246                         
5B16           00247 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU5_DONE
               00248                 ;; SUB ROUTINE IS DONE          
5B16 EFDD F024 00249                 goto LABEL_MAIN_MENUE_SWITCH
               00250 
               00251 
               00252 ;; ---------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 255


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00253 ;; -------------[MAIN MENU 6]-------------------------------
               00254 ;; ---------------------------------------------------------
               00255 
5B1A           00256 SUB_MENU_DOWN_MAIN_MENU6
               00257         ;; MAIN MENU6 = TONE ABC MIDI-CHANNEL CONTROL
               00258         ;; INC POS +1
               00259         ;; PLUS / DOWN IS NEEDED HERE TO:
               00260         ;; INC EDITING MODE POSITION => "*" +1
               00261         ;; INC EDITING MODE POS "*" in MAIN MENU6
               00262         ;; INC POS +1
5B1A C205 F003 00263         movff   AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
5B1E 2A03      00264         incf    MIOS_PARAMETER1, F
5B20 C003 F205 00265         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG   
               00266 
               00267         ;; CHECK:
               00268         ;; EDITING MODE POS "*" in MAIN MENU6
               00269         ;; ITEM POS. OF "*" IS NOT ALLOWED TO BE = 4
               00270         ;; EDITING MODE POS "*" in MAIN MENU6 > 3?
5B24 0E03      00271         movlw   MENU_ITEM_POS3
5B26 6403      00272         cpfsgt  MIOS_PARAMETER1 ;; POS > 3?
               00273 
               00274                 ;; NO - ALL RIGHT
               00275                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU6_DONE
5B28 D005          M         bra     label
               00276 
               00277                 ;; YES
               00278                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU6_BACK_START_POS
5B2A D000          M         bra     label
               00279 
5B2C           00280 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU6_BACK_START_POS
               00281                 ;; EDITING MODE POS "*" > 3
               00282                 ;; EDITING MODE POS "*" MUST BE SWITCHED TO 1 
5B2C 0E01      00283                 movlw   MENU_ITEM_POS1
5B2E 6E03      00284                 movwf   MIOS_PARAMETER1
5B30 C003 F205 00285                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG
               00286         
5B34           00287 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU6_DONE
               00288                 ;; SUBROUTINE IS DONE 
5B34 EFDD F024 00289                 goto LABEL_MAIN_MENUE_SWITCH
               00290 
               00291 
               00292 ;; ----------------------------------------------------------
               00293 ;; --[INC POS MAIN MENU 7 - VELOCITY TO ABC + NOISE PERIOD]--
               00294 ;; ----------------------------------------------------------
               00295 
5B38           00296 SUB_MENU_DOWN_MAIN_MENU7
               00297         ;; MAIN MENU7 = VELOCITY TO => A B C + NOISE PERIOD 
               00298         ;; INC POS +1
               00299         ;; RETURN AND [+] IS NEEDED HERE TO:
               00300         ;; INCREMENT EDITING MODE POSITION => "*"
               00301 
               00302         ;; INC ITEM POS @ MAIN MENU 7
5B38 C206 F003 00303         movff   AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
5B3C 2A03      00304         incf    MIOS_PARAMETER1, F
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 256


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5B3E C003 F206 00305         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
               00306         
               00307         ;; CHECK:
               00308         ;; IT IS NOT VALID IF POS >4
               00309         ;; IS ITEM POS > 4?
5B42 0E04      00310         movlw   MENU_ITEM_POS4
5B44 6403      00311         cpfsgt  MIOS_PARAMETER1 ;; POS > 4?
               00312 
               00313                 ;; NO
               00314                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU7_DONE
5B46 D005          M         bra     label
               00315 
               00316                 ;; YES
               00317                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU7_BACK_POS1
5B48 D000          M         bra     label
               00318 
5B4A           00319 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU7_BACK_POS1
               00320                 ;; POS > 4 SO 
               00321                 ;; ITEM POS MUST BE SWITCHED TO 1
5B4A 0E01      00322                 movlw   MENU_ITEM_POS1
5B4C 6E03      00323                 movwf   MIOS_PARAMETER1
5B4E C003 F206 00324                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
               00325         
5B52           00326 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU7_DONE
               00327                 ;; SUB ROUTINE IS DONE          
5B52 EFDD F024 00328                 goto LABEL_MAIN_MENUE_SWITCH
               00329 
               00330 
               00331 ;; --------------------------------------------------------------------
               00332 ;; --------[PLUS @ MAIN MENU 8]----------------------------------------
               00333 ;; --------------------------------------------------------------------
               00334 
               00335 
5B56           00336 SUB_MENU_DOWN_MAIN_MENU8
               00337         ;; INC POS +1
               00338         ;; RETURN IS NEEDED HERE TO:
               00339         ;; INC. POS => POS OF "*" = EDITING MODE
5B56 C207 F003 00340         movff   AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
5B5A 2A03      00341         incf    MIOS_PARAMETER1, F
5B5C C003 F207 00342         movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_FX
               00343         
               00344         ;; CHECK:
               00345         ;; EDITING POS. "*" IS NOT ALLOWED TO BE >4
               00346         ;; IS EDITING MODE POS "*" > 4?
5B60 0E04      00347         movlw   MENU_ITEM_POS4
5B62 6403      00348         cpfsgt  MIOS_PARAMETER1 ;; POS > 4?
               00349 
               00350                 ;; NO
               00351                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU8_DONE
5B64 D005          M         bra     label
               00352 
               00353                 ;; YES
               00354                 rgoto LABEL_AY_SUB_MENU_DOWN_MAIN_MENU8_BACK_POS1
5B66 D000          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 257


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00355 
5B68           00356 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU8_BACK_POS1
               00357                 ;; EDITING MODE "*" POS. SWITCHED TO 1
5B68 0E01      00358                 movlw   MENU_ITEM_POS1
5B6A 6E03      00359                 movwf   MIOS_PARAMETER1
5B6C C003 F207 00360                 movff   MIOS_PARAMETER1, AY_LCD_COURSER_POS_MAIN_MENU_FX
               00361                         
5B70           00362 LABEL_AY_SUB_MENU_DOWN_MAIN_MENU8_DONE
               00363                 ;; SUB ROUTINE IS DONE          
               00364                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU8) 
               00365                 ;; => LABEL_MAIN_MENUE_SWITCH
               00366                 ;; =>  @ main_menu_functions.inc        
5B70 EFDD F024 00367                 goto LABEL_MAIN_MENUE_SWITCH
               00368                                 
               00369 
               00370 
               00371 ;; --------[END OF KEY [RETURN] FUNCTIONS ]------------------
               00372 
               00068 #include "sub_menu_key_plus.inc"
               00001 ;; sub_menu_key_plus.inc
               00002 
               00003 ;; ----------------------------------------------------------------------------
               00004 ;; -------------------------[PLUS]----------------------------- 
               00005 ;; =======================> [+] HAD BEEN PRESSED
               00006 ;; ================> Jumped in here from sub_menu_functions.inc
               00007 
               00008 
5B74           00009 LABEL_AY_SUB_MENU_PLUS
               00010 
5B74           00011 LABEL_AY_SUB_MENU_PLUS_CHK_MAINMENU
               00012         ;; CHECK WHICH MAIN MENU IS ACTIVATED
               00013         ;; ==> VIA CURRENT_MAIN_MENU
               00014 
               00015         ;; JUMP TO KEY @ MENU X
5B74 5074      00016         movf CURRENT_MAIN_MENU, W
               00017         JUMPTABLE_4BYTES 9 ;; [MENU 0 to 8]
5B76 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5B78 B0D8          M         skpnc
5B7A 0012          M         return
5B7C 0F09          M         addlw   (max_value)
5B7E ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
5B82 EFD3 F02D 00018                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU0 ;; MENU OVERVIEW          (ESC)
5B86 EFD5 F02D 00019                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU1 ;; PATCH MENU             (F1)
5B8A EFE1 F02D 00020                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU2 ;; DETUNE ABC             (F2)
5B8E EF2C F02E 00021                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU3 ;; ABC + NOISE MIXER      (F3)
5B92 EF41 F02E 00022                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU4 ;; VOLUME                 (F4)
5B96 EF83 F02E 00023                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU5 ;; ENVELOPE               (F5)
5B9A EFB6 F02E 00024                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU6 ;; MIDI CH. CONFIG        (F6)
5B9E EFE6 F02E 00025                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU7 ;; VELOCITY               (F7)
5BA2 EF1D F02F 00026                 goto        PLUS_KEY_SUBROUTINE_AT_MAIN_MENU8 ;; Fx Menu                (F8)
               00027 
               00028 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00029 ;; ----------------------------------------------------------------
               00030 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 258


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00031 ;; --------[END OF KEY [PLUS (+)] FUNCTIONS ]------------------
               00069 #include "sub_menu_key_plus_menu_0.inc"
               00001 ;; sub_menu_key_plus_menu_0.inc
               00002 
               00003 ;; --------[PLUS @ MAIN MENU0]------------------
               00004 
5BA6           00005 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU0       
               00006 ;; Jumped in here from sub_menu_key_plus.inc
               00007         ;; + @ MENU SWITCH MENU - NO Function
5BA6 EF03 F025 00008         goto LABEL_AY_MAIN_MENU_00_MENU_SWITCH
               00070 #include "sub_menu_key_plus_menu_1.inc"
               00001 ;; sub_menu_key_plus_menu_1.inc
               00002 
               00003 
               00004 ;; --------[PLUS @ MAIN MENU1 - PATCH MENU]------------------
               00005 
5BAA           00006 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU1
               00007         ;; Jumped in here from sub_menu_key_plus.inc
               00008         
               00009         ;; 1) CHECK ITEM = EDITING MODE "*"
               00010         ;;
               00011         ;; 2) INC ITEM 
               00012 
               00013 ;; --[ 1) CHECK ITEM]-------
               00014 
               00015         ;; CHECK LOCATION VIA EDITING MODE "*"
               00016         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5BAA C200 F003 00017         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
               00018 
5BAE           00019 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU1_CHK_ITEM2     
5BAE 0E02      00020         movlw   MENU_ITEM_POS2
5BB0 6203      00021         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00022 
               00023                                 ;; NO
               00024                                 ;; Exit here
5BB2 0012      00025                                 return
               00026 
               00027                 ;; YES
               00028                 ;; INC ITEM2
               00029                 ;; ITEM2 => PATCH NUMBER [INT(0) - 1-128 (BANKSTICK])
               00030                 ;; => RANGE 0    - 128   DEC.
               00031                 ;; => RANGE 0x00 - 0x80  HEX.
               00032                 ;; CHEK ITEM VALUE 
               00033                 ;; compare f with WREG, 
               00034                 ;; skip if CURREND_PATCH_NR = PATCH_NUMBER_VALUE_MAX
5BB4 0E7F      00035                 movlw   PATCH_NUMBER_VALUE_MAX
5BB6 627C      00036                 cpfseq  BROWSE_PATCH_NR
               00037                 
               00038                         ;; NO
               00039                         ;; CURREND_PATCH_NR < PATCH_NUMBER_VALUE_MAX
               00040                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU1_INC_ITEM2
5BB8 D001          M         bra     label
               00041 
               00042                                 ;; YES 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 259


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00043                                 ;; CURREND_PATCH_NR = PATCH_NUMBER_VALUE_MAX
               00044                                 ;; Exit Here
5BBA 0012      00045                                 return
               00046 
               00047 
5BBC           00048 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU1_INC_ITEM2
               00049                         ;; ITEM [PATCH NUMBER] = ITEM +1
5BBC 2A7C      00050                         incf BROWSE_PATCH_NR, F
               00051 
               00052 
               00053 ;; -------------------------------------[exit here]------------------------------
               00054                                 ;; Redraw LCD Main Menu
5BBE EF1E F025 00055                                 goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00056 
               00057 
               00071 #include "sub_menu_key_plus_menu_2.inc"
               00001 ;; sub_menu_key_plus_menu_2.inc
               00002 
               00003 ;; --------[PLUS @ MAIN MENU2]------------------
               00004 
5BC2           00005 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU2
               00006 ;; jumped in here from sub_menu_key_plus.inc
               00007         ;; MAIN MENU2 = TUNE MENU
               00008         ;; PLUS HAD BEEN PRESSED
               00009         ;;
               00010         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00011         ;; IN EDITING MODE "*"
               00012         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00013         ;;
               00014         ;; 2) INC ITEM 
               00015 
               00016 ;; --[ 1) CHECK ITEM]-------
               00017 
               00018         ;; CHECK LOCATION VIA EDITING MODE "*"
               00019         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5BC2 C201 F003 00020         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00021 
5BC6           00022 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM1     
5BC6 0E01      00023         movlw   MENU_ITEM_POS1
5BC8 6203      00024         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00025 
               00026                 ;; NO
               00027                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM2
5BCA D001          M         bra     label
               00028 
               00029                 ;; YES
               00030                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM1
5BCC D015          M         bra     label
               00031         
               00032 
5BCE           00033 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM2
               00034 
5BCE 0E02      00035         movlw   MENU_ITEM_POS2
5BD0 6203      00036         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 260


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00037 
               00038                 ;; NO
               00039                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM3
5BD2 D001          M         bra     label
               00040 
               00041                 ;; YES
               00042                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM2       
5BD4 D019          M         bra     label
               00043 
               00044 
5BD6           00045 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM3
               00046         
5BD6 0E03      00047         movlw   MENU_ITEM_POS3
5BD8 6203      00048         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00049 
               00050                 ;; NO
               00051                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM4
5BDA D001          M         bra     label
               00052 
               00053                 ;; YES
               00054                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM3       
5BDC D01D          M         bra     label
               00055 
               00056 
               00057 
               00058 
5BDE           00059 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM4
               00060 
5BDE 0E04      00061         movlw   MENU_ITEM_POS4
5BE0 6203      00062         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  =4?
               00063 
               00064                 ;; NO
               00065                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM5
5BE2 D001          M         bra     label
               00066 
               00067                 ;; YES
               00068                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM4       
5BE4 D021          M         bra     label
               00069 
               00070 
5BE6           00071 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM5
               00072 
5BE6 0E05      00073         movlw   MENU_ITEM_POS5
5BE8 6203      00074         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 5?
               00075 
               00076                 ;; NO
               00077                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM6
5BEA D001          M         bra     label
               00078 
               00079                 ;; YES
               00080                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM5       
5BEC D025          M         bra     label
               00081 
               00082 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 261


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5BEE           00083 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM6
               00084 
5BEE 0E06      00085         movlw   MENU_ITEM_POS6
5BF0 6203      00086         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 6?
               00087 
               00088                 ;; NO - THERE IS NO ITEM LEFT OVER - SO QUIT
5BF2 EFDD F024 00089                 goto LABEL_MAIN_MENUE_SWITCH
               00090 
               00091                 ;; YES
               00092                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM6       
5BF6 D028          M         bra     label
               00093 
               00094 
               00095 
               00096 
               00097 ;;---[ 2) INC ITEM [MAIN MENU2 - [1-6]]]--------
               00098 
               00099 ;;---[ 2) INC ITEM1 [MAIN MENU2]--------
5BF8           00100 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM1
               00101         ;; INC ITEM1
               00102         ;; ITEM1 => USER CH. A COASE TUNE 4BIT (!)
               00103         ;; => RANGE 0-15 DEC.
               00104         ;; => RANGE 0-F  HEX
               00105                 ;; CHEK ITEM VALUE 
               00106                 ;; ITEM1 = 4BIT = 0x0F = 15 DEC
               00107                 ;; compare f with WREG, skip if f > 14
5BF8 0E0E      00108                 movlw   0x0e
5BFA 6426      00109                 cpfsgt  AY_TONE_A_TUNE_COARSE_USER
               00110                 
               00111                         ;; NO
               00112                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM1_OK
5BFC D002          M         bra     label
               00113 
               00114                         ;; YES
5BFE EFDD F024 00115                         goto LABEL_MAIN_MENUE_SWITCH
               00116 
               00117 
               00118 
               00119 
5C02           00120 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM1_OK
               00121         ;; ITEM = ITEM +1
5C02 2A26      00122         incf AY_TONE_A_TUNE_COARSE_USER, F
               00123                 ;; SWITCH MAIN MENU TO: TUNE MENU
5C04 EFDD F024 00124                 goto LABEL_MAIN_MENUE_SWITCH
               00125 
               00126 
               00127 ;;---[ 2) INC ITEM2 [MAIN MENU2]--------
               00128 
5C08           00129 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM2
               00130         ;; INC ITEM2
               00131         ;; ITEM2 => USER CH. A FINE TUNE 8BIT 
               00132         ;; => RANGE 0-255 DEC.
               00133         ;; => RANGE 0-FF  HEX.
               00134                 ;; CHEK ITEM VALUE 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 262


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00135                 ;; ITEM2 = 8BIT = 0xFF = 0-255 DEC
               00136                 ;; compare f with WREG, skip >
5C08 0EFE      00137                 movlw   0xFE
               00138                 ;; IS AY REG > 0xFE ? 
5C0A 6423      00139                 cpfsgt  AY_TONE_A_TUNE_FINE_USER
               00140                 
               00141                         ;; NO
               00142                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM2_OK
5C0C D002          M         bra     label
               00143 
               00144                                 ;; YES (F = 0xFF = 255) SO SKIP SUB ROUTINE HERE
5C0E EFDD F024 00145                                 goto LABEL_MAIN_MENUE_SWITCH
               00146 
               00147 
5C12           00148 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM2_OK
               00149                         ;; ITEM = ITEM +1
5C12 2A23      00150                         incf AY_TONE_A_TUNE_FINE_USER, F
               00151         
               00152                                 ;; SWITCH MAIN MENU TO: TUNE MENU
5C14 EFDD F024 00153                                 goto LABEL_MAIN_MENUE_SWITCH
               00154 
               00155 
               00156 
               00157 ;;---[ 2) INC ITEM3 [MAIN MENU2]--------
               00158 
5C18           00159 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM3
               00160         ;; INC ITEM3
               00161         ;; ITEM3 => USER CH. B COASE TUNE 4BIT 
               00162         ;; => RANGE 0-15 DEC.
               00163         ;; => RANGE 0-0F  HEX.
               00164                 ;; CHEK ITEM VALUE 
               00165                 ;; ITEM3 = 4BIT = 0x0F = 0-15 DEC
               00166                 ;; compare f with WREG, skip IF >
               00167                 ;; AY REG > 0x0E?
5C18 0E0E      00168                 movlw   0x0E
5C1A 6427      00169                 cpfsgt  AY_TONE_B_TUNE_COARSE_USER
               00170                 
               00171                         ;; NO
               00172                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM3_OK
5C1C D002          M         bra     label
               00173 
               00174                         ;; YES
5C1E EFDD F024 00175                         goto LABEL_MAIN_MENUE_SWITCH
               00176 
               00177 
5C22           00178 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM3_OK
               00179         ;; ITEM = ITEM +1
5C22 2A27      00180         incf AY_TONE_B_TUNE_COARSE_USER, F
               00181         
               00182                 ;; SWITCH MAIN MENU TO: TUNE MENU
5C24 EFDD F024 00183                 goto LABEL_MAIN_MENUE_SWITCH
               00184 
               00185 
               00186 ;;---[ 2) INC ITEM4 [MAIN MENU2]--------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 263


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00187 
5C28           00188 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM4
               00189         ;; INC ITEM4
               00190         ;; ITEM4 => USER CH. B FINE TUNE 8BIT 
               00191         ;; => RANGE 0-255 DEC.
               00192         ;; => RANGE 0-FF  HEX.
               00193 
               00194                 ;; CHEK ITEM VALUE 
               00195                 ;; ITEM4 = 8BIT = 0xFF = 0-255 DEC
               00196                 ;; compare f with WREG, skip IF >
               00197                 ;; AY REG > 0xFE?
5C28 0EFE      00198                 movlw   0xFE
5C2A 6424      00199                 cpfsgt  AY_TONE_B_TUNE_FINE_USER
               00200                 
               00201                         ;; NO
               00202                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM4_OK
5C2C D002          M         bra     label
               00203 
               00204                         ;; YES
5C2E EFDD F024 00205                         goto LABEL_MAIN_MENUE_SWITCH
               00206 
               00207 
5C32           00208 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM4_OK
               00209         ;; ITEM = ITEM +1
5C32 2A24      00210         incf AY_TONE_B_TUNE_FINE_USER, F
               00211                 ;; SWITCH BACK TO MAIN MENU
5C34 EFDD F024 00212                 goto LABEL_MAIN_MENUE_SWITCH
               00213 
               00214 
               00215 
               00216 ;;---[ 2) INC ITEM5 [MAIN MENU2]]--------
               00217 
5C38           00218 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM5
               00219         ;; INC ITEM5
               00220         ;; ITEM3 => AY REG 5 = CH. C COASE TUNE 4BIT 
               00221         ;; => RANGE 0-15 DEC.
               00222         ;; => RANGE 0-0F  HEX.
               00223 
               00224                 ;; CHEK ITEM VALUE 
               00225                 ;; ITEM5 = 4BIT = 0x0F = 0-15 DEC
               00226                 ;; compare f with WREG, skip IF >
               00227                 ;; AY REG > 0x0E?
5C38 0E0E      00228                 movlw   0x0E
5C3A 6428      00229                 cpfsgt  AY_TONE_C_TUNE_COARSE_USER
               00230                 
               00231                         ;; NO
               00232                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM5_OK
5C3C D002          M         bra     label
               00233 
               00234                         ;; YES - SKIP SUB ROUTINE
5C3E EFDD F024 00235                         goto LABEL_MAIN_MENUE_SWITCH
               00236 
               00237 
5C42           00238 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM5_OK
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 264


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00239         ;; ITEM = ITEM +1
5C42 2A28      00240         incf AY_TONE_C_TUNE_COARSE_USER, F
               00241                 ;; SWITCH BACK TO MAIN MENU TUNE
5C44 EFDD F024 00242                 goto LABEL_MAIN_MENUE_SWITCH
               00243 
               00244 
               00245 
               00246 
               00247 ;;---[ 2) INC ITEM6 [MAIN MENU2]--------
               00248 
5C48           00249 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM6
               00250         ;; INC ITEM6
               00251         ;; ITEM6 => AY REG 4 = CH. C FINE TUNE 8BIT 
               00252         ;; => RANGE 0-255 DEC.
               00253         ;; => RANGE 0-FF  HEX.
               00254                 ;; CHEK ITEM VALUE 
               00255                 ;; ITEM4 = 8BIT = 0xFF = 0-255 DEC
               00256                 ;; compare f with WREG, skip IF >
               00257                 ;; AY REG > 0xFE?
5C48 0EFE      00258                 movlw   0xFE
5C4A 6425      00259                 cpfsgt  AY_TONE_C_TUNE_FINE_USER
               00260                 
               00261                         ;; NO
               00262                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM6_OK
5C4C D002          M         bra     label
               00263 
               00264                         ;; YES
5C4E EFDD F024 00265                         goto LABEL_MAIN_MENUE_SWITCH
               00266 
               00267 
5C52           00268 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM6_OK
               00269 
               00270         
               00271         ;; ITEM = ITEM +1
5C52 2A25      00272         incf AY_TONE_C_TUNE_FINE_USER, F
               00273         
               00274                 ;; SWITCH BACK TO MAIN MENU: TUNE MENU
5C54 EFDD F024 00275                 goto LABEL_MAIN_MENUE_SWITCH
               00276 
               00277                         
               00278                                 
               00279 
               00280 ;;---[END INC ITEMS [MAIN MENU2]]--------
               00281 
               00072 #include "sub_menu_key_plus_menu_3.inc"
               00001 ;; sub_menu_key_plus_menu_3.inc
               00002 
               00003 
               00004 ;; ----------------------------------------------
               00005 ;; --------[PLUS @ MAIN MENU3]------------------
               00006 
5C58           00007 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU3
               00008 ;; jumped in here from sub_menu_key_plus.inc
               00009         ;; MAIN MENU3 = MIXER MENU 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 265


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00010         ;; MIX CH ABC + ADD NOISE TO CH ABC
               00011         ;; PLUS HAD BEEN PRESSED
               00012 
               00013         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00014         ;; IN EDITING MODE "*"
               00015         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00016         ;;
               00017         ;; 2) INC ITEM 
               00018 
               00019 ;; --[ 1) CHECK ITEM]-------
               00020 
               00021         ;; CHECK LOCATION VIA EDITING MODE "*"
               00022         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5C58 C202 F003 00023         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00024 
5C5C           00025 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_CHK_ITEM4     
               00026         ;; ITEM3 = NOISE PERIOD IS THE ONLY POS. WHRER PLUS
               00027         ;; IS NEEDED FOR INC THE NOISE PERIOD, SO CHECK
               00028         ;; IF THE EDITING MODE POS "*" = 4
5C5C 0E04      00029         movlw   MENU_ITEM_POS4
5C5E 6203      00030         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 4?
               00031 
               00032                 ;; NO, SO QUIT
5C60 EFDD F024 00033                 goto LABEL_MAIN_MENUE_SWITCH
               00034 
               00035                 ;; YES
               00036                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_INC_ITEM4       
5C64 D000          M         bra     label
               00037 
               00038 ;;---[ 2) INC ITEM [MAIN MENU3 - ITEM4 [NOISE PERIOD]]]--------
5C66           00039 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_INC_ITEM4
               00040         
               00041         ;; INC ITEM4
               00042         ;; ITEM3 => AY REG 6 = RANGE BIT0-4 (!)
               00043         ;; => RANGE 0-31 DEC.
               00044         ;; => RANGE 0-1F HEX.
               00045 
               00046                 ;; CHEK ITEM VALUE 
               00047                 ;; ITEM4 = HAS 5BIT = 0x1F = 31 DEC
               00048                 ;; compare f with WREG, skip IF < 1
               00049                 ;; AY REG = 0x00?
5C66 6AE8      00050                 clrw 
5C68 626A      00051                 cpfseq  AY_R6_NOISE_PERIOD
               00052                 
               00053                         ;; NO
               00054                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_INC_ITEM4_OK
5C6A D002          M         bra     label
               00055 
               00056                         ;; YES
5C6C EFDD F024 00057                         goto LABEL_MAIN_MENUE_SWITCH
               00058 
               00059 
               00060 
               00061 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 266


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5C70           00062 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_INC_ITEM4_OK
               00063 
               00064         ;; DONT BE CONFUSED:
               00065         ;; INC FOR LCD!
               00066         ;; DEC FOR AY REG
5C70 066A      00067         decf AY_R6_NOISE_PERIOD, F
               00068         
               00069         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00070         ;; --------------------------------------------------------
               00071         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5C72 0E06      00072         movlw AY_CHIP_ADR_06_NOISE_PERIOD ; ADRESS => AY REGISTER
5C74 6E39      00073         movwf AY_REG_ADDRESS              ; ADDRESS FOR => AY_SR_Write
               00074         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5C76 C06A F03A 00075         movff AY_R6_NOISE_PERIOD, AY_REG_DATA 
               00076         
               00077         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00078         ;; @ay_sr.inc
5C7A ECAA F01B 00079         call LABEL_AY_SR_Write
               00080 
               00081                 
               00082                 ;; GO BACK TO: MAIN MENU 3
5C7E EFDD F024 00083                 goto LABEL_MAIN_MENUE_SWITCH
               00084 
               00085         
               00086 
               00073 #include "sub_menu_key_plus_menu_4.inc"
               00001 ;; sub_menu_key_plus_menu_4.inc
               00002 
               00003 ;; ---------------------------------------------
               00004 ;; --------[PLUS @ MAIN MENU4]------------------
               00005 
5C82           00006 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU4
               00007 ;; jump in here from sub_menu_key_plus.inc
               00008         ;; MAIN MENU4 = AMPLITUDE/VOLUME MENU
               00009         ;; PLUS HAD BEEN PRESSED
               00010         ;;
               00011         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00012         ;; IN EDITING MODE "*"
               00013         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00014         ;;
               00015         ;; 2) INC ITEM 
               00016 
               00017         ;; --[ 1) CHECK ITEM]-------
               00018 
               00019         ;; CHECK LOCATION VIA EDITING MODE "*"
               00020         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5C82 C203 F003 00021         movff   AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
               00022 
5C86           00023 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM1     
5C86 0E01      00024         movlw   MENU_ITEM_POS1
5C88 6203      00025         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00026 
               00027                 ;; NO
               00028                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 267


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5C8A D001          M         bra     label
               00029 
               00030                 ;; YES
               00031                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM1
5C8C D009          M         bra     label
               00032         
               00033 
5C8E           00034 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM2
               00035 
5C8E 0E02      00036         movlw   MENU_ITEM_POS2
5C90 6203      00037         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00038 
               00039                 ;; NO
               00040                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM3
5C92 D001          M         bra     label
               00041 
               00042                 ;; YES
               00043                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM2       
5C94 D016          M         bra     label
               00044 
               00045 
5C96           00046 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM3
               00047         
5C96 0E03      00048         movlw   MENU_ITEM_POS3
5C98 6203      00049         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00050 
               00051                 ;; NO? - No Item Left Over - So Quit Here
5C9A EFDD F024 00052                 goto LABEL_MAIN_MENUE_SWITCH
               00053 
               00054                 ;; YES
               00055                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM3       
5C9E D022          M         bra     label
               00056 
               00057 
               00058 
               00059 
               00060 ;;---[ 2) INC ITEM [MAIN MENU4 - [1-3]]]--------
               00061 
               00062 ;;---[ 2) INC ITEM1 [MAIN MENU4]--------
5CA0           00063 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM1
               00064         ;; INC ITEM1
               00065         ;; ITEM1 => AY REG 8 = Volume CH. A 4BIT - LOW NIBBLE (!)
               00066         ;; => RANGE 0-15 DEC.
               00067         ;; => RANGE 0x00-0x0F  HEX
               00068 
               00069                 ;; CHEK ITEM VALUE 
               00070                 ;; ITEM1 = 4BIT = 0x0F = 15 DEC
               00071                 ;; compare f with WREG, skip >
               00072                 ;; JUST TAKE A THE LO NIBBLE
5CA0 0E0F      00073                 movlw   0x0F
5CA2 146C      00074                 andwf   AY_R8_CH_A_AMPLITUDE,W
5CA4 6E03      00075                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE (0x00 - 0x0F)
               00076                 
5CA6 0E0E      00077                 movlw   0x0E
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 268


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5CA8 6403      00078                 cpfsgt  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE
               00079                                         ;; > 14 DEC. ? 
               00080                 
               00081                         ;; NO
               00082                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM1_OK
5CAA D002          M         bra     label
               00083 
               00084                         ;; YES - LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE = 15 DEC.
               00085                         ;; QUIT HERE
5CAC EFDD F024 00086                         goto LABEL_MAIN_MENUE_SWITCH
               00087 
               00088 
               00089 
5CB0           00090 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM1_OK
               00091 
               00092         
               00093         ;; ITEM = ITEM +1
               00094         ;; 
5CB0 2A6C      00095         incf AY_R8_CH_A_AMPLITUDE, F
               00096         
               00097         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00098         ;; --------------------------------------------------------
               00099         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5CB2 0E08      00100         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF ; ADRESS => AY REGISTER
5CB4 6E39      00101         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00102         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5CB6 C06C F03A 00103         movff AY_R8_CH_A_AMPLITUDE, AY_REG_DATA 
               00104         
               00105         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
5CBA ECAA F01B 00106         call LABEL_AY_SR_Write
               00107 
               00108                 ;; SWITCH BACK TO MAIN MENU 4
5CBE EFDD F024 00109                 goto LABEL_MAIN_MENUE_SWITCH
               00110         
               00111 
               00112 
               00113 ;;---[ 2) INC ITEM2 [MAIN MENU4]--------
               00114 
5CC2           00115 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM2
               00116 
               00117         ;; INC ITEM2
               00118         ;; ITEM2 => AY REG 9 = Volume CH. B 4BIT - LOW NIBBLE (!)
               00119         ;; => RANGE 0-15 DEC.
               00120         ;; => RANGE 0-F  HEX
               00121 
               00122                 ;; CHEK ITEM VALUE 
               00123                 ;; ITEM2 = LOW NIBBLE (4BIT)
               00124                 ;; 0x00 - 0x0F HEX = 0 - 15 DEC
               00125                 ;; compare f with WREG, skip >
               00126                 ;; JUST TAKE A THE LO NIBBLE
5CC2 0E0F      00127                 movlw   0x0F
5CC4 146D      00128                 andwf   AY_R9_CH_B_AMPLITUDE,W
5CC6 6E03      00129                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE (0x00 - 0x0F)
               00130                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 269


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5CC8 0E0E      00131                 movlw   0x0E
5CCA 6403      00132                 cpfsgt  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE
               00133                                         ;; > 14 DEC. ? 
               00134                 
               00135                         ;; NO
               00136                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM2_OK
5CCC D002          M         bra     label
               00137 
               00138                         ;; YES - LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE = 15 DEC.
               00139                         ;; SO QUIT HERE
5CCE EFDD F024 00140                         goto LABEL_MAIN_MENUE_SWITCH
               00141 
               00142 
               00143 
5CD2           00144 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM2_OK
               00145 
               00146         
               00147         ;; ITEM = ITEM +1
               00148         ;; 
5CD2 2A6D      00149         incf AY_R9_CH_B_AMPLITUDE, F
               00150         
               00151         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00152         ;; --------------------------------------------------------
               00153         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5CD4 0E09      00154         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF; ADRESS => AY REGISTER
5CD6 6E39      00155         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00156         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5CD8 C06D F03A 00157         movff AY_R9_CH_B_AMPLITUDE, AY_REG_DATA 
               00158         
               00159         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
5CDC ECAA F01B 00160         call LABEL_AY_SR_Write
               00161 
               00162                 
               00163                 ;; SWITCH MAIN MENU TO: MAIN MENU 4
5CE0 EFDD F024 00164                 goto LABEL_MAIN_MENUE_SWITCH
               00165 
               00166 
               00167 
               00168 
               00169 
               00170 ;;---[ 2) INC ITEM3 [MAIN MENU4]--------
               00171 
5CE4           00172 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM3
               00173                 
               00174         ;; INC ITEM3
               00175         ;; ITEM3 => AY REG 10 = Volume CH. C 4BIT - LOW NIBBLE (!)
               00176         ;; => RANGE 0-15 DEC.
               00177         ;; => RANGE 0-F  HEX
               00178 
               00179                 ;; CHEK ITEM VALUE 
               00180                 ;; ITEM1 = 4BIT LOW NIBBLE => 0x00 - 0x0F = 0 - 15 DEC
               00181                 ;; compare f with WREG, skip >
               00182                 ;; JUST TAKE A THE LO NIBBLE
5CE4 0E0F      00183                 movlw   0x0F
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 270


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5CE6 146E      00184                 andwf   AY_R10_CH_C_AMPLITUDE,W
5CE8 6E03      00185                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE (0x00 - 0x0F)
               00186                 
5CEA 0E0E      00187                 movlw   0x0E
5CEC 6403      00188                 cpfsgt  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE
               00189                                         ;; > 14 DEC. ? 
               00190                 
               00191                         ;; NO
               00192                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM3_OK
5CEE D002          M         bra     label
               00193 
               00194                         ;; YES - LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE = 15 DEC.
               00195                         ;; QUIT HERE
5CF0 EFDD F024 00196                         goto LABEL_MAIN_MENUE_SWITCH
               00197 
               00198 
               00199 
5CF4           00200 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM3_OK
               00201 
               00202         
               00203         ;; ITEM = ITEM +1
               00204         ;; 
5CF4 2A6E      00205         incf AY_R10_CH_C_AMPLITUDE, F
               00206         
               00207         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00208         ;; --------------------------------------------------------
               00209         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5CF6 0E0A      00210         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF; ADRESS => AY REGISTER
5CF8 6E39      00211         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00212         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5CFA C06E F03A 00213         movff AY_R10_CH_C_AMPLITUDE, AY_REG_DATA 
               00214         
               00215         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
5CFE ECAA F01B 00216         call LABEL_AY_SR_Write
               00217                 
               00218                 ;; SWITCH MAIN MENU TO: MAIN MENU 4
5D02 EFDD F024 00219                 goto LABEL_MAIN_MENUE_SWITCH
               00220 
               00221 
               00222 ;; ------[END PLUS @ MAIN MENU4]
               00223 
               00224 
               00074 #include "sub_menu_key_plus_menu_5.inc"
               00001 ;; sub_menu_key_plus_menu_5.inc
               00002 
               00003 ;; --------[PLUS @ MAIN MENU5]------------------
               00004 
5D06           00005 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU5
               00006         ;; MAIN MENU5 = ENVELOPE MENU
               00007 
               00008         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00009         ;; IN EDITING MODE "*"
               00010         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00011         ;;
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 271


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00012         ;; 2) INC ITEM 1-4
               00013 
               00014 ;; --[ 1) CHECK ITEM]-------
               00015 
               00016         ;; CHECK LOCATION VIA EDITING MODE "*"
               00017         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5D06 C204 F003 00018         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
               00019 
5D0A           00020 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM1     
5D0A 0E01      00021         movlw   MENU_ITEM_POS1
5D0C 6203      00022         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00023 
               00024                 ;; NO
               00025                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM2
5D0E D001          M         bra     label
               00026 
               00027                 ;; YES
               00028                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM1
5D10 D009          M         bra     label
               00029         
               00030 
5D12           00031 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM2
               00032 
5D12 0E02      00033         movlw   MENU_ITEM_POS2
5D14 6203      00034         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00035 
               00036                 ;; NO
               00037                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM3
5D16 D001          M         bra     label
               00038 
               00039                 ;; YES
               00040                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM2       
5D18 D013          M         bra     label
               00041 
               00042 
5D1A           00043 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM3
               00044         
5D1A 0E03      00045         movlw   MENU_ITEM_POS3
5D1C 6203      00046         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00047 
               00048                 ;; NO? - LAST ITEM FOR + SO QUIT HERE
5D1E EFDD F024 00049                 goto LABEL_MAIN_MENUE_SWITCH
               00050 
               00051                 ;; YES
               00052                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM3       
5D22 D01C          M         bra     label
               00053 
               00054 
               00055 ;;---[ 2) INC ITEM [MAIN MENU5 - [1-4]]]--------
               00056 
               00057 ;;---[ 2) INC ENV PERIOD COARSE [ITEM1 @ MAIN MENU5]--------
5D24           00058 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM1
               00059         ;; INC ITEM1
               00060         ;; ITEM1 => AY_R12_ENV_PERIOD_COARSE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 272


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00061         ;; => RANGE 0-255       DEC.
               00062         ;; => RANGE 0x00-0xFF   HEX
               00063 
               00064                 ;; CHEK ITEM VALUE 
               00065                 ;; ITEM1 = 8BIT = 0x00 to 0xFF
               00066                 ;; compare f with WREG, skip >
5D24 0EFE      00067                 movlw   0xfe
5D26 6470      00068                 cpfsgt  AY_R12_ENV_PERIOD_COARSE
               00069                 
               00070                         ;; NO
               00071                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM1_OK
5D28 D002          M         bra     label
               00072 
               00073                         ;; YES
5D2A EFDD F024 00074                         goto LABEL_MAIN_MENUE_SWITCH
               00075 
               00076 
5D2E           00077 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM1_OK
               00078 
               00079         
               00080         ;; ENV PERIOD COARSE +1
5D2E 2A70      00081         incf AY_R12_ENV_PERIOD_COARSE, F
               00082         
               00083         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00084         ;; --------------------------------------------------------
               00085         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5D30 0E0C      00086         movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE ; ADRESS => AY REGISTER
5D32 6E39      00087         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00088         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5D34 C070 F03A 00089         movff AY_R12_ENV_PERIOD_COARSE, AY_REG_DATA 
               00090         
               00091         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
5D38 ECAA F01B 00092         call LABEL_AY_SR_Write
               00093 
               00094                 ;; SUB ROUTINE IS DONE          
               00095                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
5D3C EFDD F024 00096                 goto LABEL_MAIN_MENUE_SWITCH
               00097 
               00098 
               00099 ;;---[ 2) INC ENV PERIOD FINE [ITEM2 @ MAIN MENU5]--------
               00100 
5D40           00101 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM2
               00102 
               00103         ;; INC ENV PERIOD FINE
               00104         ;; AY_R11_ENV_PERIOD_FINE
               00105         ;; => RANGE 0-255 DEC.
               00106         ;; => RANGE 0-FF  HEX.
               00107 
               00108                 ;; CHEK ITEM VALUE 
               00109                 ;; ITEM2 = 8BIT = 0xFF = 0-255 DEC
               00110                 ;; compare f with WREG, skip >
5D40 0EFE      00111                 movlw   0xFE
               00112                 ;; IS AY REG > 0xFE ? 
5D42 646F      00113                 cpfsgt  AY_R11_ENV_PERIOD_FINE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 273


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00114                 
               00115                         ;; NO
               00116                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM2_OK
5D44 D002          M         bra     label
               00117 
               00118                         ;; YES (F = 0xFF = 255) SO SKIP SUB ROUTINE HERE
5D46 EFDD F024 00119                         goto LABEL_MAIN_MENUE_SWITCH
               00120 
               00121 
5D4A           00122 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM2_OK
               00123         ;; ENV PERIOD FINE +1
5D4A 2A6F      00124         incf AY_R11_ENV_PERIOD_FINE, F
               00125         
               00126         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00127         ;; --------------------------------------------------------
               00128         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5D4C 0E0B      00129         movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE ; ADRESS => AY REGISTER
5D4E 6E39      00130         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00131         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5D50 C06F F03A 00132         movff AY_R11_ENV_PERIOD_FINE, AY_REG_DATA 
               00133         
               00134         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00135         ;; @ay_sr.inc
5D54 ECAA F01B 00136         call LABEL_AY_SR_Write
               00137                 ;; [+] SUB ROUTINE IS DONE              
               00138                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)
5D58 EFDD F024 00139                 goto LABEL_MAIN_MENUE_SWITCH
               00140 
               00141 
               00142 ;;---[ 2) INC ENV SHAPE [ITEM3 @ MAIN MENU5]--------
               00143 
5D5C           00144 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM3
               00145         ;; INC ITEM ENV SHAPE
               00146         ;; 1) INC ENV_SHAPE_0_15_to_1_8_TRANSLATOR [Range 1 to 8]
               00147         ;; 2) POINTER TO AY_R13_ENV_SHAPE_CYCLE [RANGE 0 to 15]
               00148                 ;; CHEK ITEM VALUE 
               00149                 ;;  INC ENV_SHAPE_0_15_to_1_8_TRANSLATOR => [RANGE 1 to 8]
               00150                 ;; compare f with WREG, skip IF >
               00151                 ;; AY REG > 0x07? [=8]
5D5C 0E07      00152                 movlw   0x07
5D5E 647A      00153                 cpfsgt  ENV_SHAPE_0_15_to_1_8_TRANSLATOR
               00154                 
               00155                         ;; NO
               00156                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM3_OK
5D60 D002          M         bra     label
               00157 
               00158                         ;; YES
5D62 EFDD F024 00159                         goto LABEL_MAIN_MENUE_SWITCH
               00160 
               00161 
5D66           00162 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM3_OK
               00163         ;; ITEM = ITEM +1
5D66 2A7A      00164         incf ENV_SHAPE_0_15_to_1_8_TRANSLATOR, F
               00165                         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 274


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5D68 EFDD F024 00166                 goto LABEL_MAIN_MENUE_SWITCH
               00167 
               00075 #include "sub_menu_key_plus_menu_6.inc"
               00001 ;; sub_menu_key_plus_menu_6.inc
               00002 
               00003 ;; ------------[MENU 6 - MIDI CH TONE A B C]------------------------------
5D6C           00004 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU6
               00005 ;; jump in here from sub_menu_key_plus.inc
               00006         ;; INC MIDI CHANNEL
               00007         
               00008         ;; 1) CHECK WHICH ITEM IS 
               00009         ;; IN EDITING MODE "*"
               00010         
               00011         ;; 2) INC ITEM 
               00012 
               00013         ;; --[ 1) CHECK ITEM]-------
               00014 
               00015         ;; CHECK LOCATION VIA EDITING MODE "*"
               00016         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5D6C C205 F003 00017         movff   AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
               00018 
5D70           00019 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM1     
5D70 0E01      00020         movlw   MENU_ITEM_POS1
5D72 6203      00021         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00022 
               00023                 ;; NO
               00024                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM2
5D74 D001          M         bra     label
               00025 
               00026                 ;; YES
               00027                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM1
5D76 D009          M         bra     label
               00028         
               00029 
5D78           00030 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM2
               00031 
5D78 0E02      00032         movlw   MENU_ITEM_POS2
5D7A 6203      00033         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00034 
               00035                 ;; NO
               00036                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM3
5D7C D001          M         bra     label
               00037 
               00038                 ;; YES
               00039                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM2       
5D7E D010          M         bra     label
               00040 
               00041 
5D80           00042 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM3
               00043         
5D80 0E03      00044         movlw   MENU_ITEM_POS3
5D82 6203      00045         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00046 
               00047                 ;; NO? - No Item Left Over - So Quit Here
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 275


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5D84 EFDD F024 00048                 goto LABEL_MAIN_MENUE_SWITCH
               00049 
               00050                 ;; YES
               00051                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM3       
5D88 D016          M         bra     label
               00052 
               00053 
               00054 
               00055 
               00056 ;;---[ 2) INC ITEM [MAIN MENU6 - [MIDI CH TONE A]]]--------
               00057 
5D8A           00058 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM1
               00059         ;; INC ITEM1 - MIDI CH TONE A
               00060         ;; => RANGE 0-15 DEC. / LCD 1 - 16
               00061         ;; => RANGE 0x00-0x0F  HEX
               00062 
               00063                 ;; CHEK ITEM VALUE 
               00064                 ;; ITEM1 = 4BIT = 0x0F = 15 DEC
               00065                 ;; compare f with WREG, skip >
               00066                 ;; JUST TAKE A THE LO NIBBLE
5D8A 0E0F      00067                 movlw   0x0F
5D8C 1430      00068                 andwf   AY_TONE_A_MIDI_CHANNEL_USER,W
5D8E 6E03      00069                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_TONE_A_MIDI_CHANNEL_USER (0x00 - 0x0F)
               00070                 
5D90 0E0E      00071                 movlw   0x0E
5D92 6403      00072                 cpfsgt  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE
               00073                                         ;; > 14 DEC. ? 
               00074                 
               00075                         ;; NO
               00076                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM1_OK
5D94 D002          M         bra     label
               00077 
               00078                         ;; YES - LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE = 15 DEC.
               00079                         ;; QUIT HERE
5D96 EFDD F024 00080                         goto LABEL_MAIN_MENUE_SWITCH
               00081 
               00082 
               00083 
5D9A           00084 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM1_OK
               00085         ;; ITEM = ITEM +1 => MIDI CH A +1 
5D9A 2A30      00086         incf AY_TONE_A_MIDI_CHANNEL_USER, F
               00087                 
               00088                 ;; GO BACK TO MAIN MENU
5D9C EFDD F024 00089                 goto LABEL_MAIN_MENUE_SWITCH
               00090 
               00091         
               00092 
               00093 ;;---[ 2) INC ITEM2 [MAIN MENU6 / MIDI CH TONE B]--------
               00094 
5DA0           00095 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM2
               00096         ;; INC ITEM2
               00097         ;; => RANGE 0-15 DEC.
               00098         ;; => RANGE 0-F  HEX
               00099                 ;; CHEK ITEM VALUE 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 276


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00100                 ;; ITEM2 = LOW NIBBLE (4BIT)
               00101                 ;; 0x00 - 0x0F HEX = 0 - 15 DEC
               00102                 ;; compare f with WREG, skip >
               00103                 ;; JUST TAKE A THE LO NIBBLE
5DA0 0E0F      00104                 movlw   0x0F
5DA2 1431      00105                 andwf   AY_TONE_B_MIDI_CHANNEL_USER,W
5DA4 6E03      00106                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_TONE_B_MIDI_CHANNEL_USER (0x00 - 0x0F)
               00107                 
5DA6 0E0E      00108                 movlw   0x0E
5DA8 6403      00109                 cpfsgt  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_TONE_B_MIDI_CHANNEL_USER
               00110                                         ;; > 14 DEC. ? 
               00111                 
               00112                         ;; NO
               00113                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM2_OK
5DAA D002          M         bra     label
               00114 
               00115                         ;; YES - LOW NIBBLE OF AY_TONE_B_MIDI_CHANNEL_USER = 15 DEC.
               00116                         ;; SO QUIT HERE
5DAC EFDD F024 00117                         goto LABEL_MAIN_MENUE_SWITCH
               00118 
               00119 
               00120 
5DB0           00121 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM2_OK
               00122         ;; ITEM = ITEM +1
5DB0 2A31      00123         incf AY_TONE_B_MIDI_CHANNEL_USER, F
               00124 
               00125                 ;; SWITCH MAIN MENU TO: MAIN MENU 6
5DB2 EFDD F024 00126                 goto LABEL_MAIN_MENUE_SWITCH
               00127 
               00128 
               00129 
               00130 
               00131 
               00132 ;;---[ 2) INC ITEM3 [MAIN MENU6 / MIDI CH TONE C]--------
               00133 
5DB6           00134 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM3
               00135         ;; INC ITEM3
               00136         ;; => RANGE 0-15 DEC.
               00137         ;; => RANGE 0-F  HEX
               00138 
               00139                 ;; CHEK ITEM VALUE 
               00140                 ;; ITEM1 = 4BIT LOW NIBBLE => 0x00 - 0x0F = 0 - 15 DEC
               00141                 ;; compare f with WREG, skip >
               00142                 ;; JUST TAKE A THE LO NIBBLE
5DB6 0E0F      00143                 movlw   0x0F
5DB8 1432      00144                 andwf   AY_TONE_C_MIDI_CHANNEL_USER,W
5DBA 6E03      00145                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_TONE_C_MIDI_CHANNEL_USER (0x00 - 0x0F)
               00146                 
5DBC 0E0E      00147                 movlw   0x0E
5DBE 6403      00148                 cpfsgt  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_TONE_C_MIDI_CHANNEL_USER
               00149                                         ;; > 14 DEC. ? 
               00150                 
               00151                         ;; NO
               00152                         rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM3_OK
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 277


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5DC0 D002          M         bra     label
               00153 
               00154                         ;; YES - AY_TONE_C_MIDI_CHANNEL_USER = 15 DEC.
               00155                         ;; QUIT HERE
5DC2 EFDD F024 00156                         goto LABEL_MAIN_MENUE_SWITCH
               00157 
               00158 
               00159 
5DC6           00160 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM3_OK
               00161         ;; ITEM = ITEM +1
5DC6 2A32      00162         incf AY_TONE_C_MIDI_CHANNEL_USER, F
               00163                                 
               00164                 ;; GOTO MAIN MENU SWITCH
5DC8 EFDD F024 00165                 goto LABEL_MAIN_MENUE_SWITCH
               00076 #include "sub_menu_key_plus_menu_7.inc"
               00001 ;; sub_menu_key_plus_menu_7.inc
               00002 
               00003 ;; -------------[MENU 7]-----------------------------------------------------------------------------
               00004 ;; -------------[SET VELOCITY TO TONE ABC + NOISE PERIOD @ MAIN MENU7 - VELOCITY CONTROL]-------------
               00005 
5DCC           00006 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU7
               00007 ;; jump in here from sub_menu_key_plus.inc
               00008 
               00009         ;; 1) CHECK WHICH ITEM IS 
               00010         ;; IN EDITING MODE "*"
               00011         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
               00012         ;;
               00013         ;; 2) SET ITEM 
               00014 
               00015         ;; --[ 1) CHECK ITEM (ITEM POS)]-------
               00016 
               00017         ;; CHECK LOCATION VIA EDITING MODE "*"
               00018         ;; AND JUMP TO THE EDITING MODE ITEM
5DCC C206 F003 00019         movff AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
5DD0 5003      00020         movf  MIOS_PARAMETER1, W
               00021         JUMPTABLE_4BYTES 5 ;; [ITEM 1 to 4 JUMP, ITEM 0 = NOT VALID EXIT HERE]
5DD2 0FFB          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5DD4 B0D8          M         skpnc
5DD6 0012          M         return
5DD8 0F05          M         addlw   (max_value)
5DDA ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
5DDE EFDD F024 00022                 goto LABEL_MAIN_MENUE_SWITCH                    ;; POS0 - EXIT HERE TO MAIN MENU
5DE2 EFF9 F02E 00023                 goto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_A        ;; POS1 - SET VELOCITY TO TONE A
5DE6 EFFC F02E 00024                 goto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_B        ;; POS2 - SET VELOCITY TO TONE B
5DEA EFFF F02E 00025                 goto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_C        ;; POS3 - SET VELOCITY TO TONE C
5DEE EF02 F02F 00026                 goto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_PERIOD ;; POS4 - SET VELOCITY NOISE PERIOD
               00027 
               00028 
5DF2           00029 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_A     
               00030         ;; ITEM POS1 - SET VELOCITY TO TONE A (MIDI VELOCITY DATA TO VOLUME OF TONE A)
5DF2 8033      00031         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_VELOCITY_ON_OFF_TONE_A
               00032                 ;; WORK IS DONE BACK TO MAIN MENU
5DF4 EFDD F024 00033                 goto LABEL_MAIN_MENUE_SWITCH
               00034 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 278


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00035 
5DF8           00036 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_B     
               00037         ;; POS2 - SET VELOCITY TO TONE B
5DF8 8233      00038         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT1_VELOCITY_ON_OFF_TONE_B
               00039                 ;; WORK IS DONE BACK TO MAIN MENU
5DFA EFDD F024 00040                 goto LABEL_MAIN_MENUE_SWITCH
               00041 
               00042 
               00043 
5DFE           00044 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_C
               00045         ;; POS1 - SET VELOCITY TO TONE C
5DFE 8433      00046         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT2_VELOCITY_ON_OFF_TONE_C
               00047                 ;; WORK IS DONE BACK TO MAIN MENU
5E00 EFDD F024 00048                 goto LABEL_MAIN_MENUE_SWITCH
               00049 
               00050 
               00051 ;; ---- [VELOCITY TO NOISE PERIOD - SWITCH VELOCITY NOISE PERIOD TO VELOCITY FROM TONE AB or C]-------
               00052 
5E04           00053 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_PERIOD
               00054         ;; CHECK IF BIT3 is SET
5E04 A633      00055         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00056                 ;; NO, BIT3 IS NOT SET
               00057                 ;; SO SET BIT3 AND BIT5 => SET VELOCITY = TONE A  
               00058                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_A
5E06 D001          M         bra     label
               00059         
               00060                 ;; YES - BIT3 IS SET - CHECK IF VELOCITY IS TONE A
               00061                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_A
5E08 D006          M         bra     label
               00062 
5E0A           00063 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_A
               00064         ;; SET VELOCITY TONE A TO NOISE PERIOD
5E0A 8633      00065         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF  ;; VELOCITY TO NOISE RATE ON
5E0C 8A33      00066         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF;; Take VELOCITY from A
5E0E 9C33      00067         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
5E10 9E33      00068         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               00069                 ;; WORK IS DONE BACK TO MAIN MENU
5E12 EFDD F024 00070                 goto LABEL_MAIN_MENUE_SWITCH
               00071 
5E16           00072 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_A
               00073         ;; IS BIT5 [TONE A] = SET?
5E16 AA33      00074         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               00075                 ;; NO, BIT5 IS NOT SET - VELOCITY IS NOT TONE A @ NIOSE PERIOD
               00076                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_B
5E18 D006          M         bra     label
               00077         
               00078                 ;; YES - BIT5 IS SET, SO IT IS TONE A @ NOISE PERIOD
               00079                 ;; SWITCH TO TONE B - TONE B MUST BE VELOCITY FOR NOISE PERIOD 
               00080                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_B
5E1A D000          M         bra     label
               00081 
5E1C           00082 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_B
               00083         ;; SET VELOCITY TONE B TO NOISE PERIOD
5E1C 9A33      00084         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 279


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5E1E 8C33      00085         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH ON  VELOCITY TONE B
5E20 9E33      00086         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE C
               00087                 ;; WORK IS DONE BACK TO MAIN MENU
5E22 EFDD F024 00088                 goto LABEL_MAIN_MENUE_SWITCH
               00089 
5E26           00090 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_B
               00091         ;; CHECK IF BIT6 [TONE B] is SET
5E26 AC33      00092         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, 6
               00093                 ;; NO, BIT6 IS NOT SET - ITS MUST BE TONE C 
               00094                 ;; MUST BE BIT 7 - TONE C 
               00095                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_VELOCITY_IS_NOISE_CH_C
5E28 D006          M         bra     label
               00096         
               00097                 ;; YES - BIT6 IS SET, SO IT IS TONE B @ NOISE PERIOD
               00098                 ;; TONE C MUST BE VELOCITY FOR NOISE PERIOD 
               00099                 rgoto LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_C
5E2A D000          M         bra     label
               00100 
5E2C           00101 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_C 
               00102         ;; SET VELOCITY TONE C TO NOISE PERIOD
5E2C 9A33      00103         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE A
5E2E 9C33      00104         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE B
5E30 8E33      00105         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH ON  VELOCITY TONE C
               00106                 ;; WORK IS DONE BACK TO MAIN MENU
5E32 EFDD F024 00107                 goto LABEL_MAIN_MENUE_SWITCH
               00108 
               00109 
5E36           00110 LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_VELOCITY_IS_NOISE_CH_C
               00111               ;; VELOCITY IS @ TONE C 
               00112               ;; NOTHING MORE TO DO HERE
               00113               ;; WORK IS DONE BACK TO MAIN MENU
5E36 EFDD F024 00114                 goto LABEL_MAIN_MENUE_SWITCH
               00115 
               00077 #include "sub_menu_key_plus_menu_8.inc"
               00001 ;; sub_menu_key_plus_menu_8.inc
               00002 
               00003 ;; plus key @ Fx Menu 
               00004 
5E3A           00005 PLUS_KEY_SUBROUTINE_AT_MAIN_MENU8
               00006         ;; CHECK LOCATION VIA EDITING MODE "*"
               00007         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5E3A C207 F003 00008         movff   AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
               00009         
               00010         ;; JUMP TO [+] Routine @ item X
5E3E 5003      00011         movf MIOS_PARAMETER1, W
               00012         JUMPTABLE_4BYTES 5 ;; [MENU 0 to 8]
5E40 0FFB          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5E42 B0D8          M         skpnc
5E44 0012          M         return
5E46 0F05          M         addlw   (max_value)
5E48 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
5E4C EFDD F024 00013                 goto        LABEL_MAIN_MENUE_SWITCH              ;; Error: just reaload currend Main Menu
5E50 EF30 F02F 00014                 goto        INC_FX_TAB_POS                       ;; INC FX Tab Pos
5E54 EF3A F02F 00015                 goto        INC_FX_DELAY_TIME                    ;; INC Fx Time (Delay befor Fx execution)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 280


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5E58 EF48 F02F 00016                 goto        INC_FX_FUNCTION                      ;; INC Fx Func
5E5C EF55 F02F 00017                 goto        INC_FX_DATA                          ;; INC Fx Data
               00018         
               00019         
               00020         
               00021 ;; -------------------[INC Fx Pos (0-31)]---------------------  
5E60           00022 INC_FX_TAB_POS
               00023         ;; INC Pos of Fx Tab and load Currend pos Values
               00024                 
               00025         ;; inc FX TAB POS +1 [Range 1 to 32]
5E60 2A4F      00026         incf FX_POS_CURREND, F
               00027                 
               00028                 ;; POS > 31 ?
5E62 0E1F      00029                 movlw 0x1F ;; = 31 DEC. [0-31 [32 positions]]
5E64 644F      00030                 cpfsgt  FX_POS_CURREND
               00031                         ;; NO - OK GO ON
5E66 EF36 F02F 00032                         goto FX_TAB_LOAD_DATA_CURREND_POS
               00033 
               00034                         ;; YES - reset Fx Tab Pos
5E6A 6A4F      00035                         clrf FX_POS_CURREND
               00036                 
               00037 
5E6C           00038 FX_TAB_LOAD_DATA_CURREND_POS
               00039                 ;; LOAD FX DATA @ THE CURREND POS
5E6C EC84 F03B 00040                 call LOAD_FX_DATA_LCD_CURREND_POS
               00041 
5E70 EFDD F024 00042                         goto   LABEL_MAIN_MENUE_SWITCH
               00043 
               00044 
               00045 
               00046         
               00047 ;; -------------------[INC Fx Func Delay Time (0-200)]---------------------             
5E74           00048 INC_FX_DELAY_TIME
               00049         ;; INC Fx Delay Time @ currend Fx Pos
5E74 2A52      00050         incf FX_TIME_PRE_EXECUTION_CURREND, F
               00051                 
               00052                 ;; Fx Delay Time > 200 ?
5E76 0EC8      00053                 movlw Fx_DELAY_TIME_MAX 
5E78 6452      00054                 cpfsgt FX_TIME_PRE_EXECUTION_CURREND
               00055                         
               00056                         ;; NO, go on
               00057                         rgoto DEC_FX_DELAY_TIME_WRITE
5E7A D1A7          M         bra     label
               00058                 
               00059                                 ;; YES, Reset Fx Delay Time to 0
5E7C 6A52      00060                                 clrf FX_TIME_PRE_EXECUTION_CURREND
               00061         ;; -------------------------------------------------
5E7E 0E02      00062         movlw SELECT_Fx_RAM_BANK        ;; INDIRECT RAM ADDRESSING
5E80 6EEA      00063         movwf FSR0H                     ;; SET THE RAM BANK TO 2
               00064         ;; ;; Write result to FX Delay TIME Reg. @ Currend Fx Pos       
5E82 0E60      00065         movlw RAM_OFFSET_FX_TIME_PRE_EXECUTION  ;; FX TIME Regs OFFSET 
5E84 244F      00066         addwf FX_POS_CURREND, W                 ;; + Pos + Offset => Fx Tab Pos
5E86 6EE9      00067         movwf FSR0L                             ;; LOAD CURREND OFFSET To Ind. Reg Adress
5E88 C052 FFEF 00068         movff FX_TIME_PRE_EXECUTION_CURREND, INDF0      ;; WRITE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 281


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00069         ;; -------------------------------------------------
               00070                         ;; OK, WORK IS DONE
5E8C EFDD F024 00071                         goto        LABEL_MAIN_MENUE_SWITCH
               00072         
               00073         
               00074 ;; -------------------[INC Fx Func (0-37)]--------------------- 
5E90           00075 INC_FX_FUNCTION
               00076         ;; INC Fx Function @ currend Fx Pos
5E90 2A50      00077         incf FX_FUNCTION_CURREND, F
               00078 
5E92 0E2A      00079         movlw  FX_FUNCTIONS_MAX_PULS_1  ;; = 42 DEC = (Functions [0-41] +1)
               00080         ;; Fx fuction < 42?
5E94 6050      00081         cpfslt  FX_FUNCTION_CURREND
               00082                         ;; NO, FUNCTION IS NOT < 42 
               00083                         ;; IT's NOT VALID
               00084                         ;; [VALID RANGE = 0-41]
               00085                         ;; SO RESET Fx FUNCTION to 0 
5E96 6A50      00086                         clrf FX_FUNCTION_CURREND ;; FUNC = 0x00 =  
               00087         
               00088                 ;; Yes < 42     
               00089                 ;; ALLRIGHT WE DO NOT HAVE TO RESET FX FUNC. 
               00090                 ;; --------------------------------------------------
5E98 0E02      00091                 movlw SELECT_Fx_RAM_BANK  ;; INDIRECT RAM ADDRESSING
5E9A 6EEA      00092                 movwf FSR0H             ;; SET THE RAM BANK TO 2
               00093                         ;; Write result to FX Function. @ Currend Fx Pos        
5E9C 0E20      00094                         movlw RAM_OFFSET_FX_FUNCTION ;; FX TIME Regs OFFSET 
5E9E 244F      00095                         addwf FX_POS_CURREND, W ;; + (0 to 31 [32]) => Fx Tab Pos
5EA0 6EE9      00096                         movwf FSR0L             ;; LOAD CURREND OFFSET To Ind. Reg Adress
5EA2 C050 FFEF 00097                         movff FX_FUNCTION_CURREND, INDF0        ;; WRITE
               00098                 ;; --------------------------------------------------
               00099                                 ;; OK, WORK IS DONE
5EA6 EFDD F024 00100                                 goto  LABEL_MAIN_MENUE_SWITCH
               00101 
               00102 
               00103 
               00104 ;; -------------------[INC Fx Func Data (0-255)]---------------------   
5EAA           00105 INC_FX_DATA
               00106         ;; INC Fx Data @ currend Fx Pos
5EAA 2A51      00107         incf FX_DATA_CURREND, F
               00108         ;; -----------------------------------------------
5EAC 0E02      00109         movlw SELECT_Fx_RAM_BANK;; INDIRECT RAM ADDRESSING:
5EAE 6EEA      00110         movwf FSR0H             ;; SET THE RAM BANK TO 2
               00111         ;; ;; Write result to FX DATA Reg. @ Currend Fx Pos     
5EB0 0E40      00112         movlw RAM_OFFSET_FX_DATA;; FX DATA Regs OFFSET 
5EB2 244F      00113         addwf FX_POS_CURREND, W ;; + (0 to 31 [32]) => Fx Tab Pos
5EB4 6EE9      00114         movwf FSR0L             ;; LOAD CURREND OFFSET To Ind. Reg Adress
5EB6 C051 FFEF 00115         movff FX_DATA_CURREND, INDF0    ;; WRITE
               00116         ;; -----------------------------------------------
               00117                                 ;; OK, WORK IS DONE
5EBA EFDD F024 00118                                 goto        LABEL_MAIN_MENUE_SWITCH
               00078 
               00079 #include "sub_menu_key_minus.inc"
               00001 ;; sub_menu_key_minus.inc
               00002 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 282


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00003 ;; ----------------------------------------------------------------------------
               00004 ;; -------------------------[MINUS]-------------------------------------------- 
               00005 ;; ===============> [-] KEY HAD BEEN PRESSED
               00006 ;; ===================> SWITCH TO THE corresponding SUB MENU ROUTINE
               00007 
               00008 
5EBE           00009 LABEL_AY_SUB_MENU_MINUS
               00010         ;; 1) CHECK WHICH MAIN MENU IS ACTIVATED
               00011         ;; ==> VIA CURRENT_MAIN_MENU
               00012         ;;
               00013         ;; 2) GOTO THE NEEDED SUB ROUTINE OF THE ACTIVATED
               00014         ;;    MAIN MENU
               00015 
               00016         ;; JUMP TO KEY @ MENU X
5EBE 5074      00017         movf CURRENT_MAIN_MENU, W
               00018         JUMPTABLE_4BYTES 9 ;; [MENU 0 to 8]
5EC0 0FF7          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
5EC2 B0D8          M         skpnc
5EC4 0012          M         return
5EC6 0F09          M         addlw   (max_value)
5EC8 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
5ECC EF78 F02F 00019                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU0                  ;; MENU OVERVIEW (VIA ESC)
5ED0 EF7A F02F 00020                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU1
5ED4 EF86 F02F 00021                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU2
5ED8 EFD1 F02F 00022                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU3
5EDC EFE6 F02F 00023                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU4
5EE0 EF28 F030 00024                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU5
5EE4 EF5B F030 00025                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU6
5EE8 EF8B F030 00026                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU7
5EEC EFC2 F030 00027                 goto        MINUS_KEY_SUBROUTINE_AT_MAIN_MENU8                  ;; Fx Menu (F8)
               00028                 
               00029 
               00030 
               00031 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00032 ;; ----------------------------------------------------------------
               00033         
               00034 ;; -------------------------[END OF SUB MENU: MINUS]----------------------------- 
               00035 
               00080 #include "sub_menu_key_minus_menu_0.inc"
               00001 ;; sub_menu_minus_menu_0
               00002 
               00003 
               00004 ;; --------[MINUS @ MAIN MENU0]------------------
               00005 ;; JUMP IN HERE FROM sub_menu_minus.inc
               00006 
5EF0           00007 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU0
               00008         ;; MINUS @ MENU SWITCH MENU - NO Function yet
5EF0 EF03 F025 00009         goto LABEL_AY_MAIN_MENU_00_MENU_SWITCH
               00010 
               00081 #include "sub_menu_key_minus_menu_1.inc"
               00001 ;; sub_menu_minus_menu_1.inc
               00002 
               00003 
               00004 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 283


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00005 ;; --------[MINUS @ MAIN MENU1]------------------
               00006 ;; JUMPED IN HERE FROM sub_menu_key_minus.inc
5EF4           00007 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU1
               00008         ;; MAIN MENU1 = PATCH INFO MENU
               00009         ;; MINUS IS NEEDED HERE SO
               00010 
               00011         ;; Jumped in here from sub_menu_key_plus.inc
               00012         
               00013         ;; 1) CHECK ITEM = EDITING MODE "*"
               00014         ;;
               00015         ;; 2) INC ITEM 
               00016 
               00017 ;; --[ 1) CHECK ITEM]-------
               00018 
               00019         ;; CHECK LOCATION VIA EDITING MODE "*"
               00020         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5EF4 C200 F003 00021         movff   AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO, MIOS_PARAMETER1
               00022 
5EF8           00023 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU1_CHK_ITEM2    
5EF8 0E02      00024         movlw   MENU_ITEM_POS2
5EFA 6203      00025         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00026 
               00027                         ;; NO
               00028                         ;; Exit here
5EFC 0012      00029                         return
               00030 
               00031                 ;; YES
               00032                 ;; SO DEC ITEM2
               00033                 ;; ITEM2 => PATCH NUMBER [INT(0) - 1-128 (BANKSTICK])
               00034                 ;; => RANGE 0    - 128   DEC.
               00035                 ;; => RANGE 0x00 - 0x80  HEX.
               00036                 ;; CHEK ITEM VALUE 
               00037                 ;; compare f with WREG, 
               00038                 ;; skip if BROWSE_PATCH_NR = 0
5EFE 6AE8      00039                 clrw    ;; 0
5F00 627C      00040                 cpfseq  BROWSE_PATCH_NR
               00041                 
               00042                         ;; NO
               00043                         ;; BROWSE_PATCH_NR > PATCH_NUMBER_VALUE_MAX
               00044                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU1_DEC_ITEM2
5F02 D001          M         bra     label
               00045 
               00046                                         ;; YES 
               00047                                         ;; BROWSE_PATCH_NR = PATCH_NUMBER_VALUE_MAX
               00048                                         ;; Exit here
5F04 0012      00049                                         return
               00050 
               00051 
5F06           00052 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU1_DEC_ITEM2
               00053         ;; ITEM [PATCH NUMBER] = ITEM -1
5F06 067C      00054         decf BROWSE_PATCH_NR, F
               00055         
               00056 
               00057 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 284


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00058 ;; -------------------------------------[exit here]------------------------------
               00059                                         ;; Redraw MAIN MENU LCD
               00060                                         ;; main_menu_01_patch.inc
5F08 EF1E F025 00061                                         goto LABEL_AY_MAIN_MENU_01_PATCH_INFO
               00062                                 
               00063 
               00082 #include "sub_menu_key_minus_menu_2.inc"
               00001 ;; sub_menu_key_minus_menu_2.inc
               00002 
               00003 ;; --------[MINUS @ MAIN MENU2]------------------
               00004 ;; JUMPED IN HERE FROM sub_menu_key_minus.inc
               00005 
5F0C           00006 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU2
               00007         ;; MAIN MENU2 = TUNE MENU
               00008         ;; MINUS HAD BEEN PRESSED
               00009         ;;
               00010         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00011         ;; IN EDITING MODE "*"
               00012         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00013         ;;
               00014         ;; 2) DEC ITEM @ MAIN MENU2 = TUNE MENU
               00015 
               00016 ;; --[ 1) CHECK ITEM]-------
               00017 
               00018         ;; CHECK LOCATION VIA EDITING MODE "*"
               00019         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5F0C C201 F003 00020         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE, MIOS_PARAMETER1
               00021 
5F10           00022 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM1    
5F10 0E01      00023         movlw   MENU_ITEM_POS1
5F12 6203      00024         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM POS  = 1?
               00025 
               00026                 ;; NO
               00027                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM2
5F14 D001          M         bra     label
               00028 
               00029                 ;; YES
               00030                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM1
5F16 D015          M         bra     label
               00031         
               00032 
5F18           00033 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM2
               00034 
5F18 0E02      00035         movlw   MENU_ITEM_POS2
5F1A 6203      00036         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00037 
               00038                 ;; NO
               00039                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM3
5F1C D001          M         bra     label
               00040 
               00041                 ;; YES
               00042                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM2      
5F1E D019          M         bra     label
               00043 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 285


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00044 
5F20           00045 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM3
               00046         
5F20 0E03      00047         movlw   MENU_ITEM_POS3
5F22 6203      00048         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00049 
               00050                 ;; NO
               00051                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM4
5F24 D001          M         bra     label
               00052 
               00053                 ;; YES
               00054                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM3      
5F26 D01D          M         bra     label
               00055 
               00056 
               00057 
               00058 
5F28           00059 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM4
               00060 
5F28 0E04      00061         movlw   MENU_ITEM_POS4
5F2A 6203      00062         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 4?
               00063 
               00064                 ;; NO
               00065                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM5
5F2C D001          M         bra     label
               00066 
               00067                 ;; YES
               00068                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM4      
5F2E D021          M         bra     label
               00069 
               00070 
5F30           00071 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM5
               00072 
5F30 0E05      00073         movlw   MENU_ITEM_POS5
5F32 6203      00074         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 5?
               00075 
               00076                 ;; NO
               00077                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM6
5F34 D001          M         bra     label
               00078 
               00079                 ;; YES
               00080                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM5      
5F36 D025          M         bra     label
               00081 
               00082 
5F38           00083 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM6
               00084 
5F38 0E06      00085         movlw   MENU_ITEM_POS6
5F3A 6203      00086         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 6?
               00087 
               00088                 ;; NO - THERE IS NO ITEM LEFT OVER - SO QUIT
5F3C EFDD F024 00089                 goto LABEL_MAIN_MENUE_SWITCH
               00090 
               00091                 ;; YES
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 286


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00092                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM6      
5F40 D028          M         bra     label
               00093 
               00094 
               00095 
               00096 
               00097 ;;---[ 2) DEC ITEM [MAIN MENU2 - [1-6]]]--------
               00098 
               00099 ;;---[ 2) DEC ITEM1 [MAIN MENU2]--------
5F42           00100 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM1
               00101         ;; DEC ITEM1
               00102         ;; ITEM1 => USER CH. A COASE TUNE 4BIT (!)
               00103         ;; => RANGE 0-15 DEC.
               00104         ;; => RANGE 0-F  HEX
               00105 
               00106                 ;; CHEK ITEM VALUE 
               00107                 ;; ITEM1 = 4BIT = 0x0F = 15 DEC
               00108                 ;; compare f with WREG, skip if f < 1
               00109                 ;; IS AY_TONE_A_TUNE_COARSE_USER = 0?
5F42 6AE8      00110                 clrw
5F44 6226      00111                 cpfseq  AY_TONE_A_TUNE_COARSE_USER
               00112                         ;; NO
               00113                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM1_OK
5F46 D002          M         bra     label
               00114 
               00115                         ;; YES
5F48 EFDD F024 00116                         goto LABEL_MAIN_MENUE_SWITCH
               00117 
               00118 
5F4C           00119 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM1_OK
               00120                         ;; ITEM = ITEM -1
5F4C 0626      00121                         decf AY_TONE_A_TUNE_COARSE_USER, F
               00122                                 ;; SWITCH MAIN MENU TO: TUNE MENU
5F4E EFDD F024 00123                                 goto LABEL_MAIN_MENUE_SWITCH
               00124 
               00125 
               00126 ;;---[ 2) INC ITEM2 [MAIN MENU2]--------
               00127 
5F52           00128 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM2
               00129         ;; DEC ITEM2
               00130         ;; ITEM1 => USER CH. A FINE TUNE 8BIT 
               00131         ;; => RANGE 0-255 DEC.
               00132         ;; => RANGE 0-FF  HEX.
               00133 
               00134                 ;; CHEK ITEM VALUE 
               00135                 ;; ITEM2 = 8BIT = 0xFF = 0-255 DEC
               00136                 ;; compare f with WREG, skip if f < 1
5F52 6AE8      00137                 clrw    
               00138                 ;; IS AY REG = 0x00 ? 
5F54 6223      00139                 cpfseq  AY_TONE_A_TUNE_FINE_USER
               00140                 
               00141                         ;; NO
               00142                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM2_OK
5F56 D002          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 287


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00143 
               00144                         ;; YES SO SKIP SUB ROUTINE HERE
5F58 EFDD F024 00145                         goto LABEL_MAIN_MENUE_SWITCH
               00146 
               00147 
5F5C           00148 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM2_OK
               00149                         ;; ITEM = ITEM -1
5F5C 0623      00150                         decf AY_TONE_A_TUNE_FINE_USER, F
5F5E EFDD F024 00151                                 goto LABEL_MAIN_MENUE_SWITCH
               00152 
               00153 
               00154 ;;---[ 2) DEC ITEM3 [MAIN MENU2]--------
               00155 
5F62           00156 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM3
               00157         ;; INC ITEM3
               00158         ;; ITEM3 => USER CH. B COASE TUNE 4BIT 
               00159         ;; => RANGE 0-15 DEC.
               00160         ;; => RANGE 0-0F  HEX.
               00161 
               00162                 ;; CHEK ITEM VALUE 
               00163                 ;; ITEM3 = 4BIT = 0x0F = 0-15 DEC
               00164                 ;; compare f with WREG, skip IF < 1
               00165                 ;; AY REG = 0x00?
5F62 6AE8      00166                 clrw
5F64 6227      00167                 cpfseq  AY_TONE_B_TUNE_COARSE_USER
               00168                         ;; NO
               00169                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM3_OK
5F66 D002          M         bra     label
               00170 
               00171                         ;; YES
5F68 EFDD F024 00172                         goto LABEL_MAIN_MENUE_SWITCH
               00173 
               00174 
5F6C           00175 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM3_OK
               00176                         ;; ITEM = ITEM -1
5F6C 0627      00177                         decf AY_TONE_B_TUNE_COARSE_USER, F
               00178                                 ;; SWITCH MAIN MENU TO: TUNE MENU
5F6E EFDD F024 00179                                 goto LABEL_MAIN_MENUE_SWITCH
               00180 
               00181 
               00182 
               00183 ;;---[ 2) DEC ITEM4 [MAIN MENU2]--------
               00184 
5F72           00185 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM4
               00186         ;; INC ITEM4
               00187         ;; ITEM4 => USER CH. B FINE TUNE 8BIT 
               00188         ;; => RANGE 0-255 DEC.
               00189         ;; => RANGE 0-FF  HEX.
               00190 
               00191                 ;; CHEK ITEM VALUE 
               00192                 ;; ITEM4 = 8BIT = 0xFF = 0-255 DEC
               00193                 ;; compare f with WREG, skip IF f < 1
               00194                 ;; AY REG = 0x00?
5F72 6AE8      00195                 clrw 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 288


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
5F74 6224      00196                 cpfseq  AY_TONE_B_TUNE_FINE_USER
               00197                         ;; NO
               00198                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM4_OK
5F76 D002          M         bra     label
               00199 
               00200                         ;; YES
5F78 EFDD F024 00201                         goto LABEL_MAIN_MENUE_SWITCH
               00202 
               00203 
5F7C           00204 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM4_OK
               00205                         ;; ITEM = ITEM -1
5F7C 0624      00206                         decf AY_TONE_B_TUNE_FINE_USER, F
               00207                                 ;; SWITCH MAIN MENU TO: TUNE MENU
5F7E EFDD F024 00208                                 goto LABEL_MAIN_MENUE_SWITCH
               00209 
               00210 
               00211 
               00212 
               00213 
               00214 ;;---[ 2) DEC ITEM5 [MAIN MENU2]]--------
               00215 
5F82           00216 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM5
               00217         ;; DEC ITEM5
               00218         ;; ITEM5 => USER CH. C COASE TUNE 4BIT 
               00219         ;; => RANGE 0-15 DEC.
               00220         ;; => RANGE 0-0F  HEX.
               00221 
               00222                 ;; CHEK ITEM VALUE 
               00223                 ;; ITEM5 = 4BIT = 0x0F = 0-15 DEC
               00224                 ;; compare f with WREG, skip IF f < 1
               00225                 ;; AY REG = 0x00?
5F82 6AE8      00226                 clrw
5F84 6228      00227                 cpfseq  AY_TONE_C_TUNE_COARSE_USER
               00228                         ;; NO
               00229                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM5_OK
5F86 D002          M         bra     label
               00230 
               00231                         ;; YES - SKIP SUB ROUTINE
5F88 EFDD F024 00232                         goto LABEL_MAIN_MENUE_SWITCH
               00233 
               00234 
5F8C           00235 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM5_OK
               00236                         ;; ITEM = ITEM -1
5F8C 0628      00237                         decf AY_TONE_C_TUNE_COARSE_USER, F
               00238                                 ;; SWITCH MAIN MENU TO: TUNE MENU
5F8E EFDD F024 00239                                 goto LABEL_MAIN_MENUE_SWITCH
               00240 
               00241 
               00242 ;;---[ 2) DEC ITEM6 [MAIN MENU2]--------
               00243 
5F92           00244 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM6
               00245         
               00246         ;; INC ITEM6
               00247         ;; ITEM6 => USER CH. C FINE TUNE 8BIT 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 289


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00248         ;; => RANGE 0-255 DEC.
               00249         ;; => RANGE 0-FF  HEX.
               00250 
               00251                 ;; CHEK ITEM VALUE 
               00252                 ;; ITEM6 = 8BIT = 0xFF = 0-255 DEC
               00253                 ;; compare f with WREG, skip IF f < 1
               00254                 ;; AY REG = 0x00?
5F92 6AE8      00255                 clrw    
5F94 6225      00256                 cpfseq  AY_TONE_C_TUNE_FINE_USER
               00257                         ;; NO
               00258                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM6_OK
5F96 D002          M         bra     label
               00259 
               00260                         ;; YES
5F98 EFDD F024 00261                         goto LABEL_MAIN_MENUE_SWITCH
               00262 
               00263 
5F9C           00264 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM6_OK
               00265                         ;; ITEM = ITEM -1
5F9C 0625      00266                         decf AY_TONE_C_TUNE_FINE_USER, F
               00267                                 ;; SWITCH MAIN MENU TO: TUNE MENU
5F9E EFDD F024 00268                                 goto LABEL_MAIN_MENUE_SWITCH
               00269 
               00270 
               00271                         
               00272 ;;---[END DEC ITEMS [@MAIN MENU2]]--------
               00273 
               00083 #include "sub_menu_key_minus_menu_3.inc"
               00001 ;; sub_menu_key_minus_menu_3.inc
               00002 
               00003 
               00004 ;; --------[MINUS @ MAIN MENU3]------------------
               00005 ;; JUMPED IN HERE FROM sub_menu_key_minus.inc
               00006 
5FA2           00007 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU3
               00008         ;; MAIN MENU3 = MIXER MENU
               00009         ;; MIX CH ABC + ADD NOISE TO CH ABC
               00010         ;; MINUS HAD BEEN PRESSED
               00011 
               00012         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00013         ;; IN EDITING MODE "*"
               00014         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00015         ;;
               00016         ;; 2) DEC ITEM 
               00017 
               00018 
               00019 
               00020 ;; --[ 1) CHECK ITEM]-------
               00021 
               00022         ;; CHECK LOCATION VIA EDITING MODE "*"
               00023         ;; COPY THE VALUE OF EDITING MODE TO MIOS_PARAMETER1
5FA2 C202 F003 00024         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00025 
5FA6           00026 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_CHK_ITEM4    
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 290


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00027         ;; ITEM4 = NOISE PERIOD IS THE ONLY POS. WHRER MINUS
               00028         ;; IS NEEDED FOR DEC THE NOISE PERIOD, SO CHECK
               00029         ;; IF THE EDITING MODE POS "*" = 4
5FA6 0E04      00030         movlw   MENU_ITEM_POS4
5FA8 6203      00031         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 4?
               00032 
               00033                 ;; NO, SO QUIT
5FAA EFDD F024 00034                 goto LABEL_MAIN_MENUE_SWITCH
               00035 
               00036                 ;; YES
               00037                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_DEC_ITEM4      
5FAE D000          M         bra     label
               00038 
               00039 ;;---[ 2) INC ITEM [MAIN MENU3 - ITEM4 [NOISE PERIOD]]]--------
5FB0           00040 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_DEC_ITEM4
               00041         
               00042         ;; DEC ITEM4
               00043         ;; ITEM4 => AY REG 6 = RANGE BIT0-4 (!)
               00044         ;; => RANGE 0-31 DEC.
               00045         ;; => RANGE 0-1F  HEX.
               00046         ;;
               00047         ;; Note: 0 on LCD = 31 @ AY CHIP REG =  Lowest Noise PERIOD frequency
               00048         ;;      31 on LCD =  0 @ AY CHIP REG =  Highest Noise PERIOD frequency
               00049         
               00050                 ;; CHEK ITEM VALUE 
               00051                 ;; ITEM4 = HAS 5BIT = 0x1F = 31 DEC
               00052                 ;; compare f with WREG, skip IF >
               00053                 ;; AY REG > 0x1E? (dec. 31)
5FB0 0E1E      00054                 movlw   0x1E
5FB2 646A      00055                 cpfsgt  AY_R6_NOISE_PERIOD
               00056                 
               00057                         ;; NO - OK GO ON
               00058                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_DEC_ITEM4_OK
5FB4 D002          M         bra     label
               00059 
               00060                         ;; YES - SO QUIT HERE
5FB6 EFDD F024 00061                         goto LABEL_MAIN_MENUE_SWITCH
               00062                 
               00063                 
5FBA           00064 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_DEC_ITEM4_OK
               00065 
               00066         ;; DONT BE CONFUSED:
               00067         ;; DEC = FOR LCD!
               00068         ;; INC = FOR AY_R6_NOISE_PERIOD => AY REG.
               00069         ;; ITEM = ITEM +1
5FBA 2A6A      00070         incf AY_R6_NOISE_PERIOD, F
               00071         
               00072         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00073         ;; --------------------------------------------------------
               00074         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5FBC 0E06      00075         movlw AY_CHIP_ADR_06_NOISE_PERIOD ; ADRESS => AY REGISTER
5FBE 6E39      00076         movwf AY_REG_ADDRESS              ; ADDRESS FOR => AY_SR_Write
               00077         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
5FC0 C06A F03A 00078         movff AY_R6_NOISE_PERIOD, AY_REG_DATA 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 291


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00079         
               00080         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00081         ;; @ay_sr.inc
5FC4 ECAA F01B 00082         call LABEL_AY_SR_Write
               00083         
               00084 
               00085                 ;; SWITCH MAIN MENU TO: MAIN MENU 3
5FC8 EFDD F024 00086                 goto LABEL_MAIN_MENUE_SWITCH
               00087 
               00084 #include "sub_menu_key_minus_menu_4.inc"
               00001 ;; sub_menu_key_minus_menu_4.inc
               00002 
               00003 ;; --------[MINUS @ MAIN MENU4]------------------
               00004 ;; JUMPED IN HERE FROM sub_menu_key_minus.inc
5FCC           00005 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU4
               00006         
               00007         ;; MAIN MENU4 = AMPLITUDE/VOLUME MENU
               00008         ;; MINUS HAD BEEN PRESSED
               00009         ;;
               00010         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00011         ;; IN EDITING MODE "*"
               00012         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00013         ;;
               00014         ;; 2) DEC ITEM 
               00015 
               00016 ;; --[ 1) CHECK ITEM]-------
               00017 
               00018         ;; CHECK LOCATION VIA EDITING MODE "*"
               00019         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
5FCC C203 F003 00020         movff   AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE, MIOS_PARAMETER1
               00021 
5FD0           00022 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM1    
5FD0 0E01      00023         movlw   MENU_ITEM_POS1
5FD2 6203      00024         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00025 
               00026                 ;; NO
               00027                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM2
5FD4 D001          M         bra     label
               00028 
               00029                 ;; YES
               00030                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM1
5FD6 D009          M         bra     label
               00031         
               00032 
5FD8           00033 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM2
               00034 
5FD8 0E02      00035         movlw   MENU_ITEM_POS2
5FDA 6203      00036         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00037 
               00038                 ;; NO
               00039                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM3
5FDC D001          M         bra     label
               00040 
               00041                 ;; YES
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 292


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00042                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM2      
5FDE D016          M         bra     label
               00043 
               00044 
5FE0           00045 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM3
               00046         
5FE0 0E03      00047         movlw   MENU_ITEM_POS3
5FE2 6203      00048         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00049 
               00050                 ;; NO? - No Item Left Over - So Quit Here
5FE4 EFDD F024 00051                 goto LABEL_MAIN_MENUE_SWITCH
               00052 
               00053                 ;; YES
               00054                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM3      
5FE8 D022          M         bra     label
               00055 
               00056 
               00057 
               00058 
               00059 ;;---[ 2) DEC ITEM [MAIN MENU4 - [1-3]]]--------
               00060 
               00061 ;;---[ 2) DEC ITEM1 [MAIN MENU4]--------
5FEA           00062 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM1
               00063         ;; INC ITEM1
               00064         ;; ITEM1 => AY REG 8 = Volume CH. A 4BIT - LOW NIBBLE (!)
               00065         ;; => RANGE 0-15 DEC.
               00066         ;; => RANGE 0x00-0x0F  HEX
               00067 
               00068                 ;; CHEK ITEM VALUE 
               00069                 ;; ITEM1 = 4BIT = 0x0F = 15 DEC
               00070                 ;; compare f with WREG, skip if f = 0
               00071                 ;; JUST TAKE A THE LO NIBBLE !
5FEA 0E0F      00072                 movlw   NIBBLE_B00001111
5FEC 146C      00073                 andwf   AY_R8_CH_A_AMPLITUDE,W
5FEE 6E03      00074                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE (0x00 - 0x0F)
               00075                 
5FF0 6AE8      00076                 clrw    
5FF2 6203      00077                 cpfseq  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE
               00078                                         ;; = 1 ? 
               00079                 
               00080                         ;; NO
               00081                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM1_OK
5FF4 D002          M         bra     label
               00082 
               00083                         ;; YES - LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE = 0 DEC.
               00084                         ;; QUIT HERE
5FF6 EFDD F024 00085                         goto LABEL_MAIN_MENUE_SWITCH
               00086 
               00087 
               00088 
5FFA           00089 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM1_OK
               00090         ;; ITEM = ITEM -1
5FFA 066C      00091         decf AY_R8_CH_A_AMPLITUDE, F
               00092         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 293


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00093         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00094         ;; --------------------------------------------------------
               00095         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
5FFC 0E08      00096         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF 
5FFE 6E39      00097         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00098         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
6000 C06C F03A 00099         movff AY_R8_CH_A_AMPLITUDE, AY_REG_DATA 
               00100         
               00101         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
6004 ECAA F01B 00102         call LABEL_AY_SR_Write
               00103                 
               00104                 ;; SWITCH MAIN MENU TO: MAIN MENU 4
6008 EFDD F024 00105                 goto LABEL_MAIN_MENUE_SWITCH
               00106 
               00107 
               00108 ;;---[ 2) INC ITEM2 [MAIN MENU4]--------
600C           00109 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM2
               00110 
               00111         ;; INC ITEM2
               00112         ;; ITEM2 => AY REG 9 = Volume CH. B 4BIT - LOW NIBBLE (!)
               00113         ;; => RANGE 0-15 DEC.
               00114         ;; => RANGE 0-F  HEX
               00115 
               00116                 ;; CHEK ITEM VALUE 
               00117                 ;; ITEM2 = LOW NIBBLE (4BIT)
               00118                 ;; 0x00 - 0x0F HEX = 0 - 15 DEC
               00119                 ;; compare f with WREG, skip if f = 0
               00120                 ;; JUST TAKE A THE LO NIBBLE
600C 0E0F      00121                 movlw   NIBBLE_B00001111
600E 146D      00122                 andwf   AY_R9_CH_B_AMPLITUDE,W
6010 6E03      00123                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE (0x00 - 0x0F)
               00124                 
6012 6AE8      00125                 clrw    
6014 6203      00126                 cpfseq  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE
               00127                                         ;; = 0 ? 
               00128                 
               00129                         ;; NO
               00130                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM2_OK
6016 D002          M         bra     label
               00131 
               00132                         ;; YES - LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE = 0 DEC.
               00133                         ;; SO QUIT HERE
6018 EFDD F024 00134                         goto LABEL_MAIN_MENUE_SWITCH
               00135 
               00136 
               00137 
601C           00138 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM2_OK
               00139         ;; ITEM = ITEM -1
601C 066D      00140         decf AY_R9_CH_B_AMPLITUDE, F
               00141         
               00142         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00143         ;; --------------------------------------------------------
               00144         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
601E 0E09      00145         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 294


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6020 6E39      00146         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00147         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
6022 C06D F03A 00148         movff AY_R9_CH_B_AMPLITUDE, AY_REG_DATA 
               00149         
               00150         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
6026 ECAA F01B 00151         call LABEL_AY_SR_Write
               00152                 
               00153                 ;; SWITCH MAIN MENU TO: MAIN MENU 4
602A EFDD F024 00154                 goto LABEL_MAIN_MENUE_SWITCH
               00155 
               00156 
               00157 
               00158 
               00159 
               00160 ;;---[ 2) INC ITEM3 [@MAIN MENU4]--------
               00161 
602E           00162 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM3
               00163                 
               00164         ;; INC ITEM3
               00165         ;; ITEM3 => AY REG 10 = Volume CH. C 4BIT - LOW NIBBLE (!)
               00166         ;; => RANGE 0-15 DEC.
               00167         ;; => RANGE 0-F  HEX
               00168 
               00169                 ;; CHEK ITEM VALUE 
               00170                 ;; ITEM1 = 4BIT LOW NIBBLE => 0x00 - 0x0F = 0 - 15 DEC
               00171                 ;; compare f with WREG, skip if f = 0
               00172                 ;; JUST TAKE A THE LO NIBBLE
602E 0E0F      00173                 movlw   NIBBLE_B00001111 ;; AND W WITH 00001111b
6030 146E      00174                 andwf   AY_R10_CH_C_AMPLITUDE,W
6032 6E03      00175                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE (0x00 - 0x0F)
               00176                 
6034 6AE8      00177                 clrw    
6036 6203      00178                 cpfseq  MIOS_PARAMETER1 ;; IS LOW NIBBLE 
               00179                                         ;; = 0 ? 
               00180                 
               00181                         ;; NO
               00182                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM3_OK
6038 D002          M         bra     label
               00183 
               00184                         ;; YES - LOW NIBBLE = 0 
               00185                         ;; QUIT HERE
603A EFDD F024 00186                         goto LABEL_MAIN_MENUE_SWITCH
               00187 
               00188 
               00189 
603E           00190 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM3_OK
               00191         ;; ITEM = ITEM -1
603E 066E      00192         decf AY_R10_CH_C_AMPLITUDE, F
               00193         
               00194         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00195         ;; --------------------------------------------------------
               00196         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
6040 0E0A      00197         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF
6042 6E39      00198         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 295


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00199         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
6044 C06E F03A 00200         movff AY_R10_CH_C_AMPLITUDE, AY_REG_DATA 
               00201         
               00202         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
6048 ECAA F01B 00203         call LABEL_AY_SR_Write
               00204         ;; ---------------------------------------------------------
               00205                 
               00206 
               00207                 ;; SWITCH MAIN MENU TO: MAIN MENU 4
604C EFDD F024 00208                 goto LABEL_MAIN_MENUE_SWITCH
               00209 
               00210 
               00211 
               00212 ;; ------[END MINUS @ MAIN MENU4]
               00085 #include "sub_menu_key_minus_menu_5.inc"
               00001 ;; sub_menu_key_minus_menu_5.inc
               00002 
               00003 
               00004 ; --------[MINUS @ MAIN MENU5]------------------
               00005 ;; jumped in here from 
6050           00006 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU5
               00007         ;; MAIN MENU5 = ENVELOPE MENU
               00008 
               00009         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00010         ;; IN EDITING MODE "*"
               00011         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00012         ;;
               00013         ;; 2) DEC ITEM 1-4
               00014 
               00015 ;; --[ 1) CHECK ITEM]-------
               00016 
               00017         ;; CHECK LOCATION VIA EDITING MODE "*"
               00018         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
6050 C204 F003 00019         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
               00020 
6054           00021 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM1    
6054 0E01      00022         movlw   MENU_ITEM_POS1
6056 6203      00023         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00024 
               00025                 ;; NO
               00026                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM2
6058 D001          M         bra     label
               00027 
               00028                 ;; YES
               00029                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM1
605A D009          M         bra     label
               00030         
               00031 
605C           00032 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM2
               00033 
605C 0E02      00034         movlw   MENU_ITEM_POS2
605E 6203      00035         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00036 
               00037                 ;; NO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 296


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00038                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM3
6060 D001          M         bra     label
               00039 
               00040                 ;; YES
               00041                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM2      
6062 D013          M         bra     label
               00042 
               00043 
6064           00044 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM3
               00045         
6064 0E03      00046         movlw   MENU_ITEM_POS3
6066 6203      00047         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00048 
               00049                 ;; NO? - LAST ITEM FOR + SO QUIT HERE
6068 EFDD F024 00050                 goto LABEL_MAIN_MENUE_SWITCH
               00051 
               00052                 ;; YES
               00053                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM3      
606C D01C          M         bra     label
               00054 
               00055 
               00056 
               00057 ;;---[ 2) DECREASE ITEM 1-3 [@MAIN MENU5]]--------
               00058 
               00059 ;;---[ 2) DEC ENV PERIOD COARSE [ITEM1 @ MAIN MENU5]--------
606E           00060 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM1
               00061         ;; DEC ITEM1
               00062         ;; ITEM1 => AY_R12_ENV_PERIOD_COARSE
               00063         ;; => RANGE 0-255       DEC.
               00064         ;; => RANGE 0x00-0xFF   HEX
               00065 
               00066                 ;; CHEK ITEM VALUE 
               00067                 ;; ITEM1 = 8BIT = 0x00 to 0xFF
               00068                 ;; compare f with WREG, skip < 1
606E 6AE8      00069                 clrw
6070 6270      00070                 cpfseq  AY_R12_ENV_PERIOD_COARSE
               00071                 
               00072                         ;; NO
               00073                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM1_OK
6072 D002          M         bra     label
               00074 
               00075                         ;; YES
6074 EFDD F024 00076                         goto LABEL_MAIN_MENUE_SWITCH
               00077 
               00078 
6078           00079 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM1_OK
               00080 
               00081         
               00082         ;; ITEM = ITEM -1
6078 0670      00083         decf AY_R12_ENV_PERIOD_COARSE, F
               00084         
               00085         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00086         ;; --------------------------------------------------------
               00087         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 297


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
607A 0E0C      00088         movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE
607C 6E39      00089         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00090         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
607E C070 F03A 00091         movff AY_R12_ENV_PERIOD_COARSE, AY_REG_DATA 
               00092         
               00093         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
6082 ECAA F01B 00094         call LABEL_AY_SR_Write
               00095 
               00096                 ;; SUB ROUTINE IS DONE          
               00097                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
               00098                 
               00099 
               00100                 ;; SWITCH MAIN MENU TO: MAIN MENU 5
6086 EFDD F024 00101                 goto LABEL_MAIN_MENUE_SWITCH
               00102 
               00103 
               00104 
               00105 ;;---[ 2) DEC ENV PERIOD FINE [ITEM2 @ MAIN MENU5]--------
               00106 
608A           00107 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM2
               00108                 ;; CHEK ITEM VALUE 
               00109                 ;; ITEM2 = 8BIT = 0xFF = 0-255 DEC
               00110                 ;; compare f with WREG, skip < 1
608A 6AE8      00111                 clrw 
               00112                 ;; IS AY REG < 0x01 ? 
608C 626F      00113                 cpfseq  AY_R11_ENV_PERIOD_FINE
               00114                 
               00115                         ;; NO
               00116                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM2_OK
608E D002          M         bra     label
               00117 
               00118                         ;; YES (f = 0) SO SKIP SUB ROUTINE HERE
6090 EFDD F024 00119                         goto LABEL_MAIN_MENUE_SWITCH
               00120 
               00121 
6094           00122 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM2_OK
               00123         ;; ITEM = ITEM -1
6094 066F      00124         decf AY_R11_ENV_PERIOD_FINE, F
               00125         
               00126         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00127         ;; --------------------------------------------------------
               00128         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
6096 0E0B      00129         movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE
6098 6E39      00130         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00131         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
609A C06F F03A 00132         movff AY_R11_ENV_PERIOD_FINE, AY_REG_DATA 
               00133         
               00134         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00135         ;; @ay_sr.inc
609E ECAA F01B 00136         call LABEL_AY_SR_Write
               00137 
               00138                 ;; SUB ROUTINE IS DONE          
               00139                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
               00140                 ;; SWITCH MAIN MENU TO: MAIN MENU 5
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 298


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
60A2 EFDD F024 00141                 goto LABEL_MAIN_MENUE_SWITCH
               00142 
               00143 
               00144 ;;---[ 2) DEC ENV SHAPE [ITEM3 @ MAIN MENU5]--------
               00145 
60A6           00146 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM3
               00147 
               00148         ;; DEC ITEM ENV SHAPE
               00149         ;; 1) DEC ENV_SHAPE_0_15_to_1_8_TRANSLATOR [Range 1 to 8]
               00150         ;; 2) POINTER TO AY_R13_ENV_SHAPE_CYCLE [RANGE 0 to 15]
               00151 
               00152                 ;; CHEK ITEM VALUE 
               00153                 ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR [Range 1 to 8]
               00154                 ;; compare f with WREG, skip IF < 2
               00155                 ;; ENV_SHAPE_0_15_to_1_8_TRANSLATOR < 0x02? [=1 or 0]
               00156                 ;; [THERE IS NO ENVELOPE SHAPE 0 (!)]
60A6 0E02      00157                 movlw   0x02
60A8 607A      00158                 cpfslt  ENV_SHAPE_0_15_to_1_8_TRANSLATOR
               00159                 
               00160                         ;; NO
               00161                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM3_OK
60AA D002          M         bra     label
               00162 
               00163                         ;; YES
60AC EFDD F024 00164                         goto LABEL_MAIN_MENUE_SWITCH
               00165 
               00166 
60B0           00167 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM3_OK
               00168         ;; ITEM = ITEM -1
60B0 067A      00169         decf ENV_SHAPE_0_15_to_1_8_TRANSLATOR, F
               00170         
               00171                 ;; SUB ROUTINE IS DONE          
               00172                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
60B2 EFDD F024 00173                 goto LABEL_MAIN_MENUE_SWITCH
               00174 
               00175 ;; --------[END OF KEY [MINUS (-)] FUNCTION @ MENU 5 ]------------------
               00176 
               00177 
               00086 #include "sub_menu_key_minus_menu_6.inc"
               00001 ;; sub_menu_key_minus_menu_6.inc
               00002 
               00003 ; --------[MINUS @ MAIN MENU6]------------------
               00004 ;; Jump in here from sub_menu_key_minus.inc
               00005 
60B6           00006 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU6
               00007         ;; DEC MIDI CH TOME A B C
               00008         
               00009         ;; MINUS HAD BEEN PRESSED
               00010         ;;
               00011         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00012         ;; IN EDITING MODE "*"
               00013         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE
               00014         ;;
               00015         ;; 2) DEC ITEM 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 299


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00016 
               00017         ;; --[ 1) CHECK ITEM]-------
               00018 
               00019         ;; CHECK LOCATION VIA EDITING MODE "*"
               00020         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
60B6 C205 F003 00021         movff   AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG, MIOS_PARAMETER1
               00022         
60BA           00023 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM1    
60BA 0E01      00024         movlw   MENU_ITEM_POS1
60BC 6203      00025         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00026 
               00027                 ;; NO
               00028                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM2
60BE D001          M         bra     label
               00029 
               00030                 ;; YES
               00031                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM1
60C0 D009          M         bra     label
               00032         
               00033 
60C2           00034 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM2
               00035 
60C2 0E02      00036         movlw   MENU_ITEM_POS2
60C4 6203      00037         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00038 
               00039                 ;; NO
               00040                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM3
60C6 D001          M         bra     label
               00041 
               00042                 ;; YES
               00043                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM2      
60C8 D010          M         bra     label
               00044 
               00045 
60CA           00046 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM3
               00047         
60CA 0E03      00048         movlw   MENU_ITEM_POS3
60CC 6203      00049         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00050 
               00051                 ;; NO? - No Item Left Over - So Quit Here
60CE EFDD F024 00052                 goto LABEL_MAIN_MENUE_SWITCH
               00053 
               00054                 ;; YES
               00055                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM3      
60D2 D016          M         bra     label
               00056 
               00057 
               00058 ;;---[ 2) DEC ITEM [MAIN MENU6 - [MIDI CH TONE A B C]]]--------
               00059 
               00060 ;;---[ 2) DEC ITEM1 [MAIN MENU6 - MIDI CH TONE A]--------
60D4           00061 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM1
               00062         ;; INC ITEM1
               00063         ;; => RANGE 0-15 DEC.
               00064         ;; => RANGE 0x00-0x0F  HEX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 300


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00065 
               00066                 ;; CHEK ITEM VALUE 
               00067                 ;; ITEM1 = 4BIT = 0x0F = 15 DEC
               00068                 ;; compare f with WREG, skip < 1
               00069                 ;; JUST TAKE A THE LO NIBBLE !
60D4 0E0F      00070                 movlw   NIBBLE_B00001111
60D6 1430      00071                 andwf   AY_TONE_A_MIDI_CHANNEL_USER,W
60D8 6E03      00072                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE (0x00 - 0x0F)
               00073                 
60DA 6AE8      00074                 clrw    
60DC 6203      00075                 cpfseq  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE
               00076                                         ;; < 1 (=0)? 
               00077                 
               00078                         ;; NO
               00079                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM1_OK
60DE D002          M         bra     label
               00080 
               00081                         ;; YES - LOW NIBBLE OF AY_TONE_A_MIDI_CHANNEL_USER = 0 DEC.
               00082                         ;; QUIT HERE
60E0 EFDD F024 00083                         goto LABEL_MAIN_MENUE_SWITCH
               00084 
               00085 
               00086 
60E4           00087 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM1_OK
               00088         ;; ITEM = ITEM -1
60E4 0630      00089         decf AY_TONE_A_MIDI_CHANNEL_USER, F
               00090                 ;; SWITCH MAIN MENU TO: MAIN MENU 6
60E6 EFDD F024 00091                 goto LABEL_MAIN_MENUE_SWITCH
               00092 
               00093 
               00094 ;;---[ 2) INC ITEM2 [MAIN MENU6 / MIDI CH TONE B]--------
               00095 
60EA           00096 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM2
               00097         ;; INC ITEM2
               00098         ;; => RANGE 0-15 DEC.
               00099         ;; => RANGE 0-F  HEX
               00100                 ;; CHEK ITEM VALUE 
               00101                 ;; ITEM2 = LOW NIBBLE (4BIT)
               00102                 ;; 0x00 - 0x0F HEX = 0 - 15 DEC
               00103                 ;; compare f with WREG, skip < 1
               00104                 ;; JUST TAKE A THE LO NIBBLE
60EA 0E0F      00105                 movlw   NIBBLE_B00001111
60EC 1431      00106                 andwf   AY_TONE_B_MIDI_CHANNEL_USER,W
60EE 6E03      00107                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE (0x00 - 0x0F)
               00108                 
60F0 6AE8      00109                 clrw    
60F2 6203      00110                 cpfseq  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R9_CH_B_AMPLITUDE
               00111                                         ;; < 1 DEC. (=0)? 
               00112                         ;; NO
               00113                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM2_OK
60F4 D002          M         bra     label
               00114 
               00115                         ;; YES - LOW NIBBLE OF AY_TONE_B_MIDI_CHANNEL_USER = 0 DEC.
               00116                         ;; SO QUIT HERE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 301


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
60F6 EFDD F024 00117                         goto LABEL_MAIN_MENUE_SWITCH
               00118 
               00119 
               00120 
60FA           00121 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM2_OK
               00122         ;; ITEM = ITEM -1
60FA 0631      00123         decf AY_TONE_B_MIDI_CHANNEL_USER, F
               00124                 ;; SWITCH MAIN MENU TO: MAIN MENU 6
60FC EFDD F024 00125                 goto LABEL_MAIN_MENUE_SWITCH
               00126 
               00127 ;;---[ 2) INC ITEM3 [@MAIN MENU6 / MIDI CH TONE C]--------
               00128 
6100           00129 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM3
               00130         ;; INC ITEM3
               00131         ;; => RANGE 0-15 DEC.
               00132         ;; => RANGE 0-F  HEX
               00133                 ;; CHEK ITEM VALUE 
               00134                 ;; ITEM1 = 4BIT LOW NIBBLE => 0x00 - 0x0F = 0 - 15 DEC
               00135                 ;; compare f with WREG, skip >
               00136                 ;; JUST TAKE A THE LO NIBBLE
6100 0E0F      00137                 movlw   NIBBLE_B00001111 ;; AND W WITH 00001111b
6102 1432      00138                 andwf   AY_TONE_C_MIDI_CHANNEL_USER,W
6104 6E03      00139                 movwf   MIOS_PARAMETER1 ;; LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE (0x00 - 0x0F)
               00140                 
6106 6AE8      00141                 clrw    
6108 6203      00142                 cpfseq  MIOS_PARAMETER1 ;; IS LOW NIBBLE OF AY_R8_CH_A_AMPLITUDE
               00143                                         ;; < 1 DEC (=0). ? 
               00144                         ;; NO
               00145                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM3_OK
610A D002          M         bra     label
               00146 
               00147                         ;; YES - LOW NIBBLE OF AY_TONE_C_MIDI_CHANNEL_USER = 15 DEC.
               00148                         ;; QUIT HERE
610C EFDD F024 00149                         goto LABEL_MAIN_MENUE_SWITCH
               00150 
               00151 
               00152 
6110           00153 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM3_OK
               00154         ;; ITEM = ITEM -1
6110 0632      00155         decf AY_TONE_C_MIDI_CHANNEL_USER, F
               00156                 ;; SWITCH MAIN MENU TO: MAIN MENU 6
6112 EFDD F024 00157                 goto LABEL_MAIN_MENUE_SWITCH
               00158 
               00159 
               00087 #include "sub_menu_key_minus_menu_7.inc"
               00001 ;; sub_menu_key_minus_menu_7.inc
               00002 
               00003 ;; -------------------[SWITCH VELOCITY TO ABC + NOISE PERIOD OFF]-------------
               00004 ;; jumped in here from sub_menu_key_minus.inc
               00005 
6116           00006 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU7
               00007         
               00008         ;; 1) CHECK WHICH ITEM IS 
               00009         ;; IN EDITING MODE "*"
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 302


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00010         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG
               00011         ;;
               00012         ;; 2) INC ITEM 
               00013 
               00014         ;; --[ 1) CHECK ITEM]-------
               00015 
               00016         ;; CHECK LOCATION VIA EDITING MODE "*"
               00017         ;; AND JUMP TO THE EDITING MODE ITEM
6116 C206 F003 00018         movff AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG, MIOS_PARAMETER1
611A 5003      00019         movf  MIOS_PARAMETER1, W
               00020         JUMPTABLE_4BYTES 5 ;; [ITEM 1 to 4 JUMP, ITEM 0 = NOT VALID EXIT HERE]
611C 0FFB          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
611E B0D8          M         skpnc
6120 0012          M         return
6122 0F05          M         addlw   (max_value)
6124 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
6128 EFDD F024 00021                 goto LABEL_MAIN_MENUE_SWITCH                                    ;; POS0 - EXIT HERE TO MAIN MENU
612C EF9E F030 00022                 goto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_A       ;; POS1 - SWITCH OFF VELOCITY TO TONE A
6130 EFA1 F030 00023                 goto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_B       ;; POS2 - SWITCH OFF VELOCITY TO TONE B
6134 EFA4 F030 00024                 goto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_C       ;; POS1 - SWITCH OFF VELOCITY TO TONE C
6138 EFA7 F030 00025                 goto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_PERIOD ;; POS4 - SWITCH OFF VELOCITY NOISE PERIOD
               00026 
               00027 
613C           00028 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_A    
               00029         ;; ITEM POS1 - SET VELOCITY TO TONE A (MIDI VELOCITY DATA TO VOLUME OF TONE A)
613C 9033      00030         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_TONE_A_ON_OFF
               00031 
               00032                 ;; WORK IS DONE BACK TO MAIN MENU
613E EFDD F024 00033                 goto LABEL_MAIN_MENUE_SWITCH
               00034 
               00035 
6142           00036 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_B    
               00037         ;; POS2 - SET VELOCITY TO TONE B
6142 9233      00038         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT1_TONE_B_ON_OFF
               00039 
               00040                 ;; WORK IS DONE BACK TO MAIN MENU
6144 EFDD F024 00041                 goto LABEL_MAIN_MENUE_SWITCH
               00042 
               00043 
               00044 
6148           00045 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_C
               00046         ;; POS1 - SET VELOCITY TO TONE C
6148 9433      00047         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT2_TONE_C_ON_OFF
               00048                 ;; WORK IS DONE BACK TO MAIN MENU
614A EFDD F024 00049                 goto LABEL_MAIN_MENUE_SWITCH
               00050 
               00051 ;; ---- [VELOCITY TO NOISE PERIOD - SWITCH VELOCITY NOISE PERIOD TO TONE C to B to A]-------
               00052 
614E           00053 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_PERIOD
               00054 ;; MEMO
               00055 ;; VELOCITY => NOISE PERIOD:
               00056 ;; VELOCITY           => NOISE PERID is OFF     ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=0, BIT5=0,BIT6=0,BIT7=0
               00057 ;; VELOCITY of TONE A => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=1,BIT6=0,BIT7=0 
               00058 ;; VELOCITY of TONE B => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=0,BIT6=1,BIT7=0 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 303


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00059 ;; VELOCITY of TONE C => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=0,BIT6=0,BIT7=1 
               00060         ;; CHECK IF BIT3 is SET
               00061         ;; IS VELOCITY TO NOISE PERIOD = ON?
614E A633      00062         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00063                 ;; NO, BIT3 IS NOT SET
               00064                 ;; SO EXIT  
               00065                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_IS_OFF
6150 D001          M         bra     label
               00066         
               00067                 ;; YES - BIT3 IS SET - CHECK IF NOISE PERID VELOCITY @ TONE A IS SET
               00068                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_A
6152 D002          M         bra     label
               00069 
6154           00070 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_IS_OFF
               00071                         ;; Nothing to do anymore
               00072                         ;; exit here
6154 EFDD F024 00073                         goto LABEL_MAIN_MENUE_SWITCH
               00074 
6158           00075 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_A
               00076                 ;; VELOCITY TO NOISE PERID = ON
               00077                 ;; CHECK IF BIT5 [TONE A] is SET
6158 AA33      00078                 btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               00079                         ;; NO, BIT5 IS NOT SET - CHECK IF VELOCITY @ TONE B BIT6 IS SET
               00080                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_B
615A D007          M         bra     label
               00081         
               00082                         ;; YES - BIT5 IS SET, SO SWITCH OFF VELOCITY @ NOISE RATE
               00083                         rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_TO_NOISE_OFF
615C D000          M         bra     label
               00084 
               00085 
615E           00086 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_TO_NOISE_OFF
               00087         ;; VELOCITY TONE A to NOISE PERID was SET
               00088         ;; BUT THERE HAD BEEN A [-] KEY EVENT SO SWITCH OFF
               00089         ;; VELOCITY to NOISE PERIOD
               00090 ;; MEMO:
               00091 ;; VELOCITY => NOISE PERIOD:
               00092 ;; VELOCITY           => NOISE PERID is OFF     ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=0, BIT5=0,BIT6=0,BIT7=0
               00093 ;; VELOCITY of TONE A => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=1,BIT6=0,BIT7=0 
               00094 ;; VELOCITY of TONE B => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=0,BIT6=1,BIT7=0 
               00095 ;; VELOCITY of TONE C => NOISE PERIOD           ==> AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF: BIT3=1, BIT5=0,BIT6=0,BIT7=1 
               00096         ;; SWITCH OFF VELOCITY @ NOISE RATE
615E 9633      00097         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00098         ;; SWITCH OFF VELOCITY TONE A
6160 9A33      00099         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               00100         ;; SWITCH OFF VELOCITY TONE B
6162 9C33      00101         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               00102         ;; SWITCH OFF VELOCITY TONE C
6164 9E33      00103         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               00104                 ;; WORK IS DONE BACK TO MAIN MENU
6166 EFDD F024 00105                 goto LABEL_MAIN_MENUE_SWITCH
               00106 
               00107 
616A           00108 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_B
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 304


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         ;; CHECK IF BIT6 [TONE B] is SET
616A AC33      00110         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               00111                 ;; NO, BIT6 IS NOT SET - ITS MUST BE TONE C 
               00112                 ;; MUST BE BIT 7 - TONE C 
               00113                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_IS_NOISE_CH_B
616C D006          M         bra     label
               00114         
               00115                 ;; YES - BIT6 IS SET, SO IT IS TONE B @ NOISE PERIOD
               00116                 ;; TONE A MUST BE VELOCITY FOR NOISE PERIOD 
               00117                 rgoto LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_A
616E D000          M         bra     label
               00118 
6170           00119 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_A
               00120         ;; SET VELOCITY TONE B TO NOISE PERIOD
6170 8A33      00121         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH ON VELOCITY TONE A
6172 9C33      00122         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE B
6174 9E33      00123         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE C
               00124                 ;; WORK IS DONE BACK TO MAIN MENU
6176 EFDD F024 00125                 goto LABEL_MAIN_MENUE_SWITCH
               00126 
617A           00127 LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_IS_NOISE_CH_B
               00128         ;; SET VELOCITY TONE B TO NOISE PERIOD
617A 9A33      00129         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE A
617C 8C33      00130         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH ON  VELOCITY TONE B
617E 9E33      00131         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF  ;; SWITCH OFF VELOCITY TONE C
               00132                 ;; WORK IS DONE BACK TO MAIN MENU
6180 EFDD F024 00133                 goto LABEL_MAIN_MENUE_SWITCH
               00088 #include "sub_menu_key_minus_menu_8.inc"
               00001 ;; sub_menu_key_minus_menu8.inc
               00002 
6184           00003 MINUS_KEY_SUBROUTINE_AT_MAIN_MENU8
               00004         
               00005 ;; CHECK LOCATION VIA EDITING MODE "*"
               00006         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
6184 C207 F003 00007         movff   AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
               00008         
               00009         ;; JUMP TO [-] Routine @ item X
6188 5003      00010         movf MIOS_PARAMETER1, W
               00011         JUMPTABLE_4BYTES 5 ;; [MENU 0 to 8]
618A 0FFB          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
618C B0D8          M         skpnc
618E 0012          M         return
6190 0F05          M         addlw   (max_value)
6192 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
6196 EFDD F024 00012                 goto        LABEL_MAIN_MENUE_SWITCH              ;; Error: just reaload currend Main Menu
619A EFD5 F030 00013                 goto        DEC_FX_TAB_POS                       ;; INC FX Tab Pos
619E EFDF F030 00014                 goto        DEC_FX_DELAY_TIME                    ;; INC Fx Time (Delay befor Fx execution)
61A2 EFEE F030 00015                 goto        DEC_FX_FUNCTION                      ;; INC Fx Func
61A6 EFFD F030 00016                 goto        DEC_FX_DATA                          ;; INC Fx Data
               00017         
               00018 ;; -------------------[DEC Fx Pos (0-31)]---------------------          
61AA           00019 DEC_FX_TAB_POS
               00020         ;; DEC Pos of Fx Tab and load Currend pos Values
               00021                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 305


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00022         ;; dec FX TAB POS -1 [Range 1 to 32]
61AA 064F      00023         decf FX_POS_CURREND, F
               00024         
               00025         ;; POS > FX_POS_MAX?
61AC 0E1F      00026         movlw FX_POS_MAX
61AE 644F      00027         cpfsgt  FX_POS_CURREND
               00028                         ;; NO - OK GO ON
               00029                         ;; @ sub_menu_key_plus_menu_8.inc
61B0 EF36 F02F 00030                         goto FX_TAB_LOAD_DATA_CURREND_POS
               00031 
               00032                 ;; YES - FX POS ist out of range 
               00033                 ;; set Fx Pos to MAX VALUE
               00034                 rgoto SET_FX_POS_TO_MAX
61B4 D000          M         bra     label
               00035 
61B6           00036 SET_FX_POS_TO_MAX       
               00037                 ;; POS is out of range
               00038                 ;; so set to FX_POS_MAX 
61B6 0E1F      00039                 movlw FX_POS_MAX
61B8 6E4F      00040                 movwf FX_POS_CURREND
61BA EF36 F02F 00041                         goto FX_TAB_LOAD_DATA_CURREND_POS
               00042         
               00043 
               00044 ;; -------------------[DEC Fx Func Delay Time (0-MAX)]---------------------     
61BE           00045 DEC_FX_DELAY_TIME
               00046         ;; INC Fx Delay Time @ currend Fx Pos
61BE 0652      00047         decf FX_TIME_PRE_EXECUTION_CURREND, F
               00048                 
               00049                 ;; Fx Delay Time > Fx_DELAY_TIME_MAX ?
61C0 0EC8      00050                 movlw Fx_DELAY_TIME_MAX 
61C2 6452      00051                 cpfsgt FX_TIME_PRE_EXECUTION_CURREND
               00052                         
               00053                         ;; NO
               00054                         ;; OK, GO ON
               00055                         rgoto DEC_FX_DELAY_TIME_WRITE
61C4 D002          M         bra     label
               00056                 
               00057                                 ;; WRITE 200 TO Fx Delay Time
61C6 0EC8      00058                                 movlw Fx_DELAY_TIME_MAX ;; WRITE Fx_DELAY_TIME_MAX to Fx Func delay Time
61C8 6E52      00059                                 movwf FX_TIME_PRE_EXECUTION_CURREND
               00060                                         
61CA           00061 DEC_FX_DELAY_TIME_WRITE 
61CA 0E02      00062         movlw SELECT_Fx_RAM_BANK        ;; INDIRECT RAM ADDRESSING:
61CC 6EEA      00063         movwf FSR0H                     ;; SET THE RAM BANK 
               00064         ;; ;; Write result to FX Delay TIME Reg. @ Currend Fx Pos       
61CE 0E60      00065         movlw RAM_OFFSET_FX_TIME_PRE_EXECUTION  ;; FX TIME Regs OFFSET
61D0 244F      00066         addwf FX_POS_CURREND, W                 ;; + OFFSET OF => Fx Tab Pos
61D2 6EE9      00067         movwf FSR0L                             ;; LOAD CURREND RAM ADR To Ind. Reg Adress
61D4 C052 FFEF 00068         movff FX_TIME_PRE_EXECUTION_CURREND, INDF0      ;; WRITE TO RAM
               00069         
61D8 EFDD F024 00070                 goto        LABEL_MAIN_MENUE_SWITCH
               00071 ;; ---------------------------------------------------------------------                
               00072 
               00073 ;; -------------------[DEC Fx Func (0-MAX)]---------------------        
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 306


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
61DC           00074 DEC_FX_FUNCTION
               00075         ;; DEC Fx Function @ currend Fx Pos
61DC 0650      00076         decf FX_FUNCTION_CURREND, F
               00077 
61DE 0E29      00078         movlw FX_FUNCTIONS_MAX
               00079         ;; Fx fuction > FX_FUNCTIONS_MAX?
61E0 6450      00080         cpfsgt  FX_FUNCTION_CURREND
               00081                         ;; NO, FUNCTION IS NOT > FX_FUNCTIONS_MAX
               00082                         ;; OK GO ON
               00083                         rgoto DEC_FX_FUNCTION_WRITE
61E2 D002          M         bra     label
               00084                 
               00085                 ;; YES Fx FUNCTION IS > FX_FUNCTIONS_MAX
               00086                 ;; WRITE FX_FUNCTIONS_MAX TO Fx Function
61E4 0E29      00087                 movlw FX_FUNCTIONS_MAX 
61E6 6E50      00088                 movwf FX_FUNCTION_CURREND
               00089                 
               00090 
61E8           00091 DEC_FX_FUNCTION_WRITE
61E8 0E02      00092         movlw SELECT_Fx_RAM_BANK  ;; INDIRECT RAM ADDRESSING:
61EA 6EEA      00093         movwf FSR0H               ;; SET THE RAM BANK TO 2
               00094         ;; Write result to FX FUNCTION Reg. @ Currend Fx Pos    
61EC 0E20      00095         movlw RAM_OFFSET_FX_FUNCTION  ;; FX TIME Regs OFFSET 
61EE 244F      00096         addwf FX_POS_CURREND, W   ;; + (0 to 31 [32]) => Fx Tab Pos
61F0 6EE9      00097         movwf FSR0L               ;; LOAD CURREND OFFSET To Ind. Reg Adress
61F2 C050 FFEF 00098         movff FX_FUNCTION_CURREND, INDF0        ;; WRITE TO RAM
61F6 EFDD F024 00099                 goto        LABEL_MAIN_MENUE_SWITCH
               00100 ;; ---------------------------------------------------------------------
               00101 
               00102 
               00103 ;; -------------------[DEC Fx Func Data (0-255)]---------------------   
61FA           00104 DEC_FX_DATA
               00105         ;; DEC Fx Data @ currend Fx Pos
61FA 0651      00106         decf FX_DATA_CURREND, F
               00107         
61FC 0E02      00108         movlw SELECT_Fx_RAM_BANK  ;; INDIRECT RAM ADDRESSING:
61FE 6EEA      00109         movwf FSR0H               ;; SET THE RAM BANK TO 2
               00110         ;; ;; Write result to DATA Reg. @ Currend Fx Pos        
6200 0E40      00111         movlw RAM_OFFSET_FX_DATA  ;; FX TIME Regs OFFSET 
6202 244F      00112         addwf FX_POS_CURREND, W   ;; + (0 to 31 [32]) => Fx Tab Pos
6204 6EE9      00113         movwf FSR0L               ;; LOAD CURREND OFFSET To Ind. Reg Adress
6206 C051 FFEF 00114         movff FX_DATA_CURREND, INDF0    ;; WRITE
               00115 
620A EFDD F024 00116                 goto        LABEL_MAIN_MENUE_SWITCH
               00089 
               00090 #include "sub_menu_key_a.inc"
               00001 ;; sub_menu_key_a.inc
               00002 
               00003 ;; ----------------------------------------------------------------------------
               00004 ;; -------------------------[A]----------------------------- 
               00005 ;; =======================> [A] HAD BEEN PRESSED
               00006 
620E           00007 LABEL_AY_SUB_MENU_A
               00008 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 307


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00009 
               00010 
               00011 ;; CHECK WHAT MAIN MENU IS ACTIVATED 
               00012 ;; => VIA CURRENT_MAIN_MENU
620E           00013 LABEL_AY_SUB_MENU_A_CHK1
               00014         
620E 5074      00015         movf CURRENT_MAIN_MENU, W
               00016         JUMPTABLE_2BYTES 8
6210 0FF8          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6212 B0D8          M         skpnc
6214 0EF8          M         movlw   -(max_value)
6216 0F08          M         addlw   max_value
6218 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00017                 rgoto        LABEL_AY_SUB_MENU_A_EXIT
621C D007          M         bra     label
               00018                 rgoto        LABEL_AY_SUB_MENU_A_EXIT
621E D006          M         bra     label
               00019                 rgoto        LABEL_AY_SUB_MENU_A_EXIT
6220 D005          M         bra     label
               00020                 rgoto        LABEL_AY_SUB_MENU_A_MAIN_MENU3
6222 D006          M         bra     label
               00021                 rgoto        LABEL_AY_SUB_MENU_A_EXIT
6224 D003          M         bra     label
               00022                 rgoto        LABEL_AY_SUB_MENU_A_MAIN_MENU5
6226 D03D          M         bra     label
               00023                 rgoto        LABEL_AY_SUB_MENU_A_EXIT
6228 D001          M         bra     label
               00024                 rgoto        LABEL_AY_SUB_MENU_A_EXIT
622A D000          M         bra     label
               00025                 
               00026 
               00027 
               00028 
               00029 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00030 ;; ----------------------------------------------------------------
               00031 
               00032 ;; --------[A @ MAIN MENU0]------------------
               00033 
622C           00034 LABEL_AY_SUB_MENU_A_EXIT
               00035         ;; MINUS HAS NO Function here so exit
622C EFDD F024 00036         goto LABEL_MAIN_MENUE_SWITCH
               00037 
               00038 
               00039 
               00040 
               00041 ;; --------[A @ MAIN MENU3]------------------
6230           00042 LABEL_AY_SUB_MENU_A_MAIN_MENU3
               00043         ;; MAIN MENU3 = MIXER FX, TONE ABC, NOISE ABC
               00044         ;; KEY [A] HAD BEEN PRESSED
               00045         ;;
               00046         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00047         ;; IN EDITING MODE "*"
               00048         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00049         ;;
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 308


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00050         ;; 2) TOGGLE CH A ON/OFF
               00051 
               00052 ;; --[ 1) CHECK ITEM]-------
               00053 
               00054         ;; CHECK LOCATION VIA EDITING MODE "*"
               00055         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
6230 C202 F003 00056         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00057 
6234           00058 LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM1        
6234 0E01      00059         movlw   MENU_ITEM_POS1
6236 6203      00060         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00061 
               00062                 ;; NO
               00063                 rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM2
6238 D001          M         bra     label
               00064 
               00065                 ;; YES
               00066                 rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_FX_A
623A D00A          M         bra     label
               00067 
               00068 
623C           00069 LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM2        
623C 0E02      00070         movlw   MENU_ITEM_POS2
623E 6203      00071         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00072 
               00073                 ;; NO
               00074                 rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM3
6240 D001          M         bra     label
               00075 
               00076                 ;; YES
               00077                 rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_CH_A
6242 D015          M         bra     label
               00078 
               00079 ;; -------
               00080 
6244           00081 LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM3        
6244 0E03      00082         movlw   MENU_ITEM_POS3
6246 6203      00083         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00084 
               00085                 ;; NO
               00086                 ;; KEY [A] is only needed @ ITEM 1,2,3
               00087                 ;; SO EXIT HERE...
6248 EFDD F024 00088                 goto LABEL_MAIN_MENUE_SWITCH
               00089 
               00090                 ;; YES
624C EF44 F031 00091                 goto LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_NOISE_A
               00092 
               00093 
               00094 
               00095 
               00096 
               00097 
               00098 ;; ---------[MAIN MENU 3 @ ITEM1 - SUB-ROUTINE KEY [A] TOGGLE FX A ON/ OFF]---------------
               00099 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 309


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6250           00100 LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_FX_A
               00101         
               00102         ;; TOGGLE FX A ON/OFF
               00103         ;; BIT0 = 1 ==> FX CH A ON 
               00104         ;; BIT0 = 0 ==> FX CH A OFF 
               00105         ;; IF BIT0 = 0 => TOGGLE BIT0 to 1
               00106         ;; IF BIT0 = 1 => TOGGLE BIT0 to 0
               00107 
               00108         ;; CHECK IS BIT0 = 0?  
6250 B04D      00109         btfsc FX_USER_ON_OFF_ABC, BIT0_FX_ON_OFF_TONE_A ;; CHK BIT0
               00110                 
               00111                 ;; NO - BIT0 = 1, SO CLEAR BIT0 TO 0
6252 EF32 F031 00112                 goto  LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_FX_A
               00113                 
               00114                 
               00115                 ;; YES BIT0 = 0, SO SET BIT0 TO 1
6256 EF2D F031 00116                 goto LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_FX_A
               00117                 
               00118 
625A           00119 LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_FX_A
               00120                 ;; SET BIT0
625A 804D      00121                 bsf FX_USER_ON_OFF_ABC, BIT0_FX_ON_OFF_TONE_A
               00122                 ;; CS LED
625C ECBB F03E 00123                 call LED_Fx_A_on
6260 EFDD F024 00124                         goto LABEL_MAIN_MENUE_SWITCH
               00125 
6264           00126 LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_FX_A
               00127                 ;; CLEAR BIT0
6264 904D      00128                 bcf FX_USER_ON_OFF_ABC, BIT0_FX_ON_OFF_TONE_A
               00129                 ;; CS LED
6266 ECBF F03E 00130                 call LED_Fx_A_off
626A EFDD F024 00131                         goto LABEL_MAIN_MENUE_SWITCH
               00132                 
               00133 
               00134         
               00135 
               00136 
               00137 ;; ---------------[END ITEM1 (FX)]------------------------
               00138 
               00139 
               00140 ;; ---------[START: TOGGLE CH A ON/ OFF]---------------
               00141 
626E           00142 LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_CH_A
               00143 
               00144         ;; TOGGLE CH A ON/OFF
               00145         ;; BIT0 = 0 ==> TONE CH A *ON* (!)
               00146         ;; BIT0 = 1 ==> TONE CH A *OFF* (!)
               00147         ;; BIT0 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH:
               00148         ;; IF BIT0 = 0 => TOGGLE BIT0 to 1
               00149         ;; IF BIT0 = 1 => TOGGLE BIT0 to 0
               00150 
               00151         ;; BIT0 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH TEST
               00152         ;; SCIP IF CLEAR
               00153         ;; IS BIT0 OF AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?  
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 310


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
626E B020      00154         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, 0 ;; CHK BIT0
               00155                 
               00156                 ;; NO - BIT0 = 1, SO CLEAR BIT0
               00157                 rgoto  LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_CHA
6270 D006          M         bra     label
               00158                 
               00159                 
               00160                 ;; YES BIT0 = 0, SO SET BIT0
               00161                 rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_CHA
6272 D000          M         bra     label
               00162                 
               00163 
6274           00164 LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_CHA
               00165                 ;; SET BIT0
6274 8020      00166                 bsf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT0_TONE_A_ON_OFF
               00167                 ;; CS LED
6276 EC77 F03E 00168                 call LED_ToneA_off
627A EFDD F024 00169                         goto LABEL_MAIN_MENUE_SWITCH
               00170                 
               00171                                 
               00172 
627E           00173 LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_CHA
               00174                 ;; CLEAR BIT0
627E 9020      00175                 bcf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT0_TONE_A_ON_OFF
               00176                 ;; CS LED
6280 EC73 F03E 00177                 call LED_ToneA_on
6284 EFDD F024 00178                         goto LABEL_MAIN_MENUE_SWITCH
               00179                 
               00180                 
               00181 
               00182 ;; ---------[END: TOGGLE CH A ON/ OFF]---------------
               00183 
               00184 
               00185 
               00186 
               00187 ;; ---------[TOGGLE [ADD NOISE TO CH A] ON/ OFF]---------------
               00188 
6288           00189 LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_NOISE_A
               00190         
               00191         ;; TOGGLE NOISE CH A ON/OFF
               00192         
               00193         ;; BIT3 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH:
               00194         ;; IF BIT3 = 0 => TOGGLE BIT3 to 1
               00195         ;; IF BIT3 = 1 => TOGGLE BIT3 to 0
               00196 
               00197         ;; BIT3 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH TEST
               00198         ;; SKIP IF CLEAR
               00199         ;; IS BIT3 OF AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?  
6288 B620      00200         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF ;; CHK BIT3
               00201                 
               00202                 ;; NO - BIT3 = 1, SO CLEAR BIT3
               00203                 rgoto   LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_B3_NOISE_A
628A D006          M         bra     label
               00204                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 311


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00205                 
               00206                 ;; YES BIT3 = 0, SO SET BIT3
               00207                 rgoto   LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_B3_NOISE_A
628C D000          M         bra     label
               00208                 
               00209 
628E           00210 LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_B3_NOISE_A
               00211                 ;; SET BIT3
628E 8620      00212                 bsf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF
               00213                 ;; CS LED
6290 EC8F F03E 00214                 call LED_NoiseA_off
6294 EFDD F024 00215                         goto LABEL_MAIN_MENUE_SWITCH
               00216 
6298           00217 LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_B3_NOISE_A
               00218                 ;; CLEAR BIT3
6298 9620      00219                 bcf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF
               00220                 ;; CS LED
629A EC8B F03E 00221                 call LED_NoiseA_on
629E EFDD F024 00222                         goto LABEL_MAIN_MENUE_SWITCH
               00223 
               00224 
               00225 
               00226 
               00227 ;; ---------[END: TOGGLE NOISE CH A ON/ OFF]---------------
               00228 
               00229 
               00230 
               00231 ;; --------[A @ MAIN MENU5]------------------
62A2           00232 LABEL_AY_SUB_MENU_A_MAIN_MENU5
               00233 
               00234         ;; MAIN MENU5 = ENVELOPE CONTROL
               00235         ;; KEY [A] HAD BEEN PRESSED
               00236         ;;
               00237         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00238         ;; IN EDITING MODE "*"
               00239         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00240         ;;
               00241         ;; 2) TOGGLE CH A ON/OFF R.MODE
               00242         ;; ==> R.MODE => AY REG 11,12,13 MODE
               00243         ;; ==> R.MODE ON: ENV IS CONTROLLED BY AY REG 12,12,13
               00244 
               00245 ;; --[ 1) CHECK ITEM]-------
               00246 
               00247         ;; CHECK LOCATION VIA EDITING MODE "*"
               00248         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
62A2 C204 F003 00249         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
               00250 
62A6           00251 LABEL_AY_SUB_MENU_A_MAIN_MENU5_CHK_ITEM4        
               00252         ;; POS4 IS THE ONLY POS WHRE KEY [A] IS IN USE @ MAIN MENU5
               00253         ;; SO JUST CHECK POS4...
62A6 0E04      00254         movlw   MENU_ITEM_POS4
62A8 6203      00255         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 4?
               00256 
               00257                 ;; NO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 312


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00258                 ;; SO QUIT HERE
62AA EFDD F024 00259                 goto LABEL_MAIN_MENUE_SWITCH
               00260 
               00261                 ;; YES 
               00262                 rgoto   LABEL_AY_SUB_MENU_A_MAIN_MENU5_TOGGLE_R_MODE_CH_A
62AE D000          M         bra     label
               00263 
               00264 
62B0           00265 LABEL_AY_SUB_MENU_A_MAIN_MENU5_TOGGLE_R_MODE_CH_A
               00266         ;; R_MODE = REGISTER MODE = ENVELOPE MODE
               00267         ;; TOGGLE CH A ON/OFF ENVELOPE MODE @ MAIN MENU5 => ENV MENU
               00268         ;; ==> ENVELOPE MODE = ENV TONE A IS CONTROLLED BY [AY REG 11,12,13]
               00269 
               00270         ;; TOGGLE CH A ON/OFF R.MODE @ MAIN MENU5 => ENV MENU
               00271         ;; CH A BIT4 = 0 ==> R.Mode *OFF* 
               00272         ;; CH A BIT4 = 1 ==> R.Mode *ON* 
               00273         ;; BIT4 of AY_R8_CH_A_AMPLITUDE:
               00274         ;; IF BIT4 = 0 => TOGGLE BIT4 to 1
               00275         ;; IF BIT4 = 1 => TOGGLE BIT4 to 0
               00276 
               00277         ;; BIT4 AY_R8_CH_A_AMPLITUDE TEST
               00278         ;; SKIP IF CLEAR
               00279         ;; IS BIT4 OF AY_R8_CH_A_AMPLITUDE = 0?  
62B0 B86C      00280         btfsc AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF ;; CHK BIT4
               00281                 
               00282                 ;; NO - BIT4 = 1, SO CLEAR BIT4
               00283                 rgoto  LABEL_AY_SUB_MENU_A_MAIN_MENU5_CLR_BIT4
62B2 D005          M         bra     label
               00284                 
               00285                 
               00286                 ;; YES BIT4 = 0, SO SET BIT4
               00287                 rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU5_SET_BIT4
62B4 D000          M         bra     label
               00288                 
               00289 
62B6           00290 LABEL_AY_SUB_MENU_A_MAIN_MENU5_SET_BIT4
               00291                 ;; SET BIT4
62B6 886C      00292                 bsf AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00293                 ;; CS LED
62B8 ECA3 F03E 00294                 call LED_EnvelopeModeA_on
               00295                         rgoto LABEL_AY_SUB_MENU_A_MAIN_MENU5_SEND_TO_AY_BIT4
62BC D003          M         bra     label
               00296 
62BE           00297 LABEL_AY_SUB_MENU_A_MAIN_MENU5_CLR_BIT4
               00298                 ;; CLEAR BIT4
62BE 986C      00299                 bcf AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00300                 ;; CS LED
62C0 ECA7 F03E 00301                 call LED_EnvelopeModeA_off
               00302 
               00303 
62C4           00304 LABEL_AY_SUB_MENU_A_MAIN_MENU5_SEND_TO_AY_BIT4
               00305                         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00306                         ;; --------------------------------------------------------
               00307                         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 313


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
62C4 0E08      00308                         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF 
62C6 6E39      00309                         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00310                         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
62C8 C06C F03A 00311                         movff AY_R8_CH_A_AMPLITUDE, AY_REG_DATA 
               00312                         ;; 
               00313                         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)
               00314                         ;; TO AY REG(X) ROUTINE
               00315                         ;; @ay_sr.inc
62CC ECAA F01B 00316                         call LABEL_AY_SR_Write
               00317                         ;; ---------------------------------------------------------------
               00318 
               00319                                 ;; SUB ROUTINE IS DONE          
               00320                                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
               00321                                 ;; => LABEL_MAIN_MENUE_SWITCH
               00322                                 ;; =>  @ main_menu_functions.inc        
62D0 EFDD F024 00323                                 goto LABEL_MAIN_MENUE_SWITCH
               00324                 
               00325 
               00326 
               00327 
               00328 ;; -------------------------[END OF SUB MENU: A]----------------------------- 
               00329 
               00330 
               00091 #include "sub_menu_key_b.inc"
               00001 ;; sub_menu_key_b.inc
               00002 
               00003 
               00004 
               00005 ;; ---------------------------------------------------------
               00006 ;; -------------------------[B]----------------------------- 
               00007 ;; =======================> [B] HAD BEEN PRESSED
               00008 
62D4           00009 LABEL_AY_SUB_MENU_B
               00010 
               00011         ;; CHECK WHAT MAIN MENU IS ACTIVATED 
               00012         ;; => VIA CURRENT_MAIN_MENU
62D4 5074      00013         movf CURRENT_MAIN_MENU, W
               00014         JUMPTABLE_2BYTES 7
62D6 0FF9          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
62D8 B0D8          M         skpnc
62DA 0EF9          M         movlw   -(max_value)
62DC 0F07          M         addlw   max_value
62DE ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00015                 rgoto        LABEL_AY_SUB_MENU_B_EXIT
62E2 D006          M         bra     label
               00016                 rgoto        LABEL_AY_SUB_MENU_B_EXIT
62E4 D005          M         bra     label
               00017                 rgoto        LABEL_AY_SUB_MENU_B_EXIT
62E6 D004          M         bra     label
               00018                 rgoto        LABEL_AY_SUB_MENU_B_MAIN_MENU3
62E8 D005          M         bra     label
               00019                 rgoto        LABEL_AY_SUB_MENU_B_EXIT
62EA D002          M         bra     label
               00020                 rgoto        LABEL_AY_SUB_MENU_B_MAIN_MENU5
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 314


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
62EC D039          M         bra     label
               00021                 rgoto        LABEL_AY_SUB_MENU_B_EXIT
62EE D000          M         bra     label
               00022 
               00023 
               00024 
               00025 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00026 ;; ----------------------------------------------------------------
               00027 
               00028 
               00029 ;; --------[B - NO FUNCTION HERE]------------------
62F0           00030 LABEL_AY_SUB_MENU_B_EXIT
               00031         ;; Exit here
62F0 EFDD F024 00032         goto LABEL_MAIN_MENUE_SWITCH
               00033 
               00034 
               00035 
               00036 ;; --------[B @ MAIN MENU3]------------------
62F4           00037 LABEL_AY_SUB_MENU_B_MAIN_MENU3
               00038 
               00039         ;; MAIN MENU3 = MIXER CH ABC +NOISE
               00040         ;; KEY B HAD BEEN PRESSED
               00041         ;;
               00042         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00043         ;; IN EDITING MODE "*"
               00044         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00045         ;;
               00046         ;; 2) TOGGLE CH A ON/OFF
               00047 
               00048 ;; --[ 1) CHECK ITEM]-------
               00049 
               00050         ;; CHECK LOCATION VIA EDITING MODE "*"
               00051         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
62F4 C202 F003 00052         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00053 
62F8           00054 LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM1        
62F8 0E01      00055         movlw   MENU_ITEM_POS1
62FA 6203      00056         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00057 
               00058                 ;; NO
               00059                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM2
62FC D001          M         bra     label
               00060 
               00061                 ;; YES
               00062                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_FX_B
62FE D009          M         bra     label
               00063 
               00064 
               00065 
6300           00066 LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM2        
6300 0E02      00067         movlw   MENU_ITEM_POS2
6302 6203      00068         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00069 
               00070                 ;; NO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 315


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00071                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM3
6304 D001          M         bra     label
               00072 
               00073                 ;; YES
               00074                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_CH_B
6306 D012          M         bra     label
               00075 
               00076 ;; -------
               00077 
6308           00078 LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM3        
6308 0E03      00079         movlw   MENU_ITEM_POS3
630A 6203      00080         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 3?
               00081 
               00082                 ;; NO
               00083                 ;; KEY [A] IS NEEDED JUST FOR EDITING POS 2 + 3
               00084                 ;; SO EXIT HERE...
630C EFDD F024 00085                 goto LABEL_MAIN_MENUE_SWITCH
               00086 
               00087                 ;; YES
               00088                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_NOISE_B
6310 D01A          M         bra     label
               00089 
               00090 
               00091 
               00092 
               00093 ;; ---------[MAIN MENU 3 @ ITEM1 - SUB-ROUTINE KEY [B] TOGGLE FX A ON/ OFF]---------------
               00094 
6312           00095 LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_FX_B
               00096         
               00097         ;; TOGGLE FX B ON/OFF
               00098         ;; BIT1 = 1 ==> FX B ON 
               00099         ;; BIT1 = 0 ==> FX B OFF 
               00100         ;; IF BIT1 = 0 => TOGGLE BIT1 to 1
               00101         ;; IF BIT1 = 1 => TOGGLE BIT1 to 0
               00102 
               00103         ;; CHECK IS BIT1 = 0?  
6312 B24D      00104         btfsc FX_USER_ON_OFF_ABC, 1 ;; CHK BIT1
               00105                 
               00106                 ;; NO - BIT1 = 1, SO CLEAR BIT1 TO 0
               00107                 rgoto  LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_FX_B
6314 D006          M         bra     label
               00108                 
               00109                 
               00110                 ;; YES BIT0 = 0, SO SET BIT0 TO 1
               00111                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_FX_B
6316 D000          M         bra     label
               00112                 
               00113 
6318           00114 LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_FX_B
               00115                 ;; SET BIT1
6318 824D      00116                 bsf FX_USER_ON_OFF_ABC, BIT1_FX_ON_OFF_TONE_B
               00117                 ;; CS LED
631A ECC3 F03E 00118                 call LED_Fx_B_on
631E EFDD F024 00119                         goto LABEL_MAIN_MENUE_SWITCH
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 316


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00120 
6322           00121 LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_FX_B
               00122                 ;; CLEAR BIT1
6322 924D      00123                 bcf FX_USER_ON_OFF_ABC, BIT1_FX_ON_OFF_TONE_B
               00124                 ;; CS LED
6324 ECC7 F03E 00125                 call LED_Fx_B_off
6328 EFDD F024 00126                         goto LABEL_MAIN_MENUE_SWITCH
               00127 
               00128 
               00129 
               00130 ;;--------------------[END ITEM1 - FX]-----------------------------
               00131 
               00132 
               00133 
632C           00134 LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_CH_B
               00135 
               00136 ;; ---------[TOGGLE CH B ON/ OFF]---------------
               00137 
               00138         ;; TOGGLE CH B ON/OFF
               00139         ;; BIT1 = 0 ==> TONE CH B *ON* (!)
               00140         ;; BIT1 = 1 ==> TONE CH B *OFF* (!)
               00141         ;; BIT1 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH:
               00142         ;; IF BIT1 = 0 => TOGGLE BIT1 to 1
               00143         ;; IF BIT1 = 1 => TOGGLE BIT1 to 0
               00144 
               00145         ;; BIT1 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH TEST
               00146         ;; SCIP IF CLEAR
               00147         ;; IS BIT1 OF AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?  
632C B220      00148         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF ;; CHK BIT1
               00149                 
               00150                 ;; NO - BIT1 = 1, SO CLEAR BIT1
               00151                 rgoto  LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_CHB
632E D006          M         bra     label
               00152                 
               00153                 
               00154                 ;; YES BIT1 = 0, SO SET BIT1
               00155                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_CHB
6330 D000          M         bra     label
               00156                 
               00157 
6332           00158 LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_CHB
               00159                 ;; SET BIT1
6332 8220      00160                 bsf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF
               00161                 ;; CS LED
6334 EC7F F03E 00162                 call LED_ToneB_off
6338 EFDD F024 00163                         goto LABEL_MAIN_MENUE_SWITCH
               00164 
633C           00165 LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_CHB
               00166                 ;; CLEAR BIT1
633C 9220      00167                 bcf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF
               00168                 ;; CS LED
633E EC7B F03E 00169                 call LED_ToneB_on
6342 EFDD F024 00170                         goto LABEL_MAIN_MENUE_SWITCH
               00171 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 317


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00172 
               00173                 
               00174 
               00175 ;; ---------[END: TOGGLE CH B ON/ OFF]---------------
               00176 
               00177 
               00178 
               00179 ;; ---------[TOGGLE [ADD *NOISE* TO CH B] ON/ OFF]---------------
6346           00180 LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_NOISE_B
               00181         
               00182         ;; TOGGLE NOISE CH B ON/OFF
               00183         
               00184         ;; BIT4 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH:
               00185         ;; IF BIT4 = 0 => TOGGLE BIT4 to 1
               00186         ;; IF BIT4 = 1 => TOGGLE BIT4 to 0
               00187 
               00188         ;; BIT4 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH TEST
               00189         ;; SKIP IF CLEAR
               00190         ;; IS BIT4 OF AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?  
6346 B820      00191         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF ;; CHK BIT4
               00192                 
               00193                 ;; NO - BIT4 = 1, SO CLEAR BIT4
               00194                 rgoto   LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_B4_NOISE_B
6348 D006          M         bra     label
               00195                 
               00196                 
               00197                 ;; YES BIT4 = 0, SO SET BIT4
               00198                 rgoto   LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_B4_NOISE_B
634A D000          M         bra     label
               00199                 
               00200 
634C           00201 LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_B4_NOISE_B
               00202                 ;; SET BIT4
634C 8820      00203                 bsf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF
               00204                 ;; CS LED
634E EC97 F03E 00205                 call LED_NoiseB_off
6352 EFDD F024 00206                         goto LABEL_MAIN_MENUE_SWITCH
               00207 
6356           00208 LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_B4_NOISE_B
               00209                 ;; CLEAR BIT4
6356 9820      00210                 bcf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF
               00211                 ;; CS LED
6358 EC93 F03E 00212                 call LED_NoiseB_on
635C EFDD F024 00213                         goto LABEL_MAIN_MENUE_SWITCH
               00214 
               00215 ;; ---------[END: TOGGLE NOISE CH A ON/ OFF]---------------
               00216 
               00217 
               00218 
               00219 
               00220 ;; --------[B @ MAIN MENU5]------------------
6360           00221 LABEL_AY_SUB_MENU_B_MAIN_MENU5
               00222 
               00223         ;; MAIN MENU5 = ENVELOPE CONTROL
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 318


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00224         ;; KEY [B] HAD BEEN PRESSED
               00225         ;;
               00226         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00227         ;; IN EDITING MODE "*"
               00228         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00229         ;;
               00230         ;; 2) TOGGLE CH B ON/OFF R.MODE
               00231         ;; ==> R.MODE => AY REG 11,12,13 MODE
               00232         ;; ==> R.MODE ON: ENV IS CONTROLLED BY AY REG 12,12,13
               00233 
               00234 ;; --[ 1) CHECK ITEM]-------
               00235 
               00236         ;; CHECK LOCATION VIA EDITING MODE "*"
               00237         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
6360 C204 F003 00238         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
               00239 
6364           00240 LABEL_AY_SUB_MENU_B_MAIN_MENU5_CHK_ITEM4        
               00241         ;; POS4 IS THE ONLY ITEM POS WHRE KEY [B] IS IN USE @ MAIN MENU5
               00242         ;; SO JUST CHECK POS4...
6364 0E04      00243         movlw   MENU_ITEM_POS4
6366 6203      00244         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 4?
               00245 
               00246                 ;; NO
               00247                 ;; SO QUIT HERE
6368 EFDD F024 00248                 goto LABEL_MAIN_MENUE_SWITCH
               00249 
               00250                 ;; YES 
               00251                 rgoto   LABEL_AY_SUB_MENU_B_MAIN_MENU5_TOGGLE_R_MODE_CH_B
636C D000          M         bra     label
               00252 
               00253 
636E           00254 LABEL_AY_SUB_MENU_B_MAIN_MENU5_TOGGLE_R_MODE_CH_B
               00255         ;; ENVELOPE MODE ON / OFF:
               00256         ;; R_MODE = REGISTER MODE = ENVELOPE MODE
               00257         ;; TOGGLE CH B ON/OFF R.MODE @ MAIN MENU5 => ENV MENU
               00258         ;; ==> R.MODE => ENV IS CONTROLLED BY [AY REG 11,12,13]
               00259 
               00260         ;; TOGGLE CH B ON/OFF R.MODE @ MAIN MENU5 => ENV MENU
               00261         ;; CH B BIT4 = 0 ==> ENVELOPE MODE / R.Mode *OFF* 
               00262         ;; CH B BIT4 = 1 ==> ENVELOPE MODE / R.Mode *ON* 
               00263         ;; BIT4 of AY_R9_CH_B_AMPLITUDE:
               00264         ;; IF BIT4 = 0 => TOGGLE BIT4 to 1
               00265         ;; IF BIT4 = 1 => TOGGLE BIT4 to 0
               00266 
               00267         ;; BIT4 AY_R8_CH_A_AMPLITUDE TEST
               00268         ;; SKIP IF CLEAR
               00269         ;; IS BIT4 OF AY_R8_CH_A_AMPLITUDE = 0?  
636E B86D      00270         btfsc AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF ;; CHK BIT4
               00271                 
               00272                 ;; NO - BIT4 = 1, SO CLEAR BIT4
               00273                 rgoto  LABEL_AY_SUB_MENU_B_MAIN_MENU5_CLR_BIT4
6370 D005          M         bra     label
               00274                 
               00275                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 319


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00276                 ;; YES BIT4 = 0, SO SET BIT4
               00277                 rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU5_SET_BIT4
6372 D000          M         bra     label
               00278                 
               00279 
6374           00280 LABEL_AY_SUB_MENU_B_MAIN_MENU5_SET_BIT4
               00281                 ;; ENVELOPE MODE ON
               00282                 ;; SET BIT4
6374 886D      00283                 bsf AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00284                 ;; CS LED
6376 ECAB F03E 00285                 call LED_EnvelopeModeB_on
               00286 
               00287                         rgoto LABEL_AY_SUB_MENU_B_MAIN_MENU5_SEND_TO_AY_BIT4
637A D003          M         bra     label
               00288 
637C           00289 LABEL_AY_SUB_MENU_B_MAIN_MENU5_CLR_BIT4
               00290                 ;; ENVELOPE MODE OFF
               00291                 ;; CLEAR BIT4
637C 986D      00292                 bcf AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00293                 ;; CS LED
637E ECAF F03E 00294                 call LED_EnvelopeModeB_off
               00295 
6382           00296 LABEL_AY_SUB_MENU_B_MAIN_MENU5_SEND_TO_AY_BIT4
               00297                         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00298                         ;; --------------------------------------------------------
               00299                         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
6382 0E09      00300                         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF
6384 6E39      00301                         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00302                         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
6386 C06D F03A 00303                         movff AY_R9_CH_B_AMPLITUDE, AY_REG_DATA 
               00304                         ;; 
               00305                         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)
               00306                         ;; TO AY REG(X) ROUTINE
               00307                         ;; @ay_sr.inc
638A ECAA F01B 00308                         call LABEL_AY_SR_Write
               00309                         ;; ---------------------------------------------------------------
               00310 
               00311                                         ;; SUB ROUTINE IS DONE          
               00312                                         ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
               00313                                         ;; =>  @ main_menu_functions.inc
638E EFDD F024 00314                                         goto LABEL_MAIN_MENUE_SWITCH
               00315                         
               00316 
               00317 ;; -------------------------[END OF SUB MENU: B]----------------------------- 
               00092 #include "sub_menu_key_c.inc"
               00001 ;; sub_menu_key_c.inc
               00002 
               00003 ;; ---------------------------------------------------------
               00004 ;; -------------------------[C]----------------------------- 
               00005 ;; =======================> [C] HAD BEEN PRESSED
               00006 
6392           00007 LABEL_AY_SUB_MENU_C
               00008 
6392           00009 LABEL_AY_SUB_MENU_C_CHK_MAINMENU
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 320


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00010         ;; 1) CHECK WHICH MAIN MENU IS ACTIVATED
               00011         ;; ==> VIA CURRENT_MAIN_MENU
               00012         ;;
               00013         ;; 2) GOTO THE NEEDED SUB ROUTINE OF THE ACTIVATED
               00014         ;;    MAIN MENU
               00015 
6392 5074      00016         movf CURRENT_MAIN_MENU, W
               00017         JUMPTABLE_2BYTES 7
6394 0FF9          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6396 B0D8          M         skpnc
6398 0EF9          M         movlw   -(max_value)
639A 0F07          M         addlw   max_value
639C ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00018                 rgoto        LABEL_AY_SUB_MENU_C_EXIT
63A0 D006          M         bra     label
               00019                 rgoto        LABEL_AY_SUB_MENU_C_EXIT
63A2 D005          M         bra     label
               00020                 rgoto        LABEL_AY_SUB_MENU_C_EXIT
63A4 D004          M         bra     label
               00021                 rgoto        LABEL_AY_SUB_MENU_C_MAIN_MENU3
63A6 D005          M         bra     label
               00022                 rgoto        LABEL_AY_SUB_MENU_C_EXIT
63A8 D002          M         bra     label
               00023                 rgoto        LABEL_AY_SUB_MENU_C_MAIN_MENU5
63AA D039          M         bra     label
               00024                 rgoto        LABEL_AY_SUB_MENU_C_EXIT
63AC D000          M         bra     label
               00025        
               00026 
               00027 ;; -------[END OF: CHECK WHICH MAIN MENU IS ACTIVATED]---
               00028 ;; ----------------------------------------------------------------
               00029 
               00030 ;; --------[C @ MAIN MENU0]------------------
               00031 
63AE           00032 LABEL_AY_SUB_MENU_C_EXIT
               00033         ;; C @ MENU SWITCH MENU - NO Function
63AE EFDD F024 00034         goto LABEL_MAIN_MENUE_SWITCH
               00035 
               00036 
               00037 
               00038 ;; --------[C @ MAIN MENU3]------------------
63B2           00039 LABEL_AY_SUB_MENU_C_MAIN_MENU3
               00040         ;; MAIN MENU3 = MIXER CH ABC +NOISE
               00041         ;; KEY C HAD BEEN PRESSED
               00042         ;;
               00043         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00044         ;; IN EDITING MODE "*"
               00045         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE
               00046         ;;
               00047         ;; 2) TOGGLE CH C ON/OFF
               00048 
               00049 ;; --[ 1) CHECK ITEM]-------
               00050 
               00051         ;; CHECK LOCATION VIA EDITING MODE "*"
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 321


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00052         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
63B2 C202 F003 00053         movff   AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE, MIOS_PARAMETER1
               00054 
63B6           00055 LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM1        
63B6 0E01      00056         movlw   MENU_ITEM_POS1
63B8 6203      00057         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 1?
               00058 
               00059                 ;; NO
               00060                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM2
63BA D001          M         bra     label
               00061 
               00062                 ;; YES
               00063                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_FX_C
63BC D009          M         bra     label
               00064 
               00065 
63BE           00066 LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM2        
63BE 0E02      00067         movlw   MENU_ITEM_POS2
63C0 6203      00068         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 2?
               00069 
               00070                 ;; NO
               00071                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM3
63C2 D001          M         bra     label
               00072 
               00073                 ;; YES
               00074                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_CH_C
63C4 D012          M         bra     label
               00075 
               00076 ;; -------
               00077 
63C6           00078 LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM3        
63C6 0E03      00079         movlw   MENU_ITEM_POS3
63C8 6203      00080         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE "*" ITEM  = 3?
               00081 
               00082                         ;; NO
               00083                         ;; KEY [C] IS NEEDED JUST FOR EDITING POS 2 + 3
               00084                         ;; SO EXIT HERE...
63CA EFDD F024 00085                         goto LABEL_MAIN_MENUE_SWITCH
               00086 
               00087                 ;; YES
               00088                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_NOISE_C
63CE D01A          M         bra     label
               00089 
               00090 
               00091 
               00092 ;; ---------[MAIN MENU 3 @ ITEM1 - SUB-ROUTINE KEY [C] TOGGLE FX A ON/ OFF]---------------
               00093 
               00094 
63D0           00095 LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_FX_C
               00096         ;; TOGGLE FX C ON/OFF
               00097         ;; BIT2 = 1 ==> FX CH C ON 
               00098         ;; BIT2 = 0 ==> FX CH C OFF 
               00099         ;; IF BIT2 = 0 => TOGGLE BIT2 to 1
               00100         ;; IF BIT2 = 1 => TOGGLE BIT2 to 0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 322


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00101 
               00102         ;; CHECK IS BIT2 = 0?  
63D0 B44D      00103         btfsc FX_USER_ON_OFF_ABC, BIT2_FX_ON_OFF_TONE_C ;; CHK BIT2
               00104                 
               00105                 ;; NO - BIT2 = 1, SO CLEAR BIT0 TO 0
               00106                 rgoto  LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_FX_C
63D2 D006          M         bra     label
               00107                 
               00108                 
               00109                 ;; YES BIT2 = 0, SO SET BIT2 TO 1
               00110                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_FX_C
63D4 D000          M         bra     label
               00111                 
               00112 
63D6           00113 LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_FX_C
               00114                 ;; SET BIT2
63D6 844D      00115                 bsf FX_USER_ON_OFF_ABC, BIT2_FX_ON_OFF_TONE_C
               00116                 ;; CS LED
63D8 ECCB F03E 00117                 call LED_Fx_C_on
63DC EFDD F024 00118                         goto LABEL_MAIN_MENUE_SWITCH
               00119 
63E0           00120 LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_FX_C
               00121                 ;; CLEAR BIT2
63E0 944D      00122                 bcf FX_USER_ON_OFF_ABC, BIT2_FX_ON_OFF_TONE_C
               00123                 ;; CS LED
63E2 ECCF F03E 00124                 call LED_Fx_C_off
63E6 EFDD F024 00125                         goto LABEL_MAIN_MENUE_SWITCH
               00126 
               00127 
               00128 
               00129 
               00130 
               00131 
               00132 ;;--------------------[END ITEM1 - FX]-----------------------------
               00133 
63EA           00134 LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_CH_C
               00135 
               00136         ;; TOGGLE CH C ON/OFF
               00137         ;; BIT2 = 0 ==> TONE CH C *ON* (!)
               00138         ;; BIT2 = 1 ==> TONE CH C *OFF* (!)
               00139         ;; BIT2 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH:
               00140         ;; IF BIT2 = 0 => TOGGLE BIT2 to 1
               00141         ;; IF BIT2 = 1 => TOGGLE BIT2 to 0
               00142 
               00143         ;; BIT2 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH TEST
               00144         ;; SCIP IF CLEAR
               00145         ;; IS BIT2 OF AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?  
63EA B420      00146         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_FX_ON_OFF_TONE_C ;; CHK BIT2
               00147                 
               00148                 ;; NO - BIT2 = 1, SO CLEAR BIT2
               00149                 rgoto  LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_CHC
63EC D006          M         bra     label
               00150                 
               00151                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 323


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00152                 ;; YES BIT2 = 0, SO SET BIT2
               00153                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_CHC
63EE D000          M         bra     label
               00154                 
               00155 
63F0           00156 LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_CHC
               00157                 ;; SET BIT2
63F0 8420      00158                 bsf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_FX_ON_OFF_TONE_C
               00159                 ;; CS LED
63F2 EC87 F03E 00160                 call LED_ToneC_off
63F6 EFDD F024 00161                         goto LABEL_MAIN_MENUE_SWITCH
               00162 
63FA           00163 LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_CHC
               00164                 ;; CLEAR BIT2
63FA 9420      00165                 bcf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_FX_ON_OFF_TONE_C
               00166                 ;; CS LED
63FC EC83 F03E 00167                 call LED_ToneC_on
6400 EFDD F024 00168                         goto LABEL_MAIN_MENUE_SWITCH
               00169 
               00170 
               00171 ;; ---------[END: TOGGLE CH C ON/ OFF]---------------
               00172 
               00173 
               00174 
               00175 
               00176 ;; ---------[TOGGLE [ADD NOISE TO CH C] ON/ OFF]---------------
               00177 
6404           00178 LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_NOISE_C
               00179 
               00180         ;; TOGGLE NOISE CH C ON/OFF
               00181         
               00182         ;; BIT5 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH:
               00183         ;; IF BIT5 = 0 => TOGGLE BIT5 to 1
               00184         ;; IF BIT5 = 1 => TOGGLE BIT5 to 0
               00185 
               00186         ;; BIT5 AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH TEST
               00187         ;; SKIP IF CLEAR
               00188         ;; IS BIT5 OF AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH = 0?  
6404 BA20      00189         btfsc AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
               00190                 
               00191                 ;; NO - BIT5 = 1, SO CLEAR BIT5
               00192                 rgoto   LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_B5_NOISE_C
6406 D006          M         bra     label
               00193                 
               00194                 
               00195                 ;; YES BIT5 = 0, SO SET BIT5
               00196                 rgoto   LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_B5_NOISE_C
6408 D000          M         bra     label
               00197                 
               00198 
640A           00199 LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_B5_NOISE_C
               00200                 ;; SET BIT5
640A 8A20      00201                 bsf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
               00202                 ;; CS LED
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 324


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
640C EC9F F03E 00203                 call LED_NoiseC_off
6410 EFDD F024 00204                         goto LABEL_MAIN_MENUE_SWITCH
               00205 
6414           00206 LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_B5_NOISE_C
               00207                 ;; CLEAR BIT5
6414 9A20      00208                 bcf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
               00209                 ;; CS LED
6416 EC9B F03E 00210                 call LED_NoiseC_on
641A EFDD F024 00211                         goto LABEL_MAIN_MENUE_SWITCH
               00212 
               00213 
               00214                 
               00215 
               00216 
               00217 
               00218 ;; ---------[END: TOGGLE NOISE CH C ON/ OFF]---------------
               00219 
               00220 ;; --------[END: C @ MAIN MENU3]------------------
               00221 
               00222 
               00223 
               00224 
               00225 ;; --------[C @ MAIN MENU5]------------------
641E           00226 LABEL_AY_SUB_MENU_C_MAIN_MENU5
               00227 
               00228         ;; MAIN MENU5 = ENVELOPE CONTROL
               00229         ;; KEY [C] HAD BEEN PRESSED
               00230         ;;
               00231         ;; 1) CHECK WHICH ITEM (AY REG) IS 
               00232         ;; IN EDITING MODE "*"
               00233         ;; VIA AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE
               00234         ;;
               00235         ;; 2) TOGGLE CH C ON/OFF R.MODE
               00236         ;; ==> R.MODE => AY REG 11,12,13 MODE
               00237         ;; ==> R.MODE ON: ENV IS CONTROLLED BY AY REG 12,12,13
               00238 
               00239 ;; --[ 1) CHECK ITEM]-------
               00240 
               00241         ;; CHECK LOCATION VIA EDITING MODE "*"
               00242         ;; COPY THE VALUE OF EDITING MODE TO  MIOS_PARAMETER1
641E C204 F003 00243         movff   AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE, MIOS_PARAMETER1
               00244 
6422           00245 LABEL_AY_SUB_MENU_C_MAIN_MENU5_CHK_ITEM4        
               00246         ;; POS4 IS THE ONLY POS WHRE KEY [C] IS IN USE @ MAIN MENU5
               00247         ;; SO JUST CHECK POS3...
6422 0E04      00248         movlw   MENU_ITEM_POS4
6424 6203      00249         cpfseq  MIOS_PARAMETER1 ;; EDITING MODE ITEM  = 4?
               00250 
               00251                 ;; NO
               00252                 ;; SO QUIT HERE
6426 EFDD F024 00253                 goto LABEL_MAIN_MENUE_SWITCH
               00254 
               00255                 ;; YES 
               00256                 rgoto   LABEL_AY_SUB_MENU_C_MAIN_MENU5_TOGGLE_R_MODE_CH_C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 325


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
642A D000          M         bra     label
               00257 
               00258 
642C           00259 LABEL_AY_SUB_MENU_C_MAIN_MENU5_TOGGLE_R_MODE_CH_C
               00260         ;; R_MODE = REGISTER MODE = ENVELOPE MODE
               00261         ;; TOGGLE CH C ON/OFF R.MODE @ MAIN MENU5 => ENV MENU
               00262         ;; ==> R.MODE => ENV IS CONTROLLED BY [AY REG 11,12,13]
               00263 
               00264         ;; TOGGLE CH C ON/OFF R.MODE @ MAIN MENU5 => ENV MENU
               00265         ;; CH C BIT4 = 0 ==> R.Mode *OFF* 
               00266         ;; CH C BIT4 = 1 ==> R.Mode *ON* 
               00267         ;; BIT4 of AY_R10_CH_C_AMPLITUDE:
               00268         ;; IF BIT4 = 0 => TOGGLE BIT4 to 1
               00269         ;; IF BIT4 = 1 => TOGGLE BIT4 to 0
               00270 
               00271         ;; BIT4 AY_R10_CH_C_AMPLITUDE TEST
               00272         ;; SKIP IF CLEAR
               00273         ;; IS BIT4 OF AY_R10_CH_C_AMPLITUDE = 0?  
642C B86E      00274         btfsc AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00275                 
               00276                 ;; NO - BIT4 = 1, SO CLEAR BIT4
               00277                 rgoto  LABEL_AY_SUB_MENU_C_MAIN_MENU5_CLR_BIT4
642E D005          M         bra     label
               00278                 
               00279                 
               00280                 ;; YES BIT4 = 0, SO SET BIT4
               00281                 rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU5_SET_BIT4
6430 D000          M         bra     label
               00282                 
               00283 
6432           00284 LABEL_AY_SUB_MENU_C_MAIN_MENU5_SET_BIT4
               00285                 ;; SET BIT4
6432 886E      00286                 bsf AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00287                 ;; CS LED
6434 ECB3 F03E 00288                 call LED_EnvelopeModeC_on
               00289                         rgoto LABEL_AY_SUB_MENU_C_MAIN_MENU5_SEND_TO_AY_BIT4
6438 D003          M         bra     label
               00290 
643A           00291 LABEL_AY_SUB_MENU_C_MAIN_MENU5_CLR_BIT4
               00292                 ;; CLEAR BIT4
643A 986E      00293                 bcf AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00294                 ;; CS LED
643C ECB7 F03E 00295                 call LED_EnvelopeModeC_off
               00296                         
               00297 
6440           00298 LABEL_AY_SUB_MENU_C_MAIN_MENU5_SEND_TO_AY_BIT4
               00299                         ;; PREPARE ITEM DATA FOR TRANSFERE TO AY CHIP VIA ay_sr.inc
               00300                         ;; --------------------------------------------------------
               00301                         ;; WRITE AY REG *ADRESS* TO AY_REG_ADDRESS FOR => AY_SR_Write
6440 0E0A      00302                         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF
6442 6E39      00303                         movwf AY_REG_ADDRESS            ; ADDRESS FOR => AY_SR_Write
               00304                         ;; WRITE AY REG *DATA* TO AY_REG_DATA FOR => AY_SR_Write
6444 C06E F03A 00305                         movff AY_R10_CH_C_AMPLITUDE, AY_REG_DATA 
               00306                         ;; 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 326


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00307                         ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)
               00308                         ;; TO AY REG(X) ROUTINE
               00309                         ;; @ay_sr.inc
6448 ECAA F01B 00310                         call LABEL_AY_SR_Write
               00311                         ;; ---------------------------------------------------------------
               00312 
               00313                                 ;; SUB ROUTINE IS DONE          
               00314                                 ;; JUMP TO MAIN MENU (REDRAW LCD MENU5)         
               00315                         
               00316                                 ;; => LABEL_MAIN_MENUE_SWITCH
               00317                                 ;; =>  @ main_menu_functions.inc        
644C EFDD F024 00318                                 goto LABEL_MAIN_MENUE_SWITCH
               00319                 
               00320 
               00321 ;; -------------------------------------------------------------------------
               00322 
               00323 
               00324 
               00325 ;; --------------------------------------------------------------------------
               00326 ;; -------------------------[END OF SUB MENU: C]----------------------------- 
               00327 
               00093 
               00094 
               00095 
               00096 ;; ----[USER Tick]----------------------------
               00097 #include "user_tick_lcd_redraw.inc"
               00001 ;; user_tick_lcd_redraw.inc
               00002 ;; 
               00003 ;; FUNCTION:
               00004 ;; CHECKING FOR REDRAW THE MAIN MENU
               00005 ;; IS THERE WAS A CC / PITCH BEND / MODULATION WHEEL 
               00006 ;; EVENT @ THE MATCHING MAIN MENU?...
               00007 
               00008 
6450           00009 CHECK_EVENT_MENU_REDRAW
               00010 
               00011                 ;; CHECK IF A MIDI EVENT 
               00012                 ;; (CC / PITCH BEND / MODULATION WHEEL) 
               00013                 ;; VALUE HAS Been Written 
               00014                 ;; IF NO MIDI VALUE HAS BEEN WRITTEN 
               00015                 ;; THE MIDI_EVENT_CHANGE_FLAG MUST BE == 0
               00016                 ;; IF A MIDI VALUE HAS BEEN WRITTEN
               00017                 ;; THE MIDI_EVENT_CHANGE_FLAG == THE CC / PITCH BEND / MODULATION WHEEL VALUE 
               00018                 ;; (*NOT* THE CC, PITCH BEND, MOD WHEEL VALUE!)
               00019                 ;; SO IF THERE WAS A PITCH BEND / MODULATION WHEEL / CONTROLLER CHANGE
               00020                 ;; A NUMBER HAS BEEN WRITTEN
               00021                 ;; TO THE MIDI_EVENT_CHANGE_FLAG 
               00022                 ;; CC RANGE                     == 0 to 127
               00023                 ;; EXEPTION: PITCH BEND         == 30 
               00024                 ;; EXEPTION: MOD WHEEL          == 32
6450 6AE8      00025                 clrw
6452 6438      00026                 cpfsgt MIDI_EVENT_CHANGE_FLAG
               00027 
               00028                                 ;; NO - THE CC FLAG = 0 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 327


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00029                                 ;; SO just QUIT HERE
               00030                                 rgoto NO_EVENT_FLAG_SO_EXIT
6454 D001          M         bra     label
               00031 
               00032                                 ;; YES - OK, CC FLAG IS ON
               00033                                 ;; SO CLEAR THE CC FLAG
               00034                                 ;; AND THEN CHECK IF THE CONTROLLER
               00035                                 ;; HIT A ITEM IN THE ACTIVE
               00036                                 ;; MAIN MENU
               00037                                 rgoto LCD_REDRAW_EVENT_JUMTABLE
6456 D001          M         bra     label
               00038 
               00039 ;; ---------------------
               00040                                 
6458           00041 NO_EVENT_FLAG_SO_EXIT
               00042                   ;; NO MAIN MENU REWRITING
               00043                   ;; CC Change Flag = 0
               00044                   ;; EXIT HERE
6458 0012      00045                   return
               00046 
               00047 ;; ----------------------
               00048 
645A           00049 LCD_REDRAW_EVENT_JUMTABLE
               00050         ;; Branch MIDI MIDI_EVENT_CHANGE_FLAG
               00051         ;; 
645A 5038      00052         movf MIDI_EVENT_CHANGE_FLAG, W
               00053         
               00054         JUMPTABLE_2BYTES 33 ; entries (0-32)
645C 0FDF          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
645E B0D8          M         skpnc
6460 0EDF          M         movlw   -(max_value)
6462 0F21          M         addlw   max_value
6464 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00055                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 00 - NOT USED 
6468 D020          M         bra     label
               00056                 rgoto   CC1TO5_CHECK_IF_MAIN_MENU_IS_5          ; CONTROLLER 01 - ENVELOPE SHAPE 
646A D022          M         bra     label
               00057                 rgoto   CC1TO5_CHECK_IF_MAIN_MENU_IS_5          ; CONTROLLER 02 - ENV. FINE 
646C D021          M         bra     label
               00058                 rgoto   CC1TO5_CHECK_IF_MAIN_MENU_IS_5          ; CONTROLLER 03 - ENV. FINE OFFSET + 128 (BIT7)
646E D020          M         bra     label
               00059                 rgoto   CC1TO5_CHECK_IF_MAIN_MENU_IS_5          ; CONTROLLER 04 - ENV. COARSE
6470 D01F          M         bra     label
               00060                 rgoto   CC1TO5_CHECK_IF_MAIN_MENU_IS_5          ; CONTROLLER 05 - ENV. COARSE OFFSET + 128 (BIT7)
6472 D01E          M         bra     label
               00061                 rgoto   CC6_CHECK_IF_MAIN_MENU_IS_3             ; CONTROLLER 06 - NOISE PERIOD
6474 D023          M         bra     label
               00062                 rgoto   CC7TO9_CHECK_IF_MAIN_MENU_IS_4          ; CONTROLLER 07 - VOLUME A
6476 D028          M         bra     label
               00063                 rgoto   CC7TO9_CHECK_IF_MAIN_MENU_IS_4          ; CONTROLLER 08 - VOLUME B
6478 D027          M         bra     label
               00064                 rgoto   CC7TO9_CHECK_IF_MAIN_MENU_IS_4          ; CONTROLLER 09 - VOLUME C
647A D026          M         bra     label
               00065                 rgoto   CC10TO15_CHECK_IF_MAIN_MENU_IS_3        ; CONTROLLER 10 - ON/OFF A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 328


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
647C D02B          M         bra     label
               00066                 rgoto   CC10TO15_CHECK_IF_MAIN_MENU_IS_3        ; CONTROLLER 11 - ON/OFF B
647E D02A          M         bra     label
               00067                 rgoto   CC10TO15_CHECK_IF_MAIN_MENU_IS_3        ; CONTROLLER 12 - ON/OFF C
6480 D029          M         bra     label
               00068                 rgoto   CC10TO15_CHECK_IF_MAIN_MENU_IS_3        ; CONTROLLER 13 - NOISE A ON/OFF
6482 D028          M         bra     label
               00069                 rgoto   CC10TO15_CHECK_IF_MAIN_MENU_IS_3        ; CONTROLLER 14 - NOISE B ON/OFF
6484 D027          M         bra     label
               00070                 rgoto   CC10TO15_CHECK_IF_MAIN_MENU_IS_3        ; CONTROLLER 15 - NOISE C ON/OFF
6486 D026          M         bra     label
               00071                 rgoto   CC16TO18_CHECK_IF_MAIN_MENU_IS_5        ; CONTROLLER 16 - TONE A ENV. ON/OFF
6488 D02B          M         bra     label
               00072                 rgoto   CC16TO18_CHECK_IF_MAIN_MENU_IS_5        ; CONTROLLER 17 - TONE B ENV. ON/OFF
648A D02A          M         bra     label
               00073                 rgoto   CC16TO18_CHECK_IF_MAIN_MENU_IS_5        ; CONTROLLER 18 - TONE C ENV. ON/OFF
648C D029          M         bra     label
               00074                 rgoto   CC19TO22_CHECK_IF_MAIN_MENU_IS_7        ; CONTROLLER 19 - TONE A VELOCITY TO VOLUME ON/OFF
648E D02E          M         bra     label
               00075                 rgoto   CC19TO22_CHECK_IF_MAIN_MENU_IS_7        ; CONTROLLER 20 - TONE B VELOCITY TO VOLUME ON/OFF
6490 D02D          M         bra     label
               00076                 rgoto   CC19TO22_CHECK_IF_MAIN_MENU_IS_7        ; CONTROLLER 21 - TONE C VELOCITY TO VOLUME ON/OFF
6492 D02C          M         bra     label
               00077                 rgoto   CC19TO22_CHECK_IF_MAIN_MENU_IS_7        ; CONTROLLER 22 - VELOCITY TO NOISE PERIOD ABC ON/OFF
6494 D02B          M         bra     label
               00078                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 23 - RESERVED for CC
6496 D009          M         bra     label
               00079                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 24 - RESERVED
6498 D008          M         bra     label
               00080                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 25 - RESERVED
649A D007          M         bra     label
               00081                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 26 - RESERVED
649C D006          M         bra     label
               00082                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 27 - RESERVED
649E D005          M         bra     label
               00083                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 28 - RESERVED
64A0 D004          M         bra     label
               00084                 rgoto   USER_TICK_CC_DO_NO_REDRAW               ; CONTROLLER 29 - RESERVED
64A2 D003          M         bra     label
               00085                 rgoto   USER_TICK_PITCH_BEND_CHECK_IF_MAIN_MENU_IS_2    ; [30] PITCH BEND - PITCH BEND TONE A B C
64A4 D029          M         bra     label
               00086                 rgoto   USER_TICK_CC_DO_NO_REDRAW                       ; [31] - RESERVED
64A6 D001          M         bra     label
               00087                 rgoto   USER_TICK_CC_DO_NO_REDRAW                       ; [32] - MODULATION WHEEL
64A8 D000          M         bra     label
               00088                 
               00089 
               00090 
               00091 ;; ----------------------------------------------------------------
               00092 ;; ---------[EXIT AND DO *NOT* REDRAW THE MAIN MENU]---------------
64AA           00093 USER_TICK_CC_DO_NO_REDRAW       
               00094         ;;RESET CC FLAG
64AA 0E00      00095         movlw 0x00
64AC 6E38      00096         movwf MIDI_EVENT_CHANGE_FLAG
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 329


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00097                 ;; EXIT 
64AE 0012      00098                 return
               00099 
               00100 
               00101 ;; -------------------------------------------------------------------
               00102 ;; -------------------------------------------------------------------
               00103 
               00104 
               00105 ;; ----------[CC IS 1-5 CHECK IF MAIN MENU = ENVELOPE (5) ?]-----------------
               00106 
64B0           00107 CC1TO5_CHECK_IF_MAIN_MENU_IS_5
               00108 
               00109                 ;; MAIN MENU = 5 ?
64B0 0E05      00110                 movlw MAIN_MENU_05
64B2 6274      00111                 cpfseq CURRENT_MAIN_MENU
               00112                 
               00113                         ;; NO - OK, QUIT 
64B4 EF55 F032 00114                         goto USER_TICK_CC_DO_NO_REDRAW
               00115 
               00116                         ; YES 
64B8 EF82 F032 00117                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00118 
               00119 
               00120 ;; ---------[END: CHECK CC 1-5 AND MAIN MENU 5 (ENV)------------------------------
               00121 
               00122 ;; ---------[CC=6 (NOISE PERIOD) - IS MAIN MENU = 3 (MIXER)?]--------------------
               00123 
64BC           00124 CC6_CHECK_IF_MAIN_MENU_IS_3
               00125         ;; CC = 6 => NOISE PERIOD HAS BEEN WRITTEN
               00126                 ;; CHECK IF MAIN MENU = 3
64BC 0E03      00127                 movlw MAIN_MENU_03
64BE 6274      00128                 cpfseq CURRENT_MAIN_MENU
               00129                 
               00130                         ;; NO 
64C0 EF55 F032 00131                         goto USER_TICK_CC_DO_NO_REDRAW
               00132 
               00133                         ; YES 
64C4 EF82 F032 00134                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00135         
               00136 
               00137 ;; ---------[IS MAIN MENU = 4 (TONE A B C VOLUME)?]--------------------
64C8           00138 CC7TO9_CHECK_IF_MAIN_MENU_IS_4
               00139                 ;; MAIN MENU = 4 (TONE A B C VOLUME)?
64C8 0E04      00140                 movlw MAIN_MENU_04
64CA 6274      00141                 cpfseq CURRENT_MAIN_MENU
               00142                 
               00143                         ;; NO - OK, QUIT 
64CC EF55 F032 00144                         goto USER_TICK_CC_DO_NO_REDRAW
               00145 
               00146                         ; YES 
64D0 EF82 F032 00147                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00148 
               00149 
               00150 ;; ---------[IS MAIN MENU = 3 (TONE A B C + NOISE = ON or OFF)?]--------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 330


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
64D4           00151 CC10TO15_CHECK_IF_MAIN_MENU_IS_3
               00152                 ;; MAIN MENU = 3 (MIXER - TONE ABC and NOISE ABC => ON OFF)?
64D4 0E03      00153                 movlw MAIN_MENU_03
64D6 6274      00154                 cpfseq CURRENT_MAIN_MENU
               00155                 
               00156                         ;; NO - OK, QUIT 
64D8 EF55 F032 00157                         goto USER_TICK_CC_DO_NO_REDRAW
               00158 
               00159                         ; YES 
64DC EF82 F032 00160                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00161 
               00162 
               00163 
               00164 ;; ---------[IS MAIN MENU = 5 (TONE A B C VELOCITY MAIN MENU)?]--------------------
64E0           00165 CC16TO18_CHECK_IF_MAIN_MENU_IS_5
               00166 
               00167                 ;; MAIN MENU = 5?
64E0 0E05      00168                 movlw MAIN_MENU_05
64E2 6274      00169                 cpfseq CURRENT_MAIN_MENU
               00170                         ;; NO - OK, QUIT 
64E4 EF55 F032 00171                         goto USER_TICK_CC_DO_NO_REDRAW
               00172                         ; YES 
64E8 EF82 F032 00173                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00174 
               00175 
               00176 
               00177 ;; ---------[IS MAIN MENU = 7 (TONE A B C ENVELOPE MAIN MENU)?]--------------------
64EC           00178 CC19TO22_CHECK_IF_MAIN_MENU_IS_7
               00179                 ;; MAIN MENU = 7?
64EC 0E07      00180                 movlw MAIN_MENU_07
64EE 6274      00181                 cpfseq CURRENT_MAIN_MENU
               00182                         ;; NO - OK, QUIT 
64F0 EF55 F032 00183                         goto USER_TICK_CC_DO_NO_REDRAW
               00184                         ; YES 
64F4 EF82 F032 00185                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00186 
               00187 
               00188 ;; ---------[IS MAIN MENU == 2 (DETUNE A B C / PITCH BEND A B C)]-------
64F8           00189 USER_TICK_PITCH_BEND_CHECK_IF_MAIN_MENU_IS_2
               00190                 ;; MAIN MENU = 2?
64F8 0E02      00191                 movlw MAIN_MENU_02
64FA 6274      00192                 cpfseq CURRENT_MAIN_MENU
               00193                         ;; NO - OK, QUIT 
64FC EF55 F032 00194                         goto USER_TICK_CC_DO_NO_REDRAW
               00195                         ; YES 
6500 EF82 F032 00196                         goto USER_TICK_CC_DO_MAIN_MENU_REDRAW
               00197 
               00198 
               00199 
               00200 ;; ----------------------------------------------------------------
               00201 ;; ---------[*REDRAW LCD / currend MAIN MENU*]---------------------
6504           00202 USER_TICK_CC_DO_MAIN_MENU_REDRAW        
               00203                         
               00204                         ;;RESET CC FLAG
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 331


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6504 0E00      00205                         movlw 0x00
6506 6E38      00206                         movwf MIDI_EVENT_CHANGE_FLAG
               00207         
               00208                                 ;; CC VALUE MATCH MAIN MENU!
               00209                                 ;; AND A CC VALUE HAS CHANGED - SO WRITE
               00210                                 ;; MAIN MENU TO SHOW THE CHANGEND VAUES
6508 EFE1 F024 00211                                 goto LABEL_MAIN_MENUE_SWITCH_GO
               00098 #include "user_tick_key_repeat.inc"
               00001 ;; user_tick_key_repeat.inc
               00002 ;;
               00003 ;; FUNCTION:
               00004 ;; C64 KEYBOARD - AUTO KEY REPEAT
               00005 
               00006 
               00007 ;; ----------------------------------------------------
               00008 
               00009 ;; CHECK IF THERE IS A NEED FOR AUTO REPEAT:
               00010 ;; @ [+] KEY OF THE C64 KAYBOARD
               00011 ;; @ [-] KEY OF THE C64 KAYBOARD
               00012 
               00013         ;; function: 
               00014         ;; KEYBOARD KEY AUTO REPEAT FUNCTION
               00015         ;; CONSTANDLY INC [+] or DEC [-] 
               00016         ;; MENU ITEMS via THE C64 KEYBOARD [+]/[-] BUTTONS
               00017 
               00018 
650C           00019 CHECK_CONSTANT_KEY_PRESSING
               00020 ;; JUMPED IN HERE FROM USER_Tick @ main.asm
               00021 ;; (This function is called when nothing else is to do)
               00022 
               00023 ;; --------[START: CHECK KEY STATE]---------------------------------
               00024 
               00025         ;; KEYBORAD: KEY HANDLING
               00026         ;; IF A KEY 
               00027         ;; IS = PRESSED   (AY_KEY_STATE  = 0)
               00028         ;; IS = DEPRESSED (AY_KEY_STATE  = 1)
650C 0E00      00029         movlw   KEY_PRESSED_STATE_0     
650E 6277      00030         cpfseq  SM_KEYB_KEY_STATE       
               00031                 
               00032                         ;; KEY = DEPRESSED
               00033                         rgoto   DO_SET_FIRST_KEY_STRIKE_DELAY_BIT_AND_EXIT_AUTO_REPEAT_ROUTINE
6510 D038          M         bra     label
               00034                 
               00035                 ;; KEY = PRESSED
               00036                 ;; SO GO ON WITH THIS ROUTINE
               00037 
               00038 ;; --------[END: CHECK KEY STATE]---------------------------------
               00039 
               00040 
               00041 ;; --------[END: DEPRESSED KEY "FIRST KEY STRIKE DELAY" BIT HANDLING]--------------------------
               00042 
               00043 
               00044 
               00045 ;; ---------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 332


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00046 ;; ------------------[GENERAL KEY AUTO REPEAT HANDLING]-----------
               00047 ;; ---------------------------------------------------------------
               00048       ;; JUSTAGE OF THE C64 KEYBOARD AUTO REPEAT RATE
6512 0E5F      00049       movlw     C64_KEY_AUTO_REPEAT_GENERAL_TIME        ;; = RATE       [CONST  (ADJUST @ app_defines.h)]
6514 623B      00050       cpfseq    C64_KEY_AUTO_REPEAT_GENERAL_COUNTER     ;; = COUNTER    [VAR                            ]
               00051                 
               00052                 
               00053                 ;; C64_KEY_AUTO_REPEAT_GENERAL_TIME < > C64_KEY_AUTO_REPEAT_GENERAL_COUNTER
               00054                 ;; INC THE COUNTER
               00055                 rgoto DO_INC_GENERAL_KEY_RATE_COUNTER
6516 D001          M         bra     label
               00056                 
               00057                 ;; C64_KEY_AUTO_REPEAT_GENERAL_TIME = C64_KEY_AUTO_REPEAT_GENERAL_COUNTER
               00058                 ;; GO ON 
               00059                 rgoto DO_EXIT_GENERAL_KEY_RATE_CYCLE
6518 D002          M         bra     label
               00060 
651A           00061 DO_INC_GENERAL_KEY_RATE_COUNTER
               00062                         ;; INC COUNTER
651A 2A3B      00063                         incf C64_KEY_AUTO_REPEAT_GENERAL_COUNTER, F
               00064                                 ;; EXIT HERE
651C 0012      00065                                 return
               00066 
651E           00067 DO_EXIT_GENERAL_KEY_RATE_CYCLE
               00068         ;; RESET GENERAL KEY RATE COUNTER TO 0
651E 6A3B      00069         clrf C64_KEY_AUTO_REPEAT_GENERAL_COUNTER
               00070         ;; GO AND CHECK IF THE [+] KEY IS PRESSED
               00071                 
               00072 ;; -----------[END OF GENERAL CYCLE]--------------------
               00073 ;; -----------------------------------------------------
               00074 ;; -------------[CHECK THE [+] KEY]---------------------
               00075 ;; -----------------------------------------------------
               00076 
               00077         ; CHECK IF THE PRESSED KEY = [+]
6520 0E03      00078         movlw   PLUS_SUBMENU_KEY_VALUE                  ;; CONST (app_defines.h)
6522 6275      00079         cpfseq  AY_SUB_MENUE_KEY_SWITCH                 ;; KEY = [+] ? (Assigend @ keyb_decoding.inc)
               00080 
               00081                 ; NO,
               00082                 ; PLUS_SUBMENU_KEY_VALUE <> AY_SUB_MENUE_KEY_SWITCH
               00083                 ; SO THERE IS NO [+] KEY PRESSING
               00084                 rgoto DO_CHECK_MINUS_KEY
6524 D015          M         bra     label
               00085 
               00086         ; YES - [+] KEY IS PRESSED SO GO ON
               00087 ;; -----[CHECK: "FIRST KEY STRIKE DELAY" BIT]--------------
               00088 
               00089         ; THERE IS A PLUS KEY PRESSING EVENT
               00090         ; GO AND CHECK IF THERE IS THE FIRST KEY STRIKE
               00091         ; 
               00092         ; MEMO: "FIRST KEY STRIKE DELAY" BIT
               00093         ; BEVOR A "AUTO REPEAT KEY" WILL BE PRESSED THE FIRST TIME
               00094         ; THE "FIRST KEY STRIKE DELAY" BIT = SET 
               00095         ; (via user_tick_key_repeat.inc, midibox_ay_ini.inc)
               00096         ; CHECK IF THE KEY WAS PRESSED THE FIRST TIME:
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 333


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00097         ; IS "ONE LOOP DELAY BIT" OFF? 
               00098         ; (IS BIT 1 OF AY_KEYB_SPECIAL_KEY_TOGGLE CLEAR ?)
6526 B279      00099         btfsc   AY_KEYB_SPECIAL_KEY_TOGGLE, FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1
               00100 
               00101                 ; NO,
               00102                 ; FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1 = 1 (SET)
               00103                 ; SO PERFORM A "FIRST KEY STRIKE DELAY" CYCLE
               00104                 rgoto PLUS_FIRST_KEY_STRIKE_DELAY_CYCLE
6528 D001          M         bra     label
               00105 
               00106                 ; YES,
               00107                 ; FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1 = 0 (CLEAR)
               00108                 ; THE "ONE LOOP DELAY BIT" HAD ALREADY BEEN CLEARD 
               00109                 ; SO PERFORM A "PLUS KEY AUTO REPEAT DELAY CYCLE"
               00110                 rgoto PLUS_KEY_AUTO_REPEAT_DELAY_CYCLE
652A D009          M         bra     label
               00111 
               00112 ;; --------------------------------------------------------------------------------------
               00113 ;; -----------------------[START OF "FIRST KEY STRIKE DELAY" CYCLE | [+] KEY]------------
               00114 
652C           00115 PLUS_FIRST_KEY_STRIKE_DELAY_CYCLE
               00116         ;; WHEN THE KEY IS PRESSED THE *FIRST TIME*
               00117         ;; THERE MUST BE A SHORT DELAY FOR BETTER
               00118         ;; KEYBOARD BUTTON HANDLING
               00119         
               00120         ;; CHECK:
               00121         ;; FIRST_KEY_STRIKE_CYCLE_COUNTER = FIRST_KEY_STRIKE_CYCLE_TIME
652C 0E8F      00122         movlw  FIRST_KEY_STRIKE_CYCLE_TIME      ;; CONST (ADJUST @ app_defines.h)
652E 623C      00123         cpfseq FIRST_KEY_STRIKE_CYCLE_COUNTER   ;; VAR
               00124 
               00125                 ;; NO,
               00126                 ;; COUNTER < TIME
               00127                 ;; SO INC COUNTER +1
               00128                 rgoto PLUS_KEY_DO_INC_FIRST_KEY_STRIKE_CYCLE_COUNTER
6530 D001          M         bra     label
               00129 
               00130                 ;; YES
               00131                 ;; FIRST_KEY_STRIKE_CYCLE_COUNTER = FIRST_KEY_STRIKE_CYCLE_TIME
               00132                 ;; EXIT "FIRST KEY STRIKE DELAY CYCLE" AND
               00133                 ;; DO *RESET* FIRST_KEY_STRIKE_CYCLE_COUNTER
               00134                 ;; DO *CLEAR* THE "FIRST KEY STRIKE DELAY" BIT
               00135                 rgoto PLUS_KEY_DO_FINISH_FIRST_KEY_STRIKE_DELAY_CYCLE
6532 D002          M         bra     label
               00136         
6534           00137 PLUS_KEY_DO_INC_FIRST_KEY_STRIKE_CYCLE_COUNTER
               00138               ;; INC FIRST_KEY_STRIKE_CYCLE_COUNTER +1
6534 2A3C      00139               incf FIRST_KEY_STRIKE_CYCLE_COUNTER, F
               00140                         ;; EXIT
6536 0012      00141                         return
               00142 
6538           00143 PLUS_KEY_DO_FINISH_FIRST_KEY_STRIKE_DELAY_CYCLE
               00144         ;; "FIRST KEY STRIKE DELAY" CYCLE IS PERFORMD
               00145         ;; SO LET'S GO ON                    
               00146                  
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 334


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00147                  ;; BUT FIRST RESET THE "FIRST KEY STRIKE DELAY" COUTER
6538 6A3C      00148                  clrf FIRST_KEY_STRIKE_CYCLE_COUNTER
               00149 
               00150         ;; CLEAR THE "FIRST KEY STRIKE DELAY" BIT
               00151         ;; SO THE NEXT "USER TICK KEY REPEAT CYCLE" WILL *NOT* BE
               00152         ;; A "FIRST KEY STRIKE DELAY" CYCLE
653A 9279      00153         bcf AY_KEYB_SPECIAL_KEY_TOGGLE, FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1                     
               00154                         ;; EXIT HERE
653C 0012      00155                         return
               00156 
               00157 ;; --------[END OF "FIRST KEY STRIKE DELAY" CYCLE AREA | [+] KEY]---------
               00158 ;; -----------------------------------------------------------------------
               00159                 
               00160 
               00161 ;; -----------------------------------------------------------------------
               00162 ;; -------[START OF THE [+] KEY "AUTO REPEAT DELAY CYCLE"]----------------
               00163 
653E           00164 PLUS_KEY_AUTO_REPEAT_DELAY_CYCLE
               00165         ;; PERFORM THE [+] KEY "AUTO REPEAT DELAY CYCLE"
               00166         
               00167         ;; CHECK IF WE CAN GO ON
653E 0E0F      00168         movlw KEY_AUTO_REPEAT_TIME 
6540 623D      00169         cpfseq KEY_AUTO_REPEAT_COUNTER
               00170 
               00171                 ;; NO
               00172                 ;; KEY_AUTO_REPEAT_TIME < KEY_AUTO_REPEAT_COUNTER
               00173                 rgoto PLUS_KEY_DO_INC_KEY_AUTO_REPEAT_CUNTER
6542 D001          M         bra     label
               00174 
               00175                 ;; KEY_AUTO_REPEAT_TIME = KEY_AUTO_REPEAT_COUNTER
               00176                 rgoto PLUS_KEY_DO_AUTO_REPEAT
6544 D002          M         bra     label
               00177 
6546           00178 PLUS_KEY_DO_INC_KEY_AUTO_REPEAT_CUNTER
               00179           ;; INC DO_INC_KEY_AUTO_REPEAT_CUNTER +1
6546 2A3D      00180           incf KEY_AUTO_REPEAT_COUNTER, F
               00181                         ;; EXIT HERE
6548 0012      00182                         return
               00183 
               00184 ;; -------------------------[DO AUTO REPEAT [+] KEY]-----------------------------
654A           00185 PLUS_KEY_DO_AUTO_REPEAT
               00186               ;; NOW THE [+] KEY AUTO REPEAT TAKE PLACE
               00187               ;; AND A [+] KEY SUB MENU ROUTINE WILL BE PERFORMED
               00188                       ;; BUT FIRST:
               00189                       ;; RESET THE KEY_AUTO_REPEAT_COUNTER TO ZERO
654A 6A3D      00190                       clrf  KEY_AUTO_REPEAT_COUNTER
               00191                 
               00192               ;; [+] KEY WAS PRESSED SO NOW
               00193               ;; GO TO THE [+] KEY SUB-MENU ROUTINE
654C EFBA F02D 00194               goto LABEL_AY_SUB_MENU_PLUS
               00195     
               00196 
               00197 ;; -------------------------[END OF AUTO REPEAT [+] KEY AREA]------------------
               00198 ;; ----------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 335


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00199 
               00200 
               00201 ;; ----------------------------------------------------------------------------
               00202 
               00203 
               00204 ;; -------------------------[START OF AUTO REPEAT [-] KEY AREA]----------------
               00205 ;; ----------------------------------------------------------------------------
               00206 
               00207 ;; -------------------------[DO CHECK THE [-] KEY]-----------------------------
6550           00208 DO_CHECK_MINUS_KEY      
               00209         ;; CHECK:
               00210         ;; IF THE PRESSED KEY IS THE [-] KEY
6550 0E04      00211         movlw   MINUS_SUBMENU_KEY_VALUE
6552 6275      00212         cpfseq  AY_SUB_MENUE_KEY_SWITCH ;; KEY = [-] ?
               00213 
               00214                         ;; NO,
               00215                         ;; MINUS_SUBMENU_KEY_VALUE < > AY_SUB_MENUE_KEY_SWITCH
               00216                         ;; THE SUBMENUE [-] KEY WAS THE LAST KEY TO CHECK SO
               00217                         ;; QUIT KEY REPEAT ROUTINE
               00218                         rgoto DO_SET_FIRST_KEY_STRIKE_DELAY_BIT_AND_EXIT_AUTO_REPEAT_ROUTINE
6554 D016          M         bra     label
               00219 
               00220                 ;; YES,
               00221                 ;; MINUS_SUBMENU_KEY_VALUE = AY_SUB_MENUE_KEY_SWITCH
               00222                 ;; [-] KEY IS PRESSED, SO GO ON
               00223                 
               00224 ;; -----------------[CHECK: "FIRST KEY STRIKE DELAY" BIT]------------------
               00225 
               00226         ; THERE IS A PLUS KEY PRESSING EVENT
               00227         ; GO AND CHECK IF IT IS A "FIRST KEY STRIKE"
               00228         ; 
               00229         ; MEMO: 
               00230         ; "FIRST KEY STRIKE DELAY" BIT
               00231         ; BEVOR A "AUTO REPEAT KEY" WILL BE PRESSED THE FIRST TIME
               00232         ; THE "FIRST KEY STRIKE DELAY" BIT = SET (via user_tick_key_repeat.inc, midibox_ay_ini.inc)
               00233         ; SO CHECK IF THE [-] KEY WAS PRESSED THE FIRST TIME:
               00234         ; IS THE "FIRST KEY STRIKE DELAY" BIT OFF? 
               00235         ; (IS BIT 1 OF AY_KEYB_SPECIAL_KEY_TOGGLE = CLEAR ?)
6556 B279      00236         btfsc   AY_KEYB_SPECIAL_KEY_TOGGLE, FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1
               00237 
               00238                 ; NO,
               00239                 ; FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1 = 1 (SET)
               00240                 ; SO PERFORM A "FIRST KEY STRIKE DELAY" CYCLE
               00241                 rgoto MINUS_KEY_FIRST_KEY_STRIKE_DELAY_CYCLE
6558 D001          M         bra     label
               00242 
               00243                 ; YES,
               00244                 ; FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1 = 0 (CLEAR)
               00245                 ; THE "ONE LOOP DELAY BIT" HAD ALREADY BEEN CLEARD 
               00246                 ; SO PERFORM A "MINUS KEY AUTO REPEAT DELAY CYCLE"
               00247                 rgoto MINUS_KEY_AUTO_REPEAT_DELAY_CYCLE
655A D009          M         bra     label
               00248 
               00249 ;; --------------------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 336


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00250 ;; -----------------------[START OF "FIRST KEY STRIKE DELAY" CYCLE | [-] KEY]------------
               00251         
               00252 
655C           00253 MINUS_KEY_FIRST_KEY_STRIKE_DELAY_CYCLE
               00254         ;; ADJUST THE DELAY-TIME HERE 
               00255         ;; => THE DELAY TIME WHEN THE KEY IS PRESSED THE FIRST TIME
655C 0E8F      00256         movlw  FIRST_KEY_STRIKE_CYCLE_TIME
655E 623C      00257         cpfseq FIRST_KEY_STRIKE_CYCLE_COUNTER
               00258 
               00259                 ;; NO,
               00260                 ;; COUNTER < TIME
               00261                 ;; SO INC COUNTER +1
               00262                 rgoto MINUS_KEY_DO_INC_FIRST_KEY_STRIKE_CYCLE_COUNTER
6560 D001          M         bra     label
               00263 
               00264                 ;; YES
               00265                 ;; FIRST_KEY_STRIKE_CYCLE_COUNTER = FIRST_KEY_STRIKE_CYCLE_TIME
               00266                 ;; EXIT "FIRST KEY STRIKE DELAY CYCLE" AND
               00267                 ;; DO *RESET* FIRST_KEY_STRIKE_CYCLE_COUNTER
               00268                 ;; DO *CLEAR* THE "FIRST KEY STRIKE DELAY" BIT
               00269                 rgoto MINUS_KEY_DO_FINISH_FIRST_KEY_STRIKE_DELAY_CYCLE
6562 D002          M         bra     label
               00270         
               00271 
6564           00272 MINUS_KEY_DO_INC_FIRST_KEY_STRIKE_CYCLE_COUNTER
               00273                ;; INC "FIRST KEY STRIKE DELAY" COUNTER +1
6564 2A3C      00274                incf FIRST_KEY_STRIKE_CYCLE_COUNTER, F
               00275                                 ;; EXIT HERE
6566 0012      00276                                 return
               00277 
6568           00278 MINUS_KEY_DO_FINISH_FIRST_KEY_STRIKE_DELAY_CYCLE
               00279                       ;; FIRST SET "FIRST KEY STRIKE DELAY CYCLE" COUNTER TO ZERO
6568 6A3C      00280                        clrf FIRST_KEY_STRIKE_CYCLE_COUNTER
               00281 
               00282                 ;; CLEAR THE "FIRST KEY STRIKE DELAY" BIT
               00283                 ;; SO THE NEXT "USER TICK KEY REPEAT CYCLE" WILL *NOT* BE
               00284                 ;; A "FIRST KEY STRIKE DELAY" CYCLE
656A 9279      00285                 bcf AY_KEYB_SPECIAL_KEY_TOGGLE, FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1                     
               00286                                 ;; EXIT HERE
656C 0012      00287                                 return
               00288         
               00289 ;; -----------------------[END OF "FIRST KEY STRIKE DELAY" CYCLE AREA | [-] KEY]---------
               00290 ;; --------------------------------------------------------------------------------------
               00291                 
               00292 ;; --------------------------------------------------------------------------------------
               00293 ;; ----------------------[START OF THE [-] KEY "AUTO REPEAT DELAY CYCLE"]----------------
               00294 
656E           00295 MINUS_KEY_AUTO_REPEAT_DELAY_CYCLE
               00296         ;; NOW WE RUN THE MINUS KEY "ONE STEP AUTO REPEAT" CYCLE 
               00297         ;; KEY_AUTO_REPEAT_TIME = KEY_AUTO_REPEAT_COUNTER ?
656E 0E0F      00298         movlw  KEY_AUTO_REPEAT_TIME
6570 623D      00299         cpfseq KEY_AUTO_REPEAT_COUNTER
               00300 
               00301                 ;; NO,
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 337


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00302                 ;; KEY_AUTO_REPEAT_TIME < > KEY_AUTO_REPEAT_COUNTER
               00303                 rgoto MINUS_KEY_INC_AUTO_REPEAT_CYCLE_COUNTER
6572 D001          M         bra     label
               00304 
               00305                 ;; YES,
               00306                 ;; KEY_AUTO_REPEAT_TIME = KEY_AUTO_REPEAT_COUNTER
               00307                 rgoto MINUS_KEY_FINISH_AUTO_REPEAT_DELAY_CYCLE
6574 D002          M         bra     label
               00308 
               00309 
6576           00310 MINUS_KEY_INC_AUTO_REPEAT_CYCLE_COUNTER
               00311                         ;; INC KEY_AUTO_REPEAT_COUNTER +1
6576 2A3D      00312                         incf KEY_AUTO_REPEAT_COUNTER, F
               00313                                  ;; EXIT HERE
6578 0012      00314                                  return
               00315                         
657A           00316 MINUS_KEY_FINISH_AUTO_REPEAT_DELAY_CYCLE
               00317         ;; NOW THE [-] KEY PRESSING TAKE PLACE
               00318                                 
               00319                                 ;; BUT DO NOT FORGET TO
               00320                                 ;; RESET THE COUNTERS
657A 6A3C      00321                                 clrf FIRST_KEY_STRIKE_CYCLE_COUNTER
657C 6A3D      00322                                 clrf KEY_AUTO_REPEAT_COUNTER
               00323                 
               00324         ;; [-] KEY WAS PRESSED SO NOW
               00325         ;; JUMP TO [-] SUBMENU FUNCTION JUMP TABLE
657E EF5F F02F 00326         goto    LABEL_AY_SUB_MENU_MINUS
               00327 
               00328 ;; -------------------------[END OF AUTO REPEAT [-] KEY AREA]------------------
               00329 ;; ----------------------------------------------------------------------------
               00330 
               00331 
               00332 ;; ----------------------------------------------------------------------------
               00333 
               00334 
               00335 
               00336 ;; ---------------------------------------[EXIT]-------------------------------
6582           00337 DO_SET_FIRST_KEY_STRIKE_DELAY_BIT_AND_EXIT_AUTO_REPEAT_ROUTINE
               00338 
               00339                       ;; EXIT HERE BUT
               00340                       ;; FIRST...
               00341                       
               00342                       ;; RESET TIME BANDIT TO ZERO
6582 6A3B      00343                       clrf C64_KEY_AUTO_REPEAT_GENERAL_COUNTER
6584 6A3C      00344                       clrf FIRST_KEY_STRIKE_CYCLE_COUNTER
6586 6A3D      00345                       clrf KEY_AUTO_REPEAT_COUNTER
               00346                       
               00347     
               00348                     ;; ACHTUNG: 
               00349                     ;; SOLLTEN SPAETER WEITER TASTEN
               00350                     ;; MIT IN DIESE ROUTINE EINGEFÜGT WERDEN,
               00351                     ;; SO MUSS IMMER NACH DER LETZTEN TASTENABFRAGE
               00352                     ;; DAS "ONE LOOP DELAY BIT" GESETZT WERDEN,
               00353                     ;; WIE ES HIER AN DIESER STELLE DER FALL IST.
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 338


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00354                     ;; 
               00355                     ;; ERLAEUTERUNG:
               00356                     ;; DAS "ONE LOOP DELAY BIT" MUSS IMMER AUTOMATISCH
               00357                     ;; GESETZT WERDEN, WENN KEINE GESUCHTE TASTE IN DIESEM FALL 
               00358                     ;; DIE [+] oder [-] TASTE GEDRUECKT WERDEN.
               00359                     ;; HIER NUN WIRD, WENN KEINER DER BEIDEN GESUCHTEN
               00360                     ;; TASTEN GEDRUECKT WIRD DANN DAS "ONE LOOP DELAY BIT" GESETZT
               00361                     ;; WELCHES ERST DURCH DEN ERSTEN [+] oder[-] TASTENDRUCK
               00362                     ;; WIEDER GELOESCHT WIRD.
               00363                     ;; DAS DELAY BIT VERHINDER, DASS
               00364                     ;; BEIM ERSTEN TASTENDRUCK
               00365                     ;; 2x DIE SUB MENU FUNCTION
               00366                     ;; AUFGERUFEN WIRD UND SORGT ZUSÄTZLICH 
               00367                     ;; DURCH EINEN TIME BANDIT FÜR EINE KLEINE 
               00368                     ;; "EXTRA PAUSE".
6588 8279      00369                     bsf AY_KEYB_SPECIAL_KEY_TOGGLE, FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1
               00370 
               00371                 ;; EXIT HERE
658A 0012      00372                 return
               00373 
               00374         
               00099 
               00100 
               00101 ;; ----[MIDI FUNCTIONS - NOTE ON, NOTE OFF, etc.]----------------------------
               00102 #include "midi_event_jump_table.inc"                    ;; MIDI EVENT SWITCH BOARD
               00001 ; midi_event_jump_table.inc
               00002 ; MIDIBOX AY - MIDI EVENT HANDLING
               00003 ; =================================
               00004 ; 
               00005 ; 
               00006 ; MIDI DATA:
               00007 ; ----------
               00008 ; MIDI_EVNT0            = MIDI DATA BYTE 0 (1)  
               00009 ; MIDI_EVNT1            = MIDI DATA BYTE 1 (2)
               00010 ; MIDI_EVNT_VALUE       = MIDI DATA BYTE 2 (3)
               00011 ;
               00012 ; MIDI_EVNT_CHANNEL     = MIDI CHANNEL (0-15 internal / 1-16 external)
               00013 
               00014 
658C           00015 LABEL_MIDI_HANDLING_START
               00016         ;; Write The MIDI EVENT to 
               00017         ;; MIDI_EVNT0, MIDI_EVNT1 AND MIDI_EVNT_VALUE
               00018         
               00019         ;; MIDI CHANNEL AND MIDI STATUS HERE 
658C C003 F011 00020         movff   MIOS_PARAMETER1, MIDI_EVNT0 
               00021         
               00022         ;; MIDI DATA BYTE1 0-127
6590 C004 F012 00023         movff   MIOS_PARAMETER2, MIDI_EVNT1
               00024         
               00025         ;; MIDI DATA BYTE2 0-127
6594 C005 F013 00026         movff   MIOS_PARAMETER3, MIDI_EVNT_VALUE
               00027 
               00028         
               00029         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 339


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00030         ;; Extract the MIDI CHANNEL:
               00031         ;; MIDI CH = MIDI_EVNT0 BIT 0 to 3 => xxxxnnnn
               00032         ;; nnnn = 0 to 15 dec. => 0x00 to 0x0F HEX
               00033         ;; => MIDI CHANNEL 0-15 (1 to 16)
6598 0E0F      00034         movlw 0x0F              ;; => BIN 00001111
659A 1411      00035         andwf MIDI_EVNT0, W     ;; AND BIN 00001111 WITH
               00036         
               00037         ;; WRITE THE MIDI CHANNEL TO => WREG
               00038         ;; WRITE THE CURREND MIDI CHANNEL TO 
               00039         ;; => MIDI_EVNT_CHANNEL
659C 6E21      00040         movwf MIDI_EVNT_CHANNEL 
               00041 
               00042         
               00043         
               00044 
               00045         ;; Branch depending on the MIDI EVENT
               00046         ;; THIS IS THE MIDI EVENT JUMP TABLE :-)
               00047         SET_BSR MIDI_EVNT0
659E 0100          M         movlb   HIGH(reg)
65A0 3911      00048         swapf   MIDI_EVNT0, W, BANKED
65A2 0B07      00049         andlw   0x07
               00050 
               00051         JUMPTABLE_4BYTES 8 ; 8 entries
65A4 0FF8          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
65A6 B0D8          M         skpnc
65A8 0012          M         return
65AA 0F08          M         addlw   (max_value)
65AC ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
65B0 EFEA F032 00052                 goto    MIDI_EVNT_IS_8x ; Note Off              => note_off.inc
65B4 EF1D F033 00053                 goto    MIDI_EVNT_IS_9x ; Note On               => note_on.inc
65B8 EFC9 F036 00054                 goto    MIDI_EVNT_IS_Ax ; Aftertouch            => midi_evnt_handling.inc
65BC EF24 F033 00055                 goto    MIDI_EVNT_IS_Bx ; Controller            => midi_controller.inc
65C0 EFCA F036 00056                 goto    MIDI_EVNT_IS_Cx ; Program Change        => midi_evnt_handling.inc
65C4 EFCB F036 00057                 goto    MIDI_EVNT_IS_Dx ; Channel Pressure      => midi_evnt_handling.inc
65C8 EF6C F035 00058                 goto    MIDI_EVNT_IS_Ex ; Pitch Bend            => midi_evnt_pitch_wheel.inc
65CC EFCC F036 00059                 goto    MIDI_EVNT_IS_Fx ; not supported, 
               00060                                 
               00061         
               00062                 
65D0 0012      00063                 return
               00064 
               00065 
               00066 
               00067 
               00068 ;; ------[END OF MIDI EVENT FUNCTION]----
               00069 
65D2           00070 MIDI_EVNT_End
               00071 
65D2 0012      00072         return
               00103 #include "note_off.inc"                                 ;; Note OFF Event HAndling
               00001 ;; note_off.inc
               00002 
               00003 ;; Function:
               00004 ;; NOTE OFF workflow (Data handling)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 340


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00005 
               00006 
               00007 ; Note Off
               00008 ; JUMP IN LABLE
65D4           00009 MIDI_EVNT_IS_8x 
               00010 
               00011         
               00012                 
65D4           00013 MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_A
               00014 
               00015         ;; CHECK TONE A MIDI CHANNEL
65D4 5021      00016         movf MIDI_EVNT_CHANNEL, W
65D6 6230      00017         cpfseq AY_TONE_A_MIDI_CHANNEL_USER
               00018 
               00019                 ;NO
               00020                 rgoto MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_B
65D8 D00B          M         bra     label
               00021                 
               00022                 ;YES - NOTE OFF @ TONE A
               00023                 rgoto MIDI_EVNT_IS_8x_NOTE_OFF_TONE_A
65DA D000          M         bra     label
               00024 
               00025 
65DC           00026 MIDI_EVNT_IS_8x_NOTE_OFF_TONE_A
               00027 
               00028         ;; CHCKING if the Note OFF value correlates with the last
               00029         ;; NOTE ON value (importend for MIDI KEYBOARD HANDLING of delayed NOTE OFF values) 
               00030         ;; via CURRENT_MIDI_EVENT_NOTE_ON_OFF
65DC 5012      00031         movf MIDI_EVNT1, W
65DE 621B      00032         cpfseq CURRENT_MIDI_EVENT_NOTE_ON_OFF_A
               00033                         ;; current NOTE OFF value is <> currend NOTE ON value
               00034                         ;; so do nothing and exit here
65E0 0012      00035                         return
               00036 
               00037                 ;; current NOTE OFF value is = currend NOTE ON value
               00038                 ;; *CLEAR* FX MIDI NOTE ON FLAG @ TONE A
65E2 904E      00039                 bcf Fx_MIDI_NOTE_ON_OR_OFF, BIT0_TONE_A_ON_OFF
               00040                 
               00041                                                 
               00042                 ;; CHECK: IS ENVELOPE MODE @ TONE A ON?
               00043                 ;; BIT 4 SET    = ENV. MODE ON
               00044                 ;; BIT 4 CLEAT  = ENV. MODE OFF
65E4 B86C      00045                 btfsc AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00046                         ;; YES - BIT 4 is SET - ENV. MODE ON
               00047                         ;; DO *NOT* SWITCH OFF TONE A
               00048                         ;; LET THE AY 3 8912 ENV. MODE WORK SO QUIT HERE
               00049                         rgoto MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_B
65E6 D004          M         bra     label
               00050                         ;; NO - BIT 4 is CLEAR - ENV. MODE OFF
               00051                         ;; GO ON WITH SWITCH OFF TONE A
               00052                         rgoto MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_A
65E8 D000          M         bra     label
               00053 
               00054 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 341


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
65EA           00055 MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_A
               00056         ;; MIDI SWITCH TONE A NOISE A *OFF*
               00057         ;; CLEAR BIT0, BIT3
               00058         ;; => FILTER FOR REG 7
               00059         ;; => SWITCH OFF TONE A, NOISE A  
65EA 8022      00060         bsf     AY_TONE_ABC_MIDI_ON_OFF, BIT0_TONE_A_ON_OFF
65EC 8622      00061         bsf     AY_TONE_ABC_MIDI_ON_OFF, BIT3_NOISE_A_ON_OFF
               00062                 
               00063                 rgoto MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_B
65EE D000          M         bra     label
               00064 
               00065 
               00066 
               00067 ;; ----------
               00068 
65F0           00069 MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_B
               00070         ;; CHECK TONE B MIDI CHANNEL
65F0 5021      00071         movf MIDI_EVNT_CHANNEL, W
65F2 6231      00072         cpfseq AY_TONE_B_MIDI_CHANNEL_USER
               00073 
               00074                 ;NO
               00075                 rgoto MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_C
65F4 D00B          M         bra     label
               00076                 
               00077                 ;YES - NOTE OFF @ TONE B
               00078                 rgoto MIDI_EVNT_IS_8x_NOTE_OFF_TONE_B
65F6 D000          M         bra     label
               00079 
65F8           00080 MIDI_EVNT_IS_8x_NOTE_OFF_TONE_B
               00081         ;; CHCKING if the Note OFF value correlates with the last
               00082         ;; NOTE ON value (importend for MIDI KEYBOARD HANDLING of delayed NOTE OFF values) 
               00083         ;; via CURRENT_MIDI_EVENT_NOTE_ON_OFF
65F8 5012      00084         movf MIDI_EVNT1, W
65FA 621C      00085         cpfseq CURRENT_MIDI_EVENT_NOTE_ON_OFF_B
               00086                         ;; current NOTE OFF value is <> currend NOTE ON value
               00087                         ;; so do nothing and exit here
65FC 0012      00088                         return
               00089 
               00090                 ;; current NOTE OFF value is = currend NOTE ON value
               00091                 ;; *CLEAR* FX MIDI NOTE ON FLAG @ TONE B
65FE 924E      00092                 bcf Fx_MIDI_NOTE_ON_OR_OFF, BIT1_TONE_B_ON_OFF
               00093                 
               00094                 ;; CHECK: IS ENVELOPE MODE @ TONE B ON?
               00095                 ;; BIT 4 SET    = ENV. MODE ON
               00096                 ;; BIT 4 CLEAT  = ENV. MODE OFF
6600 B86D      00097                 btfsc AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00098                         ;; YES - BIT 4 is SET - ENV. MODE ON
               00099                         ;; DO *NOT* SWITCH OFF TONE A
               00100                         ;; LET THE AY 3 8912 ENV. MODE WORK SO QUIT HERE
               00101                         rgoto MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_C
6602 D004          M         bra     label
               00102                         ;; NO - BIT 4 is CLEAR - ENV. MODE OFF
               00103                         ;; GO ON WITH SWITCH OFF TONE A
               00104                         rgoto MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_B
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 342


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6604 D000          M         bra     label
               00105 
               00106 
6606           00107 MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_B
               00108         ;; MIDI SWITCH TONE B NOISE B *OFF*
               00109         ;; CLEAR BIT1, BIT4
               00110         ;; => FILTER FOR REG 7
               00111         ;; => SWITCH OFF TONE B, NOISE B  
6606 8222      00112         bsf     AY_TONE_ABC_MIDI_ON_OFF, BIT1_TONE_B_ON_OFF
6608 8822      00113         bsf     AY_TONE_ABC_MIDI_ON_OFF, BIT4_NOISE_B_ON_OFF
               00114 
               00115                 rgoto MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_C
660A D000          M         bra     label
               00116 
               00117 
               00118 
               00119 ;; -------------
               00120 
               00121 
660C           00122 MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_C
               00123 
               00124         ;; CHECK TONE C MIDI CHANNEL
660C 5021      00125         movf MIDI_EVNT_CHANNEL, W
660E 6232      00126         cpfseq AY_TONE_C_MIDI_CHANNEL_USER
               00127 
               00128                 ;NO - GO AND SEND DATA TO AY CHIP
               00129                 rgoto   MIDI_EVNT_IS_8x_SEND_NOTE_OFF_TO_AY_CHIP
6610 D00B          M         bra     label
               00130                 
               00131                 ;YES - NOTE OFF @ TONE C
               00132                 rgoto MIDI_EVNT_IS_8x_NOTE_OFF_TONE_C
6612 D000          M         bra     label
               00133 
               00134 
6614           00135 MIDI_EVNT_IS_8x_NOTE_OFF_TONE_C
               00136         ;; CHCKING if the Note OFF value correlates with the last
               00137         ;; NOTE ON value (importend for MIDI KEYBOARD HANDLING of delayed NOTE OFF values) 
               00138         ;; via CURRENT_MIDI_EVENT_NOTE_ON_OFF
6614 5012      00139         movf MIDI_EVNT1, W
6616 621D      00140         cpfseq CURRENT_MIDI_EVENT_NOTE_ON_OFF_C
               00141                         ;; current NOTE OFF value is <> currend NOTE ON value
               00142                         ;; so do nothing and exit here
6618 0012      00143                         return
               00144                 
               00145                 ;; current NOTE OFF value is = currend NOTE ON value
               00146                 ;; *CLEAR* FX MIDI NOTE ON FLAG @ TONE C
661A 944E      00147                 bcf Fx_MIDI_NOTE_ON_OR_OFF, BIT2_TONE_C_ON_OFF
               00148                 
               00149                 ;; CHECK: IS ENVELOPE MODE @ TONE C ON?
               00150                 ;; BIT 4 SET    = ENV. MODE ON
               00151                 ;; BIT 4 CLEAT  = ENV. MODE OFF
661C B86E      00152                 btfsc AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00153                         ;; YES - BIT 4 is SET - ENV. MODE ON
               00154                         ;; DO *NOT* SWITCH OFF TONE C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 343


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00155                         ;; LET THE AY 3 8912 ENV. MODE WORK SO QUIT HERE
               00156                         rgoto MIDI_EVNT_IS_8x_SEND_NOTE_OFF_TO_AY_CHIP
661E D004          M         bra     label
               00157                         ;; NO - BIT 4 is CLEAR - ENV. MODE OFF
               00158                         ;; GO ON WITH SWITCH OFF TONE A
               00159                         rgoto MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_C
6620 D000          M         bra     label
               00160 
6622           00161 MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_C
               00162         ;; MIDI SWITCH TONE C NOISE C *OFF*
               00163         ;; CLEAR BIT2, BIT5
               00164         ;; => FILTER FOR REG 7
               00165         ;; => SWITCH OFF TONE C, NOISE C  
6622 8422      00166         bsf     AY_TONE_ABC_MIDI_ON_OFF, BIT2_TONE_C_ON_OFF
6624 8A22      00167         bsf     AY_TONE_ABC_MIDI_ON_OFF, BIT5_NOISE_C_ON_OFF
               00168 
               00169                 rgoto MIDI_EVNT_IS_8x_SEND_NOTE_OFF_TO_AY_CHIP
6626 D000          M         bra     label
               00170 
               00171 
               00172 
               00173 ;; ---------------------------------------------------------------
               00174 
               00175 
6628           00176 MIDI_EVNT_IS_8x_SEND_NOTE_OFF_TO_AY_CHIP
               00177 
               00178         ;; ==============================================================================
               00179         ;; MIDIFILTER NOTE OFF @ AY REG 7
               00180         ;; SWITCH TONE  A|B|C OFF 
               00181         ;; SWITCH NOISE A|B|C OFF
6628 0EFF      00182         movlw 0xFF      
               00183         ;; AND BIN 11111111
               00184         ;; WITH USER ON/OFF: TONE ABC / NOISE ABC 
662A 1420      00185         andwf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00186         ;; OR W-REG with TONE ABC MIDI ON/OFF
662C 1022      00187         iorwf AY_TONE_ABC_MIDI_ON_OFF, W
               00188         
               00189         ;; WRITE RESULT from W-REG TO AY REG7
662E 6E3A      00190         movwf AY_REG_DATA 
               00191         ;; SEND DATA TO AY REG 7
6630 0E07      00192         movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF          ; ADRESS => AY REGISTER
6632 6E39      00193         movwf AY_REG_ADDRESS                            ; ADDRESS FOR => AY_SR_Write
               00194         ;; --------------[SEND DATA TO AY REG 7]------------------------------------------
               00195         ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
6634 ECAA F01B 00196         call LABEL_AY_SR_Write  
               00197         ;; ==============================================================================       
               00198         
               00199                         ;; Exit here
6638 0012      00200                         return
               00201         
               00202         
               00203 ; END - Note Off
               00104 #include "note_on.inc"                                  ;; Note On Switch Board
               00001 ;; -----------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 344


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00002 ;; note_on.inc
               00003 ;; -----------
               00004 
               00005 ;; THERE WAS A *NOTE ON* MIDI EVENT
               00006 
               00007 ; Note On
663A           00008 MIDI_EVNT_IS_9x 
               00009         
               00010         ;; CHECKING: VELOCITY = 0? 
               00011         ;; JUMPING TO NOTE OFF if *VELOCITY* = 0
663A 0E00      00012         movlw 0x00
663C 6213      00013         cpfseq MIDI_EVNT_VALUE
               00014                 
               00015                 ;; VELOCITY IS *NOT* Zero
               00016                 ;; so go on with NOTE ON handling
               00017                 rgoto MIDI_EVNT_IS_9x_AND_VELOCITY_IS_NOT_ZERO
663E D002          M         bra     label
               00018                 
               00019                 ;; VELOCITY *IS* ZERO = NOTE OFF
               00020                 ;; [MIDI_EVNT_IS_8x] => [note_off.inc]
6640 EFEA F032 00021                 goto MIDI_EVNT_IS_8x 
               00022 
               00023 
               00024 ;; Let's GO ON WITH *NOTE ON* PROCESSING
6644           00025 MIDI_EVNT_IS_9x_AND_VELOCITY_IS_NOT_ZERO
               00026 
               00027                 
               00028 
               00029         ;; NEXT: WRITE TUNE VALUES
               00030         ;; COASE TUNE TO MIOS_PARAMETER1
               00031         ;; FINE  TUNE TO MIOS_PARAMETER2
               00032         ;; SEE => note_to_hz.inc 
6644 EF37 F01A 00033         goto MIDI_EVNT_IS_9x_NOTE_ON_WRITE_TUNE_VALUES
               00034 
               00035 
               00036 
               00105 #include "midi_controller.inc"                          ;; MIDI CC Handling
               00001 ;; midi_controller.inc
               00002 
               00003 ;; FUNCTION:
               00004 ;; MIDI CC DATA HANDLING
               00005 ;;
               00006 ;; MIDI_EVNT0 = BIN '1011nnnn' 
               00007 ;; HEX Bn
               00008 ;; B=11 DECIMAL
               00009 ;; nnnn=MIDI CHANNEL 0-15
               00010 ;; THE MIDI CHANNEL HAS ALREADY BEEN WRITTEN TO:
               00011 ;; MIDI_EVNT_CHANNEL
               00012 ;;
               00013 ;; MIDI CONTROLLER = 0ccccccc
               00014 ;; ccccccc = Controller 0-127
               00015 ;; THE COTROLLER VALUE HAS ALREADY BEEN WRITTEN TO:
               00016 ;; MIDI_EVNT1
               00017 ;; 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 345


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00018 ;; COTROLLER EVENT VALUE = 0vvvvvvv
               00019 ;; vvvvvvv = Controller Event Value 0-127
               00020 ;; THE COTROLLER EVENT VALUE HAS ALREADY BEEN WRITTEN TO:
               00021 ;; MIDI_EVNT_VALUE
               00022 
               00023 
               00024 ;; Controller (CC MIDI EVENT)
6648           00025 MIDI_EVNT_IS_Bx 
               00026         ;; Write CC to MIDI_EVENT_CHANGE_FLAG 
               00027         ;; See => user_tick_lcd_redraw.inc
6648 C012 F038 00028         movff MIDI_EVNT1, MIDI_EVENT_CHANGE_FLAG 
               00029         
               00030         
               00031         ;; COPY THE CC VALUE TO MIDI_CC_VALUE
664C C013 F037 00032         movff MIDI_EVNT_VALUE, MIDI_CC_VALUE
               00033         
               00034         ;; CONTROLLER 1 - 29 is IMPLEMENTED YET
               00035         ;; IS CC > 29?
6650 0E1D      00036         movlw   CC_MAX_VALUE_29 ;; (1D HEX = 29 DEC)
6652 6412      00037         cpfsgt  MIDI_EVNT1
               00038 
               00039                 ; NO - OK CC IS VALID, GO ON
               00040                 rgoto MIDI_EVNT_IS_Bx_CC_JUMPTABLE
6654 D001          M         bra     label
               00041                 
               00042                 ;YES - CC > CC MAX VALUE 
               00043                 ;CC IS NOT VALID - EXIT HERE
6656 0012      00044                 return
               00045 
6658           00046 MIDI_EVNT_IS_Bx_CC_JUMPTABLE    
               00047         ;; Branch MIDI CONTROLLER 0-29 (30-127 are out of range for now)
               00048         ;; // 30 == MIDI_EVENT_CHANGE_FLAG => PITCH BEND
               00049         ;; // 32 == MIDI_EVENT_CHANGE_FLAG => MODULATION WHEEL
6658 5012      00050         movf MIDI_EVNT1, W
               00051         
               00052         JUMPTABLE_4BYTES 30 ; 30 entries (0-29)
665A 0FE2          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
665C B0D8          M         skpnc
665E 0012          M         return
6660 0F1E          M         addlw   (max_value)
6662 ECCA F016     M         call    MIOS_HLP_GetIndex_4bytes
6666 EF70 F033 00053                 goto    MIDI_EVNT_IS_Bx_CC0     ; CONTROLLER 00 - NOT USED 
666A EF71 F033 00054                 goto    MIDI_EVNT_IS_Bx_CC1     ; CONTROLLER 01 - ENVELOPE SHAPE (MODULATION WHEEL)
666E EF93 F033 00055                 goto    MIDI_EVNT_IS_Bx_CC2     ; CONTROLLER 02 - ENV. FINE 
6672 EFAA F033 00056                 goto    MIDI_EVNT_IS_Bx_CC3     ; CONTROLLER 03 - ENV. FINE OFFSET + 128 (BIT7)
6676 EFC5 F033 00057                 goto    MIDI_EVNT_IS_Bx_CC4     ; CONTROLLER 04 - ENV. COARSE
667A EFDC F033 00058                 goto    MIDI_EVNT_IS_Bx_CC5     ; CONTROLLER 05 - ENV. COARSE OFFSET + 128 (BIT7)
667E EFF7 F033 00059                 goto    MIDI_EVNT_IS_Bx_CC6     ; CONTROLLER 06 - NOISE PERIOD
6682 EF1D F034 00060                 goto    MIDI_EVNT_IS_Bx_CC7     ; CONTROLLER 07 - VOLUME A
6686 EF38 F034 00061                 goto    MIDI_EVNT_IS_Bx_CC8     ; CONTROLLER 08 - VOLUME B
668A EF55 F034 00062                 goto    MIDI_EVNT_IS_Bx_CC9     ; CONTROLLER 09 - VOLUME C
668E EF72 F034 00063                 goto    MIDI_EVNT_IS_Bx_CC10    ; CONTROLLER 10 - ON/OFF TONE A (MIXER)
6692 EF83 F034 00064                 goto    MIDI_EVNT_IS_Bx_CC11    ; CONTROLLER 11 - ON/OFF TONE B (MIXER)
6696 EF94 F034 00065                 goto    MIDI_EVNT_IS_Bx_CC12    ; CONTROLLER 12 - ON/OFF TONE C (MIXER)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 346


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
669A EFA7 F034 00066                 goto    MIDI_EVNT_IS_Bx_CC13    ; CONTROLLER 13 - NOISE A ON/OFF (MIXER)
669E EFBA F034 00067                 goto    MIDI_EVNT_IS_Bx_CC14    ; CONTROLLER 14 - NOISE B ON/OFF (MIXER)
66A2 EFCD F034 00068                 goto    MIDI_EVNT_IS_Bx_CC15    ; CONTROLLER 15 - NOISE C ON/OFF (MIXER)
66A6 EFDE F034 00069                 goto    MIDI_EVNT_IS_Bx_CC16    ; CONTROLLER 16 - TONE A ENV. ON/OFF
66AA EFEF F034 00070                 goto    MIDI_EVNT_IS_Bx_CC17    ; CONTROLLER 17 - TONE B ENV. ON/OFF
66AE EFFF F034 00071                 goto    MIDI_EVNT_IS_Bx_CC18    ; CONTROLLER 18 - TONE C ENV. ON/OFF
66B2 EF0F F035 00072                 goto    MIDI_EVNT_IS_Bx_CC19    ; CONTROLLER 19 - TONE A VELOCITY TO VOLUME ON/OFF
66B6 EF1B F035 00073                 goto    MIDI_EVNT_IS_Bx_CC20    ; CONTROLLER 20 - TONE B VELOCITY TO VOLUME ON/OFF
66BA EF27 F035 00074                 goto    MIDI_EVNT_IS_Bx_CC21    ; CONTROLLER 21 - TONE C VELOCITY TO VOLUME ON/OFF
66BE EF33 F035 00075                 goto    MIDI_EVNT_IS_Bx_CC22    ; CONTROLLER 22 - VELOCITY TO NOISE PERIOD ON/OFF
66C2 EF65 F035 00076                 goto    MIDI_EVNT_IS_Bx_CC23    ; CONTROLLER 23 - RESERVED
66C6 EF66 F035 00077                 goto    MIDI_EVNT_IS_Bx_CC24    ; CONTROLLER 24 - RESERVED
66CA EF67 F035 00078                 goto    MIDI_EVNT_IS_Bx_CC25    ; CONTROLLER 25 - RESERVED
66CE EF68 F035 00079                 goto    MIDI_EVNT_IS_Bx_CC26    ; CONTROLLER 26 - RESERVED
66D2 EF69 F035 00080                 goto    MIDI_EVNT_IS_Bx_CC27    ; CONTROLLER 27 - RESERVED
66D6 EF6A F035 00081                 goto    MIDI_EVNT_IS_Bx_CC28    ; CONTROLLER 28 - RESERVED
66DA EF6B F035 00082                 goto    MIDI_EVNT_IS_Bx_CC29    ; CONTROLLER 29 - RESERVED
66DE 0012      00083                         return
               00084         
66E0           00085 MIDI_EVNT_IS_Bx_CC0
               00086         ;; CC0 IS NOT IMPLEMENTED YET
66E0 0012      00087         return
               00088 
               00089 
66E2           00090 MIDI_EVNT_IS_Bx_CC1
               00091 ;; MODULATION WHEEL
               00092 ;; ---------------------------------------
               00093 ;; CC01: write CC VALUE TO ENVELOPE SHAPE
               00094 ;; AY REG. 15
               00095 ;; ---------------------------------------
               00096 
               00097 ;; CHECK IF CC HIT THE MIDI CHANNEL OF TONE A or B OR C
               00098 ;; ELSE SKIP WRITING TO ENV.SHAPE REG 15
66E2           00099 MIDI_EVNT_IS_Bx_CC1_CHK_CH_A          
               00100                
66E2 5021      00101               movf    MIDI_EVNT_CHANNEL, W
66E4 6230      00102               cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00103 
               00104                 ; NO - GO CHECK CH. B
66E6 EF77 F033 00105                 goto MIDI_EVNT_IS_Bx_CC1_CHK_CH_B
               00106                 
               00107                 ;YES - OK, WRITE TO ENV.SHAPE REG
66EA EF82 F033 00108                 goto MIDI_EVNT_IS_Bx_CC1_WRITE_TO_ENV_SHAPE
               00109 
66EE           00110 MIDI_EVNT_IS_Bx_CC1_CHK_CH_B          
66EE 5021      00111               movf    MIDI_EVNT_CHANNEL, W
66F0 6231      00112               cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00113 
               00114                 ; NO - GO CHECK CH. C
66F2 EF7D F033 00115                 goto MIDI_EVNT_IS_Bx_CC1_CHK_CH_C
               00116                 
               00117                 ;YES - OK, WRITE TO ENV.SHAPE REG
66F6 EF82 F033 00118                 goto MIDI_EVNT_IS_Bx_CC1_WRITE_TO_ENV_SHAPE
               00119 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 347


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
66FA           00120 MIDI_EVNT_IS_Bx_CC1_CHK_CH_C
66FA 5021      00121               movf    MIDI_EVNT_CHANNEL, W
66FC 6232      00122               cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00123 
               00124                 ; NO - NO TONE CH. FOUND - SKIP HERE
66FE 0012      00125                 return
               00126                 
               00127                 ;YES - OK, WRITE TO ENV.SHAPE REG
6700 EF82 F033 00128                 goto MIDI_EVNT_IS_Bx_CC1_WRITE_TO_ENV_SHAPE
               00129 
6704           00130 MIDI_EVNT_IS_Bx_CC1_WRITE_TO_ENV_SHAPE        
               00131               ;; convert CC 01 TO ENVELOPE SHAPE
               00132               ;; divide ==> (MIDI DATA(0-127))/8
6704 4237      00133               rrncf     MIDI_CC_VALUE, F         ;; /2
6706 9E37      00134               bcf               MIDI_CC_VALUE, 7
6708 4237      00135               rrncf     MIDI_CC_VALUE, F         ;; /4
670A 9E37      00136               bcf               MIDI_CC_VALUE, 7
670C 4237      00137               rrncf     MIDI_CC_VALUE, F         ;; /8
670E 9E37      00138               bcf               MIDI_CC_VALUE, 7
               00139 
               00140         ;; COPY (MIDI_CC_VALUE/8) to ENV_SHAPE_0_15_to_1_8_TRANSLATOR
6710 0E08      00141         movlw 0x08
6712 6437      00142                 cpfsgt  MIDI_CC_VALUE   
               00143                         ;; MIDI CC < or = 8             
               00144                         rgoto MIDI_EVNT_IS_Bx_CC1_WRITE_TO_SHAPE_SELECTOR
6714 D003          M         bra     label
               00145                         
               00146                         rgoto MIDI_EVNT_IS_Bx_CC1_VALUE_CORRETION
6716 D000          M         bra     label
               00147 
6718           00148 MIDI_EVNT_IS_Bx_CC1_VALUE_CORRETION
6718 0E08      00149         movlw 0x08
671A 6E37      00150         movwf MIDI_CC_VALUE
               00151 
               00152 
671C           00153 MIDI_EVNT_IS_Bx_CC1_WRITE_TO_SHAPE_SELECTOR     
671C C037 F07A 00154         movff MIDI_CC_VALUE, ENV_SHAPE_0_15_to_1_8_TRANSLATOR
               00155         
               00156         ;; SET ENV SHAPE FOR AY CHIP REG 
               00157         ;; (write a value to AY_R13_ENV_SHAPE_CYCLE)
               00158         ;; SET ENV CS LED
               00159         ;; function @ main_menu_05_envelope.inc
6720 ECA1 F02A 00160         call ENVELOPE_TRANSLATOR_CALL
               00161                         
               00162                 ;; Exit
6724 0012      00163                 return
               00164 
               00165 
               00166 ;; ------------------[CC 02]-------------------------------
               00167 
               00168 
6726           00169 MIDI_EVNT_IS_Bx_CC2
               00170               ;; ENVELOPE FINE
               00171               
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 348


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6726           00172 MIDI_EVNT_IS_Bx_CC2_CHK_CH_A
               00173               ;; CHECK IF MIDI CH. TONE A or B or C MATCH
6726 5021      00174               movf    MIDI_EVNT_CHANNEL, W
6728 6230      00175               cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00176 
               00177                 ; NO - GO CHECK CH. B
               00178                 rgoto MIDI_EVNT_IS_Bx_CC2_CHK_CH_B
672A D001          M         bra     label
               00179                 
               00180                 ;YES - OK, GO ON
               00181                 rgoto MIDI_EVNT_IS_Bx_CC2_WRITE_ENV_FINE
672C D008          M         bra     label
               00182 
672E           00183 MIDI_EVNT_IS_Bx_CC2_CHK_CH_B          
672E 5021      00184               movf    MIDI_EVNT_CHANNEL, W
6730 6231      00185               cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00186 
               00187                 ; NO - GO CHECK CH. C
               00188                 rgoto MIDI_EVNT_IS_Bx_CC2_CHK_CH_C
6732 D001          M         bra     label
               00189                 
               00190                 ;YES - OK, GO ON
               00191                 rgoto MIDI_EVNT_IS_Bx_CC2_WRITE_ENV_FINE
6734 D004          M         bra     label
               00192 
6736           00193 MIDI_EVNT_IS_Bx_CC2_CHK_CH_C
6736 5021      00194               movf    MIDI_EVNT_CHANNEL, W
6738 6232      00195               cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00196 
               00197                 ; NO - NO TONE CH. FOUND - SKIP HERE
673A 0012      00198                 return
               00199                 
               00200                 ;YES - OK, GO ON
               00201                 rgoto MIDI_EVNT_IS_Bx_CC2_WRITE_ENV_FINE
673C D000          M         bra     label
               00202 
673E           00203 MIDI_EVNT_IS_Bx_CC2_WRITE_ENV_FINE
               00204                 ;; WRITE 7BIT (BIT 0-6) from CC to R11 AY REG.
               00205                 ;; BUT DON'T CHANGE BIT 7 of AY_R11_ENV_PERIOD_FINE! (OFFSET BIT 7)
673E 0E80      00206                 movlw B'10000000'
6740 166F      00207                 andwf AY_R11_ENV_PERIOD_FINE, F ;; CLEAR BIT0-6 BUT NOT BIT7 (1)
               00208                 ;; COPY BIT0-6 to AY R11 SHADOW REG
               00209                 ;; CC VALUE RANGE = 0-127 (BIT0 to 6)
6742 5037      00210                 movf MIDI_CC_VALUE, W
6744 266F      00211                 addwf AY_R11_ENV_PERIOD_FINE, F 
               00212                 
               00213                 
               00214 ;; -------------[SEND ENVELOPE PERIOD FINE (EP FINE) AY R11 SHADOW REG TO AY REG 11]----
6746 0E0B      00215         movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE       ; REG ADRESS    => AY REGISTER
6748 6E39      00216         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00217  
               00218         ;; CC DATA TO AY REG
674A C06F F03A 00219         movff AY_R11_ENV_PERIOD_FINE, AY_REG_DATA
               00220         ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 349


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
674E ECAA F01B 00221                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00222                 ;; ==========================================================================================
               00223         
               00224                         ;; Exit here
6752 0012      00225                         return
               00226 
               00227 
               00228 ;; ------------------[CC 03]-------------------------------
               00229 
6754           00230 MIDI_EVNT_IS_Bx_CC3
               00231         ;; ENVELOPE FINE - OFFSET (SET/CLEAR BIT7 OF AY_R11_ENV_PERIOD_FINE)
               00232         
6754           00233 MIDI_EVNT_IS_Bx_CC3_CHK_CH_A
               00234               ;; CHECK IF MIDI CH. TONE A or B or C MATCH
6754 5021      00235               movf    MIDI_EVNT_CHANNEL, W
6756 6230      00236               cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00237 
               00238                 ; NO - GO CHECK CH. B
               00239                 rgoto MIDI_EVNT_IS_Bx_CC3_CHK_CH_B
6758 D001          M         bra     label
               00240                 
               00241                 ; YES - OK, GO ON
               00242                 rgoto MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE_OFFSET_BIT7
675A D008          M         bra     label
               00243 
675C           00244 MIDI_EVNT_IS_Bx_CC3_CHK_CH_B          
675C 5021      00245               movf    MIDI_EVNT_CHANNEL, W
675E 6231      00246               cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00247 
               00248                 ; NO - GO CHECK CH. C
               00249                 rgoto MIDI_EVNT_IS_Bx_CC3_CHK_CH_C
6760 D001          M         bra     label
               00250                 
               00251                 ; YES - OK, GO ON
               00252                 rgoto MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE_OFFSET_BIT7
6762 D004          M         bra     label
               00253 
6764           00254 MIDI_EVNT_IS_Bx_CC3_CHK_CH_C
6764 5021      00255               movf    MIDI_EVNT_CHANNEL, W
6766 6232      00256               cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00257 
               00258                 ; NO - NO TONE CH. FOUND - SKIP HERE
6768 0012      00259                 return
               00260                 
               00261                 ; YES - OK, GO ON
               00262                 rgoto MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE_OFFSET_BIT7
676A D000          M         bra     label
               00263 
               00264 
676C           00265 MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE_OFFSET_BIT7
               00266         ;; OFFSET (SET/CLEAR BIT7 OF AY_R11_ENV_PERIOD_FINE)
               00267         
               00268         ;; CHECK IF CC = 0
676C 0E00      00269         movlw 0x00
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 350


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
676E 6237      00270         cpfseq  MIDI_CC_VALUE
               00271 
               00272                 ; NO - SET BIT7
               00273                 rgoto MIDI_EVNT_IS_Bx_CC3_SET_BIT7
6770 D001          M         bra     label
               00274                 
               00275                 ; YES - CLEAR BIT7
               00276                 rgoto MIDI_EVNT_IS_Bx_CC3_CLEAR_BIT7
6772 D002          M         bra     label
               00277 
               00278 
6774           00279 MIDI_EVNT_IS_Bx_CC3_SET_BIT7
               00280         ;; SET BIT7 of AY_R11_ENV_PERIOD_FINE
               00281         ;; + offset bit7
6774 8E6F      00282         bsf AY_R11_ENV_PERIOD_FINE, 7
               00283         rgoto MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE
6776 D002          M         bra     label
               00284         
               00285 
6778           00286 MIDI_EVNT_IS_Bx_CC3_CLEAR_BIT7
               00287         ;; CLEAR BIT7 of AY_R11_ENV_PERIOD_FINE
               00288         ;; - offset bit7
6778 9E6F      00289         bcf AY_R11_ENV_PERIOD_FINE, 7
               00290         rgoto MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE
677A D000          M         bra     label
               00291 
               00292 
677C           00293 MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE
               00294 ;; -------------[SEND ENVELOPE PERIOD FINE (EP FINE) AY R11 SHADOW REG TO AY REG 11]----
677C 0E0B      00295         movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE       ; REG ADRESS    => AY REGISTER
677E 6E39      00296         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00297  
               00298         ;; CC DATA TO AY REG
6780 C06F F03A 00299         movff AY_R11_ENV_PERIOD_FINE, AY_REG_DATA
               00300         ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
6784 ECAA F01B 00301                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00302                 ;; ==========================================================================================
               00303         
               00304                         ;; Exit here
6788 0012      00305                         return
               00306 
               00307 ;; ----------------------------------------------------------------------------------
               00308 
               00309 
678A           00310 MIDI_EVNT_IS_Bx_CC4
               00311         ;; ENVELOPE COARSE
678A           00312 MIDI_EVNT_IS_Bx_CC4_CHK_CH_A
               00313               ;; CHECK IF MIDI CH. TONE A or B or C MATCH
678A 5021      00314               movf    MIDI_EVNT_CHANNEL, W
678C 6230      00315               cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00316 
               00317                 ; NO - GO CHECK CH. B
               00318                 rgoto MIDI_EVNT_IS_Bx_CC4_CHK_CH_B
678E D001          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 351


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00319                 
               00320                 ;YES - OK, GO ON
               00321                 rgoto MIDI_EVNT_IS_Bx_CC4_WRITE_ENV_COARSE
6790 D008          M         bra     label
               00322 
6792           00323 MIDI_EVNT_IS_Bx_CC4_CHK_CH_B          
6792 5021      00324               movf    MIDI_EVNT_CHANNEL, W
6794 6231      00325               cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00326 
               00327                 ; NO - GO CHECK CH. C
               00328                 rgoto MIDI_EVNT_IS_Bx_CC4_CHK_CH_C
6796 D001          M         bra     label
               00329                 
               00330                 ;YES - OK, GO ON
               00331                 rgoto MIDI_EVNT_IS_Bx_CC4_WRITE_ENV_COARSE
6798 D004          M         bra     label
               00332 
679A           00333 MIDI_EVNT_IS_Bx_CC4_CHK_CH_C
679A 5021      00334               movf    MIDI_EVNT_CHANNEL, W
679C 6232      00335               cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00336 
               00337                 ; NO - NO TONE CH. FOUND - SKIP HERE
679E 0012      00338                 return
               00339                 
               00340                 ;YES - OK, GO ON
               00341                 rgoto MIDI_EVNT_IS_Bx_CC4_WRITE_ENV_COARSE
67A0 D000          M         bra     label
               00342 
67A2           00343 MIDI_EVNT_IS_Bx_CC4_WRITE_ENV_COARSE
               00344                 
               00345                 ;; WRITE THE LOVER 7 BIT (BIT 0-6) from CC to R12 AY REG.
               00346                 ;; BUT DON'T CHANGE BIT 7 of AY_R12_ENV_PERIOD_COARSE (OFFSET BIT 7)
67A2 0E80      00347                 movlw B'10000000'
67A4 1670      00348                 andwf AY_R12_ENV_PERIOD_COARSE, F ;; CLEAR BIT0-6 BUT NOT BIT7 (1)
               00349                 ;; COPY (ADD) BIT0-6 to AY R12 SHADOW REG
               00350                 ;; CC VALUE RANGE = 0-127 (BIT0 to 6)
67A6 5037      00351                 movf MIDI_CC_VALUE, W
67A8 2670      00352                 addwf AY_R12_ENV_PERIOD_COARSE, F 
               00353                 
               00354                 
               00355 ;; -------------[SEND ENVELOPE PERIOD FINE (EP FINE) AY R11 SHADOW REG TO AY REG 12]----
67AA 0E0C      00356         movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE     ; REG ADRESS    => AY REGISTER
67AC 6E39      00357         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00358  
               00359         ;; CC DATA TO AY REG
67AE C070 F03A 00360         movff AY_R12_ENV_PERIOD_COARSE, AY_REG_DATA
               00361         ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
67B2 ECAA F01B 00362                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00363                 ;; ==========================================================================================
               00364         
               00365                         ;; Exit here
67B6 0012      00366                         return
               00367 
               00368 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 352


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
67B8           00369 MIDI_EVNT_IS_Bx_CC5
               00370                 ;; ENVELOPE COARSE - OFFSET (SET/CLEAR BIT7 OF AY_R12_ENV_PERIOD_FINE)
               00371                 ;; +128
               00372         
67B8           00373 MIDI_EVNT_IS_Bx_CC5_CHK_CH_A
               00374               ;; CHECK IF MIDI CH. TONE A or B or C MATCH
67B8 5021      00375               movf    MIDI_EVNT_CHANNEL, W
67BA 6230      00376               cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00377 
               00378                 ; NO - GO CHECK CH. B
               00379                 rgoto MIDI_EVNT_IS_Bx_CC5_CHK_CH_B
67BC D001          M         bra     label
               00380                 
               00381                 ; YES - OK, GO ON
               00382                 rgoto MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_FINE_OFFSET_BIT7
67BE D008          M         bra     label
               00383 
67C0           00384 MIDI_EVNT_IS_Bx_CC5_CHK_CH_B          
67C0 5021      00385               movf    MIDI_EVNT_CHANNEL, W
67C2 6231      00386               cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00387 
               00388                 ; NO - GO CHECK CH. C
               00389                 rgoto MIDI_EVNT_IS_Bx_CC5_CHK_CH_C
67C4 D001          M         bra     label
               00390                 
               00391                 ; YES - OK, GO ON
               00392                 rgoto MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_FINE_OFFSET_BIT7
67C6 D004          M         bra     label
               00393 
67C8           00394 MIDI_EVNT_IS_Bx_CC5_CHK_CH_C
67C8 5021      00395               movf    MIDI_EVNT_CHANNEL, W
67CA 6232      00396               cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00397 
               00398                 ; NO - NO TONE CH. FOUND - SKIP HERE
67CC 0012      00399                 return
               00400                 
               00401                 ; YES - OK, GO ON
               00402                 rgoto MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_FINE_OFFSET_BIT7
67CE D000          M         bra     label
               00403 
               00404 
67D0           00405 MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_FINE_OFFSET_BIT7
               00406         ;; OFFSET (SET/CLEAR BIT7 OF AY_R12_ENV_PERIOD_COARSE)
               00407         
               00408         ;; CHECK IF CC = 0
67D0 6AE8      00409         clrw 
67D2 6237      00410         cpfseq  MIDI_CC_VALUE
               00411 
               00412                 ; NO - SET BIT7
               00413                 rgoto MIDI_EVNT_IS_Bx_CC5_SET_BIT7
67D4 D001          M         bra     label
               00414                 
               00415                 ; YES - CLEAR BIT7
               00416                 rgoto MIDI_EVNT_IS_Bx_CC5_CLEAR_BIT7
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 353


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
67D6 D002          M         bra     label
               00417 
               00418 
67D8           00419 MIDI_EVNT_IS_Bx_CC5_SET_BIT7
               00420         ;; SET BIT7 of AY_R11_ENV_PERIOD_FINE
67D8 8E70      00421         bsf AY_R12_ENV_PERIOD_COARSE, 7
               00422         rgoto MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_COARSE
67DA D002          M         bra     label
               00423         
               00424 
67DC           00425 MIDI_EVNT_IS_Bx_CC5_CLEAR_BIT7
               00426         ;; CLEAR BIT7 of AY_R11_ENV_PERIOD_FINE
67DC 9E70      00427         bcf AY_R12_ENV_PERIOD_COARSE, 7
               00428         rgoto MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_COARSE
67DE D000          M         bra     label
               00429 
               00430 
67E0           00431 MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_COARSE
               00432 ;; -------------[SEND ENVELOPE PERIOD FINE (EP FINE) AY R11 SHADOW REG TO AY REG 12]----
67E0 0E0C      00433         movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE     ; REG ADRESS    => AY REGISTER
67E2 6E39      00434         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00435  
               00436         ;; CC DATA TO AY REG
67E4 C070 F03A 00437         movff AY_R12_ENV_PERIOD_COARSE, AY_REG_DATA
               00438         ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
67E8 ECAA F01B 00439                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00440                 ;; ==========================================================================================
               00441         
               00442                         ;; Exit here
67EC 0012      00443                         return
               00444 
               00445 ;; ---------------------------[CC => NOISE PERIOD]-------------------------------------------
               00446 
               00447 
67EE           00448 MIDI_EVNT_IS_Bx_CC6
               00449         ;; CC6 IS NOISE PERIOD
               00450         
               00451               ;; CHECK IF MIDI CH IS = TONE A B or C
67EE 5021      00452               movf    MIDI_EVNT_CHANNEL, W
67F0 6230      00453               cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00454 
               00455                 ; NO - GO CHECK CH. B
               00456                 rgoto MIDI_EVNT_IS_Bx_CC6_CHK_CH_B
67F2 D001          M         bra     label
               00457                 
               00458                 ;YES - OK, WRITE TO ENV.SHAPE REG
               00459                 rgoto MIDI_EVNT_IS_Bx_CC6_GO_ON_TO_WRITE_NOISE_PERIOD
67F4 D007          M         bra     label
               00460 
67F6           00461 MIDI_EVNT_IS_Bx_CC6_CHK_CH_B          
67F6 5021      00462               movf    MIDI_EVNT_CHANNEL, W
67F8 6231      00463               cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00464 
               00465                 ; NO - GO CHECK CH. C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 354


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00466                 rgoto MIDI_EVNT_IS_Bx_CC1_CHK_CH_C
67FA D77F          M         bra     label
               00467                 
               00468                 ;YES - OK, WRITE TO ENV.SHAPE REG
               00469                 rgoto MIDI_EVNT_IS_Bx_CC6_GO_ON_TO_WRITE_NOISE_PERIOD
67FC D003          M         bra     label
               00470 
67FE           00471 MIDI_EVNT_IS_Bx_CC6_CHK_CH_C
67FE 5021      00472               movf    MIDI_EVNT_CHANNEL, W
6800 6232      00473               cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00474 
               00475                 ; NO - NO TONE CH. FOUND - SKIP HERE
6802 0012      00476                 return
               00477                 
               00478                 ;YES - OK, WRITE TO ENV.SHAPE REG
6804           00479 MIDI_EVNT_IS_Bx_CC6_GO_ON_TO_WRITE_NOISE_PERIOD
               00480         
               00481         ;; CONVERT MIDI DATA 7BIT (0-127) TO NOISE PERIOD 5BIT(0-31)
               00482         ;; {NOISE TONE 5BIT} = {MIDI DATA 7BIT}/4
               00483 
               00484         ;; WRITE MIDI DATA BYTE2 0-127 
               00485         ;; TO ---
6804 C013 F040 00486         movff   MIDI_EVNT_VALUE, AY_CC_6_TMP
               00487               
               00488                   
               00489               ;; convert AY_MIDI_VELOCITY_TO_NOISE_PERIOD 8bit to 5bit (0-31 dec.)
               00490               ;; divide ==> (MIDI DATA)/4
6808 4240      00491               rrncf     AY_CC_6_TMP, F   ;; /2
680A 9E40      00492               bcf       AY_CC_6_TMP, 7
680C 4240      00493               rrncf     AY_CC_6_TMP, F   ;; /4
680E 9E40      00494               bcf       AY_CC_6_TMP, 7
               00495               ;; NOW THE CC VALUE IS IN THE 5 LOWER BITS (0-31 dec.)
               00496               ;; AY_CC_6_TMP => BIN '000C CCCC'
               00497 
               00498               
6810 0E1F      00499               movlw NOISE_PERIOD_MAX_VALUE ;; BIN 0001 1111
6812 1640      00500               andwf AY_CC_6_TMP, F
               00501  
               00502               ;; AY NOISE PERIOD:
               00503               ;; CC6 0    => 0   => 31 @ NOISE PERIOD AY CHIP REG 
               00504               ;; CC6 127  => 31  => 0  @ NOISE PERIOD AY CHIP REG 
6814 0E20      00505               movlw 0x20 ;; BIN 0010 0000 (32 dec.)
6816 5640      00506               subfwb AY_CC_6_TMP, F
               00507 
6818 0E1F      00508                 movlw NOISE_PERIOD_MAX_VALUE ;; BIN 0001 1111
681A 1640      00509                 andwf AY_CC_6_TMP, F
               00510 
681C 0E1F      00511                 movlw NOISE_PERIOD_MAX_VALUE ;; BIN 0001 1111 (31 DEC)
681E 6040      00512                 cpfslt AY_CC_6_TMP
               00513 
               00514                       ;; NO, WRITE 31 TO AY_CC_6_TMP
               00515                       rgoto MIDI_EVNT_IS_Bx_CC6_CORRECT_VALUE
6820 D001          M         bra     label
               00516         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 355


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00517                       ;; YES
               00518                       rgoto MIDI_EVNT_IS_Bx_CC6_WRITE_AY_NOISE_PERIOD
6822 D002          M         bra     label
               00519 
6824           00520 MIDI_EVNT_IS_Bx_CC6_CORRECT_VALUE
6824 0E1F      00521                 movlw NOISE_PERIOD_MAX_VALUE ;; BIN 0001 1111 (31 DEC)
6826 6E40      00522                 movwf AY_CC_6_TMP
               00523 
6828           00524 MIDI_EVNT_IS_Bx_CC6_WRITE_AY_NOISE_PERIOD
               00525               
               00526         ;; WRITE CC6 DATA TO AY SHADOW REG. NOISE PERIOD
6828 C040 F06A 00527         movff AY_CC_6_TMP, AY_R6_NOISE_PERIOD
               00528               
               00529               
               00530         ;; -------------[SEND CC6 DATA TO NOISE PERIOD REG 6]------------------------
682C 0E06      00531         movlw AY_CHIP_ADR_06_NOISE_PERIOD               ; REG ADRESS    => AY REGISTER
682E 6E39      00532         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00533         
               00534         ;; WRITE NOISE PERIOD TO AY CHIP 
6830 C040 F03A 00535         movff AY_CC_6_TMP, AY_REG_DATA
               00536 
               00537                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
6834 ECAA F01B 00538                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00539                 ;; ==========================================================================================
               00540                         ;; Exit here
6838 0012      00541                         return
               00542 
               00543 ;; ---------------------------[END CC => NOISE PERIOD]-------------------------------------------
               00544 
               00545 ;; ---------------------------[CC => VOLUME TONE A]-------------------------------------------
683A           00546 MIDI_EVNT_IS_Bx_CC7
               00547         ;; CC7 => Volume Tone A
               00548         ;; CHECK IF CURRENT MIDI CH. MATCH TONE A 
683A 5021      00549         movf    MIDI_EVNT_CHANNEL, W
683C 6230      00550         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00551 
               00552                 ; NO
               00553                 rgoto MIDI_EVNT_IS_Bx_CC7_EXIT
683E D017          M         bra     label
               00554                 
               00555                 ;YES - OK, GO ON
               00556                 rgoto MIDI_EVNT_IS_Bx_CC7_WRITE_TO_VOLUME
6840 D000          M         bra     label
               00557 
6842           00558 MIDI_EVNT_IS_Bx_CC7_WRITE_TO_VOLUME
               00559         ;; CONVERT MIDI DATA CC7 7BIT (0-127) TO VOLUME TONE A 4BIT(0-15)
               00560         ;; {VOLUME TONE 4BIT} = {CC MIDI DATA 7BIT}/8
               00561 
               00562         ;; WRITE MIDI DATA BYTE2 0-127 
               00563         ;; TO AY_CC_7_TMP
6842 C013 F041 00564         movff   MIDI_EVNT_VALUE, AY_CC_7_TMP
               00565               
               00566                   
               00567               ;; convert 7bit Value to 4bit value
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 356


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00568               ;; divide ==> (MIDI DATA)/8
6846 4241      00569               rrncf     AY_CC_7_TMP, F   ;; /2
6848 9E41      00570               bcf       AY_CC_7_TMP, 7
684A 4241      00571               rrncf     AY_CC_7_TMP, F   ;; /4
684C 9E41      00572               bcf       AY_CC_7_TMP, 7
684E 4241      00573               rrncf     AY_CC_7_TMP, F   ;; /8
6850 9E41      00574               bcf       AY_CC_7_TMP, 7
               00575 
               00576               
6852 0E0F      00577               movlw VOLUME_ABC_MAX_VALUE ;; BIN 0000 1111
6854 1641      00578               andwf AY_CC_7_TMP, F
               00579 
               00580               ;; NOW THE CC VOLUME IS IN THE 4 LOWER BITS (0-15 dec.)
               00581               ;; AY_CC_7_TMP => BIN '0000 VVVV'
               00582               
               00583               ;; COPY THE LOWER 4 BIT [BIT0-to 3] = (CC VOLUME (0-15))
               00584               ;; BUT SAVE THE BIT4 = AMPLITUDE MODE!
               00585               
               00586               ;; COPY THE ENV. MODE BIT       
               00587               ;; WRITE 0 TO BIT0-3 
               00588               
               00589               ;; CLEAR BIT 0-3 AY SHADOW REG
6856 0EF0      00590               movlw 0xF0 ;; BIN 1111 0000
6858 146C      00591               andwf AY_R8_CH_A_AMPLITUDE, W
               00592               
               00593               ;; NOW THE SHADOW REG IS IN W REG
               00594               ;; OR {CC VALUE/4} with W REG     
685A 1041      00595               iorwf AY_CC_7_TMP, W
685C 6E41      00596               movwf AY_CC_7_TMP
               00597               
               00598               ;; Write CC To AY R8 Shadow Reg
685E C041 F06C 00599               movff AY_CC_7_TMP, AY_R8_CH_A_AMPLITUDE
               00600 
               00601         ;; -------------[SEND AMPLITUDE TONE A - AY REG 8]------------------------
6862 0E08      00602         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER
6864 6E39      00603         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR   => AY_SR_Write
               00604         
               00605               ;; WRITE TONE A AMPLITUDE TO AY REG
6866 C041 F03A 00606               movff AY_CC_7_TMP, AY_REG_DATA
               00607 
               00608                 ;; --------------[SEND DATA TO AY REG X]------------------------------
686A ECAA F01B 00609                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA 
               00610                 ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00611         ;; ===========================================================================
               00612 
               00613 
               00614 
686E           00615 MIDI_EVNT_IS_Bx_CC7_EXIT
               00616                         
               00617                         ;; Exit here
686E 0012      00618                         return
               00619 
               00620 ;; ---------------------------[END CC => VOLUME TONE A]-------------------------------------------
               00621 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 357


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00622 ;; ---------------------------[CC => VOLUME TONE B]-------------------------------------------
6870           00623 MIDI_EVNT_IS_Bx_CC8
               00624         ;; CC8 => Volume Tone B
               00625         ;; CHECK IF CURRENT MIDI CH. MATCH TONE B
6870 5021      00626         movf    MIDI_EVNT_CHANNEL, W
6872 6231      00627         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00628 
               00629                 ; NO
6874 EF54 F034 00630                 goto MIDI_EVNT_IS_Bx_CC8_EXIT
               00631                 
               00632                 ;YES - OK, GO ON
6878 EF3E F034 00633                 goto MIDI_EVNT_IS_Bx_CC8_WRITE_TO_VOLUME
               00634 
687C           00635 MIDI_EVNT_IS_Bx_CC8_WRITE_TO_VOLUME
               00636         ;; CONVERT MIDI DATA CC8 7BIT (0-127) TO VOLUME TONE B 4BIT(0-15)
               00637         ;; {VOLUME TONE 4BIT} = {CC MIDI DATA 7BIT}/8
               00638 
               00639         ;; WRITE MIDI DATA BYTE2 0-127 
               00640         ;; TO AY_CC_8_TMP
687C C013 F042 00641         movff   MIDI_EVNT_VALUE, AY_CC_8_TMP
               00642               
               00643                   
               00644               ;; convert 7bit Value to 4bit value
               00645               ;; divide ==> (MIDI DATA)/8
6880 4242      00646               rrncf     AY_CC_8_TMP, F   ;; /2
6882 9E42      00647               bcf       AY_CC_8_TMP, 7
6884 4242      00648               rrncf     AY_CC_8_TMP, F   ;; /4
6886 9E42      00649               bcf       AY_CC_8_TMP, 7
6888 4242      00650               rrncf     AY_CC_8_TMP, F   ;; /8
688A 9E42      00651               bcf       AY_CC_8_TMP, 7
               00652 
               00653               
688C 0E0F      00654               movlw VOLUME_ABC_MAX_VALUE ;; BIN 00001111
688E 1642      00655               andwf AY_CC_8_TMP, F
               00656 
               00657               ;; NOW THE CC VOLUME IS IN THE 4 LOWER BITS (0-15 dec.)
               00658               ;; AY_CC_8_TMP => BIN '0000 VVVV'
               00659               
               00660               ;; COPY THE LOWER 4 BIT [BIT0-to 3] = (CC VOLUME (0-15))
               00661               ;; BUT SAVE THE BIT4 = AMPLITUDE MODE!
               00662               
               00663               ;; COPY THE ENV. MODE BIT       
               00664               ;; WRITE 0 TO BIT0-3 
               00665               
               00666               ;; CLEAR BIT 0-3 AY SHADOW REG
6890 0EF0      00667               movlw B'11110000' 
6892 146D      00668               andwf AY_R9_CH_B_AMPLITUDE, W
               00669               
               00670               ;; NOW THE SHADOW REG IS IN W REG
               00671               ;; OR {CC VALUE/4} with W REG     
6894 1042      00672               iorwf AY_CC_8_TMP, W
6896 6E42      00673               movwf AY_CC_8_TMP
               00674               
               00675               ;; Write CC To AY R9 Shadow Reg
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 358


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6898 C042 F06D 00676               movff AY_CC_8_TMP, AY_R9_CH_B_AMPLITUDE
               00677 
               00678         ;; -------------[SEND AMPLITUDE TONE A - AY REG 8]------------------------
689C 0E09      00679         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER
689E 6E39      00680         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR   => AY_SR_Write
               00681         
               00682               ;; WRITE B VOLUME TO AY CHIP
68A0 C042 F03A 00683               movff AY_CC_8_TMP, AY_REG_DATA
               00684 
               00685                 ;; --------------[SEND DATA TO AY REG X]------------------------------
68A4 ECAA F01B 00686                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA 
               00687                 ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00688         ;; ===========================================================================
               00689 
               00690 
               00691 
68A8           00692 MIDI_EVNT_IS_Bx_CC8_EXIT
               00693                         
               00694                         ;; Exit here
68A8 0012      00695                         return
               00696 
               00697 ;; ---------------------------[END CC => VOLUME TONE B]-------------------------------------------
               00698 
               00699 ;; ---------------------------[CC => VOLUME TONE C]-------------------------------------------
               00700 
68AA           00701 MIDI_EVNT_IS_Bx_CC9
               00702         ;; CC9 => Volume Tone C
               00703         ;; CHECK IF CURRENT MIDI CH. MATCH TONE C
68AA 5021      00704         movf    MIDI_EVNT_CHANNEL, W
68AC 6232      00705         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00706 
               00707                 ; NO
68AE EF71 F034 00708                 goto MIDI_EVNT_IS_Bx_CC9_EXIT
               00709                 
               00710                 ;YES - OK, GO ON
68B2 EF5B F034 00711                 goto MIDI_EVNT_IS_Bx_CC9_WRITE_TO_VOLUME
               00712 
68B6           00713 MIDI_EVNT_IS_Bx_CC9_WRITE_TO_VOLUME
               00714         ;; CONVERT MIDI DATA CC9 7BIT (0-127) TO VOLUME TONE B 4BIT(0-15)
               00715         ;; {VOLUME TONE 4BIT} = {CC MIDI DATA 7BIT}/8
               00716 
               00717         ;; WRITE MIDI DATA BYTE2 0-127 
               00718         ;; TO AY_CC_9_TMP
68B6 C013 F043 00719         movff   MIDI_EVNT_VALUE, AY_CC_9_TMP
               00720               
               00721                   
               00722               ;; convert 7bit Value to 4bit value
               00723               ;; divide ==> (MIDI DATA)/8
68BA 4243      00724               rrncf     AY_CC_9_TMP, F   ;; /2
68BC 9E43      00725               bcf       AY_CC_9_TMP, 7
68BE 4243      00726               rrncf     AY_CC_9_TMP, F   ;; /4
68C0 9E43      00727               bcf       AY_CC_9_TMP, 7
68C2 4243      00728               rrncf     AY_CC_9_TMP, F   ;; /8
68C4 9E43      00729               bcf       AY_CC_9_TMP, 7
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 359


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00730 
               00731               
68C6 0E0F      00732               movlw VOLUME_ABC_MAX_VALUE ;; BIN 00001111
68C8 1643      00733               andwf AY_CC_9_TMP, F
               00734 
               00735               ;; NOW THE CC VOLUME IS IN THE 4 LOWER BITS (0-15 dec.)
               00736               ;; AY_CC_9_TMP => BIN '0000 VVVV'
               00737               
               00738               ;; COPY THE LOWER 4 BIT [BIT0-to 3] = (CC VOLUME (0-15))
               00739               ;; BUT SAVE THE BIT4 = AMPLITUDE MODE!
               00740               
               00741               ;; COPY THE ENV. MODE BIT       
               00742               ;; WRITE 0 TO BIT0-3 
               00743               
               00744               ;; CLEAR BIT 0-3 AY SHADOW REG
68CA 0EF0      00745               movlw B'11110000' 
68CC 146E      00746               andwf AY_R10_CH_C_AMPLITUDE, W
               00747               
               00748               ;; NOW THE SHADOW REG IS IN W REG
               00749               ;; OR {CC VALUE/4} with W REG     
68CE 1043      00750               iorwf AY_CC_9_TMP, W
68D0 6E43      00751               movwf AY_CC_9_TMP
               00752               
               00753               ;; Write CC To AY R10 Shadow Reg
68D2 C043 F06E 00754               movff AY_CC_9_TMP, AY_R10_CH_C_AMPLITUDE
               00755 
               00756         ;; -------------[SEND AMPLITUDE TONE A - AY REG 10]------------------------
68D6 0E0A      00757         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER
68D8 6E39      00758         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR   => AY_SR_Write
               00759         
               00760               ;; WRITE VOLUME C TO AY CHIP
68DA C043 F03A 00761               movff AY_CC_9_TMP, AY_REG_DATA
               00762 
               00763                 ;; --------------[SEND DATA TO AY REG X]------------------------------
68DE ECAA F01B 00764                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA 
               00765                 ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00766         ;; ===========================================================================
               00767 
68E2           00768 MIDI_EVNT_IS_Bx_CC9_EXIT
               00769                         ;; QUIT HERE
68E2 0012      00770                         return
               00771 
               00772 ;; ---------------------------[END CC => VOLUME TONE C]-----------------------------------
               00773 
               00774 
               00775 ;; ---------------------------[CONTROLLER 10 - ON/OFF TONE A]-----------------------------
68E4           00776 MIDI_EVNT_IS_Bx_CC10
               00777         ;; CONTROLLER 10 - ON/OFF TONE A
               00778         
               00779         ;; CHECK IF CURRENT MIDI CH. MATCH TONE A
68E4 5021      00780         movf    MIDI_EVNT_CHANNEL, W
68E6 6230      00781         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00782 
               00783                 ; NO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 360


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00784                 rgoto MIDI_EVNT_IS_Bx_CC10_EXIT
68E8 D00D          M         bra     label
               00785                 
               00786                 ;YES - OK, GO ON
               00787                 rgoto MIDI_EVNT_IS_Bx_CC10_TONE_A_ON_OR_OFF
68EA D000          M         bra     label
               00788 
68EC           00789 MIDI_EVNT_IS_Bx_CC10_TONE_A_ON_OR_OFF
               00790         ;; CHECK IF THE CC VALUE
               00791         ;; = 0 => TONE A OFF => CLEAR BIT0 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00792         ;; > 0 => TONE A ON  => SET   BIT0 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
68EC 6AE8      00793         clrw
68EE 6237      00794         cpfseq  MIDI_CC_VALUE
               00795 
               00796                 ; NO
               00797                 rgoto MIDI_EVNT_IS_Bx_CC10_TONE_A_ON
68F0 D001          M         bra     label
               00798                 
               00799                 ;YES 
               00800                 rgoto MIDI_EVNT_IS_Bx_CC10_TONE_A_OFF 
68F2 D004          M         bra     label
               00801 
68F4           00802 MIDI_EVNT_IS_Bx_CC10_TONE_A_ON
               00803         ;; SWITCH TONE A ON
68F4 9020      00804         bcf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT0_TONE_A_ON_OFF
68F6 EC73 F03E 00805         call  LED_ToneA_on
               00806         rgoto   MIDI_EVNT_IS_Bx_CC10_EXIT
68FA D004          M         bra     label
               00807 
68FC           00808 MIDI_EVNT_IS_Bx_CC10_TONE_A_OFF
               00809         ;; SWITCH TONE A OFF
68FC 8020      00810         bsf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT0_TONE_A_ON_OFF
68FE EC77 F03E 00811         call  LED_ToneA_off
               00812         rgoto   MIDI_EVNT_IS_Bx_CC10_EXIT
6902 D000          M         bra     label
               00813 
6904           00814 MIDI_EVNT_IS_Bx_CC10_EXIT       
               00815                 ;; Exit here
6904 0012      00816                 return
               00817 
               00818 ;; ---------------------------[END: CONTROLLER 10 - ON/OFF TONE A]------------------------
               00819 
               00820 ;; ---------------------------[CONTROLLER 11 - ON/OFF TONE B]-----------------------------
6906           00821 MIDI_EVNT_IS_Bx_CC11
               00822         ;; CONTROLLER 11 - ON/OFF TONE B
               00823         ;; CHECK IF CURRENT MIDI CH. MATCH TONE B
6906 5021      00824         movf    MIDI_EVNT_CHANNEL, W
6908 6231      00825         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00826 
               00827                 ; NO
               00828                 rgoto MIDI_EVNT_IS_Bx_CC11_EXIT
690A D00D          M         bra     label
               00829                 
               00830                 ;YES - OK, GO ON
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 361


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00831                 rgoto MIDI_EVNT_IS_Bx_CC11_TONE_B_ON_OR_OFF
690C D000          M         bra     label
               00832 
690E           00833 MIDI_EVNT_IS_Bx_CC11_TONE_B_ON_OR_OFF
               00834         ;; CHECK IF THE CC VALUE
               00835         ;; = 0 => TONE B OFF => CLEAR BIT1 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00836         ;; > 0 => TONE B ON  => SET   BIT1 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
690E 6AE8      00837         clrw
6910 6237      00838         cpfseq  MIDI_CC_VALUE
               00839 
               00840                 ; NO
               00841                 rgoto MIDI_EVNT_IS_Bx_CC11_TONE_B_ON
6912 D001          M         bra     label
               00842                 
               00843                 ;YES 
               00844                 rgoto MIDI_EVNT_IS_Bx_CC11_TONE_B_OFF
6914 D004          M         bra     label
               00845 
6916           00846 MIDI_EVNT_IS_Bx_CC11_TONE_B_ON
               00847         ;; SWITCH TONE B ON
6916 9220      00848         bcf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF
6918 EC7B F03E 00849         call   LED_ToneB_on
               00850         rgoto   MIDI_EVNT_IS_Bx_CC11_EXIT
691C D004          M         bra     label
               00851 
691E           00852 MIDI_EVNT_IS_Bx_CC11_TONE_B_OFF 
               00853         ;; SWITCH TONE B OFF
691E 8220      00854         bsf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT1_TONE_B_ON_OFF
6920 EC7F F03E 00855         call  LED_ToneB_off
               00856         rgoto   MIDI_EVNT_IS_Bx_CC11_EXIT
6924 D000          M         bra     label
               00857 
6926           00858 MIDI_EVNT_IS_Bx_CC11_EXIT       
               00859                         ;; Exit here
6926 0012      00860                         return
               00861 
               00862 ;; ---------------------------[CONTROLLER 12 - ON/OFF TONE C]-----------------------------
6928           00863 MIDI_EVNT_IS_Bx_CC12
               00864         ;; CONTROLLER 12 - ON/OFF TONE C
               00865         
               00866         ;; CHECK IF CURRENT MIDI CH. MATCH TONE C
6928 5021      00867         movf    MIDI_EVNT_CHANNEL, W
692A 6232      00868         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00869 
               00870                 ; NO
               00871                 rgoto MIDI_EVNT_IS_Bx_CC12_EXIT
692C D00F          M         bra     label
               00872                 
               00873                 ;YES - OK, GO ON
               00874                 rgoto MIDI_EVNT_IS_Bx_CC12_TONE_C_ON_OR_OFF
692E D000          M         bra     label
               00875 
6930           00876 MIDI_EVNT_IS_Bx_CC12_TONE_C_ON_OR_OFF
               00877         ;; CHECK IF THE CC VALUE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 362


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00878         ;; = 0 => TONE C OFF => CLEAR BIT2 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00879         ;; > 0 => TONE C ON  => SET   BIT2 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
6930 6AE8      00880         clrw
6932 6237      00881         cpfseq  MIDI_CC_VALUE
               00882 
               00883                 ; NO
6934 EF9E F034 00884                 goto MIDI_EVNT_IS_Bx_CC12_TONE_C_ON
               00885                 
               00886                 ;YES 
6938 EFA2 F034 00887                 goto MIDI_EVNT_IS_Bx_CC12_TONE_C_OFF
               00888 
693C           00889 MIDI_EVNT_IS_Bx_CC12_TONE_C_ON
               00890         ;; SWITCH TONE C ON
693C 9420      00891         bcf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_TONE_C_ON_OFF
693E EC83 F03E 00892         call    LED_ToneC_on
               00893         rgoto   MIDI_EVNT_IS_Bx_CC12_EXIT
6942 D004          M         bra     label
               00894 
6944           00895 MIDI_EVNT_IS_Bx_CC12_TONE_C_OFF
               00896         ;; SWITCH TONE C OFF
6944 8420      00897         bsf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT2_TONE_C_ON_OFF
6946 EC87 F03E 00898         call    LED_ToneC_off
               00899         rgoto   MIDI_EVNT_IS_Bx_CC12_EXIT
694A D000          M         bra     label
               00900 
694C           00901 MIDI_EVNT_IS_Bx_CC12_EXIT
               00902                         ;; exit here
694C 0012      00903                         return
               00904 
               00905 ;; ---------------------------[END CONTROLLER 12 - ON/OFF TONE C]-----------------------------
               00906 
               00907 ;; ---------------------------[CONTROLLER 13 - ON/OFF NOISE A]-----------------------------
694E           00908 MIDI_EVNT_IS_Bx_CC13
               00909         ;; CONTROLLER 13 - ON/OFF ADD NOISE A
               00910         
               00911         ;; CHECK IF CURRENT MIDI CH. MATCH MIDI CH. TONE/NOISE A
694E 5021      00912         movf    MIDI_EVNT_CHANNEL, W
6950 6230      00913         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00914 
               00915                 ; NO
               00916                 rgoto MIDI_EVNT_IS_Bx_CC13_EXIT
6952 D00F          M         bra     label
               00917                 
               00918                 ;YES - OK, GO ON
               00919                 rgoto MIDI_EVNT_IS_Bx_CC13_NOISE_A_ON_OR_OFF
6954 D000          M         bra     label
               00920 
6956           00921 MIDI_EVNT_IS_Bx_CC13_NOISE_A_ON_OR_OFF
               00922         ;; CHECK IF THE CC VALUE
               00923         ;; = 0 => ADD NOISE TO TONE A OFF => CLEAR BIT3 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00924         ;; > 0 => ADD NOISE TO TONE A ON  => SET   BIT3 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
6956 6AE8      00925         clrw
6958 6237      00926         cpfseq  MIDI_CC_VALUE
               00927 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 363


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00928                 ; NO
               00929                 rgoto MIDI_EVNT_IS_Bx_CC13_NOISE_A_ON
695A D001          M         bra     label
               00930                 
               00931                 ;YES 
               00932                 rgoto MIDI_EVNT_IS_Bx_CC13_NOISE_A_OFF
695C D005          M         bra     label
               00933 
695E           00934 MIDI_EVNT_IS_Bx_CC13_NOISE_A_ON 
               00935         ;; SWITCH NOISE A ON
               00936         ;; clear bit3 = noise on
695E 9620      00937         bcf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF
6960 EC8B F03E 00938         call    LED_NoiseA_on
6964 EFB9 F034 00939         goto    MIDI_EVNT_IS_Bx_CC13_EXIT
               00940 
6968           00941 MIDI_EVNT_IS_Bx_CC13_NOISE_A_OFF
               00942         ;; SWITCH NOISE A OFF
               00943         ;; set bit 3 = noise off
6968 8620      00944         bsf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT3_NOISE_A_ON_OFF
696A EC8F F03E 00945         call    LED_NoiseA_off
696E EFB9 F034 00946         goto    MIDI_EVNT_IS_Bx_CC13_EXIT
               00947 
6972           00948 MIDI_EVNT_IS_Bx_CC13_EXIT       
               00949                         ;; Exit here
6972 0012      00950                         return
               00951 
               00952 ;; ---------------------------[END: CONTROLLER 10 - ON/OFF NOISE A]------------------------
               00953 
               00954 ;; ---------------------------[CONTROLLER 14 - ON/OFF NOISE B]-----------------------------
6974           00955 MIDI_EVNT_IS_Bx_CC14
               00956         ;; CONTROLLER 14 - ON/OFF ADD NOISE B
               00957         
               00958         ;; CHECK IF CURRENT MIDI CH. MATCH MIDI CH. TONE/NOISE B
6974 5021      00959         movf    MIDI_EVNT_CHANNEL, W
6976 6231      00960         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00961 
               00962                 ; NO
               00963                 rgoto MIDI_EVNT_IS_Bx_CC14_EXIT
6978 D00F          M         bra     label
               00964                 
               00965                 ;YES - OK, GO ON
               00966                 rgoto MIDI_EVNT_IS_Bx_CC14_NOISE_B_ON_OR_OFF
697A D000          M         bra     label
               00967 
697C           00968 MIDI_EVNT_IS_Bx_CC14_NOISE_B_ON_OR_OFF
               00969         ;; CHECK IF THE CC VALUE
               00970         ;; = 0 => ADD NOISE TO TONE B OFF => CLEAR BIT4 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00971         ;; > 0 => ADD NOISE TO TONE B ON  => SET   BIT4 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
697C 6AE8      00972         clrw
697E 6237      00973         cpfseq  MIDI_CC_VALUE
               00974 
               00975                 ; NO
6980 EFC4 F034 00976                 goto MIDI_EVNT_IS_Bx_CC14_NOISE_B_ON
               00977                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 364


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00978                 ;YES 
6984 EFC8 F034 00979                 goto MIDI_EVNT_IS_Bx_CC14_NOISE_B_OFF 
               00980 
               00981 
6988           00982 MIDI_EVNT_IS_Bx_CC14_NOISE_B_ON
               00983         ;; SWITCH NOISE B ON
6988 9820      00984         bcf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF
698A EC93 F03E 00985         call    LED_NoiseB_on
               00986         rgoto   MIDI_EVNT_IS_Bx_CC14_EXIT
698E D004          M         bra     label
               00987 
6990           00988 MIDI_EVNT_IS_Bx_CC14_NOISE_B_OFF        
               00989         ;; SWITCH NOISE B OFF
6990 8820      00990         bsf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT4_NOISE_B_ON_OFF
6992 EC97 F03E 00991         call    LED_NoiseB_off
               00992         rgoto   MIDI_EVNT_IS_Bx_CC14_EXIT
6996 D000          M         bra     label
               00993 
6998           00994 MIDI_EVNT_IS_Bx_CC14_EXIT       
               00995                 ;; Exit here
6998 0012      00996                 return
               00997 
               00998 ;; ---------------------------[END: CONTROLLER 14 - ON/OFF NOISE B]-----------------------------
               00999 
               01000 ;; ---------------------------[CONTROLLER 15 - ON/OFF NOISE C]-----------------------------
699A           01001 MIDI_EVNT_IS_Bx_CC15
               01002         ;; CONTROLLER 15 - ON/OFF ADD NOISE C
               01003         ;; CHECK IF CURRENT MIDI CH. MATCH MIDI CH. TONE/NOISE C
699A 5021      01004         movf    MIDI_EVNT_CHANNEL, W
699C 6232      01005         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               01006 
               01007                 ; NO
               01008                 rgoto MIDI_EVNT_IS_Bx_CC15_EXIT
699E D00D          M         bra     label
               01009                 
               01010                 ;YES - OK, GO ON
               01011                 rgoto MIDI_EVNT_IS_Bx_CC15_NOISE_C_ON_OR_OFF
69A0 D000          M         bra     label
               01012 
69A2           01013 MIDI_EVNT_IS_Bx_CC15_NOISE_C_ON_OR_OFF
               01014         ;; CHECK IF THE CC VALUE
               01015         ;; = 0 => ADD NOISE TO TONE C OFF => CLEAR BIT5 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               01016         ;; > 0 => ADD NOISE TO TONE C ON  => SET   BIT5 of AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
69A2 6AE8      01017         clrw
69A4 6237      01018         cpfseq  MIDI_CC_VALUE
               01019 
               01020                 ; NO
               01021                 rgoto MIDI_EVNT_IS_Bx_CC15_NOISE_C_ON
69A6 D001          M         bra     label
               01022                 
               01023                 ;YES 
               01024                 rgoto  MIDI_EVNT_IS_Bx_CC15_NOISE_C_OFF
69A8 D004          M         bra     label
               01025 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 365


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01026 
69AA           01027 MIDI_EVNT_IS_Bx_CC15_NOISE_C_ON
               01028         ;; SWITCH NOISE C ON
69AA 9A20      01029         bcf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
69AC EC9B F03E 01030         call  LED_NoiseC_on
               01031         rgoto   MIDI_EVNT_IS_Bx_CC15_EXIT
69B0 D004          M         bra     label
               01032 
69B2           01033 MIDI_EVNT_IS_Bx_CC15_NOISE_C_OFF        
               01034         ;; SWITCH NOISE C OFF
69B2 8A20      01035         bsf     AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, BIT5_NOISE_C_ON_OFF
69B4 EC9F F03E 01036         call   LED_NoiseC_off
               01037         rgoto   MIDI_EVNT_IS_Bx_CC15_EXIT
69B8 D000          M         bra     label
               01038 
69BA           01039 MIDI_EVNT_IS_Bx_CC15_EXIT       
               01040                         ;; Exit here
69BA 0012      01041                         return
               01042 
               01043 ;; ---------------------------[END: CONTROLLER 15 - ON/OFF NOISE C]-----------------------------
               01044 
               01045 ;; ---------------------[CONTROLLER 16, 17, 18 - ENVELOPE MODE ON/OFF TONE ABC]--------------
               01046 
69BC           01047 MIDI_EVNT_IS_Bx_CC16
               01048 ;; CONTROLLER 16 - TONE A ENV. ON/OFF
               01049 ;; ENVELOPE MODE TONE A ON/OFF WITH SET/CLEAR BIT4 @ AY_R8_CH_A_AMPLITUDE 
               01050               
               01051         ;; CHECK IF MIDI CH. TONE A MATCH
69BC 5021      01052         movf    MIDI_EVNT_CHANNEL, W
69BE 6230      01053         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               01054 
               01055                 ; NO - Qut here
               01056                 rgoto MIDI_EVNT_IS_Bx_CC16_EXIT
69C0 D00D          M         bra     label
               01057         
               01058                 ;YES - OK, GO ON
               01059                 rgoto MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_SET_OR_CLEAR
69C2 D000          M         bra     label
               01060 
69C4           01061 MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_SET_OR_CLEAR
69C4 6AE8      01062         clrw
69C6 6237      01063         cpfseq  MIDI_CC_VALUE
               01064 
               01065                 ; NO - MIDI CC VALUE IS > 0
               01066                 rgoto MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_ON
69C8 D001          M         bra     label
               01067                 
               01068                 ;YES - MIDI CC VALUE IS 0
               01069                 rgoto MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_OFF
69CA D005          M         bra     label
               01070 
69CC           01071 MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_ON
69CC 886C      01072         bsf AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
69CE ECA3 F03E 01073         call LED_EnvelopeModeA_on
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 366


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
69D2 EFEE F034 01074         goto MIDI_EVNT_IS_Bx_CC16_EXIT
               01075 
69D6           01076 MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_OFF
69D6 986C      01077         bcf AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
69D8 ECA7 F03E 01078         call LED_EnvelopeModeA_off
               01079 
69DC           01080 MIDI_EVNT_IS_Bx_CC16_EXIT       
               01081                 ;; Exit here
69DC 0012      01082                 return
               01083 
               01084 ;; -----------------------------------------------------
               01085 
69DE           01086 MIDI_EVNT_IS_Bx_CC17
               01087         ;; CONTROLLER 17        
               01088         ;; TONE B ENV. ON/OFF
               01089         ;; ENVELOPE MODE TONE B ON/OFF WITH SET/CLEAR BIT4 @ AY_R9_CH_B_AMPLITUDE
               01090 
               01091         ;; CHECK IF MIDI CH. TONE B MATCH
69DE 5021      01092         movf    MIDI_EVNT_CHANNEL, W
69E0 6231      01093         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               01094 
               01095                 ; NO - Qut here
               01096                 rgoto MIDI_EVNT_IS_Bx_CC17_EXIT
69E2 D00C          M         bra     label
               01097                 
               01098                 ;YES - OK, GO ON
               01099                 rgoto MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_SET_OR_CLEAR
69E4 D000          M         bra     label
               01100 
69E6           01101 MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_SET_OR_CLEAR
69E6 6AE8      01102         clrw
69E8 6237      01103         cpfseq  MIDI_CC_VALUE
               01104 
               01105                 ; NO - MIDI CC VALUE IS > 0
               01106                 rgoto MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_ON
69EA D001          M         bra     label
               01107                 
               01108                 ;YES - MIDI CC VALUE IS 0
               01109                 rgoto MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_OFF
69EC D004          M         bra     label
               01110 
69EE           01111 MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_ON
69EE 886D      01112         bsf AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
69F0 ECAB F03E 01113         call LED_EnvelopeModeB_on
               01114         rgoto MIDI_EVNT_IS_Bx_CC17_EXIT
69F4 D003          M         bra     label
               01115 
69F6           01116 MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_OFF
69F6 986D      01117         bcf AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
69F8 ECAF F03E 01118         call LED_EnvelopeModeB_off
               01119         
69FC           01120 MIDI_EVNT_IS_Bx_CC17_EXIT       
               01121                 ;; Exit here
69FC 0012      01122                 return
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 367


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01123 
               01124 ;; -----------------------------------------------------
               01125 
69FE           01126 MIDI_EVNT_IS_Bx_CC18
               01127         ;; CONTROLLER 18 - TONE C ENV. ON/OFF
               01128         ;; ENVELOPE MODE TONE C ON/OFF WITH SET/CLEAR BIT4 @ AY_R10_CH_C_AMPLITUDE
               01129         ;; CHECK IF MIDI CH. TONE A MATCH
69FE 5021      01130         movf    MIDI_EVNT_CHANNEL, W
6A00 6232      01131         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               01132 
               01133                 ; NO - Qut here
               01134                 rgoto MIDI_EVNT_IS_Bx_CC18_EXIT
6A02 D00C          M         bra     label
               01135                 
               01136                 ;YES - OK, GO ON
               01137                 rgoto MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_SET_OR_CLEAR
6A04 D000          M         bra     label
               01138 
6A06           01139 MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_SET_OR_CLEAR
6A06 6AE8      01140         clrw
6A08 6237      01141         cpfseq  MIDI_CC_VALUE
               01142 
               01143                 ; NO - MIDI CC VALUE IS > 0
               01144                 rgoto MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_ON
6A0A D001          M         bra     label
               01145                 
               01146                 ;YES - MIDI CC VALUE IS 0
               01147                 rgoto MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_OFF
6A0C D004          M         bra     label
               01148 
6A0E           01149 MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_ON
6A0E 886E      01150         bsf AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
6A10 ECB3 F03E 01151         call LED_EnvelopeModeC_on
               01152         rgoto MIDI_EVNT_IS_Bx_CC18_EXIT
6A14 D003          M         bra     label
               01153 
6A16           01154 MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_OFF
6A16 986E      01155         bcf AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
6A18 ECB7 F03E 01156         call LED_EnvelopeModeC_off
               01157         ;; EXIT
               01158 
6A1C           01159 MIDI_EVNT_IS_Bx_CC18_EXIT       
               01160                 ;; Exit here
6A1C 0012      01161                 return
               01162 
               01163 ;; .------------------------------------------------------------------------------------
               01164 
6A1E           01165 MIDI_EVNT_IS_Bx_CC19
               01166         ;; VELOCITY MODE TO TONE A ON/OFF 
               01167         ;; SET/CLEAR BIT 0 in  AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF
               01168          
               01169          ;; CHECK IF MIDI CH. TONE A MATCH
6A1E 5021      01170         movf    MIDI_EVNT_CHANNEL, W
6A20 6230      01171         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 368


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01172 
               01173                 ; NO - Qut here
               01174                 rgoto MIDI_EVNT_IS_Bx_CC19_EXIT
6A22 D008          M         bra     label
               01175                 
               01176                 ;YES - OK, GO ON
               01177                 rgoto MIDI_EVNT_IS_Bx_CC19_VELOCITY_ON_OFF
6A24 D000          M         bra     label
               01178 
6A26           01179 MIDI_EVNT_IS_Bx_CC19_VELOCITY_ON_OFF
6A26 6AE8      01180         clrw
6A28 6237      01181         cpfseq  MIDI_CC_VALUE
               01182 
               01183                 ; NO - MIDI CC VALUE IS > 0
               01184                 rgoto MIDI_EVNT_IS_Bx_CC19_VELOCITY_ON
6A2A D001          M         bra     label
               01185                 
               01186                 ;YES - MIDI CC VALUE IS 0
               01187                 rgoto MIDI_EVNT_IS_Bx_CC19_VELOCITY_OFF
6A2C D002          M         bra     label
               01188 
6A2E           01189 MIDI_EVNT_IS_Bx_CC19_VELOCITY_ON
               01190         ;; CC19 VALUE > 0
               01191         ;; TOGGLE VELOCITY MODE TONE A ON
6A2E 8033      01192         bsf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_VELOCITY_ON_OFF_TONE_A
               01193         rgoto MIDI_EVNT_IS_Bx_CC19_EXIT
6A30 D001          M         bra     label
               01194 
6A32           01195 MIDI_EVNT_IS_Bx_CC19_VELOCITY_OFF
               01196         ;; CC19 VALUE = 0
               01197         ;; VELOCITY MODE TONE A OFF
6A32 9033      01198         bcf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_VELOCITY_ON_OFF_TONE_A
               01199         
6A34           01200 MIDI_EVNT_IS_Bx_CC19_EXIT
               01201                 ;; Exit here
6A34 0012      01202                 return
               01203 
               01204 ;; -------------------------------------------------------------------------------
               01205 
6A36           01206 MIDI_EVNT_IS_Bx_CC20
               01207         ;; VELOCITY MODE TO TONE B ON/OFF 
               01208         ;; SET/CLEAR BIT 1 in  AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF
               01209         
               01210         ;; CHECK IF MIDI CH. TONE B MATCH
6A36 5021      01211         movf    MIDI_EVNT_CHANNEL, W
6A38 6231      01212         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               01213 
               01214                 ; NO - Qut here
               01215                 rgoto MIDI_EVNT_IS_Bx_CC20_EXIT
6A3A D008          M         bra     label
               01216                 
               01217                 ;YES - OK, GO ON
               01218                 rgoto MIDI_EVNT_IS_Bx_CC20_VELOCITY_ON_OFF
6A3C D000          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 369


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01219 
6A3E           01220 MIDI_EVNT_IS_Bx_CC20_VELOCITY_ON_OFF
6A3E 6AE8      01221         clrw
6A40 6237      01222         cpfseq  MIDI_CC_VALUE
               01223 
               01224                 ; NO - MIDI CC VALUE IS > 0
               01225                 rgoto MIDI_EVNT_IS_Bx_CC20_VELOCITY_ON
6A42 D001          M         bra     label
               01226                 
               01227                 ;YES - MIDI CC VALUE IS 0
               01228                 rgoto MIDI_EVNT_IS_Bx_CC20_VELOCITY_OFF
6A44 D002          M         bra     label
               01229 
6A46           01230 MIDI_EVNT_IS_Bx_CC20_VELOCITY_ON
               01231         ;; VELOCITY MODE TONE B ON
6A46 8233      01232         bsf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT1_VELOCITY_ON_OFF_TONE_B
               01233         rgoto MIDI_EVNT_IS_Bx_CC20_EXIT
6A48 D001          M         bra     label
               01234 
6A4A           01235 MIDI_EVNT_IS_Bx_CC20_VELOCITY_OFF
               01236         ;; VELOCITY MODE TONE B OFF
6A4A 9233      01237         bcf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT1_VELOCITY_ON_OFF_TONE_B
               01238         ;; EXIT
6A4C           01239 MIDI_EVNT_IS_Bx_CC20_EXIT
               01240                 ;; Exit here
6A4C 0012      01241                 return
               01242 
               01243 
               01244 ;; ----------------------------------------------------------------------------
               01245 
6A4E           01246 MIDI_EVNT_IS_Bx_CC21
               01247         ;; VELOCITY MODE TO TONE C ON/OFF 
               01248         ;; SET/CLEAR BIT 2 in  AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF
               01249         
               01250         ;; CHECK IF MIDI CH. TONE C MATCH
6A4E 5021      01251         movf    MIDI_EVNT_CHANNEL, W
6A50 6232      01252         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               01253 
               01254                 ; NO - Qut here
               01255                 rgoto MIDI_EVNT_IS_Bx_CC21_EXIT
6A52 D008          M         bra     label
               01256                 
               01257                 ;YES - OK, GO ON
               01258                 rgoto MIDI_EVNT_IS_Bx_CC21_VELOCITY_ON_OFF
6A54 D000          M         bra     label
               01259 
6A56           01260 MIDI_EVNT_IS_Bx_CC21_VELOCITY_ON_OFF
6A56 6AE8      01261         clrw
6A58 6237      01262         cpfseq  MIDI_CC_VALUE
               01263 
               01264                 ; NO - MIDI CC VALUE IS > 0
               01265                 rgoto MIDI_EVNT_IS_Bx_CC21_VELOCITY_ON
6A5A D001          M         bra     label
               01266                 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 370


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01267                 ;YES - MIDI CC VALUE IS 0
               01268                 rgoto MIDI_EVNT_IS_Bx_CC21_VELOCITY_OFF
6A5C D002          M         bra     label
               01269 
6A5E           01270 MIDI_EVNT_IS_Bx_CC21_VELOCITY_ON
               01271         ;; VELOCITY MODE TONE C ON
6A5E 8433      01272         bsf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT2_VELOCITY_ON_OFF_TONE_C 
               01273         rgoto MIDI_EVNT_IS_Bx_CC21_EXIT
6A60 D001          M         bra     label
               01274 
6A62           01275 MIDI_EVNT_IS_Bx_CC21_VELOCITY_OFF
               01276         ;; VELOCITY MODE TONE C OFF
6A62 9433      01277         bcf AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT2_VELOCITY_ON_OFF_TONE_C 
               01278         ;; EXIT
               01279 
6A64           01280 MIDI_EVNT_IS_Bx_CC21_EXIT
               01281                 ;; Exit here
6A64 0012      01282                 return
               01283 
               01284 ;; ----------------[CC22 SWITCH VELOCITY TO NOISE PERIOD ABC ON/OFF]-------------------------
               01285 
6A66           01286 MIDI_EVNT_IS_Bx_CC22
               01287         ;; VELOCITY MODE TO NOISE PERIOD ON/OFF 
               01288         ;; SET/CLEAR BIT 3 in  AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF
               01289         ;; BIT 5 = VELOCITY TONE A
               01290         ;; BIT 6 = VELOCITY TONE B
               01291         ;; BIT 7 = VELOCITY TONE C
               01292         ;;------------ VELOCITY TO NOISE PERIOD ON/OFF]--------
               01293         ;; CHECK IF MIDI CH. TONE A or B or C MATCH
               01294         ;; CHECK IF MIDI CH. TONE A MATCH
6A66 5021      01295         movf    MIDI_EVNT_CHANNEL, W
6A68 6230      01296         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               01297 
               01298                 ; NO - CHECK MIDI CH TONE B
               01299                 rgoto MIDI_EVNT_IS_Bx_CC22_CHK_CH_B
6A6A D001          M         bra     label
               01300                 
               01301                 ;YES - OK, GO ON
               01302                 rgoto MIDI_EVNT_IS_Bx_CC22_TOGGLE_VELOCITY_NOISE_PERIOD
6A6C D008          M         bra     label
               01303 
6A6E           01304 MIDI_EVNT_IS_Bx_CC22_CHK_CH_B
               01305         ;; CHECK IF MIDI CH. TONE B MATCH
6A6E 5021      01306         movf    MIDI_EVNT_CHANNEL, W
6A70 6231      01307         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               01308 
               01309                 ; NO - CHECK MIDI CH TONE C
               01310                 rgoto MIDI_EVNT_IS_Bx_CC22_CHK_CH_C
6A72 D001          M         bra     label
               01311                 
               01312                 ;YES - OK, GO ON
               01313                 rgoto MIDI_EVNT_IS_Bx_CC22_TOGGLE_VELOCITY_NOISE_PERIOD
6A74 D004          M         bra     label
               01314 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 371


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6A76           01315 MIDI_EVNT_IS_Bx_CC22_CHK_CH_C
               01316         ;; CHECK IF MIDI CH. TONE C MATCH
6A76 5021      01317         movf    MIDI_EVNT_CHANNEL, W
6A78 6232      01318         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               01319 
               01320                 ; NO - NO TONE MIDI CHANNEL MATCH, SO QUIT HERE
               01321                 rgoto MIDI_EVNT_IS_Bx_CC22_EXIT
6A7A D026          M         bra     label
               01322                 
               01323                 ;YES - OK, GO ON
               01324                 rgoto MIDI_EVNT_IS_Bx_CC22_TOGGLE_VELOCITY_NOISE_PERIOD
6A7C D000          M         bra     label
               01325 
               01326 
6A7E           01327 MIDI_EVNT_IS_Bx_CC22_TOGGLE_VELOCITY_NOISE_PERIOD
               01328         ;; CC VALUE = 0?
6A7E 6AE8      01329         clrw
6A80 6237      01330         cpfseq  MIDI_CC_VALUE
               01331 
               01332                 ; NO - MIDI CC VALUE IS > 0
               01333                 rgoto MIDI_EVNT_IS_Bx_CC22_VELOCITY_TO_NOISE_PERIOD_ON
6A82 D001          M         bra     label
               01334                 
               01335                 ;YES - MIDI CC VALUE IS 0
               01336                 rgoto MIDI_EVNT_IS_Bx_CC22_VELOCITY_TO_NOISE_PERIOD_OFF
6A84 D01D          M         bra     label
               01337         
               01338 
               01339 
               01340 
6A86           01341 MIDI_EVNT_IS_Bx_CC22_VELOCITY_TO_NOISE_PERIOD_ON
               01342         ;; CC22 VALUE = 1 =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE A
               01343         ;; CC22 VALUE = 2 =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE B
               01344         ;; CC22 VALUE = 3 =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE C
               01345         ;; CC22 VALUE > 3 =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE C
               01346 
               01347         ;; CHECK IF CC22 VALUE = 1
               01348         ;; CC22 VALUE = 1 =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE A
6A86 0E01      01349         movlw   CC22_VALUE_1
6A88 6237      01350         cpfseq  MIDI_CC_VALUE
               01351 
               01352                 ; NO 
               01353                 rgoto MIDI_EVNT_IS_Bx_CC22_CHECK_IF_VALUE_IS_2
6A8A D006          M         bra     label
               01354                 
               01355                 ;YES 
               01356                 rgoto MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_A
6A8C D000          M         bra     label
               01357                 
6A8E           01358 MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_A
               01359         ;; TOGGLE "VELOCITY TO NOISE PERIODE MODE" ON
               01360         ;; TAKE VELOCITY FROM MIDI CH TONE A
               01361         
               01362         ;; SWITCH ON  VELOCITY @ NOISE RATE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 372


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6A8E 8633      01363         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               01364         ;; SWITCH ON  VELOCITY TONE A
6A90 8A33      01365         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               01366         ;; SWITCH OFF VELOCITY TONE B
6A92 9C33      01367         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               01368         ;; SWITCH OFF VELOCITY TONE C
6A94 9E33      01369         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               01370                 
               01371                 rgoto MIDI_EVNT_IS_Bx_CC22_EXIT
6A96 D018          M         bra     label
               01372 
               01373 
6A98           01374 MIDI_EVNT_IS_Bx_CC22_CHECK_IF_VALUE_IS_2
               01375         ;; CHECK IF CC22 VALUE = 2
               01376         ;; CC22 VALUE = 2 =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE B
6A98 0E02      01377         movlw   CC22_VALUE_2
6A9A 6237      01378         cpfseq  MIDI_CC_VALUE
               01379 
               01380                 ; NO 
               01381                 rgoto MIDI_EVNT_IS_Bx_CC22_CHECK_IF_VALUE_IS_3
6A9C D007          M         bra     label
               01382                 
               01383                 ;YES 
               01384                 rgoto MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_B
6A9E D000          M         bra     label
               01385 
6AA0           01386 MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_B    
               01387         ;; TOGGLE "VELOCITY TO NOISE PERIODE MODE" ON
               01388         ;; TAKE VELOCITY FROM MIDI CH TONE B
               01389 
               01390         ;; SWITCH ON  VELOCITY @ NOISE RATE
6AA0 8633      01391         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               01392         ;; SWITCH OFF VELOCITY TONE A
6AA2 9A33      01393         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               01394         ;; SWITCH ON  VELOCITY TONE B
6AA4 8C33      01395         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               01396         ;; SWITCH OFF VELOCITY TONE C
6AA6 9E33      01397         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               01398                 
6AA8 EF64 F035 01399                 goto MIDI_EVNT_IS_Bx_CC22_EXIT
               01400 
6AAC           01401 MIDI_EVNT_IS_Bx_CC22_CHECK_IF_VALUE_IS_3
               01402         ;; CHECK IF CC22 VALUE = 3
               01403         ;; CC22 VALUE = 3 
               01404         ;; =>  TOGGLE "VELOCITY TO NOISE PERIOD MODE" ON TAKE VELOCITY FROM TONE C
6AAC 0E03      01405         movlw   CC22_VALUE_3
6AAE 6237      01406         cpfseq  MIDI_CC_VALUE
               01407 
               01408                 ; NO  - EXIT HERE (CC22 VALUE > 3 IS NOT VALID)
               01409                 rgoto MIDI_EVNT_IS_Bx_CC22_EXIT
6AB0 D00B          M         bra     label
               01410                 
               01411                 ;YES 
               01412                 rgoto MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 373


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6AB2 D000          M         bra     label
               01413 
               01414 
6AB4           01415 MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_C
               01416         ;; TOGGLE "VELOCITY TO NOISE PERIODE MODE" ON
               01417         ;; TAKE VELOCITY FROM MIDI CH TONE C
               01418 
               01419         ;; SWITCH ON  VELOCITY @ NOISE RATE
6AB4 8633      01420         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               01421         ;; SWITCH OFF VELOCITY TONE A
6AB6 9A33      01422         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               01423         ;; SWITCH OFF VELOCITY TONE B
6AB8 9C33      01424         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               01425         ;; SWITCH ON  VELOCITY TONE C
6ABA 8E33      01426         bsf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               01427                 
6ABC EF64 F035 01428                 goto MIDI_EVNT_IS_Bx_CC22_EXIT
               01429 
6AC0           01430 MIDI_EVNT_IS_Bx_CC22_VELOCITY_TO_NOISE_PERIOD_OFF
               01431         ;; CC22 VALUE = 0 => TOGGLE "VELOCITY TO NOISE PERIOD MODE" OFF
               01432         ;; SWITCH OFF VELOCITY @ NOISE RATE
               01433 
               01434         ;; SWITCH OFF VELOCITY @ NOISE RATE
6AC0 9633      01435         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               01436         ;; SWITCH OFF VELOCITY TONE A
6AC2 9A33      01437         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               01438         ;; SWITCH OFF VELOCITY TONE B
6AC4 9C33      01439         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               01440         ;; SWITCH OFF VELOCITY TONE C
6AC6 9E33      01441         bcf     AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               01442                 
               01443                 ;; Exit
               01444                 
               01445 
6AC8           01446 MIDI_EVNT_IS_Bx_CC22_EXIT
               01447                         ;; Exit here
6AC8 0012      01448                         return
               01449 
               01450 ;; ----------------
               01451 
6ACA           01452 MIDI_EVNT_IS_Bx_CC23
               01453         ;; NOT IMPLEMENTED YET
6ACA 0012      01454         return
               01455 
6ACC           01456 MIDI_EVNT_IS_Bx_CC24
               01457         ;; NOT IMPLEMENTED YET
6ACC 0012      01458         return
               01459 
6ACE           01460 MIDI_EVNT_IS_Bx_CC25
               01461         ;; NOT IMPLEMENTED YET
6ACE 0012      01462         return
               01463 
6AD0           01464 MIDI_EVNT_IS_Bx_CC26
               01465         ;; NOT IMPLEMENTED YET
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 374


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6AD0 0012      01466         return
               01467 
6AD2           01468 MIDI_EVNT_IS_Bx_CC27
               01469         ;; NOT IMPLEMENTED YET
6AD2 0012      01470         return
               01471 
6AD4           01472 MIDI_EVNT_IS_Bx_CC28
               01473         ;; NOT IMPLEMENTED YET
6AD4 0012      01474         return
               01475 
6AD6           01476 MIDI_EVNT_IS_Bx_CC29
               01477         ;; NOT IMPLEMENTED YET
6AD6 0012      01478         return
               01479 
               01480 
               00106 #include "midi_event_pitch_wheel.inc"                   ;; Pitch Wheel Handling
               00001 ;; midi_event_pitch_wheel.inc
               00002 ;; --------------------------
               00003 ;; PITCH BEND ROUTINE
               00004 ;; WRITE PITCH BEND TO TONE A, B or C
               00005 
               00006 ;; ---------------------------------
               00007 ;; Pitch Bend  
6AD8           00008 MIDI_EVNT_IS_Ex
               00009 ;; JUMPED IN HERE FROM midi_event_jump_table.inc
               00010 
               00011         ;; THER WAS A PITCH BEND MIDI EVENT
               00012         ;; ------------------------------------------
               00013         ;; 1) So write PITCH BEND Value to temp variables
               00014         ;; 1a) Write 30 to MIDI_EVENT_CHANGE_FLAG 
               00015         ;;    See ==> user_tick_lcd_redraw.inc
               00016         ;; 
               00017         ;; (A)
               00018         ;; 2.0) Check: does MIDI ch. Tone A Match?
               00019         ;; 2.1) IF YES: Perform PITCH BEND (DeTune) Tone A 
               00020         ;; 2.2) Write PITCH BEND to AY Chip if Ch. Match
               00021         ;;
               00022         ;; (B)
               00023         ;; 3.0) Check: does MIDI ch. Tone B Match?
               00024         ;; 3.1) IF YES: Perform PITCH BEND (DeTune) Tone B
               00025         ;; 3.2) Write PITCH BEND to AY Chip 
               00026         ;;
               00027         ;; (C)
               00028         ;; 4.0) Check: does MIDI ch. Tone C Match?
               00029         ;; 4.1) IF YES: Perform PITCH BEND (DeTune) Tone C
               00030         ;; 4.2) Write PITCH BEND to AY Chip 
               00031 
               00032 ;;----------------------------------------------------------
               00033 
               00034 ;; 1) write PITCH BEND Value to variables
               00035         ;; WRITE PITCH BEND VALUE DATA BYTE2 (0-127)
6AD8 C013 F044 00036         movff   MIDI_EVNT_VALUE, AY_TONE_A_TUNE_PITCH_BEND
6ADC C013 F045 00037         movff   MIDI_EVNT_VALUE, AY_TONE_B_TUNE_PITCH_BEND
6AE0 C013 F046 00038         movff   MIDI_EVNT_VALUE, AY_TONE_C_TUNE_PITCH_BEND
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 375


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00039         ;; WRITE CURREND NOTE ON VALUE (TONE A B C) TO PITCH BEND TEMP variables
6AE4 C02C F047 00040         movff   AY_TONE_A_TUNE_COARSE_MIDI,     AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP
6AE8 C029 F04A 00041         movff   AY_TONE_A_TUNE_FINE_MIDI,       AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP
6AEC C02D F048 00042         movff   AY_TONE_B_TUNE_COARSE_MIDI,     AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP
6AF0 C02A F04B 00043         movff   AY_TONE_B_TUNE_FINE_MIDI,       AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP
6AF4 C02E F049 00044         movff   AY_TONE_C_TUNE_COARSE_MIDI,     AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP
6AF8 C02B F04C 00045         movff   AY_TONE_C_TUNE_FINE_MIDI,       AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP
               00046 
               00047 ;; 1a) Write 30 to MIDI_EVENT_CHANGE_FLAG
               00048         ;; BECAUSE THERE HAT BEEN A CC MIDI EVENT       
               00049         ;; WRITE 30 to => MIDI_EVENT_CHANGE_FLAG 
               00050         ;; See => user_tick_lcd_redraw.inc
6AFC 0E1E      00051         movlw CC_30_PITCH_BEND
6AFE 6E38      00052         movwf MIDI_EVENT_CHANGE_FLAG
               00053 
               00054 
               00055 ;; ------[CHECK PITCH BEND EVENT MIDI CH = MIDI CH TONE A or B or C ?]------------
               00056 
               00057         ;; (A)
               00058         ;; 2.0) Check: does MIDI ch. Tone A Match?
               00059         ;; 2.1) IF YES: Perform PITCH BEND (DeTune) Tone A 
               00060         ;; 2.2) Write PITCH BEND to AY Chip if Ch. Match
               00061         
               00062 ;; ----[ CHECK MIDI CH. TONE A]--------------
6B00           00063 MIDI_EVNT_PITCH_BEND_CHK_CH_A
6B00 5021      00064         movf    MIDI_EVNT_CHANNEL, W
6B02 6230      00065         cpfseq  AY_TONE_A_MIDI_CHANNEL_USER
               00066 
               00067                 ; NO - IST'S NOT MIDI CH TONE A, SO GO AND CHECK CH. B
               00068                 rgoto MIDI_EVNT_PITCH_BEND_CHK_CH_B
6B04 D06D          M         bra     label
               00069                 
               00070                 ;YES - OK, IT'S MIDI CH TONE A
               00071                 rgoto MIDI_EVNT_PITCH_BEND_PITCH_BEND_TONE_A
6B06 D000          M         bra     label
               00072                 
               00073 ;; -----[CHECK PITCH BEND (+) or (-) ]---------
               00074 
6B08           00075 MIDI_EVNT_PITCH_BEND_PITCH_BEND_TONE_A
               00076         
               00077         ;; CHECK IF USER DETUNE IS (+) OR (-)
               00078         ;; ----------------------------------
               00079         ;; Pitch Bend Value:
               00080         ;; [-RANGE[0-63]]| 64=0 | [+RANGE[65-127]]
6B08 0E3F      00081         movlw   CHK_POS_NEG_VIA_63
               00082         ;; TONE A FINE TUNE > 63? 
6B0A 6444      00083         cpfsgt  AY_TONE_A_TUNE_PITCH_BEND       
               00084 
               00085                         ;; NO => PITCH BEND = (-)
               00086                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_NEGATIVE
6B0C D02F          M         bra     label
               00087                         
               00088                         ;; YES => PITCH BEND = (+) / or 0
               00089                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_POSITIVE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 376


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6B0E D000          M         bra     label
               00090 
               00091 ;; ----------------------[PITCH = POSITIVE]----------
               00092 
6B10           00093 MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_POSITIVE
               00094         ;; PITCH BEND / DETUNE IS POSITIVE (+) - HIGHER FREQUENCY
               00095         ;; MIDI EVENT PITCH BEND VALUE RANGE [64 to 127]
               00096         
               00097         ;; Pitch Bend Value [64  to 127] 
               00098         ;; x2      => RANGE [128 to 254]        
6B10 4644      00099         rlncf   AY_TONE_A_TUNE_PITCH_BEND, F
               00100         
               00101         ;; Write PITCH BEND A VALUE to 
               00102         ;; TUNE Fine USER 
               00103         ;; SEE => TUNE MENU (MAIN MENU 2)       
6B12 C044 F023 00104         movff   AY_TONE_A_TUNE_PITCH_BEND, AY_TONE_A_TUNE_FINE_USER
               00105         
               00106         ;; Clear THE OFFSET
               00107         ;; WRITE 128 TO WREG
6B16 0E80      00108         movlw   CLEAR_OFFSET_128
               00109         ;; {PITCH BEND = 128 to 254] - [WREG|(128)]} 
6B18 5E44      00110         subwf   AY_TONE_A_TUNE_PITCH_BEND, F
               00111         ;; Range => [0 to 126]
               00112         
               00113         ;; x2 => Range [0 to 254]
6B1A 5044      00114         movf    AY_TONE_A_TUNE_PITCH_BEND, W
6B1C 2644      00115         addwf   AY_TONE_A_TUNE_PITCH_BEND, F
               00116         ;; +1 => RANGE [1 to 255]
6B1E 2A44      00117         incf    AY_TONE_A_TUNE_PITCH_BEND, F
               00118 
               00119         
               00120         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00121         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00122         ;; 4 to 15 => NO RATIO CHANGE
6B20 0E03      00123         movlw   0x03     
6B22 642C      00124         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00125 
               00126                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00127                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00128                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_A_POSITIVE_RATIO_CHANGE
6B24 D001          M         bra     label
               00129                         
               00130                         ;; YES [MIDI TUNE COARSE REG > 3]
               00131                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00132                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_A_POSITIVE_GO_ON
6B26 D013          M         bra     label
               00133 
6B28           00134 MIDI_EVNT_PITCH_BEND_PITCH_A_POSITIVE_RATIO_CHANGE      
               00135         ;; PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00136         ;; PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00137         ;; PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00138         ;; PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6B28 502C      00139         movf AY_TONE_A_TUNE_COARSE_MIDI, W
               00140         JUMPTABLE_2BYTES 4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 377


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6B2A 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6B2C B0D8          M         skpnc
6B2E 0EFC          M         movlw   -(max_value)
6B30 0F04          M         addlw   max_value
6B32 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00141                 rgoto        MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_16x    ;; 0  ==> PITCH BAND VALUE /16
6B36 D003          M         bra     label
               00142                 rgoto        MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_8x     ;; 1  ==> PITCH BAND VALUE /8
6B38 D004          M         bra     label
               00143                 rgoto        MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_4x     ;; 2  ==> PITCH BAND VALUE /4
6B3A D005          M         bra     label
               00144                 rgoto        MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_2x     ;; 3  ==> PITCH BAND VALUE /2
6B3C D006          M         bra     label
               00145         
               00146 ;; JUMP IN HERE = PITCH BAND /16
6B3E           00147 MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_16x
6B3E 4244      00148                         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6B40 9E44      00149                         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00150 ;; JUMP IN HERE = PITCH BAND /8
6B42           00151 MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_8x
6B42 4244      00152                         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6B44 9E44      00153                         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00154 ;; JUMP IN HERE = PITCH BAND /4
6B46           00155 MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_4x
6B46 4244      00156                         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6B48 9E44      00157                         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00158 ;; JUMP IN HERE = PITCH BAND /2
6B4A           00159 MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_2x
6B4A 4244      00160                         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6B4C 9E44      00161                         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00162 
               00163 
               00164 
6B4E           00165 MIDI_EVNT_PITCH_BEND_PITCH_A_POSITIVE_GO_ON
               00166 
6B4E 5044      00167         movf AY_TONE_A_TUNE_PITCH_BEND, W               
               00168         ;; SUBTRACT PITCH BEND POSITIVE VALUE from "NOTE ON" MIDI VALUE
               00169         ;; THE (+) PITCH VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00170         ;; (+) = HIGHER FREQUENCY = MINUS @ THE AY REG AT THE AY SOUND CHIP REG
6B50 5E4A      00171         subwf   AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP, F
               00172         
               00173                 
               00174                 ;; CHECK: DO WE NEED TO SUBTRACT THE NEGATIVE CARRY BIT
               00175                 ;; FROM THE MIDI TUNE COARSE REG?
               00176                 ;; IS [PITCH BEND] IS > W [TONE FINE MIDI] ?
               00177                 ;; // [PITCH BEND] MUST BE = or < THEN [TONE FINE MIDI]
               00178                 ;; // otherwise WE HAVE DO DEC -1 @ [COARSE MIDI REG]
6B52 5029      00179                 movf    AY_TONE_A_TUNE_FINE_MIDI, W     ;; W
6B54 6444      00180                 cpfsgt  AY_TONE_A_TUNE_PITCH_BEND       ;; F
               00181                         
               00182                         ;; NO
               00183                         ;; W [MIDI FINE REG] WAS > F [PITCH BEND]
               00184                         ;; or W [MIDI FINE REG] == F [PITCH BEND]
               00185                         ;; SO WE CAN GO ON 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 378


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00186                         ;; WRITE PITCH BEND DATA TO AY CHIP
               00187                         rgoto MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
6B56 D038          M         bra     label
               00188                 
               00189                         ;; YES
               00190                         ;; F [PITCH BEND] WAS > W [MIDI FINE REG]
               00191                         ;; SO WE HAVE DO DEC -1 [COARSE MIDI REG]
               00192                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_POSITIVE_COARSE_REG_A_DEC_VALUE
6B58 D000          M         bra     label
               00193 
6B5A           00194 MIDI_EVNT_PITCH_BEND_PITCH_POSITIVE_COARSE_REG_A_DEC_VALUE
               00195                 ;; CHECK MIDI COASE REG = 0x00 ? 
               00196                 ;; 0 = INVALID VALUE 
6B5A 6AE8      00197                 clrw    ;; WREG = 0
6B5C 6247      00198                 cpfseq  AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP
               00199 
               00200                         ;; NO - OK COASE REG IS VALID
               00201                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_CARRY_COARSE_REG_A_DEC_GO_ON
6B5E D001          M         bra     label
               00202 
               00203                         ;; YES - SO WE CAN NOT DEC. COARSE REG (IS ALLREADY 0x00)
               00204                         ;; WRITE THE highest PITCH BEND DATA as possible TO THE FINE AND COARSE REG
               00205                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_CARRY_WRITE_HIGHEST_PITCH_A
6B60 D002          M         bra     label
               00206 
               00207 
6B62           00208 MIDI_EVNT_PITCH_BEND_PITCH_CARRY_COARSE_REG_A_DEC_GO_ON 
               00209                 ;; DEC DETUNE CARRY FROM FINETUNE REG (MINUS CARY) 
               00210                 ;; -1 to COASE TUNE REG 
6B62 0647      00211                 decf AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP, F
               00212         
               00213                         ;; WRITE PITCH BEND DATA TO AY CHIP
               00214                         rgoto MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
6B64 D031          M         bra     label
               00215 
               00216 
6B66           00217 MIDI_EVNT_PITCH_BEND_PITCH_CARRY_WRITE_HIGHEST_PITCH_A
               00218         ;; WE CAN NOT DEC. COARSE REG (IS ALLREADY 0x00)
               00219         ;; BECAUSE COARSE TUNE REG IS == 0x00
               00220         ;; SET FINE TUNE REG TO 0x0A 
               00221         ;; (highest TUNE value that is VALID = MIN. VALUE @ AY CHIP REG VALUE)
6B66 0E0A      00222         movlw FINE_TUNE_MIN_VALUE_B00001010     ;; 0x0A / dec 10
6B68 6E4A      00223         movwf   AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP
               00224         
               00225                 ;; WRITE PITCH BEND DATA TO AY CHIP
               00226                   rgoto MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
6B6A D02E          M         bra     label
               00227 
               00228 
               00229 
               00230 ;; ----------------------[PITCH A == NEGATIVE]--------------------------------------
               00231 
6B6C           00232 MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_NEGATIVE
               00233         ;; PITCH BEND / DETUNE IS NEGATIVE - LOWER FREQUENCY
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 379


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00234         ;; WRITE MIDI EVENT PITCH BEND DATA BYTE2 (0-127)
               00235                 
               00236         ;; Pitch Bend Value [0-63] 
               00237         ;; x2 => RANGE [0-126]  
6B6C 4644      00238         rlncf   AY_TONE_A_TUNE_PITCH_BEND, F    
               00239         
               00240         ;; Write PITCH BEND A VALUE to 
               00241         ;; TUNE Fine USER => TUNE MENU (See MAIN MENU 2)        
6B6E C044 F023 00242         movff   AY_TONE_A_TUNE_PITCH_BEND, AY_TONE_A_TUNE_FINE_USER
               00243         
               00244         ;; WRITE 128 TO WREG
6B72 0E80      00245         movlw   CLEAR_OFFSET_128
               00246         ;; {[WREG|(128)] - [AY_TONE_ABC_TUNE_PITCH_BEND 0 to 126]} 
6B74 5644      00247         subfwb  AY_TONE_A_TUNE_PITCH_BEND, F
6B76 5044      00248         movf    AY_TONE_A_TUNE_PITCH_BEND, W
               00249         ;; => [2 to 128]
               00250                 
               00251         ;; x2 => RANGE (-) [4 to 256]
6B78 2644      00252         addwf   AY_TONE_A_TUNE_PITCH_BEND, F
6B7A 0644      00253         decf    AY_TONE_A_TUNE_PITCH_BEND, F
               00254         ;; => (-) RANGE [3 to 255]
               00255 
               00256         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00257         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00258         ;; 4 to 15 => NO RATIO CHANGE
6B7C 0E03      00259         movlw   0x03     
6B7E 642C      00260         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00261 
               00262                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00263                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00264                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_A_NAGATIVE_RATIO_CHANGE
6B80 D001          M         bra     label
               00265                         
               00266                         ;; YES [MIDI TUNE COARSE REG > 3]
               00267                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00268                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_GO_ON       
6B82 D013          M         bra     label
               00269 
6B84           00270 MIDI_EVNT_PITCH_BEND_PITCH_A_NAGATIVE_RATIO_CHANGE
               00271         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00272         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00273         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00274         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6B84 502C      00275         movf AY_TONE_A_TUNE_COARSE_MIDI, W
               00276         JUMPTABLE_2BYTES 4
6B86 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6B88 B0D8          M         skpnc
6B8A 0EFC          M         movlw   -(max_value)
6B8C 0F04          M         addlw   max_value
6B8E ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00277                 rgoto        MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
6B92 D003          M         bra     label
               00278                 rgoto        MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
6B94 D004          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 380


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00279                 rgoto        MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
6B96 D005          M         bra     label
               00280                 rgoto        MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
6B98 D006          M         bra     label
               00281         
               00282         
               00283 ;; JUMP IN HERE = PITCH BAND /16
6B9A           00284 MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_16x
6B9A 4244      00285         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6B9C 9E44      00286         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00287 ;; JUMP IN HERE = PITCH BAND /8
6B9E           00288 MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_8x
6B9E 4244      00289         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6BA0 9E44      00290         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00291 ;; JUMP IN HERE = PITCH BAND /4
6BA2           00292 MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_4x
6BA2 4244      00293         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6BA4 9E44      00294         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00295 ;; JUMP IN HERE = PITCH BAND /2
6BA6           00296 MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_2x
6BA6 4244      00297         rrncf   AY_TONE_A_TUNE_PITCH_BEND, F
6BA8 9E44      00298         bcf     AY_TONE_A_TUNE_PITCH_BEND, 7
               00299 
               00300 
6BAA           00301 MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_GO_ON                     
               00302         ;; >> ADD (-) DETUNE to "NOTE ON" VALUE <<
               00303         ;; DON'T BE CONFUSED: 
               00304         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00305         ;; DETUNE POSITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
6BAA 5044      00306         movf    AY_TONE_A_TUNE_PITCH_BEND, W
6BAC 264A      00307         addwf   AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP, F
               00308             
               00309             ;;  carry flag is set when an instruction overflows a register.
               00310             ;;  branch if carry for INC (+1) the 4 BIT COASE TUNE REG
6BAE E201      00311             bc MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_POSITIVE_COARSE_REG_INC_VALUE
               00312 
               00313                         rgoto   MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
6BB0 D00B          M         bra     label
               00314 
               00315 
6BB2           00316 MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_POSITIVE_COARSE_REG_INC_VALUE
               00317         ;; CHECK MIDI COASE REG = 0x0F ? 
               00318         ;; F > BIN xxxx1110 ? => 14 (15 = higest Value) 
6BB2 0E0E      00319         movlw   COARSE_TUNE_MAX_MINUS_1_B00001110
6BB4 6447      00320         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP       
               00321 
               00322                 ;; NO - OK COASE REG IS VALID
               00323                 ;; GO ON WITH INC (+1)
               00324                 rgoto MIDI_EVNT_PITCH_BEND_PITCH_CARRY_COARSE_A_REG_INC
6BB6 D001          M         bra     label
               00325                 
               00326                 ;; YES - INC OF COARSE REG NOT POSSIBLE
               00327                 ;; SO WRITE MAXIMUM VALUE TO COARSE and FINE REG. 
               00328                 rgoto MIDI_EVNT_PITCH_BEND_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_TONE_A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 381


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6BB8 D002          M         bra     label
               00329 
               00330 
6BBA           00331 MIDI_EVNT_PITCH_BEND_PITCH_CARRY_COARSE_A_REG_INC       
               00332                         ;; INC COARSE REG ( => CARRY FROM FINE-TUNE REG) 
               00333                         ;; +1 to COARSE TUNE REG 
6BBA 2A47      00334                         incf AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP, F
               00335         
               00336                                 ;; GO AND WRITE TUNE TO AY CHIP
               00337                                 rgoto MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
6BBC D005          M         bra     label
               00338 
6BBE           00339 MIDI_EVNT_PITCH_BEND_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_TONE_A
               00340                         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
6BBE 0E0F      00341                         movlw COARSE_TUNE_MAX_VALUE_B00001111
6BC0 6E47      00342                         movwf AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP
6BC2 0ED2      00343                         movlw FINE_TUNE_MAX_VALUE_B11010010
6BC4 6E4A      00344                         movwf AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP
               00345         
               00346                                 ;; GO AND WRITE TUNE TO AY CHIP
               00347                                 rgoto MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
6BC6 D000          M         bra     label
               00348 
               00349 ;; -----------------------------------------------------------------------------
               00350 
6BC8           00351 MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A
               00352         
               00353         ;; -------------[SEND TUNE TONE A DATA TO AY CHIP]--------------
               00354         ;; SEND TUNE A TO AY CHIP
6BC8 0E01      00355         movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE     ; ADRESS => AY REGISTER
6BCA 6E39      00356         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR => AY_SR_Write
               00357         
6BCC 5047      00358         movf  AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP, W      ; DATA FOR AY REG X
6BCE 6E3A      00359         movwf AY_REG_DATA                               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00360         
6BD0 ECAA F01B 00361                 call LABEL_AY_SR_Write                  ; WRITING 8BIT DATA 
               00362                                                         ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00363 
6BD4 0E00      00364         movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE      ; ADRESS => AY REGISTER
6BD6 6E39      00365         movwf AY_REG_ADDRESS                            ; ADDRESS FOR => AY_SR_Write
               00366 
6BD8 504A      00367         movf  AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP, W                ; DATA FOR AY REG X
6BDA 6E3A      00368         movwf AY_REG_DATA                               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00369         
6BDC ECAA F01B 00370                 call LABEL_AY_SR_Write                  ; WRITING 8BIT DATA 
               00371                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00372 
               00373 
               00374 
               00375 
               00376 ;; ----[B]--------------
               00377 
               00378         ;; (B)
               00379         ;; 3.0) Check: does MIDI ch. Tone B Match?
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 382


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00380         ;; 3.1) IF YES: Perform PITCH BEND (DeTune) Tone B
               00381         ;; 3.2) Write PITCH BEND to AY Chip 
               00382 
               00383 
6BE0           00384 MIDI_EVNT_PITCH_BEND_CHK_CH_B   
6BE0 5021      00385         movf    MIDI_EVNT_CHANNEL, W
6BE2 6231      00386         cpfseq  AY_TONE_B_MIDI_CHANNEL_USER
               00387 
               00388                 ; NO - GO CHECK CH. C
               00389                 rgoto MIDI_EVNT_IS_Ex_CHK_CH_C
6BE4 D069          M         bra     label
               00390                 
               00391                 ;YES - OK, IT'S MIDI CH TONE B
               00392                 rgoto MIDI_EVNT_IS_Ex_PITCH_BEND_TONE_B
6BE6 D000          M         bra     label
               00393 
               00394 
6BE8           00395 MIDI_EVNT_IS_Ex_PITCH_BEND_TONE_B
               00396         
               00397         ;; CHECK IF USER DETUNE IS (+) OR (-)
               00398         ;; ----------------------------------
6BE8 0E3F      00399         movlw   CHK_POS_NEG_VIA_63      ;; 0x3F
               00400         ;; TONE B FINE TUNE > 63? 
6BEA 6445      00401         cpfsgt  AY_TONE_B_TUNE_PITCH_BEND       
               00402 
               00403                         ;; NO => PITCH BEND = (-)
               00404                         rgoto MIDI_EVNT_IS_Ex_PITCH_TONE_B_NEGATIVE
6BEC D02F          M         bra     label
               00405                         
               00406                         ;; YES => PITCH BEND = (+)
               00407                         rgoto MIDI_EVNT_IS_Ex_PITCH_TONE_B_POSITIVE
6BEE D000          M         bra     label
               00408 
               00409 ;; ----------------------[PITCH B == POSITIVE]--------------------------------------
               00410 
6BF0           00411 MIDI_EVNT_IS_Ex_PITCH_TONE_B_POSITIVE
               00412         ;; PITCH BEND / DETUNE IS POSITIVE (+) - HIGHER FREQUENCY
               00413         
               00414         ;; Pitch Bend Value x2 => RANGE [128-254]       
6BF0 4645      00415         rlncf   AY_TONE_B_TUNE_PITCH_BEND, F
               00416         
               00417         ;; Write PITCH BEND B VALUE to 
               00418         ;; TUNE Fine USER => TUNE MENU (See MAIN MENU 2)        
6BF2 C045 F024 00419         movff   AY_TONE_B_TUNE_PITCH_BEND, AY_TONE_B_TUNE_FINE_USER
               00420         
               00421         ;; CHECK THE OFFSET
               00422         ;; WRITE 128 TO WREG
6BF6 0E80      00423         movlw   CLEAR_OFFSET_128
               00424         ;; {PITCH BEND = 128 to 254] - [WREG|(128)]} WRITE TO => [WREG]
6BF8 5E45      00425         subwf   AY_TONE_B_TUNE_PITCH_BEND, F
               00426         ;; Now You have a value range of [0-126]
               00427         
               00428         ;; x2 => [0 to 254]
6BFA 5045      00429         movf    AY_TONE_B_TUNE_PITCH_BEND, W
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 383


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6BFC 2645      00430         addwf   AY_TONE_B_TUNE_PITCH_BEND, F
               00431         ;; +1 => [1 to 255]
6BFE 2A45      00432         incf    AY_TONE_B_TUNE_PITCH_BEND, F
               00433 
               00434         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00435         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00436         ;; 4 to 15 => NO RATIO CHANGE
6C00 0E03      00437         movlw   0x03     
6C02 642D      00438         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI      
               00439 
               00440                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00441                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00442                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_B_POSITIVE_RATIO_CHANGE
6C04 D001          M         bra     label
               00443                         
               00444                         ;; YES [MIDI TUNE COARSE REG > 3]
               00445                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00446                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_B_POSITIVE_GO_ON
6C06 D013          M         bra     label
               00447 
6C08           00448 MIDI_EVNT_PITCH_BEND_PITCH_B_POSITIVE_RATIO_CHANGE
               00449         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00450         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00451         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00452         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00453         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6C08 502D      00454         movf AY_TONE_B_TUNE_COARSE_MIDI, W
               00455         JUMPTABLE_2BYTES 4
6C0A 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6C0C B0D8          M         skpnc
6C0E 0EFC          M         movlw   -(max_value)
6C10 0F04          M         addlw   max_value
6C12 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00456                 rgoto        MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_16x   ;; 0  ==> PITCH BAND VALUE /16
6C16 D003          M         bra     label
               00457                 rgoto        MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_8x    ;; 1  ==> PITCH BAND VALUE /8
6C18 D004          M         bra     label
               00458                 rgoto        MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_4x    ;; 2  ==> PITCH BAND VALUE /4
6C1A D005          M         bra     label
               00459                 rgoto        MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_2x    ;; 3  ==> PITCH BAND VALUE /2
6C1C D006          M         bra     label
               00460         
               00461 ;; JUMP IN HERE = PITCH BAND /16
6C1E           00462 MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_16x
6C1E 4245      00463                         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C20 9E45      00464                         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00465 ;; JUMP IN HERE = PITCH BAND /8
6C22           00466 MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_8x
6C22 4245      00467                         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C24 9E45      00468                         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00469 ;; JUMP IN HERE = PITCH BAND /4
6C26           00470 MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_4x
6C26 4245      00471                         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C28 9E45      00472                         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 384


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00473 ;; JUMP IN HERE = PITCH BAND /2
6C2A           00474 MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_2x
6C2A 4245      00475                         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C2C 9E45      00476                         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00477 
               00478 ;; ----------[RATIO CHANGE END]-------------------------------
               00479 
6C2E           00480 MIDI_EVNT_PITCH_BEND_PITCH_B_POSITIVE_GO_ON     
               00481         ;; SUBTRACT DETUNE from "NOTE ON" MIDI VALUE 
               00482         ;; THE (+) PITCH VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00483         ;; (+) = HIGHER FREQUENCY = MINUS @ THE AY REG AT THE AY SOUND CHIP REG
6C2E 5045      00484         movf AY_TONE_B_TUNE_PITCH_BEND, W       
6C30 5E4B      00485         subwf   AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP, F
               00486         
               00487                 ;; CHECK: DO WE NEED TO SUBTRACT THE NEGATIVE CARRY BIT
               00488                 ;; FROM THE MIDI TUNE COARSE REG?
               00489                 ;; IS [PITCH BEND] IS > W [TONE FINE MIDI] ?
               00490                 ;; // [PITCH BEND] MUST BE = or < THEN [TONE FINE MIDI]
               00491                 ;; // otherwise WE HAVE DO DEC -1 @ [COARSE MIDI REG]
6C32 502A      00492                 movf    AY_TONE_B_TUNE_FINE_MIDI, W     ;; W
6C34 6445      00493                 cpfsgt  AY_TONE_B_TUNE_PITCH_BEND       ;; F
               00494                         
               00495                         ;; W [MIDI FINE REG] WAS > F [PITCH BEND]
               00496                         ;; or W [MIDI FINE REG] == F [PITCH BEND]
               00497                         ;; SO WE CAN GO ON 
               00498                         ;; WRITE PITCH BEND DATA TO AY CHIP
               00499                         rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
6C36 D034          M         bra     label
               00500                 
               00501                         ;; F [PITCH BEND] WAS > W [MIDI FINE REG]
               00502                         ;; SO WE HAVE DO DEC -1 [COARSE MIDI REG]
               00503                         rgoto MIDI_EVNT_IS_Ex_PITCH_POSITIVE_COASE_REG_B_DEC_VALUE
6C38 D000          M         bra     label
               00504 
6C3A           00505 MIDI_EVNT_IS_Ex_PITCH_POSITIVE_COASE_REG_B_DEC_VALUE
               00506                 ;; CHECK MIDI COASE REG = 0x00 ? 
               00507                 ;; 0 = INVALID VALUE 
6C3A 6AE8      00508                 clrw    ;; WREG = 0
6C3C 6248      00509                 cpfseq  AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP
               00510 
               00511                         ;; NO - OK COASE REG IS VALID
               00512                         rgoto MIDI_EVNT_IS_Ex_PITCH_CARRY_COASE_REG_B_DEC_GO_ON
6C3E D001          M         bra     label
               00513 
               00514                         ;; YES - SO WE CAN NOT DEC. COARSE REG (IS ALLREADY 0x00)
               00515                         ;; WRITE THE highest PITCH BEND DATA as possible TO THE FINE AND COARSE REG
               00516                         rgoto MIDI_EVNT_IS_Ex_PITCH_CARRY_WRITE_HIGHEST_PITCH_B
6C40 D002          M         bra     label
               00517 
               00518 
6C42           00519 MIDI_EVNT_IS_Ex_PITCH_CARRY_COASE_REG_B_DEC_GO_ON       
               00520         
               00521                 ;; DEC DETUNE CARRY FROM FINETUNE REG (MINUS CARY) 
               00522                 ;; -1 to COASE TUNE REG 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 385


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6C42 0648      00523                 decf AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP, F
               00524         
               00525                         ;; WRITE PITCH BEND DATA TO AY CHIP
               00526                         rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
6C44 D02D          M         bra     label
               00527 
               00528 
6C46           00529 MIDI_EVNT_IS_Ex_PITCH_CARRY_WRITE_HIGHEST_PITCH_B
               00530         
               00531         ;; OUT OF RANGE [TUNE is > 0]
               00532         ;; BECAUSE COARSE TUNE REG IS ALREADY = 0x00
               00533         ;; SET FINE TUNE REH TO 0x0A (highest TUNE value that is VALID)
6C46 0E0A      00534         movlw FINE_TUNE_MIN_VALUE_B00001010
6C48 6E4B      00535         movwf   AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP
               00536         
               00537                 ;; WRITE PITCH BEND DATA TO AY CHIP
               00538                   rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
6C4A D02A          M         bra     label
               00539 
               00540 
               00541 ;; ----------------------[PITCH B == NEGATIVE]--------------------------------------
               00542 
6C4C           00543 MIDI_EVNT_IS_Ex_PITCH_TONE_B_NEGATIVE
               00544         ;; PITCH BEND / DETUNE IS NEGATIVE - LOWER FREQUENCY
               00545         ;; WRITE MIDI EVENT PITCH BEND DATA BYTE2 (0-127)
               00546         
               00547         ;; Pitch Bend Value [0-63] x2 => RANGE [0-126]  
6C4C 4645      00548         rlncf   AY_TONE_B_TUNE_PITCH_BEND, F    
               00549         
               00550         ;; Write PITCH BEND B VALUE to 
               00551         ;; TUNE Fine USER => TUNE MENU (See MAIN MENU 2)        
6C4E C045 F024 00552         movff   AY_TONE_B_TUNE_PITCH_BEND, AY_TONE_B_TUNE_FINE_USER
               00553         
               00554         ;; WRITE 128 TO WREG
6C52 0E80      00555         movlw   CLEAR_OFFSET_128
               00556         ;; {[WREG|(128)] - [AY_TONE_ABC_TUNE_PITCH_BEND 0 to 126]} WRITE TO => [WREG]
6C54 5645      00557         subfwb  AY_TONE_B_TUNE_PITCH_BEND, F
6C56 5045      00558         movf    AY_TONE_B_TUNE_PITCH_BEND, W
               00559         ;; => [2 to 128]
               00560                 
               00561         ;; x2 => RANGE (-) [4 to 256]
6C58 2645      00562         addwf   AY_TONE_B_TUNE_PITCH_BEND, F
6C5A 0645      00563         decf    AY_TONE_B_TUNE_PITCH_BEND, F
               00564         ;; => (-) RANGE [3 to 255]
               00565 
               00566         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00567         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00568         ;; 4 to 15 => NO RATIO CHANGE
6C5C 0E03      00569         movlw   0x03     
6C5E 642D      00570         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI      
               00571 
               00572                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00573                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00574                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_B_NAGATIVE_RATIO_CHANGE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 386


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6C60 D001          M         bra     label
               00575                         
               00576                         ;; YES [MIDI TUNE COARSE REG > 3]
               00577                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00578                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_B_NEGATIVE_GO_ON       
6C62 D013          M         bra     label
               00579 
6C64           00580 MIDI_EVNT_PITCH_BEND_PITCH_B_NAGATIVE_RATIO_CHANGE
               00581         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00582         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00583         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00584         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00585         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6C64 502D      00586         movf AY_TONE_B_TUNE_COARSE_MIDI, W
               00587         JUMPTABLE_2BYTES 4
6C66 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6C68 B0D8          M         skpnc
6C6A 0EFC          M         movlw   -(max_value)
6C6C 0F04          M         addlw   max_value
6C6E ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00588                 rgoto        MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_16x         ;; 0  ==> PITCH BAND VALUE /16
6C72 D003          M         bra     label
               00589                 rgoto        MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  ;; 1  ==> PITCH BAND VALUE /8
6C74 D004          M         bra     label
               00590                 rgoto        MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  ;; 1  ==> PITCH BAND VALUE /4
6C76 D005          M         bra     label
               00591                 rgoto        MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  ;; 2  ==> PITCH BAND VALUE /2
6C78 D006          M         bra     label
               00592         
               00593 ;; /16
6C7A           00594 MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_16x
6C7A 4245      00595         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C7C 9E45      00596         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00597 ;; /8
6C7E           00598 MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_8x
6C7E 4245      00599         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C80 9E45      00600         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00601 ;; /4
6C82           00602 MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_4x
6C82 4245      00603         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C84 9E45      00604         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00605 ;; /2
6C86           00606 MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_2x
6C86 4245      00607         rrncf   AY_TONE_B_TUNE_PITCH_BEND, F
6C88 9E45      00608         bcf     AY_TONE_B_TUNE_PITCH_BEND, 7
               00609 
               00610 
6C8A           00611 MIDI_EVNT_PITCH_BEND_PITCH_B_NEGATIVE_GO_ON     
               00612         ;; >> ADD (-) DETUNE to "NOTE ON" VALUE <<
               00613         ;; DON'T BE CONFUSED: 
               00614         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00615         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
6C8A 90D8      00616         clrc    ;; clar Carry Bit
6C8C 5045      00617         movf    AY_TONE_B_TUNE_PITCH_BEND, W
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 387


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6C8E 264B      00618         addwf   AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP, F
               00619 
               00620             ;;  carry flag is set when an instruction overflows a register.
               00621             ;;  branch if carry for INC the 4 BIT COASE TUNE REG
6C90 E201      00622             bc MIDI_EVNT_IS_Ex_PITCH_TONE_B_POSITIVE_COARSE_REG_INC_VALUE
               00623 
               00624                         rgoto   MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
6C92 D006          M         bra     label
               00625 
               00626 
6C94           00627 MIDI_EVNT_IS_Ex_PITCH_TONE_B_POSITIVE_COARSE_REG_INC_VALUE
               00628         ;; CHECK MIDI COASE REG = 0x0F ? 
               00629         ;; F = BIN xxxx1111 = 15 
6C94 0E0F      00630         movlw   COARSE_TUNE_MAX_VALUE_B00001111 
6C96 6248      00631         cpfseq  AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP       
               00632 
               00633                         ;; NO - OK COASE REG IS VALID
               00634                         rgoto MIDI_EVNT_IS_Ex_PITCH_CARRY_COARSE_REG_B_INC
6C98 D001          M         bra     label
               00635 
               00636                         ;; YES - OK NO INC. 
               00637                         rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
6C9A D002          M         bra     label
               00638 
               00639 
6C9C           00640 MIDI_EVNT_IS_Ex_PITCH_CARRY_COARSE_REG_B_INC
               00641         
               00642         ;; INC PITCH CARRY FROM FINE-TUNE REG 
               00643         ;; +1 to COASE TUNE REG 
6C9C 2A48      00644         incf AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP, F
               00645         
               00646                   ;; GO ON WITH COASE TUNE CHECKING
               00647                   rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
6C9E D000          M         bra     label
               00648 
               00649 ;; -----------------------------------------------------------------------------
               00650 
6CA0           00651 MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B
               00652         ;; -------------[SEND TUNE TONE A DATA TO AY CHIP]--------------
               00653         ;; SEND TUNE B TO AY CHIP
6CA0 0E03      00654         movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE     ; ADRESS => AY REGISTER
6CA2 6E39      00655         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR => AY_SR_Write
               00656         
6CA4 5048      00657         movf  AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP, W      ; DATA FOR AY REG X
6CA6 6E3A      00658         movwf AY_REG_DATA                               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00659         
6CA8 ECAA F01B 00660                 call LABEL_AY_SR_Write                  ; WRITING 8BIT DATA 
               00661                                                         ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00662 
6CAC 0E02      00663         movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE       ; ADRESS => AY REGISTER
6CAE 6E39      00664         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR => AY_SR_Write
               00665 
6CB0 504B      00666         movf  AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP, W                ; DATA FOR AY REG X
6CB2 6E3A      00667         movwf AY_REG_DATA                               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 388


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00668         
6CB4 ECAA F01B 00669                 call LABEL_AY_SR_Write                  ; WRITING 8BIT DATA 
               00670                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00671 
               00672 
               00673 
               00674 ;; ----[C]--------------
               00675 
               00676         ;; (C)
               00677         ;; 4.0) Check: does MIDI ch. Tone B Match?
               00678         ;; 4.1) IF YES: Perform PITCH BEND (DeTune) Tone B
               00679         ;; 4.2) Write PITCH BEND to AY Chip 
               00680 
               00681 
6CB8           00682 MIDI_EVNT_IS_Ex_CHK_CH_C
6CB8 5021      00683         movf    MIDI_EVNT_CHANNEL, W
6CBA 6232      00684         cpfseq  AY_TONE_C_MIDI_CHANNEL_USER
               00685 
               00686                 ; NO - IT'S *NOT* MIDI CH TONE A or B or C - SKIP HERE
               00687                 rgoto MIDI_EVNT_IS_Ex_EXIT      
6CBC D069          M         bra     label
               00688                 
               00689                 ;YES - - OK, IT'S MIDI CH TONE C
               00690                 ; GO ON WITH PITCH BEND @ TONE C
               00691                 rgoto MIDI_EVNT_IS_Ex_PITCH_BEND_TONE_C
6CBE D000          M         bra     label
               00692 
               00693 
6CC0           00694 MIDI_EVNT_IS_Ex_PITCH_BEND_TONE_C
               00695         
               00696         ;; CHECK IF USER DETUNE IS (+) OR (-)
               00697         ;; ----------------------------------
6CC0 0E3F      00698         movlw   CHK_POS_NEG_VIA_63
               00699         ;; TONE C FINE TUNE > 63? 
6CC2 6446      00700         cpfsgt  AY_TONE_C_TUNE_PITCH_BEND       
               00701 
               00702                         ;; NO => PITCH BEND = (-)
               00703                         rgoto MIDI_EVNT_IS_Ex_PITCH_TONE_C_NEGATIVE
6CC4 D02F          M         bra     label
               00704                         
               00705                         ;; YES => PITCH BEND = (+)
               00706                         rgoto MIDI_EVNT_IS_Ex_PITCH_TONE_C_POSITIVE
6CC6 D000          M         bra     label
               00707 
               00708 ;; ----------------------[PITCH C == POSITIVE]--------------------------------------
               00709 
6CC8           00710 MIDI_EVNT_IS_Ex_PITCH_TONE_C_POSITIVE
               00711         ;; PITCH BEND / DETUNE IS POSITIVE (+) - HIGHER FREQUENCY
               00712         
               00713         ;; Pitch Bend Value x2 => RANGE [128-254]       
6CC8 4646      00714         rlncf   AY_TONE_C_TUNE_PITCH_BEND, F
               00715         
               00716         ;; Write PITCH BEND C VALUE to 
               00717         ;; TUNE Fine USER => TUNE MENU (See MAIN MENU 2)        
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 389


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6CCA C046 F025 00718         movff   AY_TONE_C_TUNE_PITCH_BEND, AY_TONE_C_TUNE_FINE_USER
               00719         
               00720         ;; CHECK THE OFFSET
               00721         ;; WRITE 128 TO WREG
6CCE 0E80      00722         movlw   CLEAR_OFFSET_128
               00723         ;; {PITCH BEND = 128 to 254] - [WREG|(128)]} WRITE TO => [WREG]
6CD0 5E46      00724         subwf   AY_TONE_C_TUNE_PITCH_BEND, F
               00725         
               00726         ;; Now You have a value range of [0-126]
               00727         ;; x2 => [0 to 254]
6CD2 5046      00728         movf    AY_TONE_C_TUNE_PITCH_BEND, W
6CD4 2646      00729         addwf   AY_TONE_C_TUNE_PITCH_BEND, F
               00730         ;; +1 => [0 to 255]
6CD6 2A46      00731         incf    AY_TONE_C_TUNE_PITCH_BEND, F
               00732 
               00733         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00734         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00735         ;; 4 to 15 => NO RATIO CHANGE
6CD8 0E03      00736         movlw   0x03     
6CDA 642E      00737         cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00738 
               00739                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00740                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00741                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_C_POSITIVE_RATIO_CHANGE
6CDC D001          M         bra     label
               00742                         
               00743                         ;; YES [MIDI TUNE COARSE REG > 3]
               00744                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00745                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_C_POSITIVE_GO_ON
6CDE D013          M         bra     label
               00746 
6CE0           00747 MIDI_EVNT_PITCH_BEND_PITCH_C_POSITIVE_RATIO_CHANGE
               00748         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00749         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00750         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00751         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00752         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6CE0 502E      00753         movf AY_TONE_C_TUNE_COARSE_MIDI, W
               00754         JUMPTABLE_2BYTES 4
6CE2 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6CE4 B0D8          M         skpnc
6CE6 0EFC          M         movlw   -(max_value)
6CE8 0F04          M         addlw   max_value
6CEA ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00755                 rgoto        MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_16x   ;; 0  ==> PITCH BAND VALUE /16
6CEE D003          M         bra     label
               00756                 rgoto        MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_8x    ;; 1  ==> PITCH BAND VALUE /8
6CF0 D004          M         bra     label
               00757                 rgoto        MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_4x    ;; 3  ==> PITCH BAND VALUE /4
6CF2 D005          M         bra     label
               00758                 rgoto        MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_2x    ;; 2  ==> PITCH BAND VALUE /2
6CF4 D006          M         bra     label
               00759         
               00760 ;; /16
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 390


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6CF6           00761 MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_16x
6CF6 4246      00762                         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6CF8 9E46      00763                         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00764 ;; /8
6CFA           00765 MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_8x
6CFA 4246      00766                         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6CFC 9E46      00767                         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00768 ;; /4
6CFE           00769 MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_4x
6CFE 4246      00770                         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6D00 9E46      00771                         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00772 ;; /2
6D02           00773 MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_2x
6D02 4246      00774                         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6D04 9E46      00775                         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00776 
               00777 ;; ----------[END RATIO CHANGE]-----------------------------
               00778 
6D06           00779 MIDI_EVNT_PITCH_BEND_PITCH_C_POSITIVE_GO_ON
               00780 
               00781         ;; SUBTRACT DETUNE from "NOTE ON" MIDI VALUE 
               00782         ;; THE (+) PITCH VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00783         ;; (+) = HIGHER FREQUENCY = MINUS @ THE AY REG AT THE AY SOUND CHIP REG
6D06 5046      00784         movf    AY_TONE_C_TUNE_PITCH_BEND, W            
6D08 5E4C      00785         subwf   AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP, F
               00786         
               00787                 ;; CHECK: DO WE NEED TO SUBTRACT THE NEGATIVE CARRY BIT
               00788                 ;; FROM THE MIDI TUNE COARSE REG?
               00789                 ;; IS [PITCH BEND] IS > W [TONE FINE MIDI] ?
               00790                 ;; // [PITCH BEND] MUST BE = or < THEN [TONE FINE MIDI]
               00791                 ;; // otherwise WE HAVE DO DEC -1 @ [COARSE MIDI REG]
6D0A 502B      00792                 movf    AY_TONE_C_TUNE_FINE_MIDI, W     ;; W
6D0C 6446      00793                 cpfsgt  AY_TONE_C_TUNE_PITCH_BEND       ;; F
               00794                         
               00795                         ;; W [MIDI FINE REG] WAS > F [PITCH BEND]
               00796                         ;; or W [MIDI FINE REG] == F [PITCH BEND]
               00797                         ;; SO WE CAN GO ON 
               00798                         ;; WRITE PITCH BEND DATA TO AY CHIP
               00799                         rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
6D0E D034          M         bra     label
               00800                 
               00801                         ;; F [PITCH BEND] WAS > W [MIDI FINE REG]
               00802                         ;; SO WE HAVE DO DEC -1 [COARSE MIDI REG]
               00803                         rgoto MIDI_EVNT_IS_Ex_PITCH_POSITIVE_COASE_REG_C_DEC_VALUE
6D10 D000          M         bra     label
               00804 
6D12           00805 MIDI_EVNT_IS_Ex_PITCH_POSITIVE_COASE_REG_C_DEC_VALUE
               00806                 ;; CHECK MIDI COASE REG = 0x00 ? 
               00807                 ;; 0 = INVALID VALUE 
6D12 6AE8      00808                 clrw    ;; WREG = 0
6D14 6249      00809                 cpfseq  AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP
               00810 
               00811                         ;; NO - OK COASE REG IS VALID
               00812                         rgoto MIDI_EVNT_IS_Ex_PITCH_CARRY_COASE_REG_C_DEC_GO_ON
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 391


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6D16 D001          M         bra     label
               00813 
               00814                         ;; YES - SO WE CAN NOT DEC. COARSE REG (IS ALLREADY 0x00)
               00815                         ;; WRITE THE highest PITCH BEND DATA as possible TO THE FINE AND COARSE REG
               00816                         rgoto MIDI_EVNT_IS_Ex_PITCH_CARRY_WRITE_HIGHEST_PITCH_C
6D18 D002          M         bra     label
               00817 
               00818 
6D1A           00819 MIDI_EVNT_IS_Ex_PITCH_CARRY_COASE_REG_C_DEC_GO_ON       
               00820         
               00821                 ;; DEC DETUNE CARRY FROM FINETUNE REG (MINUS CARY) 
               00822                 ;; -1 to COASE TUNE REG 
6D1A 0649      00823                 decf AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP, F
               00824         
               00825                         ;; WRITE PITCH BEND DATA TO AY CHIP
               00826                         rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
6D1C D02D          M         bra     label
               00827 
               00828 
6D1E           00829 MIDI_EVNT_IS_Ex_PITCH_CARRY_WRITE_HIGHEST_PITCH_C
               00830         
               00831         ;; OUT OF RANGE [TUNE is > 0]
               00832         ;; BECAUSE COARSE TUNE REG IS == 0x00
               00833         ;; SET FINE TUNE REH TO 0x0A (highest value that is VALID)
6D1E 0E0A      00834         movlw FINE_TUNE_MIN_VALUE_B00001010
6D20 6E4C      00835         movwf   AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP
               00836         
               00837                 ;; WRITE PITCH BEND DATA TO AY CHIP
               00838                   rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
6D22 D02A          M         bra     label
               00839 
               00840 
               00841 
               00842 ;; ----------------------[PITCH C == NEGATIVE]--------------------------------------
               00843 
6D24           00844 MIDI_EVNT_IS_Ex_PITCH_TONE_C_NEGATIVE
               00845         ;; PITCH BEND / DETUNE IS NEGATIVE - LOWER FREQUENCY
               00846         ;; WRITE MIDI EVENT PITCH BEND DATA BYTE2 (0-127)
               00847                 
               00848         ;; Pitch Bend Value [0-63] x2 => RANGE [0-126]  
6D24 4646      00849         rlncf   AY_TONE_C_TUNE_PITCH_BEND, F    
               00850         
               00851         ;; Write PITCH BEND C VALUE to 
               00852         ;; TUNE Fine USER => TUNE MENU (See MAIN MENU 2)        
6D26 C046 F025 00853         movff   AY_TONE_C_TUNE_PITCH_BEND, AY_TONE_C_TUNE_FINE_USER
               00854         
               00855         ;; WRITE 128 TO WREG
6D2A 0E80      00856         movlw   CLEAR_OFFSET_128
               00857         ;; {[WREG|(128)] - [AY_TONE_ABC_TUNE_PITCH_BEND 0 to 126]} WRITE TO => [WREG]
6D2C 5646      00858         subfwb  AY_TONE_C_TUNE_PITCH_BEND, F
6D2E 5046      00859         movf    AY_TONE_C_TUNE_PITCH_BEND, W
               00860         ;; => [2 to 128]
               00861                 
               00862         ;; x2 => RANGE (-) [4 to 256]
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 392


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6D30 2646      00863         addwf   AY_TONE_C_TUNE_PITCH_BEND, F
6D32 0646      00864         decf    AY_TONE_C_TUNE_PITCH_BEND, F
               00865         ;; => (-) RANGE [3 to 255]
               00866 
               00867         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00868         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00869         ;; 4 to 15 => NO RATIO CHANGE
6D34 0E03      00870         movlw   0x03     
6D36 642E      00871         cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00872 
               00873                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00874                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00875                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_C_NAGATIVE_RATIO_CHANGE
6D38 D001          M         bra     label
               00876                         
               00877                         ;; YES [MIDI TUNE COARSE REG > 3]
               00878                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00879                         rgoto MIDI_EVNT_PITCH_BEND_PITCH_C_NEGATIVE_GO_ON       
6D3A D013          M         bra     label
               00880 
6D3C           00881 MIDI_EVNT_PITCH_BEND_PITCH_C_NAGATIVE_RATIO_CHANGE
               00882         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00883         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00884         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00885         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00886         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6D3C 502E      00887         movf AY_TONE_C_TUNE_COARSE_MIDI, W
               00888         JUMPTABLE_2BYTES 4
6D3E 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6D40 B0D8          M         skpnc
6D42 0EFC          M         movlw   -(max_value)
6D44 0F04          M         addlw   max_value
6D46 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00889                 rgoto        MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_16x         ;; 0  ==> PITCH BAND VALUE /16
6D4A D003          M         bra     label
               00890                 rgoto        MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  ;; 1  ==> PITCH BAND VALUE /8
6D4C D004          M         bra     label
               00891                 rgoto        MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  ;; 1  ==> PITCH BAND VALUE /4
6D4E D005          M         bra     label
               00892                 rgoto        MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  ;; 2  ==> PITCH BAND VALUE /2
6D50 D006          M         bra     label
               00893 
               00894 ;; /16
6D52           00895 MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_16x
6D52 4246      00896         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6D54 9E46      00897         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00898 ;; /8
6D56           00899 MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_8x
6D56 4246      00900         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6D58 9E46      00901         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00902 ;; /4
6D5A           00903 MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_4x
6D5A 4246      00904         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6D5C 9E46      00905         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 393


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00906 ;; /2
6D5E           00907 MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_2x
6D5E 4246      00908         rrncf   AY_TONE_C_TUNE_PITCH_BEND, F
6D60 9E46      00909         bcf     AY_TONE_C_TUNE_PITCH_BEND, 7
               00910 
               00911 
6D62           00912 MIDI_EVNT_PITCH_BEND_PITCH_C_NEGATIVE_GO_ON     
               00913         ;; >> ADD (-) DETUNE to "NOTE ON" VALUE <<
               00914         ;; DON'T BE CONFUSED: 
               00915         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00916         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
6D62 90D8      00917         clrc
6D64 5046      00918         movf    AY_TONE_C_TUNE_PITCH_BEND, W
6D66 264C      00919         addwf   AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP, F
               00920             
               00921             ;;  carry flag is set when an instruction overflows a register.
               00922             ;;  branch if carry for INC the 4 BIT COASE TUNE REG
6D68 E201      00923             bc MIDI_EVNT_IS_Ex_PITCH_TONE_C_POSITIVE_COARSE_REG_INC_VALUE
               00924 
               00925                         rgoto   MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
6D6A D006          M         bra     label
               00926 
               00927 
6D6C           00928 MIDI_EVNT_IS_Ex_PITCH_TONE_C_POSITIVE_COARSE_REG_INC_VALUE
               00929         ;; CHECK MIDI COASE REG = 0x0F ? 
               00930         ;; F = BIN xxxx1111 = 15 
6D6C 0E0F      00931         movlw   COARSE_TUNE_MAX_VALUE_B00001111
6D6E 6249      00932         cpfseq  AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP       
               00933 
               00934                         ;; NO - OK COASE REG IS VALID
               00935                         rgoto MIDI_EVNT_IS_Ex_PITCH_CARRY_COARSE_REG_C_INC
6D70 D001          M         bra     label
               00936 
               00937                         ;; YES - OK NO INC. 
               00938                         rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
6D72 D002          M         bra     label
               00939 
               00940 
6D74           00941 MIDI_EVNT_IS_Ex_PITCH_CARRY_COARSE_REG_C_INC
               00942         
               00943         ;; INC PITCH CARRY FROM FINE-TUNE REG 
               00944         ;; +1 to COASE TUNE REG 
6D74 2A49      00945         incf AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP, F
               00946         
               00947                   ;; GO ON WITH COASE TUNE CHECKING
               00948                   rgoto MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
6D76 D000          M         bra     label
               00949 
               00950 ;; -----------------------------------------------------------------------------
               00951 
               00952 
               00953 
               00954 
               00955 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 394


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6D78           00956 MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C
               00957 
               00958 
               00959         ;; -------------[SEND TUNE TONE A DATA TO AY CHIP]--------------
               00960         ;; SEND TUNE C TO AY CHIP
6D78 0E05      00961         movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE  ; ADRESS => AY REGISTER
6D7A 6E39      00962         movwf AY_REG_ADDRESS                            ; ADDRESS FOR => AY_SR_Write
               00963         
6D7C 5049      00964         movf  AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP, W      ; DATA FOR AY REG X
6D7E 6E3A      00965         movwf AY_REG_DATA                               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00966         
6D80 ECAA F01B 00967                 call LABEL_AY_SR_Write                  ; WRITING 8BIT DATA 
               00968                                                         ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00969 
6D84 0E04      00970         movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE       ; ADRESS => AY REGISTER
6D86 6E39      00971         movwf AY_REG_ADDRESS                            ; ADDRESS FOR => AY_SR_Write
               00972 
6D88 504C      00973         movf  AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP, W                ; DATA FOR AY REG X
6D8A 6E3A      00974         movwf AY_REG_DATA                               ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00975         
6D8C ECAA F01B 00976                 call LABEL_AY_SR_Write                  ; WRITING 8BIT DATA 
               00977                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00978 
               00979 
               00980 ;; --------------------[END: CHECK TONE A B C MIDI CHANNEL]-----------------
               00981 
6D90           00982 MIDI_EVNT_IS_Ex_EXIT    
               00983         
               00984         ;; Exit
6D90 0012      00985         return
               00107 #include "midi_evnt_handling.inc"                       ;; NOT USED MIDI EVENT HERE
               00001 ;; midi_evnt_handling.inc
               00002 
               00003 
               00004 ; Aftertouch
6D92           00005 MIDI_EVNT_IS_Ax 
               00006         ;; not implemented yet  
6D92 0012      00007         return
               00008 
               00009 
               00010 ;; Program Change - receiving two MIDI bytes
6D94           00011 MIDI_EVNT_IS_Cx
               00012         ;; not implemented yet  
6D94 0012      00013         return
               00014 
               00015 
               00016 ; Channel Pressure
6D96           00017 MIDI_EVNT_IS_Dx 
               00018         ;; not implemented yet  
6D96 0012      00019         return
               00020 
               00021 
               00022 ;; System Exclusive messages not really supported, sends only the first byte for realtime events
               00023 ;; SysEx streams etc. have to be send by the user routines
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 395


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6D98           00024 MIDI_EVNT_IS_Fx
               00025         ;; not implemented yet  
6D98 0012      00026         return
               00027 
               00108 #include "note_on_pipeline_a.inc"                       ;; Note ON Handling
               00001 ;; ----------------------------------------
               00002 ;; # note_on_pipeline_a.inc                #
               00003 ;; ----------------------------------------
               00004 ;;
               00005 ;; FUNCTION:
               00006 ;; ---------
               00007 ;; DO *NOTE ON* PROCESSING @ TONE A 
               00008 ;; WITH ALL necessary parameters
               00009 ;;
               00010 ;; 
               00011 ;; DETAILS:
               00012 ;; --------
               00013 ;; THERE HAD BEEN A *NOTE ON* MIDI EVENT
               00014 ;; JUMP IN HERE FROM note_to_hz.inc
               00015 ;; TUNE WAS WRITTEN TO MIOS_PARAMETER1/2
               00016 ;; COARSE TUNE TO MIOS_PARAMETER1
               00017 ;; FINE  TUNE TO MIOS_PARAMETER2
               00018 ;;
               00019 ;; 
               00020 ;; PIPELINE WORKFLOW:
               00021 ;; ------------------
               00022 ;; * Check MIDI CH. = Tone A
               00023 ;;      IF MIDI CH. MATCH: SWITCH TONE A (+ USER NOISE A) ON
               00024 ;;
               00025 ;; * CHECK IF USER ENVELOPE MODE TONE A IS ON
               00026 ;;      ON => WRITE ENVELOPE SHAPE TO AY CHIP
               00027 ;;      OFF=> DO NOT WRITE ENVELOPE SHAPE TO AY CHIP
               00028 ;;
               00029 ;; * CHECK DETUNE (PITCH BEND)
               00030 ;;      * Coarse
               00031 ;;      * Fine 
               00032 ;;
               00033 ;; * SEND TUNE TONE A to AY CHIP (incl. Detune (PITCH BEND))
               00034 ;;
               00035 ;; * CHECK IF VELOCITY TO VOLUME IS ON
               00036 ;;      yes: write VELOCITY to VOLUME A
               00037 ;;      no:  write USER VOLUME TO VOLUME TONE A
               00038 ;;
               00039 ;;
               00040 ;;              TONE A, B, C WORKFLOW
               00041 ;;              ---------------------
               00042 ;;      midi_evnt_note_on_pipeline_tone_a.inc
               00043 ;;                      ||
               00044 ;;                      \/
               00045 ;;      midi_evnt_note_on_pipeline_tone_b.inc
               00046 ;;                      ||
               00047 ;;                      \/
               00048 ;;      midi_evnt_note_on_pipeline_tone_c.inc
               00049 ;;                      ||
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 396


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00050 ;;                      \/
               00051 ;;              note_on_write_ay_reg7.inc
               00052 
6D9A           00053 MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_TONE_A_B_C
               00054 
               00055 ;; ---------[START TONE A WORKFLOW]------------ 
6D9A           00056 MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_A
               00057         ;; CHECK IF NOTE ON EVENT = TONE A MIDI CHANNEL
               00058         ;; IS MIDI EVENT MIDI CHANNEL = MIDI CHANNEL OF TONE A?
6D9A 5021      00059         movf MIDI_EVNT_CHANNEL, W
6D9C 6230      00060         cpfseq AY_TONE_A_MIDI_CHANNEL_USER
               00061                         
               00062                         ; NO, NOT MIDI CH USER TONE A  - GO AND CHECK B
6D9E EFBA F037 00063                         goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_B
               00064                 
               00065                 ;; YES
               00066                 ;; THERE IS A NOTE ON MIDI EVENT @ THE TONE A MIDI CHANNEL
               00067                 ;; WRITE MIDI Hz VALUE to TUNE TONE A 
6DA2 C003 F02C 00068                 movff MIOS_PARAMETER1, AY_TONE_A_TUNE_COARSE_MIDI
6DA6 C004 F029 00069                 movff MIOS_PARAMETER2, AY_TONE_A_TUNE_FINE_MIDI
               00070                 
               00071                 ;; MIDI FILTER:
               00072                 ;; MIDI SWITCH TONE A and NOISE A *ON*
               00073                 ;; CLEAR BIT0, BIT3
               00074                 ;; => FILTER FOR REG 7
               00075                 ;; => SWITCH ON TONE A, NOISE A  
6DAA 9022      00076                 bcf     AY_TONE_ABC_MIDI_ON_OFF, BIT0_TONE_A_ON_OFF
6DAC 9622      00077                 bcf     AY_TONE_ABC_MIDI_ON_OFF, BIT3_NOISE_A_ON_OFF
               00078 
               00079                 ;; WRITE CURREND *NOTE ON VALUE* @ MIDI Ch Tone A
               00080                 ;; FOR CHCKING if the Note OFF value correlates with the last
               00081                 ;; NOTE ON value (importend for MIDI KEYBOARD HANDLING of delayed NOTE OFF values) 
               00082                 ;; processing @ note_off.inc
6DAE C012 F01B 00083                 movff     MIDI_EVNT1, CURRENT_MIDI_EVENT_NOTE_ON_OFF_A
               00084 
               00085 
               00086         ;; CHECK IF FX A = ON or OFF
6DB2 A04D      00087         btfss FX_USER_ON_OFF_ABC, BIT0_FX_ON_OFF_TONE_A
               00088                         ;; NO, BIT0 IS NOT SET - Fx @ TONE A = off
               00089                         ;; DO NOT PERFORM Fx Note On Routines
               00090                         rgoto  MIDI_EVNT_NOTE_ON_TONE_A_CHCK_ENVELOPE_MODE
6DB4 D004          M         bra     label
               00091         
               00092                 ;; YES - DO Fx Note On Routines 
               00093                 ;; #####################################################
               00094                 ;; ### hier noch FX USER ON / OFF TONE ABC einbauen ####
               00095                 ;; For Fx Tunes #123
               00096                 ;; Save the last 3 Note Values
               00097                 ;; => @ fx_pipeline.inc
6DB6 EC48 F03E 00098                 call    WRITE_FX_TUNE_1_2_3     
               00099 
               00100                 ;; EVERY NEW NOTE ON EVENT IS A NEW Fx SESSION
               00101                 ;; CHANGE (inc) THE FX SESSION (WILL RESET FX POS)
6DBA 2A54      00102                 incf FX_MIDI_NOTE_ON_SESSION, F
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 397


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00103                 
               00104                 ;; SET FX MIDI NOTE ON FLAG @ TONE A
6DBC 804E      00105                 bsf Fx_MIDI_NOTE_ON_OR_OFF, BIT0_TONE_A_ON_OFF
               00106                 
               00107                 ;; ######################################################
               00108 
               00109 
6DBE           00110 MIDI_EVNT_NOTE_ON_TONE_A_CHCK_ENVELOPE_MODE
               00111 
               00112                 ;; -------------[ENVELOPE MODE?]------------------------
               00113                 ;; CHECK: IS ENVELOPE MODE @ TONE A ON?
               00114                 ;; BIT 4 SET    = ENV. MODE ON
               00115                 ;; BIT 4 CLEAT  = ENV. MODE OFF
6DBE B86C      00116                 btfsc AY_R8_CH_A_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00117                         ;; YES - BIT 4 is SET - ENV. MODE ON
               00118                         ;; GOTO WRITE ENV REG AY CHIP
               00119                         rgoto MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_A_ENV_MODE
6DC0 D001          M         bra     label
               00120                         ;; NO - BIT 4 is CLEAR - ENV. MODE OFF
               00121                         ;; NO NEED FOR WRITING AY REG 13
               00122                         ;; GO ON AND CHECK TONE A DETUNE
               00123                         rgoto MIDI_EVNT_NOTE_ON_CHECK_DETUNE_A
6DC2 D006          M         bra     label
               00124 
               00125         
6DC4           00126 MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_A_ENV_MODE
               00127                 ;; -------------[WRITE ENVELOPE MODE ON]------------------------
               00128                 ;; WRITE ENV. SHAPE CYCLE
               00129                 ;; SEND ENV DATA TO AY REG 13 (ENV. SHAPE/Cycle REG)
6DC4 0E0D      00130                 movlw AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE ; REG ADRESS of AY REGISTER
6DC6 6E39      00131                 movwf AY_REG_ADDRESS            
               00132                 ;; WRITE ENVELOPE SHAPE CYCLE DATA TO AY CHIP
6DC8 C071 F03A 00133                 movff AY_R13_ENV_SHAPE_CYCLE, AY_REG_DATA
               00134 
               00135                 ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
               00136                 ;; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
6DCC ECAA F01B 00137                 call LABEL_AY_SR_Write  
               00138                 ;; ==========================================================================================
               00139                         
               00140 
               00141 ;; -------------[DETUNE A]------------------
6DD0           00142 MIDI_EVNT_NOTE_ON_CHECK_DETUNE_A
               00143 
               00144 
               00145 ;; -------------[CHECK DETUNE A (PITCH BEND)]------------------------
               00146 
               00147 ;; * CHECK DETUNE (PITCH BEND)
               00148 ;;      * Coarse
               00149 ;;      * Fine 
               00150 
               00151 ;; -------------[CHECK COARSE DETUNE TONE A]---------------------------------------
6DD0           00152 MIDI_EVNT_NOTE_ON_CHECK_TONE_A_COARSE_DETUNE
               00153         ;; CHECK USER COARSE DETUNE @ TONE A?
               00154         ;: USER COARSE RANGE:
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 398


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00155         ;; (-) RANGE = [0 to 6]|OFFSET/ZERO = [7]| (+) RANGE = [8 to 15]
               00156         ;;
               00157         ;; AY_TONE_A_TUNE_COARSE_USER | COARSE DETUNE
               00158         ;; ...
               00159         ;; 3 ========================>| -4
               00160         ;; 4 ========================>| -3
               00161         ;; 5 ========================>| -2
               00162         ;; 6 ========================>| -1
               00163         ;; 7 ========================>|  0
               00164         ;; 8 ========================>| +1
               00165         ;; 9 ========================>| +2
               00166         
               00167         ;; IS USER COARSE TUNE = [7] ?
6DD0 0E07      00168         movlw   OFFSET_COARSE_TUNE_IS_7
6DD2 6226      00169         cpfseq  AY_TONE_A_TUNE_COARSE_USER      
               00170                 ;; NO: NOT 7, SO COARSE USER *DETUNE IS GIVEN*
               00171                 rgoto MIDI_EVNT_NOTE_ON_TONE_A_CHECK_COARSE_DETUNE_PLUS_OR_MINUS
6DD4 D002          M         bra     label
               00172                 ;; YES: COARSE DETUNE = 7, SO *NO COARSE DETUNE IS GIVEN*
               00173                 ;; GO ON WITH DETUNE FINE
6DD6 EF0D F037 00174                 goto    MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE
               00175 
               00176 
6DDA           00177 MIDI_EVNT_NOTE_ON_TONE_A_CHECK_COARSE_DETUNE_PLUS_OR_MINUS
               00178                 ;; CHECK COARSE DETUNE = (+) or (-)
               00179                 ;; COARSE TUNE IS <> 7 SO COARSE REG DETUNE
               00180                 ;; IS GIVEN @ TONE A
               00181                 ;; RANGE (-) = [0-6] |(No DETUNE) = [7] | (+) = [8-15]
6DDA 0E06      00182                 movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06
6DDC 6426      00183                 cpfsgt  AY_TONE_A_TUNE_COARSE_USER      
               00184                         ;; NO 
               00185                         ;; SO COARSE DETUNE = (-) = RANGE [0 to 6]
               00186                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_IS_MINUS
6DDE D001          M         bra     label
               00187                         ;; YES
               00188                         ;; SO COARSE DETUNE = (+) = RANGE [8 to 15]
               00189                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_IS_PLUS
6DE0 D00E          M         bra     label
               00190                         
               00191 
6DE2           00192 MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_IS_MINUS
               00193         ;; DETUNE COARSE IS NEGATIVE
               00194         ;; -------------------------
               00195         ;; calculate COARSE DETUNE (-) VALUE:
               00196         ;; WREG [(0x07 (+1 [PLUS_1_CARRY_BIT_KILLER])] - F [(0x00 to 0x06)| (+1 Carry BIT (of subfwb))] 
               00197         ;; WRITE RESULT TO => [WREG (0x07 to 0x01)]
               00198         ;; TO GET THE (-) COARSE TUNE RESULT [RANGE: 0x07 to 0x01]
               00199         
               00200         
               00201         ;; (1) MOVE OFFSET TO WREG and
               00202         ;; (3)Subtract f from WREG 
               00203         ;; the CARRY bit will allway be set
               00204         ;; because WREG is (allways in this case) > f) 
               00205         ;; (2) SO WE NEED TO ADD +1 TO WREG
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 399


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00206         ;; for [+1 WREG] - [+1 Carry BIT] = 0 (the needed offset)
6DE2 0E07      00207         movlw   OFFSET_COARSE_TUNE_IS_7 ;; (1)
6DE4 0F01      00208         addlw   PLUS_1_CARRY_BIT_KILLER ;; (2)
6DE6 5426      00209         subfwb  AY_TONE_A_TUNE_COARSE_USER, W ;; (3)
               00210         
               00211         ;; ADD (*) COARSE MINUS DETUNE [WREG (RANGE 0x01 to 0x07)] 
               00212         ;; TO THE COARSE "NOTE ON VALUE" 
               00213         ;; DON'T BE CONFUSED (*):
               00214         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00215         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
6DE8 262C      00216         addwf   AY_TONE_A_TUNE_COARSE_MIDI, F
               00217         
               00218                 ;; TUNE COARSE TUNE RANGE = BIN 00000000 to 00001111 (DEC. 0 to 15)
               00219                 ;; TUNE COARSE TUNE > BIN 00001111? 
6DEA 0E0F      00220                 movlw   NIBBLE_B00001111
6DEC 642C      00221                 cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00222                                                 ;; NO
               00223                                                 ;; OK, GO ON WITH DETUNE FINE
6DEE EF0D F037 00224                                                 goto    MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE
               00225 
               00226                         ;; YES - COASE TUNE REG VALUE IS > 0x0F NO VALID VALUE FOR THE AY CHIP!
               00227                         ;; SWITCH TUNE COARSE REG TO 0x0F
               00228                         ;; GO AND WRITE MAXIMUM VALUE TO COARSE and FINE REG
               00229                         rgoto   MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_A_TO_MAX_VALUE
6DF2 D000          M         bra     label
               00230 
               00231 
6DF4           00232 MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_A_TO_MAX_VALUE
               00233                                 ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
6DF4 0E0F      00234                                 movlw COARSE_TUNE_MAX_VALUE_B00001111
6DF6 6E2C      00235                                 movwf AY_TONE_A_TUNE_COARSE_MIDI
6DF8 0ED2      00236                                 movlw FINE_TUNE_MAX_VALUE_B11010010
6DFA 6E29      00237                                 movwf AY_TONE_A_TUNE_FINE_MIDI
               00238 
               00239                                                 ;; GO ON WITH DETUNE FINE
               00240                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE
6DFC D00E          M         bra     label
               00241 
               00242 ;; ------------------------[DETUNE COARSE POSITIVE]----------------------------
               00243 
6DFE           00244 MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_IS_PLUS
               00245         ;; DETUNE IS POSITIVE
6DFE 0E07      00246         movlw   OFFSET_COARSE_TUNE_IS_7
6E00 5C26      00247         subwf   AY_TONE_A_TUNE_COARSE_USER, W           ; - 0x07 (OFFSET IN W REG)
6E02 6E2F      00248         movwf   AY_DETUNE_TEMP                          ; SAVE (+) COARSE DETUNE VALUE
               00249 
               00250         ;; NOW COARSE DETUNE IS IN WREG
               00251         ;; (+) COARSE DETUNE RANGE => [0x01 to 0x08]            
               00252         ;; COMPARE W REG WITH COARSE TUNE MIDI VALUE
               00253         ;; IS THE COASE MIDI VALUE > COASE DETUNE VALUE IN W REG
               00254         ;; NEXT STEP: SUBTRACT [(+) DETUNE COARSE] FROM [MIDI COARSE TUNE]
               00255         ;; BUT WE MUST FIRS CHECK IF THERE WILL BE A VALID VALUE
               00256         ;; COMPARE W REG [(+) DETUNE COARSE] WITH [COARSE TUNE MIDI] 
               00257         ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 400


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6E04 642C      00258         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00259                 ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
               00260                 ;; NO - SO SET TUNE REGS TO MIN. VALUE  = HIGHEST TUNE
               00261                 rgoto   MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_A_TO_HIGHEST_TUNE
6E06 D001          M         bra     label
               00262 
               00263                 ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
               00264                 ;; YES - OK GO ON
               00265                 rgoto   MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_ADDITIVE_GO_ON
6E08 D005          M         bra     label
               00266 
               00267 
6E0A           00268 MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_A_TO_HIGHEST_TUNE
               00269                         ;; SET TUNE REGS TO HIGHEST FREQUENCY POSSIBLE
               00270                         ;; THAT MEANS TO SET TUNE REGS TO MIN. VALUE
               00271                         ;; MIN VALUE = HIGHEST TUNE
6E0A 0E00      00272                         movlw  COARSE_TUNE_MIN_VALUE_B00000000
6E0C 6E2C      00273                         movwf  AY_TONE_A_TUNE_COARSE_MIDI
6E0E 0E0A      00274                         movlw  FINE_TUNE_MIN_VALUE_B00001010
6E10 6E29      00275                         movwf  AY_TONE_A_TUNE_FINE_MIDI
               00276                                                 ;; GO ON WITH DETUNE FINE
               00277                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE
6E12 D003          M         bra     label
               00278 
6E14           00279 MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_ADDITIVE_GO_ON
               00280                         ;; ADD THE (+) USER COARSE DETUNE FREQUENCY VALUE NOW
               00281                         ;; THIS MEANS TO SUBTRACT COARSE DETUNE VALUE from the COARSE "NOTE ON" MIDI VALUE 
               00282                         ;; YES THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00283                         ;; TUNE FREQUENCY "+" = "-" @ TUNE REGISTER
6E14 502F      00284                         movf    AY_DETUNE_TEMP, W
6E16 5E2C      00285                         subwf   AY_TONE_A_TUNE_COARSE_MIDI, F
               00286                                         
               00287                                                 ;; GO ON WITH DETUNE FINE
               00288                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE
6E18 D000          M         bra     label
               00289 
               00290 ;; -------------[END OF DETUNE COASE TONE A ]--------------     
               00291 
               00292 ;; -------------[CHECK DETUNE FINE Tone A   ]---------------
6E1A           00293 MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE
               00294         ;;CHECK USER DETUNE (PITCH BEND)
6E1A 0E80      00295         movlw   OFFSET_FINE_TUNE_IS_128
               00296         ;; TONE A FINE TUNE = 128? 
               00297         ;; 128 = INITIAL VALUE = NO USER DETUNE
6E1C 6223      00298         cpfseq  AY_TONE_A_TUNE_FINE_USER        
               00299                         ;; NO, NOT 128 - SO *DETUNE IS GIVEN*
               00300                         ;; START WITH TONE A - CHECK USER TONE A - FINE TUNE
               00301                         rgoto MIDI_EVNT_NOTE_ON_CHECK_DETUNE_A_FINE_IS_PLUS_OR_MINUS
6E1E D001          M         bra     label
               00302 
               00303                         ;; YES AY_TONE_A_TUNE_FINE_USER = 128 *NO DETUNE IS GIVEN*
               00304                         ;; Go AND WRITE TUNE TO AY CHIP
               00305                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6E20 D05F          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 401


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00306 
               00307 
6E22           00308 MIDI_EVNT_NOTE_ON_CHECK_DETUNE_A_FINE_IS_PLUS_OR_MINUS
               00309         ;; CHECK IF USER DETUNE IS (+) OR (-)
6E22 0E7F      00310         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F
               00311         ;; TONE A FINE TUNE > 127? 
6E24 6423      00312         cpfsgt  AY_TONE_A_TUNE_FINE_USER        
               00313 
               00314                         ;; NO => USER FINE DETUNE => (-)
               00315                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_MINUS
6E26 D001          M         bra     label
               00316                         
               00317                         ;; YES => USER FINE DETUNE => (+)
               00318                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_PLUS
6E28 D02D          M         bra     label
               00319 
               00320 ;; -----------[PITCH BEND TONE A == NEGATIVE]--------------
6E2A           00321 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_MINUS      
               00322         ;; DETUNE IS NEGATIVE - LOWER FREQUENCY
               00323         ;; (-) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [0   to 127] DETUNE IS NEGATIVE (HERE)
               00324         ;; (+) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [128 to 255] DETUNE IS POSITIVE
               00325         ;; (NO DETUNE) : AY_TONE_A_TUNE_FINE_USER = [128]
               00326         
               00327         ;; WRITE 128 TO WREG
               00328         ;; WREG [(128) + (1 (CARRY KILLER))] - [[AY_TONE_A_TUNE_FINE_USER |(0 to 127)] + [+1 (CARRY)]]
               00329         ;; WRITE RESULT TO => [WREG]
6E2A 0E80      00330         movlw   OFFSET_FINE_TUNE_IS_128 
6E2C 0F01      00331         addlw   PLUS_1_CARRY_BIT_KILLER
6E2E 5423      00332         subfwb  AY_TONE_A_TUNE_FINE_USER, W 
               00333         ;; WRITE RESULT TO [WREG] TO => [AY_DETUNE_TEMP]
6E30 6E2F      00334         movwf   AY_DETUNE_TEMP
               00335         ;; [AY_DETUNE_TEMP] RANGE => [1 to 128]
               00336         
               00337         ;; So the [USER DETUNE RANGE] => [-1 to -128] 
               00338         ;; Expand the (-) RANGE to 8BIT (255):
               00339         ;; 2x (-1 to -128) => (-2 to -256(!))
6E32 262F      00340         addwf   AY_DETUNE_TEMP, F
               00341         ;; -1 | => (1 to 255)
6E34 062F      00342         decf    AY_DETUNE_TEMP, F
               00343         ;; WRITE [(-) DETUNE FINE] TO [WREG]
               00344         ;; (-) RANGE => [1 to 255]
               00345 
               00346 ;; ------[DETUNE NEGATIVE RATIO CHANGE?]------------------
               00347 
               00348         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00349         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00350         ;; 4 to 15 => NO RATIO CHANGE
6E36 0E03      00351         movlw   0x03     
6E38 642C      00352         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00353 
               00354                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00355                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00356                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE
6E3A D001          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 402


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00357                         
               00358                         ;; YES [MIDI TUNE COARSE REG > 3]
               00359                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00360                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_GO_ON       
6E3C D013          M         bra     label
               00361 
6E3E           00362 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE
               00363         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00364         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00365         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00366         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6E3E 502C      00367         movf AY_TONE_A_TUNE_COARSE_MIDI, W
               00368         JUMPTABLE_2BYTES 4
6E40 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6E42 B0D8          M         skpnc
6E44 0EFC          M         movlw   -(max_value)
6E46 0F04          M         addlw   max_value
6E48 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00369                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
6E4C D003          M         bra     label
               00370                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
6E4E D004          M         bra     label
               00371                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
6E50 D005          M         bra     label
               00372                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
6E52 D006          M         bra     label
               00373         
               00374 ;; ADJUST PITCH BEND RATIO
               00375 ;; JUMP IN HERE = PITCH BAND /16
6E54           00376 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x
6E54 422F      00377                 rrncf   AY_DETUNE_TEMP, F
6E56 9E2F      00378                 bcf     AY_DETUNE_TEMP, 7
               00379 ;; JUMP IN HERE = PITCH BAND /8
6E58           00380 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x
6E58 422F      00381                 rrncf   AY_DETUNE_TEMP, F
6E5A 9E2F      00382                 bcf     AY_DETUNE_TEMP, 7
               00383 ;; JUMP IN HERE = PITCH BAND /4
6E5C           00384 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x
6E5C 422F      00385                 rrncf   AY_DETUNE_TEMP, F
6E5E 9E2F      00386                 bcf     AY_DETUNE_TEMP, 7
               00387 ;; JUMP IN HERE = PITCH BAND /2
6E60           00388 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x
6E60 422F      00389                 rrncf   AY_DETUNE_TEMP, F
6E62 9E2F      00390                 bcf     AY_DETUNE_TEMP, 7
               00391         
               00392 ;; ------[DETUNE RATIO CHANGE END]------------------
               00393 
6E64           00394 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_GO_ON     
               00395         ;; >> ADD (-) DETUNE to "NOTE ON" VALUE <<
               00396         ;; DON'T BE CONFUSED: 
               00397         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00398         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
6E64 90D8      00399         clrc    ;; CLEAR CARRY BIT
6E66 502F      00400         movf    AY_DETUNE_TEMP, W
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 403


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6E68 2629      00401         addwf   AY_TONE_A_TUNE_FINE_MIDI, F
               00402             
               00403             ;;  *carry flag* is set when an instruction overflows a register.
               00404             ;;  branch if a carry flag is true - INC the 4 BIT COARSE TUNE REG
6E6A E201      00405             bc MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_A_INC
               00406                         
               00407                                 ;; Go AND WRITE TUNE TO AY CHIP
               00408                                 rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6E6C D039          M         bra     label
               00409 
6E6E           00410 MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_A_INC
               00411         ;; THE CARRY FLAG HAS BEEN SET (OVERFLOW OF FINE TUNE REG)
               00412         ;; CHECK MIDI COASE REG = 0x0F ? 
               00413         ;; IS COARSE TUNE REG > BIN xxxx1110 ? => 14 (15 = higest Value) 
6E6E 0E0E      00414         movlw   COARSE_TUNE_MAX_MINUS_1_B00001110
6E70 642C      00415         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00416 
               00417                         ;; NO - COARSE REG TUNE RANGE IS [0 to 14]
               00418                         ;; OK SO COASE REG IS VALID
               00419                         rgoto MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_A_INC
6E72 D001          M         bra     label
               00420 
               00421                         ;; YES - NO INC OF COARSE REG POSSIBLE
               00422                         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG. 
               00423                         rgoto MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_A
6E74 D002          M         bra     label
               00424 
               00425 
6E76           00426 MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_A_INC        
               00427         ;; INC PITCH CARRY FROM FINE-TUNE REG 
               00428         ;; +1 to COASE TUNE REG 
6E76 2A2C      00429         incf AY_TONE_A_TUNE_COARSE_MIDI, F
               00430         
               00431                                 ;; Go AND WRITE TUNE TO AY CHIP
               00432                                 rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6E78 D033          M         bra     label
               00433 
6E7A           00434 MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_A
               00435         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
6E7A 0E0F      00436         movlw  COARSE_TUNE_MAX_VALUE_B00001111
6E7C 6E2C      00437         movwf  AY_TONE_A_TUNE_COARSE_MIDI
6E7E 0ED2      00438         movlw  FINE_TUNE_MAX_VALUE_B11010010
6E80 6E29      00439         movwf  AY_TONE_A_TUNE_FINE_MIDI
               00440         
               00441                                 ;; Go AND WRITE TUNE TO AY CHIP
               00442                                 rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6E82 D02E          M         bra     label
               00443 
               00444 ;                       
               00445                 
               00446 ;; -----------[PITCH BEND FINE TONE A == POSITIVE]--------------
6E84           00447 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_PLUS
               00448         ;; DETUNE IS POSITIVE - HIGHER FREQUENCY
               00449         ;; (+) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [129 to 255] DETUNE IS POSITIVE (HERE)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 404


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00450         ;; (-) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [0   to 127] DETUNE IS NEGATIVE 
               00451         ;; (NO DETUNE) : AY_TONE_A_TUNE_FINE_USER = [128]
               00452         
               00453         ;; OFFSET JUSTAGE
               00454         ;; WRITE 128 TO WREG
6E84 0E80      00455         movlw   OFFSET_FINE_TUNE_IS_128
               00456         ;; {[AY_TONE_A_TUNE_FINE_USER | (129 to 255)] - [WREG|(128)]} WRITE TO => [WREG]
6E86 5C23      00457         subwf   AY_TONE_A_TUNE_FINE_USER, W             ; - 0x80 = OFFSET
               00458                 ;; RANGE JUSTAGE
               00459                 ;; WRITE [WREG] TO => [AY_DETUNE_TEMP]
               00460                 ;; RANGE == [+1 to +128]
6E88 6E2F      00461                 movwf   AY_DETUNE_TEMP
               00462                 ;; 2x => (+2 to +256)
6E8A 262F      00463                 addwf   AY_DETUNE_TEMP, F
               00464                 ;; -1 => (+1 to +255)
6E8C 062F      00465                 decf    AY_DETUNE_TEMP, F
               00466 
               00467 ;; ------[DETUNE RATIO CHANGE?]------------------
               00468         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00469         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00470         ;; 4 to 15 => NO RATIO CHANGE
6E8E 0E03      00471         movlw   0x03     
6E90 642C      00472         cpfsgt  AY_TONE_A_TUNE_COARSE_MIDI      
               00473 
               00474                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00475                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00476                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE
6E92 D001          M         bra     label
               00477                         
               00478                         ;; YES [MIDI TUNE COARSE REG > 3]
               00479                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00480                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_GO_ON
6E94 D013          M         bra     label
               00481 
6E96           00482 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE      
               00483         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00484         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00485         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00486         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
6E96 502C      00487         movf AY_TONE_A_TUNE_COARSE_MIDI, W
               00488         JUMPTABLE_2BYTES 4
6E98 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
6E9A B0D8          M         skpnc
6E9C 0EFC          M         movlw   -(max_value)
6E9E 0F04          M         addlw   max_value
6EA0 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00489                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
6EA4 D003          M         bra     label
               00490                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
6EA6 D004          M         bra     label
               00491                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
6EA8 D005          M         bra     label
               00492                 rgoto        MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
6EAA D006          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 405


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00493         
               00494         
               00495         
               00496 ;; ADJUST PITCH BEND RATIO
               00497 ;; JUMP IN HERE = PITCH BAND /16
6EAC           00498 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x 
6EAC 422F      00499                 rrncf   AY_DETUNE_TEMP, F
6EAE 9E2F      00500                 bcf     AY_DETUNE_TEMP, 7
               00501 ;; JUMP IN HERE = PITCH BAND /8
6EB0           00502 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x
6EB0 422F      00503                 rrncf   AY_DETUNE_TEMP, F
6EB2 9E2F      00504                 bcf     AY_DETUNE_TEMP, 7
               00505 ;; JUMP IN HERE = PITCH BAND /4
6EB4           00506 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x
6EB4 422F      00507                 rrncf   AY_DETUNE_TEMP, F
6EB6 9E2F      00508                 bcf     AY_DETUNE_TEMP, 7
               00509 ;; JUMP IN HERE = PITCH BAND /2
6EB8           00510 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x
6EB8 422F      00511                 rrncf   AY_DETUNE_TEMP, F
6EBA 9E2F      00512                 bcf     AY_DETUNE_TEMP, 7
               00513 
               00514 ;; ------[DETUNE RATIO CHANGE END]------------------
               00515 
6EBC           00516 MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_GO_ON
               00517 ;; ------WRITE DETUNE TO MIDI TUNE FINE REG
               00518         
               00519                 ;; CHECK: DO WE NEED TO SUBTRACT THE NEGATIVE CARRY BIT
               00520                 ;; FROM THE MIDI TUNE COARSE REG?
               00521                 ;; IS [DETUNE FINE] > W [TONE FINE MIDI] ?
               00522                 ;; // [DETUNE FINE] MUST BE = or < THEN [TONE FINE MIDI]
               00523                 ;; // otherwise WE HAVE DO DEC -1 @ [COARSE MIDI REG]
6EBC 5029      00524                 movf    AY_TONE_A_TUNE_FINE_MIDI, W 
6EBE 642F      00525                 cpfsgt  AY_DETUNE_TEMP                  
               00526                                                 
               00527                         ;; NO
               00528                         ;; W [MIDI FINE REG] WAS > F [DETUNE FINE]
               00529                         ;; or W [MIDI FINE REG]  = F [DETUNE FINE]
               00530                         ;; SO WE CAN GO ON 
               00531                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_A
6EC0 D001          M         bra     label
               00532                 
               00533                         ;; YES 
               00534                         ;; F [PITCH BEND] WAS > W [MIDI FINE REG]
               00535                         ;; SO WE HAVE DO DEC -1 [COARSE MIDI REG]
               00536                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_A_DEC   
6EC2 D003          M         bra     label
               00537 
               00538 
6EC4           00539 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_A        
               00540         ;; WRITE THE POSITIVE PITCH BEND TO THE "NOTE ON MIDI VALUE" [FINE TUNE + COARSE TUNE REG]
               00541         ;; SUBTRACT DETUNE (THE POSITIVE PITCH BEND) from "NOTE ON" MIDI VALUE 
               00542         ;; THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00543         ;; TUNE "+" = "-" @ TUNE REG (LOGIC => AY SOUND CHIP)
6EC4 502F      00544         movf    AY_DETUNE_TEMP, W
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 406


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6EC6 5E29      00545         subwf   AY_TONE_A_TUNE_FINE_MIDI, F
               00546                                                         ;; OK, FINE DETUNE IS DONE
               00547                                                         ;; Go AND WRITE TUNE TO AY CHIP
               00548                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6EC8 D00B          M         bra     label
               00549 
               00550 
               00551 
6ECA           00552 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_A_DEC
               00553         ;; FIRST: WRITE THE POSITIVE PITCH BEND TO THE "NOTE ON MIDI VALUE" [FINE TUNE + COARSE TUNE REG]
               00554         ;; SUBTRACT DETUNE (THE POSITIVE PITCH BEND) from "NOTE ON" MIDI VALUE 
               00555         ;; THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00556         ;; TUNE "+" = "-" @ TUNE REG (LOGIC => AY SOUND CHIP)
6ECA 502F      00557         movf    AY_DETUNE_TEMP, W
6ECC 5E29      00558         subwf   AY_TONE_A_TUNE_FINE_MIDI, F
               00559         
               00560                                 ;; WE HAVE TO DEC THE VALUE OF COARSE REG -1
               00561                                 ;; BUT CHECK MIDI COASE REG = 0x00 ? 
               00562                                 ;; BECAUSE => 0x00 = INVALID VALUE 
6ECE 0E00      00563                                 movlw   0x00
6ED0 622C      00564                                 cpfseq  AY_TONE_A_TUNE_COARSE_MIDI
               00565 
               00566                                         ;; NO - OK COARSE REG IS > 0 - SO GO ON WITH DEC COASE TUNE REG | -1
               00567                                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_A_GO_ON
6ED2 D001          M         bra     label
               00568 
               00569                                         ;; YES - COARSE REG = 0 
               00570                                         ;; WE CAN NOT DEC. COARSE REG (ALLREADY 0x00)
               00571                                         ;; SO WRITE THE highest PITCH BEND DATA as possible TO THE 
               00572                                         ;; FINE AND COARSE REG instead
               00573                                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_A
6ED4 D002          M         bra     label
               00574 
               00575 
6ED6           00576 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_A_GO_ON  
               00577         
               00578                                                 ;; DEC DETUNE CARRY FROM FINETUNE REG (MINUS CARY) 
               00579                                                 ;; -1 to COASE TUNE REG 
6ED6 062C      00580                                                 decf AY_TONE_A_TUNE_COARSE_MIDI, F
               00581         
               00582                                                         ;; Go AND WRITE TUNE TO AY CHIP
               00583                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6ED8 D003          M         bra     label
               00584 
               00585 
6EDA           00586 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_A
               00587         
               00588                                                 ;; THE TUNE WOULD BE OUT OF RANGE 
               00589                                                 ;; SO SET FINE TUNE REG TO 0x0A (highest value that is VALID)
               00590                                                 ;; COARSE TUNE REG IS ALLREADY 0x00
6EDA 0E0A      00591                                                 movlw   FINE_TUNE_MIN_VALUE_B00001010
6EDC 6E29      00592                                                 movwf   AY_TONE_A_TUNE_FINE_MIDI
               00593         
               00594                                                         ;; Go AND WRITE TUNE TO AY CHIP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 407


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00595                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
6EDE D000          M         bra     label
               00596 
               00597 ;; -------------[END OF DETUNE TONE A FINE ]--------------              
               00598 
               00599 
               00600 ;; -------------[SEND TUNE TONE A DATA TO AY CHIP]--------------
6EE0           00601 MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP
               00602         ;; SEND TUNE A TO AY CHIP
6EE0 0E01      00603         movlw  AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE
6EE2 6E39      00604         movwf  AY_REG_ADDRESS                   ; ADDRESS FOR => AY_SR_Write
               00605         
6EE4 502C      00606         movf  AY_TONE_A_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
6EE6 6E3A      00607         movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00608         
6EE8 ECAA F01B 00609                 call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00610                                                 ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00611 
6EEC 0E00      00612         movlw  AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE
6EEE 6E39      00613         movwf  AY_REG_ADDRESS                   ; ADDRESS FOR => AY_SR_Write
               00614 
6EF0 5029      00615         movf  AY_TONE_A_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
6EF2 6E3A      00616         movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00617         
6EF4 ECAA F01B 00618                 call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00619                                                 ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00620 
               00621 ;; -------------------------------[END OF DETUNE TONE A ]--------------------------------------------
               00622 
               00623 ;; ----------------------------[CHECK VELOCITY TO NOISE PERIOD @ TONE A]-------------------------
               00624 
               00625         ;; CHECK IF BIT3 is SET
6EF8 A633      00626         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00627                 ;; NO, BIT3 IS NOT SET
               00628                 ;; THERE IS NO VELOCITY TO NOISE PERIOD 
               00629                 ;; SO QUIT HERE AND GO ON WITCH CHECKING THE VELOCITY TO VOLUME @ TONE A
               00630                 rgoto  MIDI_EVNT_TONE_A_CHECK_VELOCITY
6EFA D01B          M         bra     label
               00631         
               00632                 ;; YES - BIT3 IS SET - CHECK IF VELOCITY IS @ TONE A
               00633                 rgoto  MIDI_EVNT_TONE_A_CHECK_VELOCITY_TO_NOISE_PERIOD
6EFC D000          M         bra     label
               00634 
6EFE           00635 MIDI_EVNT_TONE_A_CHECK_VELOCITY_TO_NOISE_PERIOD
               00636         ;; YES - BIT3 IS SET [VELOCITY TO NOISE PERIOD = ON]
               00637         ;; CHECK IF VELOCITY IS @ TONE A => BIT5
6EFE AA33      00638         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF
               00639                 ;; NO, BIT5 IS NOT SET
               00640                 ;; THERE IS NO VELOCITY TO NOISE PERIOD @ TONE A 
               00641                 ;; SO QUIT HERE AND GO ON WITCH CHECKING THE VELOCITY TO VOLUME @ TONE A
               00642                 rgoto MIDI_EVNT_TONE_A_CHECK_VELOCITY
6F00 D018          M         bra     label
               00643         
               00644                 ;; YES - BIT5 IS SET - WRITE VELOCITY TONE A TO NOISE PERIOD 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 408


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00645                 rgoto MIDI_EVNT_TONE_A_WRITE_VELOCITY_TO_NOISE_PERIOD
6F02 D000          M         bra     label
               00646 
6F04           00647 MIDI_EVNT_TONE_A_WRITE_VELOCITY_TO_NOISE_PERIOD
               00648         ;; CONVERT MIDI DATA 7BIT (0-127) TO NOISE PERIOD 5BIT(0-31)
               00649         ;; {NOISE TONE 5BIT} = {MIDI DATA 7BIT}/4
               00650 
               00651         ;; WRITE MIDI DATA BYTE2 0-127 
               00652         ;; TO AY_MIDI_VELOCITY_TO_VOLUME
6F04 C013 F035 00653         movff   MIDI_EVNT_VALUE, AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00654               
               00655                   
               00656               ;; convert AY_MIDI_VELOCITY_TO_NOISE_PERIOD 8bit to 5bit (0-31 dec.)
               00657               ;; divide ==> (MIDI DATA)/4
6F08 4235      00658               rrncf     AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F      ;; /2
6F0A 9E35      00659               bcf       AY_MIDI_VELOCITY_TO_NOISE_PERIOD, 7
6F0C 4235      00660               rrncf     AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F      ;; /4
6F0E 9E35      00661               bcf       AY_MIDI_VELOCITY_TO_NOISE_PERIOD, 7
               00662               
               00663 
               00664               
6F10 0E1F      00665               movlw 0x1F ;; BIN 0001 1111
6F12 1635      00666               andwf AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F
               00667 
               00668               ;; NOW THE VELOCITY IS IN THE 5 LOWER BITS (0-31 dec.)
               00669               ;; AY_MIDI_VELOCITY_TO_NOISE_PERIOD => BIN '000V VVVV'
               00670               
6F14 0E20      00671               movlw 0x20 ;; BIN 0010 0000 (32 dec.)
6F16 5635      00672               subfwb AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F
               00673 
6F18 0E1F      00674                 movlw 0x1F
6F1A 6435      00675                 cpfsgt AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00676 
               00677                       ;; NO, OK
               00678                       rgoto MIDI_EVNT_TONE_A_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW
6F1C D003          M         bra     label
               00679         
               00680                       ;; YES - MAKE  AY_MIDI_VELOCITY_TO_NOISE_PERIOD VALID
               00681                       rgoto MIDI_EVNT_TONE_A_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD
6F1E D000          M         bra     label
               00682 
6F20           00683 MIDI_EVNT_TONE_A_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD
               00684         ;; MAKE VELOCITY VALUE VALID [xxxV VVVV]
6F20 0E1F      00685         movlw 0x1F 
6F22 6E35      00686         movwf AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00687               
6F24           00688 MIDI_EVNT_TONE_A_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW           
               00689         ;; -------------[SEND VELOCITY TO NOISE PERIOD REG 6]------------------------
6F24 0E06      00690         movlw AY_CHIP_ADR_06_NOISE_PERIOD       ; REG ADRESS    => AY REGISTER
6F26 6E39      00691         movwf AY_REG_ADDRESS                    ; ADDRESS FOR   => AY_SR_Write
               00692         
               00693         ;; WRITE AY_MIDI_VELOCITY_TO_VOLUME TO AY_REG_DATA
6F28 C035 F03A 00694         movff AY_MIDI_VELOCITY_TO_NOISE_PERIOD, AY_REG_DATA
               00695 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 409


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00696                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
6F2C ECAA F01B 00697                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00698                 ;; ==========================================================================================
               00699 
               00700                         ;; NEXT Check Velocity
               00701                         rgoto MIDI_EVNT_TONE_A_CHECK_VELOCITY 
6F30 D000          M         bra     label
               00702 
               00703 
               00704 ;; ----------------------------[VELOCITY TONE A]-------------------------
               00705 ;; ----------------------------------------------------------------------------
6F32           00706 MIDI_EVNT_TONE_A_CHECK_VELOCITY
               00707 
               00708         ;; WRITE VELOYTY TO VOLUME IF BIT 0 OF 
               00709         ;; AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF = SET
6F32 B033      00710         btfsc AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT0_VELOCITY_ON_OFF_TONE_A ;; CHK BIT0
               00711                 
               00712                 ;; NO - BIT0 = SET SO => DO WRITE VELOCITY TO VOLUME
               00713                 rgoto  MIDI_EVNT_TONE_A_SEND_VELOCITY_TO_VOLUME
6F34 D009          M         bra     label
               00714                 
               00715                 
               00716                 ;; YES - BIT0 = CLEAR => DO NOT WRITE VELOCITY TO VOLUME
               00717                 rgoto MIDI_EVNT_TONE_A_SEND_VELOCITY_NOT_TO_VOLUME
6F36 D000          M         bra     label
               00718 
               00719 
6F38           00720 MIDI_EVNT_TONE_A_SEND_VELOCITY_NOT_TO_VOLUME
               00721                 ;; DO NOT WRITE VELOCITY TO TONE A VOLUME
               00722                 ;; WRITE USER VOLUME TO TONE A
               00723 
               00724         ;; -------------[SEND REG8 AMPLITUDE TO TONE A - USER VOLUME 0-15]------------------------
6F38 0E08      00725         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF  ; REG ADRESS        => AY REGISTER
6F3A 6E39      00726         movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00727         
               00728         ;; WRITE AY_R8_CH_A_AMPLITUDE TO AY_REG_DATA
6F3C C06C F03A 00729         movff AY_R8_CH_A_AMPLITUDE, AY_REG_DATA
               00730 
               00731         ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
6F40 ECAA F01B 00732         call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00733         ;; ==========================================================================================
               00734                 
               00735                                         ;; NEXT TONE B
6F44 EFBA F037 00736                                         goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_B
               00737 
               00738 ;; --------------------------------------------------------------------
               00739 
6F48           00740 MIDI_EVNT_TONE_A_SEND_VELOCITY_TO_VOLUME
               00741         ;; CONVERT MIDI DATA 7BIT (0-127) TO VOLUME TONE A 4BIT(0-15)
               00742         ;; {VOLUME TONE 4BIT} = {MIDI DATA 7BIT}/8
               00743 
               00744         ;; WRITE MIDI DATA BYTE2 0-127 
               00745         ;; TO AY_MIDI_VELOCITY_TO_VOLUME
6F48 C013 F034 00746         movff   MIDI_EVNT_VALUE, AY_MIDI_VELOCITY_TO_VOLUME
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 410


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00747               
               00748                   
               00749               ;; convert AY_MIDI_VELOCITY_TO_VOLUME
               00750               ;; divide ==> (MIDI DATA)/8
6F4C 4234      00751               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /2
6F4E 9E34      00752               bcf       AY_MIDI_VELOCITY_TO_VOLUME, 7
6F50 4234      00753               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /4
6F52 9E34      00754               bcf       AY_MIDI_VELOCITY_TO_VOLUME, 7
6F54 4234      00755               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /8
6F56 9E34      00756               bcf       AY_MIDI_VELOCITY_TO_VOLUME, 7
               00757 
               00758               
6F58 0E0F      00759               movlw 0x0F ;; BIN 00001111
6F5A 1634      00760               andwf AY_MIDI_VELOCITY_TO_VOLUME, F
               00761 
               00762               ;; NOW THE VELOCITY IS IN THE 4 LOWER BITS (0-15 dec.)
               00763               ;; AY_MIDI_VELOCITY_TO_VOLUME => BIN '0000 VVVV'
               00764               
               00765               ;; COPY THE LOWER 4 BIT [BIT0-to 3] = (VELOCITY VOLUME (0-15))
               00766               ;; TO AY AMPLITUDE REG TONE A = REG 8
               00767               ;; BUT SAVE THE BIT4 = AMPLITUDE MODE!
               00768               
               00769               ;; COPY THE ENV. MODE BIT       
               00770               ;; WRITE 0 TO BIT0-3 
6F5C 0EF0      00771               movlw 0xF0 ;; BIN 1111 0000
6F5E 146C      00772               andwf AY_R8_CH_A_AMPLITUDE, W
               00773 
6F60 1034      00774               iorwf AY_MIDI_VELOCITY_TO_VOLUME, W
6F62 6E34      00775               movwf AY_MIDI_VELOCITY_TO_VOLUME
               00776 
               00777         ;; -------------[SEND VELOCITY AMPLITUDE TO TONE A]------------------------
6F64 0E08      00778         movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF  ; REG ADRESS        => AY REGISTER
6F66 6E39      00779         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00780         
               00781         ;; WRITE AY_MIDI_VELOCITY_TO_VOLUME TO AY_REG_DATA
6F68 C034 F03A 00782         movff AY_MIDI_VELOCITY_TO_VOLUME, AY_REG_DATA
               00783 
               00784                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
6F6C ECAA F01B 00785                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00786                 ;; ==========================================================================================
               00787 
               00788 
               00789 ;; -------------[END VELOCITY TONE A]-------------
               00790 ;; -------------[END TONE A WORKFLOW]-------------
               00791 
               00792 
               00793                                 ;; NEXT TONE B
               00794                                 ;; => note_on_pipeline_b.inc
6F70 EFBA F037 00795                                 goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_B
               00796 
               00797 
               00109 #include "note_on_pipeline_b.inc"                       ;; Note ON Handling
               00001 ;;--------------------------------------
               00002 ;; note_on_pipeline_b.inc
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 411


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00003 ;; -------------------------------------
               00004 ;;
               00005 ;; FUNCTION:
               00006 ;; ---------
               00007 ;; DO *NOTE ON* PROCESSING @ TONE B
               00008 ;; WITH ALL necessary parameters
               00009 ;; 
               00010 ;; DETAILS:
               00011 ;; --------
               00012 ;; THERE HAD BEEN A *NOTE ON* MIDI EVENT
               00013 ;; TUNE WAS WRITTEN TO MIOS_PARAMETER1/2
               00014 ;; COASE TUNE TO MIOS_PARAMETER1
               00015 ;; FINE  TUNE TO MIOS_PARAMETER2
               00016 ;; 
               00017 ;; PIPELINE WORKFLOW:
               00018 ;; ------------------
               00019 ;; * Check MIDI CH. = Tone B
               00020 ;;      IF MIDI CH. MATCH: SWITCH TONE B (+ USER NOISE B) ON
               00021 ;;
               00022 ;; * CHECK IF USER ENVELOPE MODE TONE B IS ON
               00023 ;;      ON => WRITE ENVELOPE SHAPE TO AY CHIP
               00024 ;;      OFF=> DO NOT WRITE ENVELOPE SHAPE TO AY CHIP
               00025 ;;
               00026 ;; * CHECK DETUNE (PITCH BEND)
               00027 ;;      * Coarse
               00028 ;;      * Fine 
               00029 ;;
               00030 ;; * SEND TUNE TONE B to AY CHIP (incl. Detune (PITCH BEND))
               00031 ;;
               00032 ;; * CHECK IF VELOCITY TO VOLUME IS ON
               00033 ;;      yes: write VELOCITY to VOLUME B
               00034 ;;      no:  write USER VOLUME TO VOLUME TONE B
               00035 
               00036 ;;              TONE A, B, C WORKFLOW
               00037 ;;              ---------------------
               00038 ;;      midi_evnt_note_on_pipeline_tone_a.inc
               00039 ;;                      ||
               00040 ;;                      \/
               00041 ;;      midi_evnt_note_on_pipeline_tone_b.inc
               00042 ;;                      ||
               00043 ;;                      \/
               00044 ;;      midi_evnt_note_on_pipeline_tone_c.inc
               00045 ;;                      ||
               00046 ;;                      \/
               00047 ;;              note_on_write_ay_reg7.inc
               00048 
               00049 ;; ----------------------------------------------
               00050 
               00051 ;; -------------[START TONE B WORKFLOW]----------
               00052 ;; ----------------------------------------------
               00053 
6F74           00054 MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_B
               00055         ;; CHECK IF NOTE ON EVENT = TONE B MIDI CHANNEL
               00056         ;; IS MIDI EVENT MIDI CHANNEL = MIDI CHANNEL OF TONE B?
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 412


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6F74 5021      00057         movf MIDI_EVNT_CHANNEL, W
6F76 6231      00058         cpfseq AY_TONE_B_MIDI_CHANNEL_USER
               00059                         ;NO - IT'S NOT MIDI CH TONE B
6F78 EFA7 F038 00060                         goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_C
               00061                 
               00062                 ;; YES
               00063                 ;; THERE IS A NOTE ON MIDI EVENT @ THE TONE B MIDI CHANNEL
               00064                 ;; WRITE MIDI Hz VALUE to TUNE TONE B 
               00065                 ;; WRITE MIDI Hz => TUNE TONE B 
6F7C C003 F02D 00066                 movff MIOS_PARAMETER1, AY_TONE_B_TUNE_COARSE_MIDI
6F80 C004 F02A 00067                 movff MIOS_PARAMETER2, AY_TONE_B_TUNE_FINE_MIDI
               00068                 
               00069                 ;; MIDI FILTER:
               00070                 ;; MIDI SWITCH TONE B NOISE B *ON*
               00071                 ;; CLEAR BIT1, BIT4
               00072                 ;; => FILTER FOR REG 7
               00073                 ;; => SWITCH ON TONE B, NOISE B  
6F84 9222      00074                 bcf     AY_TONE_ABC_MIDI_ON_OFF, BIT1_TONE_B_ON_OFF
6F86 9822      00075                 bcf     AY_TONE_ABC_MIDI_ON_OFF, BIT4_NOISE_B_ON_OFF
               00076         
               00077                 ;; WRITE CURREND *NOTE ON VALUE* @ MIDI Ch Tone B
               00078                 ;; FOR CHCKING if the Note OFF value correlates with the last
               00079                 ;; NOTE ON value (importend for MIDI KEYBOARD HANDLING of delayed NOTE OFF values) 
               00080                 ;; processing @ note_off.inc
6F88 C012 F01C 00081                 movff     MIDI_EVNT1, CURRENT_MIDI_EVENT_NOTE_ON_OFF_B
               00082 
               00083 
               00084         ;; CHECK IF FX B = ON or OFF
6F8C A24D      00085         btfss FX_USER_ON_OFF_ABC, BIT1_FX_ON_OFF_TONE_B
               00086                         ;; NO, BIT1 IS NOT SET - Fx @ TONE B = off
               00087                         ;; DO NOT PERFORM Fx Note On Routines
               00088                         rgoto  MIDI_EVNT_NOTE_ON_TONE_B_CHCK_ENVELOPE_MODE
6F8E D004          M         bra     label
               00089                 
               00090                 ;; #####################################################
               00091                 ;; ### hier noch FX USER ON / OFF TONE ABC einbauen #####
               00092                 ;; For Fx Tunes #123
               00093                 ;; Save the last 3 Note Values
6F90 EC48 F03E 00094                 call    WRITE_FX_TUNE_1_2_3     
               00095                 
               00096                 ;; SET FX MIDI *NOTE ON* FLAG @ TONE B
6F94 824E      00097                 bsf Fx_MIDI_NOTE_ON_OR_OFF, BIT1_TONE_B_ON_OFF
               00098                                 
               00099                 ;; CHANGE (inc) THE FX SESSION (WILL RESET FX POS)
6F96 2A54      00100                 incf FX_MIDI_NOTE_ON_SESSION, F
               00101                 ;; ######################################################
               00102 
               00103 
6F98           00104 MIDI_EVNT_NOTE_ON_TONE_B_CHCK_ENVELOPE_MODE
               00105                 ;; -------------[ENVELOPE MODE?]------------------------
               00106                 ;; CHECK: IS ENVELOPE MODE @ TONE B ON?
               00107                 ;; BIT 4 SET    = ENV. MODE ON
               00108                 ;; BIT 4 CLEAT  = ENV. MODE OFF
6F98 B86D      00109                 btfsc AY_R9_CH_B_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 413


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00110                         ;; YES - BIT 4 is SET - ENV. MODE ON
               00111                         ;; GOTO WRITE ENV REG AY CHIP
               00112                         rgoto MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_B_ENV_MODE
6F9A D001          M         bra     label
               00113                         ;; NO - BIT 4 is CLEAR - ENV. MODE OFF
               00114                         ;; NO NEED FOR WRITING AY REG 13
               00115                         rgoto MIDI_EVNT_NOTE_ON_CHECK_DETUNE_B
6F9C D006          M         bra     label
               00116         
6F9E           00117 MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_B_ENV_MODE
               00118         ;; -------------[WRITE ENVELOPE SHAPE/CYCLE - ENVELOPE MODE TONE B ON]------------------
               00119         ;; SEND DATA TO AY REG 13 (ENV. SHAPE Cycle REG)
               00120         ;; SET AY REGISTER
6F9E 0E0D      00121         movlw  AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  
6FA0 6E39      00122         movwf  AY_REG_ADDRESS           
               00123         ;; WRITE GLOBAL [A|B|C] ENVELOPE SHAPE DATA TO AY CHIP
6FA2 C071 F03A 00124         movff  AY_R13_ENV_SHAPE_CYCLE, AY_REG_DATA
               00125         ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
6FA6 ECAA F01B 00126         call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00127         ;; ==========================================================================================
               00128 
               00129 
               00130         ;; -------------[DETUNE B]------------------
6FAA           00131 MIDI_EVNT_NOTE_ON_CHECK_DETUNE_B
               00132 
               00133 
               00134 ;; -------------[CHECK DETUNE B (PITCH BEND)]------------------------
               00135 
               00136 ;; * CHECK DETUNE (PITCH BEND)
               00137 ;;      * Coarse
               00138 ;;      * Fine 
               00139 
               00140 
               00141 
               00142 ;; -------------[NOW CHECK B COARSE DETUNE]----------------------
6FAA           00143 MIDI_EVNT_NOTE_ON_CHECK_TONE_B_COARSE_DETUNE
               00144         ;;CHECK USER COARSE DETUNE
               00145         ;:USER COARSE RANGE:
               00146         ;;(-)RANGE = [0 to 6]|OFFSET/ZERO = [7]| (+)RANGE = [8 to 15]
               00147         ;;
               00148         ;; AY_TONE_A_TUNE_COARSE_USER | COARSE TUNE
               00149         ;; ...
               00150         ;; 3 ========================>| -4
               00151         ;; 4 ========================>| -3
               00152         ;; 5 ========================>| -2
               00153         ;; 6 ========================>| -1
               00154         ;; 7 ========================>|  0
               00155         ;; 8 ========================>| +1
               00156         ;; 9 ========================>| +2
               00157         
               00158         ;; IS USER COARSE TUNE = [7] ?
6FAA 0E07      00159         movlw   OFFSET_COARSE_TUNE_IS_7
6FAC 6227      00160         cpfseq  AY_TONE_B_TUNE_COARSE_USER      
               00161                 ;; NO - NOT 7, SO COARSE DETUNE IS GIVEN
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 414


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00162                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_CHECK_COARSE_DETUNE_PLUS_OR_MINUS
6FAE D001          M         bra     label
               00163                 ;; YES 7, SO NO COASE DETUNE IS GIVEN
               00164                 ;; GO ON WITH DETUNE FINE
               00165                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE
6FB0 D021          M         bra     label
               00166 
               00167 
6FB2           00168 MIDI_EVNT_NOTE_ON_TONE_B_CHECK_COARSE_DETUNE_PLUS_OR_MINUS
               00169         ;; CHECK COARSE DETUNE = (+) or (-)
               00170         ;; COARSE TUNE IS <> 7 SO COARSE REG DETUNE
               00171         ;; IS GIVEN @ TONE B
               00172         ;; RANGE (-) = [0-6] |(No DETUNE) = [7] | (+) = [8-15]
6FB2 0E06      00173         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06
               00174         ;; TONE B COASE TUNE > 6? (CHECK TUNE + OR -) 
6FB4 6427      00175         cpfsgt  AY_TONE_B_TUNE_COARSE_USER      
               00176                         ;; NO
               00177                         ;; SO COARSE DETUNE = (-) = RANGE [0 to 6]
               00178                         rgoto  MIDI_EVNT_NOTE_ON_TONE_B_COARSE_DETUNE_IS_MINUS
6FB6 D001          M         bra     label
               00179                         ;; YES
               00180                         ;; SO COARSE DETUNE = (+) = RANGE [8 to 15]
               00181                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_COARSE_DETUNE_IS_PLUS
6FB8 D00F          M         bra     label
               00182                         
6FBA           00183 MIDI_EVNT_NOTE_ON_TONE_B_COARSE_DETUNE_IS_MINUS
               00184         ;; DETUNE COARSE IS NEGATIVE
               00185         ;; -------------------------
               00186         ;; calculate COARSE DETUNE (-) VALUE:
               00187         ;; WREG [(0x07 (+1 [PLUS_1_CARRY_BIT_KILLER])] - F [(0x00 to 0x06)| (+1 Carry BIT (of subfwb))] 
               00188         ;; WRITE RESULT TO => [WREG (0x07 to 0x01)]
               00189         ;; TO GET THE (-) COARSE TUNE RESULT [RANGE: 0x07 to 0x01]
               00190         
               00191         
               00192         ;; (1) MOVE OFFSET TO WREG and
               00193         ;; (3)Subtract f from WREG 
               00194         ;; the CARRY bit will allway be set
               00195         ;; because WREG is (allways in this case) > f) 
               00196         ;; (2) SO WE NEED TO ADD +1 TO WREG
               00197         ;; for [+1 WREG] - [+1 Carry BIT] = 0 (the needed offset)
6FBA 0E07      00198         movlw   OFFSET_COARSE_TUNE_IS_7 ;; (1)
6FBC 0F01      00199         addlw   PLUS_1_CARRY_BIT_KILLER ;; (2)
6FBE 5427      00200         subfwb  AY_TONE_B_TUNE_COARSE_USER, W ;; (3)
               00201         
               00202         ;; ADD (*) COARSE MINUS DETUNE [WREG (RANGE 0x01 to 0x07)] 
               00203         ;; TO THE COARSE "NOTE ON VALUE" 
               00204         ;; DON'T BE CONFUSED (*):
               00205         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00206         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
6FC0 262D      00207         addwf   AY_TONE_B_TUNE_COARSE_MIDI, F
               00208         
               00209         
               00210         ;; TONE B COASE TUNE > BIN 00001111? 
6FC2 0E0F      00211         movlw   NIBBLE_B00001111
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 415


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
6FC4 642D      00212         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI      
               00213 
               00214                 ;; NO - ALL RIGHT GO ON         
               00215                 ;; GO AND CHECK DETUNE FINE
6FC6 EFFA F037 00216                 goto    MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE
               00217 
               00218                         ;; YES - COASE TUNE REG VALUE IS > 0x0F NO VALID VALUE FOR THE AY CHIP!
               00219                         ;; SWITCH TUNE COARSE REG TO 0x0F
               00220                         ;; GO AND WRITE MAXIMUM VALUE TO COARSE and FINE REG
               00221                         rgoto   MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_B_TO_MAX_VALUE
6FCA D000          M         bra     label
               00222 
               00223 
6FCC           00224 MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_B_TO_MAX_VALUE
               00225                                 ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
6FCC 0E0F      00226                                 movlw COARSE_TUNE_MAX_VALUE_B00001111
6FCE 6E2D      00227                                 movwf AY_TONE_B_TUNE_COARSE_MIDI
6FD0 0ED2      00228                                 movlw FINE_TUNE_MAX_VALUE_B11010010
6FD2 6E2A      00229                                 movwf AY_TONE_B_TUNE_FINE_MIDI
               00230                 
               00231                                         ;; GO AND CHECK DETUNE FINE
6FD4 EFFA F037 00232                                         goto    MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE
               00233 
               00234 ;; -------------------[TONE B COARSE DETUNE]----------------------------
               00235 
6FD8           00236 MIDI_EVNT_NOTE_ON_TONE_B_COARSE_DETUNE_IS_PLUS
               00237         ;; DETUNE IS ADDITIVE
               00238         ;; (+) RANGE COARSE USER [0x08 to 0x0F]
6FD8 0E07      00239         movlw   OFFSET_COARSE_TUNE_IS_7
6FDA 5C27      00240         subwf   AY_TONE_B_TUNE_COARSE_USER, W           ; - 0x07 (OFFSET IN W REG)
6FDC 6E2F      00241         movwf   AY_DETUNE_TEMP                          ; SAVE (+) COARSE DETUNE VALUE
               00242         
               00243         ;; NOW COARSE DETUNE IS IN WREG
               00244         ;; (+) COARSE DETUNE RANGE => [0x01 to 0x08]            
               00245         ;; COMPARE W REG WITH COARSE TUNE MIDI VALUE
               00246         ;; IS THE COASE MIDI VALUE > COASE DETUNE VALUE IN W REG
               00247         ;; NEXT STEP: SUBTRACT [(+) DETUNE COARSE] FROM [MIDI COARSE TUNE]
               00248         ;; BUT FIRST WE MUST CHECK IF THERE WILL BE A VALID VALUE
               00249         ;; COMPARE WREG [(+) DETUNE COARSE] WITH [COARSE TUNE MIDI] 
               00250         ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]? 
6FDE 642D      00251         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI
               00252                 ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
               00253                 ;; NO - SO SET TUNE REGS TO HIGHEST FREQUENCY POSSIBLE
               00254                 rgoto   MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_B_TO_MIN_VALUE_IS_HIGHEST_TUNE
6FE0 D001          M         bra     label
               00255                 ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
               00256                 ;; YES - OK GO ON
               00257                 rgoto   MIDI_EVNT_NOTE_ON_TONE_B_COASE_DETUNE_ADDITIVE_GO_ON
6FE2 D005          M         bra     label
               00258 
               00259 
6FE4           00260 MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_B_TO_MIN_VALUE_IS_HIGHEST_TUNE
               00261                         ;; SET TUNE REGS TO HIGHEST FREQUENCY POSSIBLE
               00262                         ;; THAT MEANS TO SET TUNE REGS TO MIN. VALUE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 416


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00263                         ;; MIN VALUE = HIGHEST TUNE
6FE4 0E00      00264                         movlw  COARSE_TUNE_MIN_VALUE_B00000000
6FE6 6E2D      00265                         movwf  AY_TONE_B_TUNE_COARSE_MIDI
6FE8 0E0A      00266                         movlw  FINE_TUNE_MIN_VALUE_B00001010
6FEA 6E2A      00267                         movwf  AY_TONE_B_TUNE_FINE_MIDI
               00268                                         ;; GO ON WITH DETUNE FINE
               00269                                         rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE
6FEC D003          M         bra     label
               00270 
6FEE           00271 MIDI_EVNT_NOTE_ON_TONE_B_COASE_DETUNE_ADDITIVE_GO_ON
               00272                         ;; ADD USER COASE DETUNE TO FREQUENCY VALUE NOW
               00273                         ;; THIS MEANS TO SUBTRACT COASE DETUNE VALUE from "NOTE ON" MIDI VALUE 
               00274                         ;; YES THE ADDITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00275                         ;; TUNE FREQUENCY "+" = "-" @ TUNE REGISTER
6FEE 502F      00276                         movf    AY_DETUNE_TEMP, W
6FF0 5E2D      00277                         subwf   AY_TONE_B_TUNE_COARSE_MIDI, F
               00278                                         ;; GO ON WITH DETUNE FINE
               00279                                         rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE
6FF2 D000          M         bra     label
               00280 
               00281 
               00282 ;; -------------[END OF DETUNE TONE COASE B ]--------------     
               00283 
               00284 ;; ----------------[CHECK DETUNE FINE]--------------------------------------
6FF4           00285 MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE
               00286         ;;CHECK USER DETUNE [FINE]
6FF4 0E80      00287         movlw   OFFSET_FINE_TUNE_IS_128
               00288         ;; TONE B FINE TUNE = 128? 
               00289         ;; 128 = INITIAL VALUE = NO USER DETUNE
6FF6 6224      00290         cpfseq  AY_TONE_B_TUNE_FINE_USER        
               00291 
               00292                         ;; NO == NOT 128 - SO *DETUNE IS GIVEN*
               00293                         rgoto MIDI_EVNT_NOTE_ON_CHECK_TONE_B_FINE_DETUNE_MINUS_OR_PLUS
6FF8 D001          M         bra     label
               00294 
               00295                         ;; YES == *NO FINE DETUNE IS GIVEN*
               00296                         ;; GO ON - WRITE TUNE TONE B
               00297                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
6FFA D05F          M         bra     label
               00298 
               00299 
6FFC           00300 MIDI_EVNT_NOTE_ON_CHECK_TONE_B_FINE_DETUNE_MINUS_OR_PLUS
               00301         
6FFC 0E7F      00302         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F
               00303         ;; TONE B FINE TUNE > 127? 
               00304         ;; (CHECK IF USER DETUNE IS + OR -) 
6FFE 6424      00305         cpfsgt  AY_TONE_B_TUNE_FINE_USER        
               00306 
               00307                         ;; NO == USER FINE DETUNE (-)
               00308                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_MINUS
7000 D001          M         bra     label
               00309                         
               00310                         ;; YES == USER FINE DETUNE (+)
               00311                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_PLUS
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 417


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7002 D02D          M         bra     label
               00312 
               00313 
7004           00314 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_MINUS      
               00315 ;; DETUNE IS NEGATIVE (-) == LOWER FREQUENZY
               00316         ;; (+) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [129 to 255] DETUNE IS POSITIVE (HERE)
               00317         ;; (-) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [0   to 127] DETUNE IS NEGATIVE 
               00318         ;; (NO DETUNE) : AY_TONE_A_TUNE_FINE_USER = [128]
               00319         
               00320         ;; WRITE 128 TO WREG
               00321         ;; WREG [(128) + (1 (CARRY KILLER))] - [[AY_TONE_A_TUNE_FINE_USER |(0 to 127)] + [+1 (CARRY)]]
               00322         ;; WRITE RESULT TO => [WREG]
7004 0E80      00323         movlw   OFFSET_FINE_TUNE_IS_128
7006 0F01      00324         addlw   PLUS_1_CARRY_BIT_KILLER
7008 5424      00325         subfwb  AY_TONE_B_TUNE_FINE_USER, W 
               00326         ;; WRITE RESULT TO [WREG] TO => [AY_DETUNE_TEMP]
700A 6E2F      00327         movwf   AY_DETUNE_TEMP
               00328         
               00329         ;; So the [USER DETUNE RANGE] => [-1 to -128] 
               00330         ;; Expand the (-) RANGE to 8BIT (255):
               00331         ;; 2x (-1 to -128) => (-2 to -256(!))
700C 262F      00332         addwf   AY_DETUNE_TEMP, F
               00333         ;; -1 | => (1 to 255)
700E 062F      00334         decf    AY_DETUNE_TEMP, F
               00335         ;; WRITE [(-) DETUNE FINE] TO [WREG]
               00336         ;; (-) RANGE => [1 to 255]
               00337         
               00338 
               00339 ;; ------[DETUNE NEGATIVE RATIO CHANGE?]------------------
               00340 
               00341         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00342         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00343         ;; 4 to 15 => NO RATIO CHANGE
7010 0E03      00344         movlw   0x03     
7012 642D      00345         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI      
               00346 
               00347                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00348                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00349                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE
7014 D001          M         bra     label
               00350                         
               00351                         ;; YES [MIDI TUNE COARSE REG > 3]
               00352                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00353                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_GO_ON       
7016 D013          M         bra     label
               00354 
7018           00355 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE
               00356         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00357         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00358         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00359         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
7018 502D      00360         movf AY_TONE_B_TUNE_COARSE_MIDI, W
               00361         JUMPTABLE_2BYTES 4
701A 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 418


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
701C B0D8          M         skpnc
701E 0EFC          M         movlw   -(max_value)
7020 0F04          M         addlw   max_value
7022 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00362                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
7026 D003          M         bra     label
               00363                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
7028 D004          M         bra     label
               00364                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
702A D005          M         bra     label
               00365                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
702C D006          M         bra     label
               00366         
               00367 ;; ADJUST PITCH BEND RATIO
               00368 ;; JUMP IN HERE = PITCH BAND /16
702E           00369 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x
702E 422F      00370                 rrncf   AY_DETUNE_TEMP, F
7030 9E2F      00371                 bcf     AY_DETUNE_TEMP, 7
               00372 ;; JUMP IN HERE = PITCH BAND /8
7032           00373 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x
7032 422F      00374                 rrncf   AY_DETUNE_TEMP, F
7034 9E2F      00375                 bcf     AY_DETUNE_TEMP, 7
               00376 ;; JUMP IN HERE = PITCH BAND /4
7036           00377 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x
7036 422F      00378                 rrncf   AY_DETUNE_TEMP, F
7038 9E2F      00379                 bcf     AY_DETUNE_TEMP, 7
               00380 ;; JUMP IN HERE = PITCH BAND /2
703A           00381 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x
703A 422F      00382                 rrncf   AY_DETUNE_TEMP, F
703C 9E2F      00383                 bcf     AY_DETUNE_TEMP, 7
               00384         
               00385 ;; ------[DETUNE RATIO CHANGE END]------------------
               00386 
703E           00387 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_GO_ON     
               00388         ;; >> ADD (-) DETUNE to "NOTE ON" VALUE <<
               00389         ;; DON'T BE CONFUSED: 
               00390         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00391         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
703E 90D8      00392         clrc    ;; CLEAR CARRY BIT
7040 502F      00393         movf    AY_DETUNE_TEMP, W
7042 262A      00394         addwf   AY_TONE_B_TUNE_FINE_MIDI, F
               00395         
               00396             ;;  carry flag is set when an instruction overflows f.
               00397             ;;  branch if carry for INC the 4 BIT COARSE TUNE B REG
7044 E201      00398             bc MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_B_INC
               00399                         ;; OK, QUIT HERE
               00400                         ;; GO ON - WRITE TUNE TONE B
               00401                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
7046 D039          M         bra     label
               00402 
7048           00403 MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_B_INC
               00404         ;; THE CARRY FLAG HAS BEEN SET (OVERFLOW OF FINE TUNE REG)
               00405         ;; CHECK MIDI COASE REG = 0x0F ? 
               00406         ;; IS COARSE TUNE REG > BIN xxxx1110 ? => 14 (15 = higest Value) 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 419


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7048 0E0E      00407         movlw   COARSE_TUNE_MAX_MINUS_1_B00001110
704A 642D      00408         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI      
               00409                         ;; NO - COARSE REG TUNE RANGE IS [0 to 14]
               00410                         ;; OK SO COASE REG IS VALID
               00411                         rgoto MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_B_INC
704C D001          M         bra     label
               00412 
               00413                         ;; YES - NO INC OF COARSE REG POSSIBLE
               00414                         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG. 
               00415                         rgoto MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_B
704E D002          M         bra     label
               00416 
               00417 
7050           00418 MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_B_INC        
               00419         ;; INC PITCH CARRY FROM FINE-TUNE REG 
               00420         ;; +1 to COASE TUNE REG 
7050 2A2D      00421         incf AY_TONE_B_TUNE_COARSE_MIDI, F
               00422         
               00423                                 ;; GO ON - WRITE TUNE TONE B
               00424                                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
7052 D033          M         bra     label
               00425 
7054           00426 MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_B
               00427         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
7054 0E0F      00428         movlw  COARSE_TUNE_MAX_VALUE_B00001111
7056 6E2D      00429         movwf  AY_TONE_B_TUNE_COARSE_MIDI
7058 0ED2      00430         movlw  FINE_TUNE_MAX_VALUE_B11010010
705A 6E2A      00431         movwf  AY_TONE_B_TUNE_FINE_MIDI
               00432         
               00433                                 ;; GO ON - WRITE TUNE TONE B
               00434                                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
705C D02E          M         bra     label
               00435 
               00436 
               00437 ;; -----------[PITCH BEND TONE B == POSITIVE]--------------
705E           00438 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_PLUS
               00439         ;; DETUNE IS POSITIVE - HIGHER FREQUENCY
               00440         ;; (+) RANGE OF: AY_TONE_B_TUNE_FINE_USER = [129 to 255] DETUNE IS POSITIVE (HERE)
               00441         ;; (-) RANGE OF: AY_TONE_B_TUNE_FINE_USER = [0   to 127] DETUNE IS NEGATIVE 
               00442         ;; (NO DETUNE) : AY_TONE_B_TUNE_FINE_USER = [128]
               00443         
               00444         ;; OFFSET JUSTAGE
               00445         ;; WRITE 128 TO WREG
705E 0E80      00446         movlw   OFFSET_FINE_TUNE_IS_128
               00447         ;; {[AY_TONE_B_TUNE_FINE_USER | (129 to 255)] - [WREG|(128)]} WRITE TO => [WREG]
7060 5C24      00448         subwf   AY_TONE_B_TUNE_FINE_USER, W             
               00449                 ;; RANGE JUSTAGE
               00450                 ;; WRITE [WREG] TO => [AY_DETUNE_TEMP]
               00451                 ;; RANGE == [+1 to +128]
7062 6E2F      00452                 movwf   AY_DETUNE_TEMP
               00453                 ;; 2x RANGE => [(+2 to +256)]
7064 262F      00454                 addwf   AY_DETUNE_TEMP, F
               00455                 ;; -1 => (+1 to +255)
7066 062F      00456                 decf    AY_DETUNE_TEMP, F
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 420


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00457                 
               00458 ;; ------[DETUNE RATIO CHANGE?]------------------
               00459         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00460         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00461         ;; 4 to 15 => NO RATIO CHANGE
7068 0E03      00462         movlw   0x03     
706A 642D      00463         cpfsgt  AY_TONE_B_TUNE_COARSE_MIDI      
               00464 
               00465                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00466                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00467                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE
706C D001          M         bra     label
               00468                         
               00469                         ;; YES [MIDI TUNE COARSE REG > 3]
               00470                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00471                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_GO_ON
706E D013          M         bra     label
               00472 
7070           00473 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE      
               00474         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00475         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00476         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00477         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
7070 502D      00478         movf AY_TONE_B_TUNE_COARSE_MIDI, W
               00479         JUMPTABLE_2BYTES 4
7072 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
7074 B0D8          M         skpnc
7076 0EFC          M         movlw   -(max_value)
7078 0F04          M         addlw   max_value
707A ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00480                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
707E D003          M         bra     label
               00481                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
7080 D004          M         bra     label
               00482                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
7082 D005          M         bra     label
               00483                 rgoto        MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
7084 D006          M         bra     label
               00484         
               00485         
               00486         
               00487 ;; ADJUST PITCH BEND RATIO
               00488 ;; JUMP IN HERE = PITCH BAND /16
7086           00489 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x 
7086 422F      00490                 rrncf   AY_DETUNE_TEMP, F
7088 9E2F      00491                 bcf     AY_DETUNE_TEMP, 7
               00492 ;; JUMP IN HERE = PITCH BAND /8
708A           00493 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x
708A 422F      00494                 rrncf   AY_DETUNE_TEMP, F
708C 9E2F      00495                 bcf     AY_DETUNE_TEMP, 7
               00496 ;; JUMP IN HERE = PITCH BAND /4
708E           00497 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x
708E 422F      00498                 rrncf   AY_DETUNE_TEMP, F
7090 9E2F      00499                 bcf     AY_DETUNE_TEMP, 7
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 421


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00500 ;; JUMP IN HERE = PITCH BAND /2
7092           00501 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x
7092 422F      00502                 rrncf   AY_DETUNE_TEMP, F
7094 9E2F      00503                 bcf     AY_DETUNE_TEMP, 7
               00504 
               00505 ;; ------[DETUNE RATIO CHANGE END]------------------
               00506 
               00507 ;; WRITE DETUNE TO MIDI TUNE FINE REG
7096           00508 MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_GO_ON
               00509         
               00510                 ;; CHECK: DO WE NEED TO SUBTRACT THE NEGATIVE CARRY BIT
               00511                 ;; FROM THE MIDI TUNE COARSE REG?
               00512                 ;; IS [DETUNE FINE] > W [TONE FINE MIDI] ?
               00513                 ;; // [DETUNE FINE] MUST BE = or < THEN [TONE FINE MIDI]
               00514                 ;; // otherwise WE HAVE DO DEC -1 @ [COARSE MIDI REG]
7096 502A      00515                 movf    AY_TONE_B_TUNE_FINE_MIDI, W     ;; W
7098 642F      00516                 cpfsgt  AY_DETUNE_TEMP                  ;; F
               00517                                                 
               00518                         ;; NO
               00519                         ;; W [MIDI FINE REG] WAS > F [DETUNE FINE]
               00520                         ;; or W [MIDI FINE REG] =  F [DETUNE FINE]
               00521                         ;; SO WE CAN GO ON 
               00522                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_B
709A D001          M         bra     label
               00523                 
               00524                         ;; YES 
               00525                         ;; F [PITCH BEND] WAS > W [MIDI FINE REG]
               00526                         ;; SO WE HAVE DO DEC -1 from  [COARSE MIDI REG]
               00527                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_B_DEC   
709C D003          M         bra     label
               00528 
               00529 
709E           00530 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_B        
               00531         ;; WRITE THE POSITIVE PITCH BEND TO THE "NOTE ON MIDI VALUE" [FINE TUNE + COARSE TUNE REG]
               00532         ;; SUBTRACT DETUNE (THE POSITIVE PITCH BEND) from "NOTE ON" MIDI VALUE 
               00533         ;; THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00534         ;; TUNE "+" = "-" @ TUNE REG (LOGIC => AY SOUND CHIP)
709E 502F      00535         movf    AY_DETUNE_TEMP, W
70A0 5E2A      00536         subwf   AY_TONE_B_TUNE_FINE_MIDI, F
               00537                                                         ;; OK, FINE DETUNE IS DONE
               00538                                                         ;; GO ON - WRITE TUNE TONE B
               00539                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
70A2 D00B          M         bra     label
               00540 
               00541 
               00542 
70A4           00543 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_B_DEC
               00544         ;; FIRST: WRITE THE POSITIVE PITCH BEND TO THE "NOTE ON MIDI VALUE" [FINE TUNE + COARSE TUNE REG]
               00545         ;; SUBTRACT DETUNE (THE POSITIVE PITCH BEND) from "NOTE ON" MIDI VALUE 
               00546         ;; THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00547         ;; TUNE "+" = "-" @ TUNE REG (LOGIC => AY SOUND CHIP)
70A4 502F      00548         movf    AY_DETUNE_TEMP, W
70A6 5E2A      00549         subwf   AY_TONE_B_TUNE_FINE_MIDI, F
               00550         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 422


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00551                                 ;; WE HAVE TO DEC THE VALUE OF COARSE REG -1
               00552                                 ;; BUT CHECK MIDI COASE REG = 0x00 ? 
               00553                                 ;; BECAUSE => 0x00 = INVALID VALUE 
70A8 0E00      00554                                 movlw   0x00
70AA 622D      00555                                 cpfseq  AY_TONE_B_TUNE_COARSE_MIDI
               00556 
               00557                                         ;; NO - OK COARSE REG IS > 0 - SO GO ON WITH DEC COASE TUNE REG | -1
               00558                                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_B_GO_ON
70AC D001          M         bra     label
               00559 
               00560                                         ;; YES - COARSE REG = 0 
               00561                                         ;; WE CAN NOT DEC. COARSE REG (ALLREADY 0x00)
               00562                                         ;; SO WRITE THE highest PITCH BEND DATA as possible TO THE 
               00563                                         ;; FINE AND COARSE REG instead
               00564                                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_B
70AE D002          M         bra     label
               00565 
               00566 
70B0           00567 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_B_GO_ON  
               00568         
               00569                                                 ;; DEC DETUNE CARRY FROM FINETUNE REG (MINUS CARY) 
               00570                                                 ;; -1 to COASE TUNE REG 
70B0 062D      00571                                                 decf AY_TONE_B_TUNE_COARSE_MIDI, F
               00572         
               00573                                                         ;; GO ON - WRITE TUNE TONE B
               00574                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
70B2 D003          M         bra     label
               00575 
               00576 
70B4           00577 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_B
               00578         
               00579                                                 ;; THE TUNE WOULD BE OUT OF RANGE 
               00580                                                 ;; SO SET FINE TUNE REG TO 0x0A (highest value that is VALID)
               00581                                                 ;; COARSE TUNE REG IS ALLREADY 0x00
70B4 0E0A      00582                                                 movlw   FINE_TUNE_MIN_VALUE_B00001010
70B6 6E2A      00583                                                 movwf   AY_TONE_B_TUNE_FINE_MIDI
               00584         
               00585                                                         ;; GO ON - WRITE TUNE TONE B
               00586                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
70B8 D000          M         bra     label
               00587 
               00588 ;; -------------[END OF DETUNE TONE B FINE ]--------------              
               00589 
               00590 
70BA           00591 MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP
               00592         ;; -------------[SEND TUNE TONE B DATA TO AY CHIP]--------------
               00593         ;; SEND TUNE B TO AY CHIP
70BA 0E03      00594         movlw  AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE                    ; ADRESS => AY REGISTER
70BC 6E39      00595         movwf  AY_REG_ADDRESS           ; ADDRESS FOR => AY_SR_Write
70BE 502D      00596         movf   AY_TONE_B_TUNE_COARSE_MIDI, W    ; DATA FOR AY REG X
70C0 6E3A      00597         movwf  AY_REG_DATA                      ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00598         
70C2 ECAA F01B 00599                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE   
               00600 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 423


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
70C6 0E02      00601         movlw  AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE                      ; ADDRESS => AY REGISTER
70C8 6E39      00602         movwf  AY_REG_ADDRESS           ; ADDRESS FOR => AY_SR_Write
70CA 502A      00603         movf   AY_TONE_B_TUNE_FINE_MIDI, W      ; DATA FOR AY REG X
70CC 6E3A      00604         movwf  AY_REG_DATA                      ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00605         
70CE ECAA F01B 00606                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00607 
               00608                 
               00609 ;; -------------[END OF DETUNE TONE B ]--------------           
               00610 
               00611 ;; ----------------------------[CHECK VELOCITY TO NOISE PERIOD @ TONE B]-------------------------
               00612 
               00613         ;; CHECK IF BIT3 is SET
70D2 A633      00614         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00615                 ;; NO, BIT3 IS NOT SET
               00616                 ;; THERE IS NO VELOCITY TO NOISE PERIOD
               00617                 ;; SO GO ON WITCH CHECKING THE VELOCITY TO VOLUME @ TONE B
               00618                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY
70D4 D01B          M         bra     label
               00619         
               00620                 ;; YES - BIT3 IS SET - CHECK IF VELOCITY TO NOISE PERID IS SET @ TONE B
               00621                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY_TO_NOISE_PERIOD
70D6 D000          M         bra     label
               00622 
70D8           00623 MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY_TO_NOISE_PERIOD
               00624         ;; YES - BIT3 IS SET [VELOCITY TO NOISE PERIOD = ON]
               00625         ;; CHECK IF VELOCITY IS @ TONE B => BIT6
70D8 AC33      00626         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF
               00627                 ;; NO, BIT6 IS NOT SET
               00628                 ;; THERE IS NO VELOCITY TO NOISE PERIOD @ TONE B 
               00629                 ;; SO GO ON WITCH CHECKING THE VELOCITY TO VOLUME @ TONE B
               00630                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY
70DA D018          M         bra     label
               00631         
               00632                 ;; YES - BIT6 IS SET - WRITE VELOCITY TONE A TO NOISE PERIOD 
               00633                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_WRITE_VELOCITY_TO_NOISE_PERIOD
70DC D000          M         bra     label
               00634 
70DE           00635 MIDI_EVNT_NOTE_ON_TONE_B_WRITE_VELOCITY_TO_NOISE_PERIOD
               00636         ;; CONVERT MIDI DATA 7BIT (0-127) TO NOISE PERIOD 5BIT(0-31)
               00637         ;; {VOLUME TONE 5BIT} = {MIDI DATA 7BIT}/4
               00638 
               00639         ;; WRITE MIDI DATA BYTE2 0-127 
               00640         ;; TO AY_MIDI_VELOCITY_TO_NOISE_PERIOD
70DE C013 F035 00641         movff   MIDI_EVNT_VALUE, AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00642               
               00643                   
               00644               ;; convert AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00645               ;; divide ==> (MIDI DATA)/4
70E2 4235      00646               rrncf     AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F      ;; /2
70E4 9E35      00647               bcf       AY_MIDI_VELOCITY_TO_NOISE_PERIOD, 7
70E6 4235      00648               rrncf     AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F      ;; /4
70E8 9E35      00649               bcf       AY_MIDI_VELOCITY_TO_NOISE_PERIOD, 7
               00650               
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 424


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00651 
               00652               
70EA 0E1F      00653               movlw 0x1F ;; BIN 0001 1111
70EC 1635      00654               andwf AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F
               00655 
               00656               ;; NOW THE VELOCITY IS IN THE 5 LOWER BITS (0-31 dec.)
               00657               ;; AY_MIDI_VELOCITY_TO_NOISE_PERIOD => BIN '000V VVVV'
               00658               
70EE 0E20      00659               movlw 0x20
70F0 5635      00660               subfwb AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F
               00661 
70F2 0E1F      00662                 movlw 0x1F
70F4 6435      00663                 cpfsgt AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00664 
               00665                       ;; NO, OK
               00666                       rgoto MIDI_EVNT_NOTE_ON_TONE_B_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW
70F6 D003          M         bra     label
               00667         
               00668                       ;; YES - MAKE  AY_MIDI_VELOCITY_TO_NOISE_PERIOD VALID
               00669                       rgoto MIDI_EVNT_NOTE_ON_TONE_B_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD
70F8 D000          M         bra     label
               00670 
70FA           00671 MIDI_EVNT_NOTE_ON_TONE_B_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD
               00672         ;; MAKE VELOCITY VALUE VALID [xxxV VVVV]
70FA 0E1F      00673         movlw 0x1F 
70FC 6E35      00674         movwf AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00675               
70FE           00676 MIDI_EVNT_NOTE_ON_TONE_B_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW           
               00677         ;; -------------[SEND VELOCITY TO NOISE PERIOD REG 6]------------------------
70FE 0E06      00678         movlw AY_CHIP_ADR_06_NOISE_PERIOD       ; REG ADRESS    => AY REGISTER
7100 6E39      00679         movwf AY_REG_ADDRESS                    ; ADDRESS FOR   => AY_SR_Write
               00680         
               00681         ;; WRITE AY_MIDI_VELOCITY_TO_VOLUME TO AY_REG_DATA
7102 C035 F03A 00682         movff AY_MIDI_VELOCITY_TO_NOISE_PERIOD, AY_REG_DATA
               00683 
               00684                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
7106 ECAA F01B 00685                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00686                 ;; ==========================================================================================
               00687 
               00688         ;; NEXT CHECK VELOCITY TONE B
               00689         rgoto MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY 
710A D000          M         bra     label
               00690 
               00691 
               00692 
               00693 ;; ----------------------------[CHECK VELOCITY TONE B]-------------------------
               00694 
710C           00695 MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY
               00696 
               00697         ;; WRITE VELOYTY TO VOLUME IF BIT 1 OF 
               00698         ;; AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF = SET
710C B233      00699         btfsc AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, 1 ;; CHK BIT1
               00700                 
               00701                 ;; NO - BIT1 = 1, => DO WRITE VELOCITY TO VOLUME
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 425


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00702                 rgoto  MIDI_EVNT_NOTE_ON_TONE_B_SEND_VELOCITY_TO_VOLUME
710E D009          M         bra     label
               00703                 
               00704                 
               00705                 ;; YES - BIT0 = CLEAR => DO NOT WRITE VELOCITY TO VOLUME
               00706                 rgoto MIDI_EVNT_NOTE_ON_TONE_B_SEND_VELOCITY_NOT_TO_VOLUME
7110 D000          M         bra     label
               00707 
               00708 
7112           00709 MIDI_EVNT_NOTE_ON_TONE_B_SEND_VELOCITY_NOT_TO_VOLUME
               00710                 ;; DO NOT WRITE VELOCITY TO TONE B VOLUME
               00711                 ;; WRITE USER VOLUME TO TONE B
               00712 
               00713         ;; -------------[SEND REG9 AMPLITUDE TO TONE B - USER VOLUME 0-15]------------------------
7112 0E09      00714         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF  ; REG ADRESS        => AY REGISTER
7114 6E39      00715         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00716         
               00717         ;; AY_R9_CH_B_AMPLITUDE TO AY_REG_DATA
7116 C06D F03A 00718         movff AY_R9_CH_B_AMPLITUDE, AY_REG_DATA
               00719 
               00720                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
711A ECAA F01B 00721                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00722                 ;; ==========================================================================================
               00723                 
               00724                                         ;; NEXT TONE C
711E EFA7 F038 00725                                         goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_C
               00726                                 
               00727 
               00728 
7122           00729 MIDI_EVNT_NOTE_ON_TONE_B_SEND_VELOCITY_TO_VOLUME
               00730         ;; CONVERT MIDI DATA 7BIT (0-127) TO VOLUME TONE B 4BIT(0-15)
               00731         ;; {VOLUME TONE 4BIT} = {MIDI DATA 7BIT}/8
               00732 
               00733         ;; WRITE MIDI DATA BYTE2 0-127 
               00734         ;; TO AY_MIDI_VELOCITY_TO_VOLUME
7122 C013 F034 00735         movff   MIDI_EVNT_VALUE, AY_MIDI_VELOCITY_TO_VOLUME
               00736               
               00737                   
               00738               ;; convert AY_MIDI_VELOCITY_TO_VOLUME
               00739               ;; divide ==> (MIDI DATA)/8
7126 4234      00740               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /2
7128 9E34      00741               bcf       AY_MIDI_VELOCITY_TO_VOLUME, 7
712A 4234      00742               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /4
712C 9E34      00743               bcf       AY_MIDI_VELOCITY_TO_VOLUME, 7
712E 4234      00744               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /8
7130 9E34      00745               bcf       AY_MIDI_VELOCITY_TO_VOLUME, 7
               00746 
               00747               
7132 0E0F      00748               movlw 0x0F ;; BIN 00001111
7134 1634      00749               andwf AY_MIDI_VELOCITY_TO_VOLUME, F
               00750 
               00751               ;; NOW THE VELOCITY IS IN THE 4 LOWER BITS (0-15 dec.)
               00752               ;; AY_MIDI_VELOCITY_TO_VOLUME => BIN '0000 VVVV'
               00753               
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 426


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00754               ;; COPY THE ENV. MODE BIT       
               00755               ;; WRITE 0 TO BIT0-3 
7136 0EF0      00756               movlw 0xF0 ;; BIN 1111 0000
7138 146D      00757               andwf AY_R9_CH_B_AMPLITUDE, W
               00758 
713A 1034      00759               iorwf AY_MIDI_VELOCITY_TO_VOLUME, W
713C 6E34      00760               movwf AY_MIDI_VELOCITY_TO_VOLUME
               00761 
               00762         ;; -------------[SEND VELOCITY AMPLITUDE TO TONE B - AY REG 9]------------------------
713E 0E09      00763         movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF ; REG ADRESS         => AY REGISTER
7140 6E39      00764         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00765         
               00766               ;; WRITE VELOCITY TO AY REG
7142 C034 F03A 00767               movff AY_MIDI_VELOCITY_TO_VOLUME, AY_REG_DATA
               00768 
               00769                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
7146 ECAA F01B 00770                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00771                 ;; ==========================================================================================
               00772              
               00773                         
               00774 
               00775 ;; -------------[END VELOCITY TONE B]---------------------------
               00776 
               00777 
               00778 ;;; ---------------------------------[END TONE B WORKFLOW]-----------------------------------
               00779 
               00780                                 ;; NEXT TONE C
714A EFA7 F038 00781                                 goto MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_C
               00110 #include "note_on_pipeline_c.inc"                       ;; Note ON Handling
               00001 ;;-----------------------
               00002 ;; note_on_pipeline_c.inc
               00003 ;; ----------------------
               00004 
               00005 ;; FUNCTION:
               00006 ;; ---------
               00007 ;; PLAY A *NOTE ON* SOUND @ TONE C
               00008 ;; WITH ALL necessary parameters
               00009 ;;
               00010 ;; 
               00011 ;; DETAILS:
               00012 ;; --------
               00013 ;; THERE HAD BEEN A *NOTE ON* MIDI EVENT
               00014 ;; JUMP IN HERE FROM note_to_hz.inc
               00015 ;; TUNE WAS WRITTEN TO MIOS_PARAMETER1/2
               00016 ;; COASE TUNE TO MIOS_PARAMETER1
               00017 ;; FINE  TUNE TO MIOS_PARAMETER2
               00018 ;; 
               00019 ;; PIPELINE WORKFLOW:
               00020 ;; ------------------
               00021 ;; * Check MIDI CH. = Tone C
               00022 ;;      IF MIDI CH. MATCH: SWITCH TONE C (+ USER NOISE C) ON
               00023 ;;
               00024 ;; * CHECK IF USER ENVELOPE MODE TONE C IS ON
               00025 ;;      ON => WRITE ENVELOPE SHAPE TO AY CHIP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 427


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00026 ;;      OFF=> DO NOT WRITE ENVELOPE SHAPE TO AY CHIP
               00027 ;;
               00028 ;; * CHECK DETUNE (PITCH BEND)
               00029 ;;      * Fine 
               00030 ;;      * Coarse
               00031 ;;
               00032 ;; * SEND TUNE TONE C to AY CHIP (incl. Detune (PITCH BEND))
               00033 ;;
               00034 ;; * CHECK IF VELOCITY TO VOLUME IS ON
               00035 ;;      yes: write VELOCITY to VOLUME C
               00036 ;;      no:  write USER VOLUME TO VOLUME TONE C
               00037 
               00038 ;;              TONE A, B, C WORKFLOW
               00039 ;;              ---------------------
               00040 ;;      midi_evnt_note_on_pipeline_tone_a.inc
               00041 ;;                      ||
               00042 ;;                      \/
               00043 ;;      midi_evnt_note_on_pipeline_tone_b.inc
               00044 ;;                      ||
               00045 ;;                      \/
               00046 ;;      midi_evnt_note_on_pipeline_tone_c.inc
               00047 ;;                      ||
               00048 ;;                      \/
               00049 ;;              note_on_write_ay_reg7.inc
               00050 
               00051 
               00052 ;; ----------------[START TONE C WORKFLOW]-----------------
714E           00053 MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_C
               00054         ;; CHECK IF NOTE ON EVENT = TONE C MIDI CHANNEL
               00055         ;; IS MIDI EVENT MIDI CHANNEL = MIDI CHANNEL OF TONE C?
714E 5021      00056         movf MIDI_EVNT_CHANNEL, W
7150 6232      00057         cpfseq AY_TONE_C_MIDI_CHANNEL_USER
               00058                         ;; NO - TONE C IS OFF
               00059                         ;; Goto note_on_write_ay_reg7.inc
               00060                         ;; AY Reg 7 [ENABLE / DISABLE TONE ABC / NOISE ABC]
7152 EF92 F039 00061                         goto MIDI_EVNT_NOTE_ON_TONE_FILTER
               00062                 
               00063                 ;; YES
               00064                 ;; THERE IS A NOTE ON MIDI EVENT @ THE TONE C MIDI CHANNEL
               00065                 ;; WRITE MIDI Hz VALUE to TUNE TONE C 
               00066                 ;; WRITE MIDI Hz => TUNE TONE C 
7156 C003 F02E 00067                 movff MIOS_PARAMETER1, AY_TONE_C_TUNE_COARSE_MIDI
715A C004 F02B 00068                 movff MIOS_PARAMETER2, AY_TONE_C_TUNE_FINE_MIDI
               00069                 
               00070                 ;; MIDI FILTER:
               00071                 ;; MIDI SWITCH TONE C NOISE C *ON*
               00072                 ;; CLEAR BIT2, BIT5
               00073                 ;; => FILTER FOR REG 7
               00074                 ;; => SWITCH ON TONE C, NOISE C  
715E 9422      00075                 bcf     AY_TONE_ABC_MIDI_ON_OFF, BIT2_TONE_C_ON_OFF
7160 9A22      00076                 bcf     AY_TONE_ABC_MIDI_ON_OFF, BIT5_NOISE_C_ON_OFF
               00077 
               00078                 ;; WRITE CURREND *NOTE ON VALUE* @ MIDI Ch Tone C
               00079                 ;; FOR CHCKING if the Note OFF value correlates with the last
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 428


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00080                 ;; NOTE ON value (importend for MIDI KEYBOARD HANDLING of delayed NOTE OFF values) 
               00081                 ;; processing @ note_off.inc
7162 C012 F01D 00082                 movff     MIDI_EVNT1, CURRENT_MIDI_EVENT_NOTE_ON_OFF_C
               00083 
               00084 
               00085         ;; CHECK IF FX C = ON or OFF
7166 A44D      00086         btfss FX_USER_ON_OFF_ABC, BIT2_FX_ON_OFF_TONE_C
               00087                         ;; NO, BIT2 IS NOT SET - Fx @ TONE C = off
               00088                         ;; DO NOT PERFORM Fx Note On Routines
               00089                         rgoto  MIDI_EVNT_NOTE_ON_TONE_C_CHCK_ENVELOPE_MODE
7168 D004          M         bra     label
               00090                 
               00091                 ;; #####################################################
               00092                 ;; ### hier noch FX USER ON / OFF TONE ABC einbauen ####
               00093                 ;; For Fx Tunes #123
               00094                 ;; Save the last 3 Note Values
716A EC48 F03E 00095                 call    WRITE_FX_TUNE_1_2_3     
               00096                 
               00097                 ;; SET FX MIDI *NOTE ON* FLAG @ TONE C
716E 844E      00098                 bsf Fx_MIDI_NOTE_ON_OR_OFF, BIT2_TONE_C_ON_OFF
               00099                 
               00100                 ;; CHANGE (inc) THE FX SESSION (WILL RESET FX POS)
7170 2A54      00101                 incf FX_MIDI_NOTE_ON_SESSION, F
               00102                 ;; #####################################################
               00103                 
7172           00104 MIDI_EVNT_NOTE_ON_TONE_C_CHCK_ENVELOPE_MODE             
               00105                 ;; -------------[ENVELOPE MODE?]------------------------
               00106                 ;; CHECK: IS ENVELOPE MODE @ TONE C ON?
               00107                 ;; BIT 4 SET    = ENV. MODE ON
               00108                 ;; BIT 4 CLEAT  = ENV. MODE OFF
7172 B86E      00109                 btfsc AY_R10_CH_C_AMPLITUDE, BIT4_ENVELOPE_ON_OFF
               00110                         ;; YES - BIT 4 is SET - ENV. MODE ON
               00111                         ;; WRITE ENV REG AY CHIP
               00112                         rgoto MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_C_ENV_MODE
7174 D001          M         bra     label
               00113                                 ;; NO - BIT 4 is CLEAR - ENV. MODE OFF
               00114                                 ;; NO NEED FOR WRITING AY REG 13
               00115                                 ;; GO ON WITH DETUNE CHECKING
               00116                                 rgoto MIDI_EVNT_NOTE_ON_CHECK_DETUNE_C
7176 D006          M         bra     label
               00117 
               00118         
7178           00119 MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_C_ENV_MODE
               00120         ;; -------------[ENVELOPE MODE TONE C ON]------------------------
               00121         ;; SEND DATA TO AY REG 13 (ENV. SHAPE Cycle REG)
7178 0E0D      00122         movlw  AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  ; SET AY REGISTER
717A 6E39      00123         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00124         ;; WRITE ENVELOPE SHAPE CYCLE DATA TO AY CHIP
717C C071 F03A 00125         movff AY_R13_ENV_SHAPE_CYCLE, AY_REG_DATA
               00126         ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
7180 ECAA F01B 00127         call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00128         ;; ==========================================================================================
               00129 
               00130 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 429


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00131 ; ;; -------------[DETUNE C]------------------------
7184           00132 MIDI_EVNT_NOTE_ON_CHECK_DETUNE_C
               00133 
               00134 ;; -------------[CHECK DETUNE C (PITCH BEND)]------------------------
               00135 
               00136 ;; * CHECK DETUNE (PITCH BEND)
               00137 ;;      * Coarse
               00138 ;;      * Fine 
               00139 
               00140 ;; -------------[CHECK COARSE DETUNE TONE C]---------------------------------------
7184           00141 MIDI_EVNT_NOTE_ON_CHECK_TONE_C_COARSE_DETUNE
               00142         ;;CHECK USER COASE DETUNE?
               00143         ;:USER COARSE RANGE:
               00144         ;;(-) RANGE = [0 to 6]|OFFSET/ZERO = [7]| (+) RANGE = [8 to 15]
               00145         ;;
               00146         ;; AY_TONE_A_TUNE_COARSE_USER | COARSE TUNE
               00147         ;; ...
               00148         ;; 3 ========================>| -4
               00149         ;; 4 ========================>| -3
               00150         ;; 5 ========================>| -2
               00151         ;; 6 ========================>| -1
               00152         ;; 7 ========================>|  0
               00153         ;; 8 ========================>| +1
               00154         ;; 9 ========================>| +2
               00155         
               00156         ;; IS USER COARSE TUNE = [7] ?
7184 0E07      00157         movlw   OFFSET_COARSE_TUNE_IS_7
7186 6228      00158         cpfseq  AY_TONE_C_TUNE_COARSE_USER      
               00159                 ;; NO: NOT 7, SO COARSE USER *DETUNE IS GIVEN*
               00160                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_CHECK_COARSE_DETUNE_PLUS_OR_MINUS
7188 D001          M         bra     label
               00161                 ;; YES: COARSE DETUNE = 7, SO *NO COARSE DETUNE IS GIVEN*
               00162                 ;; GO ON WITH DETUNE FINE
               00163                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE
718A D01F          M         bra     label
               00164 
               00165 
718C           00166 MIDI_EVNT_NOTE_ON_TONE_C_CHECK_COARSE_DETUNE_PLUS_OR_MINUS
               00167                 ;; CHECK COARSE DETUNE = (+) or (-)
               00168                 ;; COARSE TUNE IS <> 7 SO COARSE REG DETUNE
               00169                 ;; IS GIVEN @ TONE C
               00170                 ;; RANGE (-) = [0-6] |(No DETUNE) = [7] | (+) = [8-15]
718C 0E06      00171                 movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06
718E 6428      00172                 cpfsgt  AY_TONE_C_TUNE_COARSE_USER      
               00173                         ;; NO 
               00174                         ;; SO COARSE DETUNE = (-) = RANGE [0 to 6]
               00175                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_IS_MINUS
7190 D001          M         bra     label
               00176                         ;; YES
               00177                         ;; SO COARSE DETUNE = (+) = RANGE [8 to 15]
               00178                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_IS_PLUS
7192 D00D          M         bra     label
               00179                         
               00180 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 430


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7194           00181 MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_IS_MINUS
               00182         ;; DETUNE COARSE IS NEGATIVE
               00183         ;; -------------------------
               00184         ;; calculate COARSE DETUNE (-) VALUE:
               00185         ;; WREG [(0x07 (+1 [PLUS_1_CARRY_BIT_KILLER])] - F [(0x00 to 0x06)| (+1 Carry BIT (of subfwb))] 
               00186         ;; WRITE RESULT TO => [WREG (0x07 to 0x01)]
               00187         ;; TO GET THE (-) COARSE TUNE RESULT [RANGE: 0x07 to 0x01]
               00188         
               00189         
               00190         ;; (1) MOVE OFFSET TO WREG and
               00191         ;; (3)Subtract f from WREG 
               00192         ;; the CARRY bit will allway be set
               00193         ;; because WREG is (allways in this case) > f) 
               00194         ;; (2) SO WE NEED TO ADD +1 TO WREG
               00195         ;; for [+1 WREG] - [+1 Carry BIT] = 0 (the needed offset)
7194 0E07      00196         movlw   OFFSET_COARSE_TUNE_IS_7 ;; (1)
7196 0F01      00197         addlw   PLUS_1_CARRY_BIT_KILLER ;; (2)
7198 5428      00198         subfwb  AY_TONE_C_TUNE_COARSE_USER, W ;; (3)
               00199                 
               00200         ;; ADD (*) COARSE MINUS DETUNE [WREG (RANGE 0x01 to 0x07)] 
               00201         ;; TO THE COARSE "NOTE ON VALUE" 
               00202         ;; DON'T BE CONFUSED (*):
               00203         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00204         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
719A 262E      00205         addwf   AY_TONE_C_TUNE_COARSE_MIDI, F
               00206         
               00207                 ;; TUNE COARSE TUNE RANGE = BIN 00000000 to 00001111 (DEC. 0 to 15)
               00208                 ;; TUNE COARSE TUNE > BIN 00001111? 
719C 0E0F      00209                 movlw   NIBBLE_B00001111
719E 642E      00210                 cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00211                                                 ;; NO
               00212                                                 ;; OK, GO ON WITH DETUNE FINE
               00213                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE
71A0 D014          M         bra     label
               00214 
               00215                         ;; YES - COASE TUNE REG VALUE IS > 0x0F NO VALID VALUE FOR THE AY CHIP!
               00216                         ;; SWITCH TUNE COARSE REG TO 0x0F
               00217                         ;; GO AND WRITE MAXIMUM VALUE TO COARSE and FINE REG
               00218                         rgoto   MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_C_TO_MAX_VALUE
71A2 D000          M         bra     label
               00219 
               00220 
71A4           00221 MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_C_TO_MAX_VALUE
               00222                                 ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
71A4 0E0F      00223                                 movlw COARSE_TUNE_MAX_VALUE_B00001111
71A6 6E2E      00224                                 movwf AY_TONE_C_TUNE_COARSE_MIDI
71A8 0ED2      00225                                 movlw FINE_TUNE_MAX_VALUE_B11010010
71AA 6E2B      00226                                 movwf AY_TONE_C_TUNE_FINE_MIDI
               00227                 
               00228                                                 ;; GO ON WITH DETUNE FINE
               00229                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE
71AC D00E          M         bra     label
               00230 
               00231 ;; ------------------------[DETUNE COARSE POSITIVE]----------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 431


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00232 
71AE           00233 MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_IS_PLUS
               00234         ;; DETUNE IS POSITIVE
71AE 0E07      00235         movlw   OFFSET_COARSE_TUNE_IS_7
71B0 5C28      00236         subwf   AY_TONE_C_TUNE_COARSE_USER, W           ; - 0x07 (OFFSET IN W REG)
71B2 6E2F      00237         movwf   AY_DETUNE_TEMP                          ; SAVE (+) COARSE DETUNE VALUE
               00238 
               00239         ;; NOW COARSE DETUNE IS IN WREG
               00240         ;; (+) COARSE DETUNE RANGE => [0x01 to 0x08]            
               00241         ;; COMPARE W REG WITH COARSE TUNE MIDI VALUE
               00242         ;; IS THE COASE MIDI VALUE > COASE DETUNE VALUE IN W REG
               00243         ;; NEXT STEP: SUBTRACT [(+) DETUNE COARSE] FROM [MIDI COARSE TUNE]
               00244         ;; BUT WE MUST FIRS CHECK IF THERE WILL BE A VALID VALUE
               00245         ;; COMPARE W REG [(+) DETUNE COARSE] WITH [COARSE TUNE MIDI] 
               00246         ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
71B4 642E      00247         cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00248                 
               00249                 ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
               00250                 ;; NO - SO SET TUNE REGS TO MIN. VALUE  = HIGHEST TUNE
               00251                 rgoto   MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_C_TO_HIGHEST_TUNE
71B6 D001          M         bra     label
               00252 
               00253                 ;; IS (F) [MIDI COARSE TUNE] > (W) [(+) DETUNE COARSE]?
               00254                 ;; YES - OK GO ON
               00255                 rgoto   MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_ADDITIVE_GO_ON
71B8 D005          M         bra     label
               00256 
               00257 
71BA           00258 MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_C_TO_HIGHEST_TUNE
               00259                         ;; SET TUNE REGS TO HIGHEST FREQUENCY POSSIBLE
               00260                         ;; THAT MEANS TO SET TUNE REGS TO MIN. VALUE
               00261                         ;; MIN VALUE = HIGHEST TUNE
71BA 0E00      00262                         movlw  COARSE_TUNE_MIN_VALUE_B00000000
71BC 6E2E      00263                         movwf  AY_TONE_C_TUNE_COARSE_MIDI
71BE 0E0A      00264                         movlw  FINE_TUNE_MIN_VALUE_B00001010
71C0 6E2B      00265                         movwf  AY_TONE_C_TUNE_FINE_MIDI
               00266                                                 ;; GO ON WITH DETUNE FINE
               00267                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE
71C2 D003          M         bra     label
               00268 
71C4           00269 MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_ADDITIVE_GO_ON
               00270                         ;; ADD THE (+) USER COARSE DETUNE FREQUENCY VALUE NOW
               00271                         ;; THIS MEANS TO SUBTRACT COARSE DETUNE VALUE from the COARSE "NOTE ON" MIDI VALUE 
               00272                         ;; YES THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00273                         ;; TUNE FREQUENCY "+" = "-" @ TUNE REGISTER
71C4 502F      00274                         movf    AY_DETUNE_TEMP, W
71C6 5E2E      00275                         subwf   AY_TONE_C_TUNE_COARSE_MIDI, F
               00276                                         
               00277                                                 ;; GO ON WITH DETUNE FINE
               00278                                                 rgoto   MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE
71C8 D000          M         bra     label
               00279 
               00280 ;; -------------[END OF DETUNE COASE TONE C ]--------------     
               00281 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 432


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00282 ;; ----------------[CHECK DETUNE FINE]--------------------------------------
71CA           00283 MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE
               00284         ;;CHECK USER DETUNE (PITCH BEND)
71CA 0E80      00285         movlw   OFFSET_FINE_TUNE_IS_128
               00286         ;; TONE A FINE TUNE = 128? 
               00287         ;; 128 = INITIAL VALUE = NO USER DETUNE
71CC 6225      00288         cpfseq  AY_TONE_C_TUNE_FINE_USER        
               00289 
               00290                         ;; NO, NOT 128 - SO *DETUNE IS GIVEN*
               00291                         ;; START WITH TONE C - CHECK USER TONE C - FINE TUNE
               00292                         rgoto MIDI_EVNT_NOTE_ON_CHECK_DETUNE_C_FINE_IS_PLUS_OR_MINUS
71CE D001          M         bra     label
               00293 
               00294                         ;; YES AY_TONE_A_TUNE_FINE_USER = 128 *NO DETUNE IS GIVEN*
               00295                         ;; Go AND WRITE TUNE TO AY CHIP
               00296                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
71D0 D05F          M         bra     label
               00297 
               00298 
71D2           00299 MIDI_EVNT_NOTE_ON_CHECK_DETUNE_C_FINE_IS_PLUS_OR_MINUS
               00300         ;; CHECK IF USER DETUNE IS (+) OR (-)
71D2 0E7F      00301         movlw   PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F
               00302         ;; TONE A FINE TUNE > 127? 
71D4 6425      00303         cpfsgt  AY_TONE_C_TUNE_FINE_USER        
               00304 
               00305                         ;; NO => USER FINE DETUNE => (-)
               00306                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_MINUS
71D6 D001          M         bra     label
               00307                         
               00308                         ;; YES => USER FINE DETUNE => (+)
               00309                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_PLUS
71D8 D02D          M         bra     label
               00310 
               00311 ;; -----------[PITCH BEND TONE C == NEGATIVE]--------------
71DA           00312 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_MINUS      
               00313         ;; DETUNE IS NEGATIVE - LOWER FREQUENCY
               00314         ;; (-) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [0   to 127] DETUNE IS NEGATIVE (HERE)
               00315         ;; (+) RANGE OF: AY_TONE_A_TUNE_FINE_USER = [128 to 255] DETUNE IS POSITIVE
               00316         ;; (NO DETUNE) : AY_TONE_A_TUNE_FINE_USER = [128]
               00317         
               00318         ;; WRITE 128 TO WREG
               00319         ;; WREG [(128) + (1 (CARRY KILLER))] - [[AY_TONE_A_TUNE_FINE_USER |(0 to 127)] + [+1 (CARRY)]]
               00320         ;; WRITE RESULT TO => [WREG]
71DA 0E80      00321         movlw   OFFSET_FINE_TUNE_IS_128 
71DC 0F01      00322         addlw   PLUS_1_CARRY_BIT_KILLER
71DE 5425      00323         subfwb  AY_TONE_C_TUNE_FINE_USER, W 
               00324         
               00325         ;; WRITE RESULT TO [WREG] TO => [AY_DETUNE_TEMP]
71E0 6E2F      00326         movwf   AY_DETUNE_TEMP
               00327         ;; [AY_DETUNE_TEMP] RANGE => [1 to 128]
               00328         
               00329         ;; So the [USER DETUNE RANGE] => [-1 to -128] 
               00330         ;; Expand the (-) RANGE to 8BIT (255):
               00331         ;; 2x (-1 to -128) => (-2 to -256(!))
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 433


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
71E2 262F      00332         addwf   AY_DETUNE_TEMP, F
               00333         ;; -1 | => (1 to 255)
71E4 062F      00334         decf    AY_DETUNE_TEMP, F
               00335         ;; WRITE [(-) DETUNE FINE] TO [WREG]
               00336         ;; (-) RANGE => [1 to 255]
               00337 
               00338 ;; ------[DETUNE NEGATIVE RATIO CHANGE?]------------------
               00339 
               00340         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00341         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00342         ;; 4 to 15 => NO RATIO CHANGE
71E6 0E03      00343         movlw   0x03     
71E8 642E      00344         cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00345 
               00346                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00347                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00348                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE
71EA D001          M         bra     label
               00349                         
               00350                         ;; YES [MIDI TUNE COARSE REG > 3]
               00351                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00352                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_GO_ON       
71EC D013          M         bra     label
               00353 
71EE           00354 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE
               00355         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
               00356         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00357         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00358         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
71EE 502E      00359         movf AY_TONE_C_TUNE_COARSE_MIDI, W
               00360         JUMPTABLE_2BYTES 4
71F0 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
71F2 B0D8          M         skpnc
71F4 0EFC          M         movlw   -(max_value)
71F6 0F04          M         addlw   max_value
71F8 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00361                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
71FC D003          M         bra     label
               00362                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
71FE D004          M         bra     label
               00363                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
7200 D005          M         bra     label
               00364                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
7202 D006          M         bra     label
               00365         
               00366 ;; ADJUST PITCH BEND RATIO
               00367 ;; JUMP IN HERE = PITCH BAND /16
7204           00368 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x
7204 422F      00369                 rrncf   AY_DETUNE_TEMP, F
7206 9E2F      00370                 bcf     AY_DETUNE_TEMP, 7
               00371 ;; JUMP IN HERE = PITCH BAND /8
7208           00372 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x
7208 422F      00373                 rrncf   AY_DETUNE_TEMP, F
720A 9E2F      00374                 bcf     AY_DETUNE_TEMP, 7
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 434


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00375 ;; JUMP IN HERE = PITCH BAND /4
720C           00376 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x
720C 422F      00377                 rrncf   AY_DETUNE_TEMP, F
720E 9E2F      00378                 bcf     AY_DETUNE_TEMP, 7
               00379 ;; JUMP IN HERE = PITCH BAND /2
7210           00380 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x
7210 422F      00381                 rrncf   AY_DETUNE_TEMP, F
7212 9E2F      00382                 bcf     AY_DETUNE_TEMP, 7
               00383         
               00384 ;; ------[DETUNE RATIO CHANGE END]------------------
               00385 
7214           00386 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_GO_ON     
               00387         ;; >> ADD (-) DETUNE to "NOTE ON" VALUE <<
               00388         ;; DON'T BE CONFUSED: 
               00389         ;; DETUNE NEGATIVE => LOWER  FREQ = HIGHER TUNE REG VALUE
               00390         ;; DETUNE ADDITIVE => HIGHER FREQ = LOWER TUNE REG VALUE
7214 90D8      00391         clrc    ;; CLEAR CARRY BIT
7216 502F      00392         movf    AY_DETUNE_TEMP, W
7218 262B      00393         addwf   AY_TONE_C_TUNE_FINE_MIDI, F
               00394             
               00395             ;;  *carry flag* is set when an instruction overflows a register.
               00396             ;;  branch if a carry flag is true - INC the 4 BIT COARSE TUNE REG
721A E201      00397             bc MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_C_INC
               00398                         
               00399                                 ;; Go AND WRITE TUNE TO AY CHIP
               00400                                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
721C D039          M         bra     label
               00401 
721E           00402 MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_C_INC
               00403         ;; THE CARRY FLAG HAS BEEN SET (OVERFLOW OF FINE TUNE REG)
               00404         ;; CHECK MIDI COASE REG = 0x0F ? 
               00405         ;; IS COARSE TUNE REG > BIN xxxx1110 ? => 14 (15 = higest Value) 
721E 0E0E      00406         movlw   COARSE_TUNE_MAX_MINUS_1_B00001110
7220 642E      00407         cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00408 
               00409                         ;; NO - COARSE REG TUNE RANGE IS [0 to 14]
               00410                         ;; OK SO COASE REG IS VALID
               00411                         rgoto MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_C_INC
7222 D001          M         bra     label
               00412 
               00413                         ;; YES - NO INC OF COARSE REG POSSIBLE
               00414                         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG. 
               00415                         rgoto MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_C
7224 D002          M         bra     label
               00416 
               00417 
7226           00418 MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_C_INC        
               00419         ;; INC PITCH CARRY FROM FINE-TUNE REG 
               00420         ;; +1 to COASE TUNE REG 
7226 2A2E      00421         incf AY_TONE_C_TUNE_COARSE_MIDI, F
               00422         
               00423                                 ;; Go AND WRITE TUNE TO AY CHIP
               00424                                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
7228 D033          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 435


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00425 
722A           00426 MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_C
               00427         ;; WRITE MAXIMUM VALUE TO COARSE and FINE REG
722A 0E0F      00428         movlw  COARSE_TUNE_MAX_VALUE_B00001111
722C 6E2E      00429         movwf  AY_TONE_C_TUNE_COARSE_MIDI
722E 0ED2      00430         movlw  FINE_TUNE_MAX_VALUE_B11010010
7230 6E2B      00431         movwf  AY_TONE_C_TUNE_FINE_MIDI
               00432         
               00433                                 ;; Go AND WRITE TUNE TO AY CHIP
               00434                                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
7232 D02E          M         bra     label
               00435 
               00436 ;                       
               00437                 
               00438 ;; -----------[PITCH BEND FINE TONE C == POSITIVE]--------------
7234           00439 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_PLUS
               00440         ;; DETUNE IS POSITIVE - HIGHER FREQUENCY
               00441         ;; (+) RANGE OF: AY_TONE_C_TUNE_FINE_USER = [129 to 255] DETUNE IS POSITIVE (HERE)
               00442         ;; (-) RANGE OF: AY_TONE_C_TUNE_FINE_USER = [0   to 127] DETUNE IS NEGATIVE 
               00443         ;; (NO DETUNE) : AY_TONE_C_TUNE_FINE_USER = [128]
               00444         
               00445         ;; OFFSET JUSTAGE
               00446         ;; WRITE 128 TO WREG
7234 0E80      00447         movlw   OFFSET_FINE_TUNE_IS_128
               00448         ;; {[AY_TONE_C_TUNE_FINE_USER | (129 to 255)] - [WREG|(128)]} WRITE TO => [WREG]
7236 5C25      00449         subwf   AY_TONE_C_TUNE_FINE_USER, W             ; - 0x80 = OFFSET
               00450                 ;; RANGE JUSTAGE
               00451                 ;; WRITE [WREG] TO => [AY_DETUNE_TEMP]
               00452                 ;; RANGE == [+1 to +128]
7238 6E2F      00453                 movwf   AY_DETUNE_TEMP
               00454                 ;; 2x => (+2 to +256)
723A 262F      00455                 addwf   AY_DETUNE_TEMP, F
               00456                 ;; -1 => (+1 to +255)
723C 062F      00457                 decf    AY_DETUNE_TEMP, F
               00458 
               00459 ;; ------[DETUNE RATIO CHANGE?]------------------
               00460         ;; CHECK IF WE NEED TO CHANGE THE PITCH BEND RATIO
               00461         ;; CHECK IF MIDI TUNE COARSE REG > 3 
               00462         ;; 4 to 15 => NO RATIO CHANGE
723E 0E03      00463         movlw   0x03     
7240 642E      00464         cpfsgt  AY_TONE_C_TUNE_COARSE_MIDI      
               00465 
               00466                         ;; NO [MIDI TUNE COARSE REG = 0 to 3]
               00467                         ;; THERE MUST BE A PITCH BEND RATIO CONVERSATION
               00468                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE
7242 D001          M         bra     label
               00469                         
               00470                         ;; YES [MIDI TUNE COARSE REG > 3]
               00471                         ;; THERE MUST BE *NO* PITCH BEND RATIO CHANGE
               00472                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_GO_ON
7244 D013          M         bra     label
               00473 
7246           00474 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE      
               00475         ;; 0) PITCH BEND /16 ==> IF MIDI TUNE COARSE REG == 0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 436


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00476         ;; 1) PITCH BEND / 8 ==> IF MIDI TUNE COARSE REG == 1
               00477         ;; 2) PITCH BEND / 4 ==> IF MIDI TUNE COARSE REG == 2
               00478         ;; 3) PITCH BEND / 2 ==> IF MIDI TUNE COARSE REG == 3
7246 502E      00479         movf AY_TONE_C_TUNE_COARSE_MIDI, W
               00480         JUMPTABLE_2BYTES 4
7248 0FFC          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
724A B0D8          M         skpnc
724C 0EFC          M         movlw   -(max_value)
724E 0F04          M         addlw   max_value
7250 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00481                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x      ;; 0  ==> PITCH BAND VALUE /16
7254 D003          M         bra     label
               00482                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x       ;; 1  ==> PITCH BAND VALUE /8
7256 D004          M         bra     label
               00483                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x       ;; 2  ==> PITCH BAND VALUE /4
7258 D005          M         bra     label
               00484                 rgoto        MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x       ;; 3  ==> PITCH BAND VALUE /2
725A D006          M         bra     label
               00485         
               00486         
               00487         
               00488 ;; ADJUST PITCH BEND RATIO
               00489 ;; JUMP IN HERE = PITCH BAND /16
725C           00490 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x 
725C 422F      00491                 rrncf   AY_DETUNE_TEMP, F
725E 9E2F      00492                 bcf     AY_DETUNE_TEMP, 7
               00493 ;; JUMP IN HERE = PITCH BAND /8
7260           00494 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x
7260 422F      00495                 rrncf   AY_DETUNE_TEMP, F
7262 9E2F      00496                 bcf     AY_DETUNE_TEMP, 7
               00497 ;; JUMP IN HERE = PITCH BAND /4
7264           00498 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x
7264 422F      00499                 rrncf   AY_DETUNE_TEMP, F
7266 9E2F      00500                 bcf     AY_DETUNE_TEMP, 7
               00501 ;; JUMP IN HERE = PITCH BAND /2
7268           00502 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x
7268 422F      00503                 rrncf   AY_DETUNE_TEMP, F
726A 9E2F      00504                 bcf     AY_DETUNE_TEMP, 7
               00505 
               00506 ;; ------[DETUNE RATIO CHANGE END]------------------
               00507 
726C           00508 MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_GO_ON
               00509 ;; ------WRITE DETUNE TO MIDI TUNE FINE REG
               00510         
               00511                 ;; CHECK: DO WE NEED TO SUBTRACT THE NEGATIVE CARRY BIT
               00512                 ;; FROM THE MIDI TUNE COARSE REG?
               00513                 ;; IS [DETUNE FINE] > W [TONE FINE MIDI] ?
               00514                 ;; // [DETUNE FINE] MUST BE = or < THEN [TONE FINE MIDI]
               00515                 ;; // otherwise WE HAVE DO DEC -1 @ [COARSE MIDI REG]
726C 502B      00516                 movf    AY_TONE_C_TUNE_FINE_MIDI, W     ;; W
726E 642F      00517                 cpfsgt  AY_DETUNE_TEMP                  ;; F
               00518                                                 
               00519                         ;; NO
               00520                         ;; W [MIDI FINE REG] WAS > F [DETUNE FINE]
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 437


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00521                         ;; or W [MIDI FINE REG] == F [DETUNE FINE]
               00522                         ;; SO WE CAN GO ON 
               00523                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_C
7270 D001          M         bra     label
               00524                 
               00525                         ;; YES 
               00526                         ;; F [PITCH BEND] WAS > W [MIDI FINE REG]
               00527                         ;; SO WE HAVE DO DEC -1 [COARSE MIDI REG]
               00528                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_C_DEC   
7272 D003          M         bra     label
               00529 
               00530 
7274           00531 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_C        
               00532         ;; WRITE THE POSITIVE PITCH BEND TO THE "NOTE ON MIDI VALUE" [FINE TUNE + COARSE TUNE REG]
               00533         ;; SUBTRACT DETUNE (THE POSITIVE PITCH BEND) from "NOTE ON" MIDI VALUE 
               00534         ;; THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00535         ;; TUNE "+" = "-" @ TUNE REG (LOGIC => AY SOUND CHIP)
7274 502F      00536         movf    AY_DETUNE_TEMP, W
7276 5E2B      00537         subwf   AY_TONE_C_TUNE_FINE_MIDI, F
               00538                                                         ;; OK, FINE DETUNE IS DONE
               00539                                                         ;; Go AND WRITE TUNE TO AY CHIP
               00540                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
7278 D00B          M         bra     label
               00541 
               00542 
               00543 
727A           00544 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_C_DEC
               00545         ;; FIRST: WRITE THE POSITIVE PITCH BEND TO THE "NOTE ON MIDI VALUE" [FINE TUNE + COARSE TUNE REG]
               00546         ;; SUBTRACT DETUNE (THE POSITIVE PITCH BEND) from "NOTE ON" MIDI VALUE 
               00547         ;; THE POSITIVE VALUE WILL BE SUBTRACTED (DON'T BE CONFUSED;)
               00548         ;; TUNE "+" = "-" @ TUNE REG (LOGIC => AY SOUND CHIP)
727A 502F      00549         movf    AY_DETUNE_TEMP, W
727C 5E2B      00550         subwf   AY_TONE_C_TUNE_FINE_MIDI, F
               00551         
               00552                                 ;; WE HAVE TO DEC THE VALUE OF COARSE REG -1
               00553                                 ;; BUT CHECK MIDI COASE REG = 0x00 ? 
               00554                                 ;; BECAUSE => 0x00 = INVALID VALUE 
727E 0E00      00555                                 movlw   0x00
7280 622E      00556                                 cpfseq  AY_TONE_C_TUNE_COARSE_MIDI
               00557 
               00558                                         ;; NO - OK COARSE REG IS > 0 - SO GO ON WITH DEC COASE TUNE REG | -1
               00559                                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_C_GO_ON
7282 D001          M         bra     label
               00560 
               00561                                         ;; YES - COARSE REG = 0 
               00562                                         ;; WE CAN NOT DEC. COARSE REG (ALLREADY 0x00)
               00563                                         ;; SO WRITE THE highest PITCH BEND DATA as possible TO THE 
               00564                                         ;; FINE AND COARSE REG instead
               00565                                         rgoto MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_C
7284 D002          M         bra     label
               00566 
               00567 
7286           00568 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_C_GO_ON  
               00569         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 438


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00570                                                 ;; DEC DETUNE CARRY FROM FINETUNE REG (MINUS CARY) 
               00571                                                 ;; -1 to COASE TUNE REG 
7286 062E      00572                                                 decf AY_TONE_C_TUNE_COARSE_MIDI, F
               00573         
               00574                                                         ;; Go AND WRITE TUNE TO AY CHIP
               00575                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
7288 D003          M         bra     label
               00576 
               00577 
728A           00578 MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_C
               00579         
               00580                                                 ;; THE TUNE WOULD BE OUT OF RANGE 
               00581                                                 ;; SO SET FINE TUNE REG TO 0x0A (highest value that is VALID)
               00582                                                 ;; COARSE TUNE REG IS ALLREADY 0x00
728A 0E0A      00583                                                 movlw   FINE_TUNE_MIN_VALUE_B00001010
728C 6E2B      00584                                                 movwf   AY_TONE_C_TUNE_FINE_MIDI
               00585         
               00586                                                         ;; Go AND WRITE TUNE TO AY CHIP
               00587                                                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
728E D000          M         bra     label
               00588 
               00589 ;; -------------[END OF DETUNE TONE C FINE ]--------------              
               00590 
7290           00591 MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP
               00592 
               00593         ;; -------------[SEND TUNE DATA TONE C TO AY CHIP]--------------
               00594         ;; SEND TUNE C TO AY CHIP       
7290 0E05      00595         movlw  AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE
7292 6E39      00596         movwf  AY_REG_ADDRESS           ; ADDRESS FOR => AY_SR_Write
               00597 
7294 502E      00598         movf   AY_TONE_C_TUNE_COARSE_MIDI, W    ; DATA FOR AY REG X
7296 6E3A      00599         movwf  AY_REG_DATA              ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00600         
7298 ECAA F01B 00601                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE           
               00602         
               00603 
729C 0E04      00604         movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE
729E 6E39      00605         movwf  AY_REG_ADDRESS           ; ADDRESS FOR => AY_SR_Write
               00606 
72A0 502B      00607         movf   AY_TONE_C_TUNE_FINE_MIDI, W      ; DATA FOR AY REG X
72A2 6E3A      00608         movwf  AY_REG_DATA              ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00609         
72A4 ECAA F01B 00610                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00611 
               00612 ; ;; -------------[END OF DETUNE TONE C ]--------------
               00613 
               00614 ;; ----------------------------[CHECK VELOCITY TO NOISE PERIOD @ TONE C]-------------------------
               00615 
               00616         ;; CHECK IF BIT3 is SET
72A8 A633      00617         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF
               00618                 ;; NO, BIT3 IS NOT SET
               00619                 ;; THERE IS NO VELOCITY TO NOISE PERIOD
               00620                 ;; SO GO ON WITCH CHECKING THE VELOCITY TO VOLUME @ TONE C
               00621                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 439


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
72AA D01B          M         bra     label
               00622         
               00623                 ;; YES - BIT3 IS SET - CHECK IF VELOCITY IS @ TONE C
               00624                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY_TO_NOISE_PERIOD
72AC D000          M         bra     label
               00625 
72AE           00626 MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY_TO_NOISE_PERIOD
               00627         ;; YES - BIT3 IS SET [VELOCITY TO NOISE PERIOD = ON]
               00628         ;; CHECK IF VELOCITY IS @ TONE C => BIT7
72AE AE33      00629         btfss AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF
               00630                 ;; NO, BIT7 IS NOT SET
               00631                 ;; THERE IS NO VELOCITY TO NOISE PERIOD @ TONE C 
               00632                 ;; SO GO ON WITCH CHECKING THE VELOCITY TO VOLUME @ TONE C
               00633                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY
72B0 D018          M         bra     label
               00634         
               00635                 ;; YES - BIT7 IS SET - WRITE VELOCITY TONE C TO NOISE PERIOD 
               00636                 rgoto MIDI_EVNT_NOTE_ON_TONE_C_WRITE_VELOCITY_TO_NOISE_PERIOD
72B2 D000          M         bra     label
               00637 
72B4           00638 MIDI_EVNT_NOTE_ON_TONE_C_WRITE_VELOCITY_TO_NOISE_PERIOD
               00639         ;; CONVERT MIDI DATA 7BIT (0-127) TO NOISE PERIOD 5BIT(0-31)
               00640         ;; {VOLUME TONE 5BIT} = {MIDI DATA 7BIT}/4
               00641 
               00642         ;; WRITE MIDI DATA BYTE2 0-127 
               00643         ;; TO AY_MIDI_VELOCITY_TO_VOLUME
72B4 C013 F035 00644         movff   MIDI_EVNT_VALUE, AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00645               
               00646                   
               00647               ;; convert AY_MIDI_VELOCITY_TO_NOISE_PERIOD to 5BIT
               00648               ;; divide ==> (MIDI DATA)/4
72B8 4235      00649               rrncf     AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F      ;; /2
72BA 9E35      00650               bcf               AY_MIDI_VELOCITY_TO_NOISE_PERIOD, 7
72BC 4235      00651               rrncf     AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F      ;; /4
72BE 9E35      00652               bcf               AY_MIDI_VELOCITY_TO_NOISE_PERIOD, 7
               00653               
               00654 
               00655               
72C0 0E1F      00656               movlw 0x1F ;; BIN 0001 1111
72C2 1635      00657               andwf AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F
               00658 
               00659               ;; NOW THE VELOCITY IS IN THE 5 LOWER BITS (0-31 dec.)
               00660               ;; AY_MIDI_VELOCITY_TO_NOISE_PERIOD => BIN '000V VVVV'
               00661               
72C4 0E20      00662               movlw 0x20
72C6 5635      00663               subfwb AY_MIDI_VELOCITY_TO_NOISE_PERIOD, F
               00664 
72C8 0E1F      00665                 movlw 0x1F
72CA 6435      00666                 cpfsgt AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00667 
               00668                       ;; NO, OK
               00669                       rgoto MIDI_EVNT_NOTE_ON_TONE_C_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW
72CC D003          M         bra     label
               00670         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 440


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00671                       ;; YES - MAKE  AY_MIDI_VELOCITY_TO_NOISE_PERIOD VALID
               00672                       rgoto MIDI_EVNT_NOTE_ON_TONE_C_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD
72CE D000          M         bra     label
               00673 
72D0           00674 MIDI_EVNT_NOTE_ON_TONE_C_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD
               00675         ;; MAKE VELOCITY VALUE VALID [xxxV VVVV]
72D0 0E1F      00676         movlw 0x1F 
72D2 6E35      00677         movwf AY_MIDI_VELOCITY_TO_NOISE_PERIOD
               00678               
72D4           00679 MIDI_EVNT_NOTE_ON_TONE_C_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW           
               00680         ;; -------------[SEND VELOCITY TO NOISE PERIOD REG 6]------------------------
72D4 0E06      00681         movlw AY_CHIP_ADR_06_NOISE_PERIOD               ; REG ADRESS    => AY REGISTER
72D6 6E39      00682         movwf AY_REG_ADDRESS                            ; ADDRESS FOR   => AY_SR_Write
               00683         
               00684         ;; WRITE AY_MIDI_VELOCITY_TO_VOLUME TO AY_REG_DATA
72D8 C035 F03A 00685         movff AY_MIDI_VELOCITY_TO_NOISE_PERIOD, AY_REG_DATA
               00686 
               00687                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
72DC ECAA F01B 00688                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00689                 ;; ==========================================================================================
               00690 
               00691                         ;; GO ON NEXT CHECK VELOCITY TONE C
               00692                         rgoto MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY
72E0 D000          M         bra     label
               00693 
               00694 ;; ----------------------------[CHECK VELOCITY TONE C]-------------------------
               00695 
72E2           00696 MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY
               00697         ;; WRITE VELOYTY TO VOLUME IF BIT 2 OF 
               00698         ;; AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF = SET
72E2 B433      00699         btfsc AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF, 2 ;; CHK BIT2
               00700                 
               00701                 ;; NO - BIT2 = SET => DO WRITE VELOCITY TO VOLUME
               00702                 rgoto  MIDI_EVNT_NOTE_ON_TONE_C_SEND_VELOCITY_TO_VOLUME
72E4 D009          M         bra     label
               00703                 
               00704                 
               00705                 ;; YES - BIT2 = CLEAR => DO NOT WRITE VELOCITY TO VOLUME
               00706                 rgoto  MIDI_EVNT_NOTE_ON_TONE_C_SEND_VELOCITY_NOT_TO_VOLUME
72E6 D000          M         bra     label
               00707 
               00708 
72E8           00709 MIDI_EVNT_NOTE_ON_TONE_C_SEND_VELOCITY_NOT_TO_VOLUME
               00710                 ;; DO NOT WRITE VELOCITY TO TONE C VOLUME
               00711                 ;; WRITE USER VOLUME TO TONE C
               00712 
               00713         ;; -------------[SEND AY REG10 AMPLITUDE TO TONE C - USER VOLUME 0-15]------------------------
72E8 0E0A      00714         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER
72EA 6E39      00715         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR   => AY_SR_Write
               00716         
               00717         ;; WRITE AY_R10_CH_C_AMPLITUDE TO AY_REG_DATA
72EC C06E F03A 00718         movff AY_R10_CH_C_AMPLITUDE, AY_REG_DATA
               00719 
               00720                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 441


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
72F0 ECAA F01B 00721                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00722                 ;; ==========================================================================================
               00723                 
               00724                               ;; NOW - SWITCH TONE [A|B|C] / [NOISE A|B|C] ON
72F4 EF92 F039 00725                               goto MIDI_EVNT_NOTE_ON_TONE_FILTER
               00726 
               00727 
72F8           00728 MIDI_EVNT_NOTE_ON_TONE_C_SEND_VELOCITY_TO_VOLUME
               00729         ;; CONVERT MIDI DATA 7BIT (0-127) TO VOLUME TONE B 4BIT(0-15)
               00730         ;; {VOLUME TONE 4BIT} = {MIDI DATA 7BIT}/8
               00731 
               00732         ;; WRITE MIDI DATA BYTE2 0-127 
               00733         ;; TO AY_MIDI_VELOCITY_TO_VOLUME
72F8 C013 F034 00734         movff   MIDI_EVNT_VALUE, AY_MIDI_VELOCITY_TO_VOLUME
               00735               
               00736                   
               00737               ;; convert AY_MIDI_VELOCITY_TO_VOLUME
               00738               ;; divide ==> (MIDI DATA)/8
72FC 4234      00739               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /2
72FE 9E34      00740               bcf               AY_MIDI_VELOCITY_TO_VOLUME, 7
7300 4234      00741               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /4
7302 9E34      00742               bcf               AY_MIDI_VELOCITY_TO_VOLUME, 7
7304 4234      00743               rrncf     AY_MIDI_VELOCITY_TO_VOLUME, F    ;; /8
7306 9E34      00744               bcf               AY_MIDI_VELOCITY_TO_VOLUME, 7
               00745 
               00746               
7308 0E0F      00747               movlw 0x0F ;; BIN 00001111
730A 1634      00748               andwf AY_MIDI_VELOCITY_TO_VOLUME, F
               00749 
               00750               ;; NOW THE VELOCITY IS IN THE 4 LOWER BITS (0-15 dec.)
               00751               ;; AY_MIDI_VELOCITY_TO_VOLUME => BIN '0000 VVVV'
               00752               
               00753               ;; COPY THE ENV. MODE BIT
               00754               ;; WRITE 0 TO BIT0-3 
730C 0EF0      00755               movlw 0xF0 ;; BIN 1111 0000
730E 146E      00756               andwf AY_R10_CH_C_AMPLITUDE, W
               00757 
7310 1034      00758               iorwf AY_MIDI_VELOCITY_TO_VOLUME, W
7312 6E34      00759               movwf AY_MIDI_VELOCITY_TO_VOLUME
               00760 
               00761         
               00762         ;; -------------[SEND VELOCITY AMPLITUDE TO TONE C - AY REG 10]------------------------
7314 0E0A      00763         movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER
7316 6E39      00764         movwf AY_REG_ADDRESS                                    ; ADDRESS FOR   => AY_SR_Write
               00765         
               00766         ;; WRITE AY_R10_CH_C_AMPLITUDE TO AY_REG_DATA
7318 C034 F03A 00767         movff AY_MIDI_VELOCITY_TO_VOLUME, AY_REG_DATA
               00768 
               00769                 ;; --------------[SEND DATA TO AY REG X]-----------------------------------------------------
731C ECAA F01B 00770                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00771                 ;; ==========================================================================================
               00772 
               00773                          ;; NOW - SWITCH TONE [A|B|C] / [NOISE A|B|C] ON
               00774                          ;; => note_on_write_ay_reg7.inc
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 442


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7320 EF92 F039 00775                             goto MIDI_EVNT_NOTE_ON_TONE_FILTER
               00776 
               00777 ;; ----------------------------------[END VELOCITY TONE C]---------------------------
               00778 ;; ----------------------------------[END TONE C WORKFLOW]-----------------------------------
               00779 
               00780 
               00111 #include "note_on_write_ay_reg7.inc"                    ;; Note ON Handling
               00001 ;; ------------------------------
               00002 ;; note_on_write_ay_reg7.inc    #
               00003 ;; ------------------------------
               00004 
               00005 ;; What happend ?
               00006 ;;
               00007 ;; There was a [MIDI EVENT :: NOTE ON]
               00008 ;;      ||
               00009 ;;      || DO *NOTE ON* Processing @ TONE A,B,C
               00010 ;;      \/
               00011 ;; note_on_pipeline_a.inc 
               00012 ;; note_on_pipeline_b.inc 
               00013 ;; note_on_pipeline_c.inc
               00014 ;;      ||
               00015 ;;      \/
               00016 ;; NOW WRITE [NOTE ON] A|B|C DATA to 
               00017 ;; => AY CHIP REG. 7 
               00018 
               00019 ;; --------------------------------
               00020 
               00021 
               00022 ;;; --[NOTE ON WORKFLOW - TONE [+NOISE] A|B|C ON]--
               00023 
7324           00024 MIDI_EVNT_NOTE_ON_TONE_FILTER   
               00025 
               00026         ;; NOTE ON WORKFLOW - TONE [+NOISE] A|B|C ON
               00027         ;; MIDI NOTE ON :: TOGGLE TONE A|B|C @ AY CHIP REG 7
               00028         ;; SWITCH TONE ABC / NOISE ABC ON
               00029         
               00030         ;; WHAT WAS HAPPEND?
               00031         
               00032         ;; THRE WAS A MIDI *NOTE ON* EVENT
               00033         ;; A VALUE ACCORDING TO MIDI_EVNT1 HAS BEEN WRITTEN TO
               00034         ;; MIOS_PARAMETER1 (COASE TUNE)
               00035         ;; MIOS_PARAMETER2 (FINE TUNE)
               00036         ;; 
               00037         ;; THE MIDI-CHANNEL FILTER HAD BEEN PASSED
               00038         ;; SWITCH/FILTER MIDICHANNEL SEE LABEL => MIDI_EVNT_CHECK_MIDI_CHANNEL
               00039         ;; THE TONE SWITCH HAD BEEN PASSED ACCORDING TO THE MIDICHANNEL FILTER  
               00040         ;; BIT [X] CLEAR => TONE  [X] ON        | X = TONE      A or B or C
               00041         ;; BIT [X] CLEAR => NOISE [X] ON        | X = NOISE     A or B or C
               00042         ;; 
               00043         ;; MIDI_EVNT_CHECK_MIDI_CHANNEL_TONE_A_B_C_TONE
               00044         ;; AY REG 7 => TONE A/B/C + NOISE A/B/C
               00045         ;; 
               00046         ;; NEXT:
               00047         ;; USER SETTING FILTER 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 443


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00048         ;; MIDI TONE ON FILTER 
               00049         ;; ROR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00050         
               00051         
               00052         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00053         ;; move USER SWITCH settings to W REG
7324 5020      00054         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00055                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00056                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00057                         ;; TONE/NOISE A/B/C 
               00058 
               00059         ;; MIDI EVENT FILTER:
               00060         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00061         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00062         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00063          
               00064         
7326 1022      00065         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00066                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00067                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00068                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00069                 ;; MOVE THE RESULT TO W REG
               00070         
               00071         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00072         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7328 6E6B      00073         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00074 
               00075 
732A           00076 MIDI_EVNT_NOTE_ON_SENT_DATA_TO_AY_CHIP
               00077         ;; SEND DATA TO AY REG 7
732A 0E07      00078         movlw 0x07                      ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
732C 6E39      00079         movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00080         
               00081         ;; WRITE AY_R7_ENABLE_ABC_NOISE_IO TO AY_REG_DATA
732E C06B F03A 00082         movff AY_R7_ENABLE_ABC_NOISE_IO, AY_REG_DATA
               00083         
               00084                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7332 ECAA F01B 00085                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00086                 ;; ==========================================================================================
               00087                         
               00088 
7336 0012      00089                                 return
               00090 
               00091 
               00112 
               00113 ;; ----[AY SUB MENU CODE - Fx Menu]--------
               00114 #include "main_menu_08_fx.inc"
               00001 ;; main_menu_08_fx.inc
               00002 
               00003 ;; Function of Fx Menu 08:
               00004 ;; Some kind of "Tracker Option" for the MIDIBox AY
               00005 ;; Writes Values to AY REGISTER (timed by TIMER_FX(Timer0) and midi note on/off)
               00006 ;; See => USER_Timer @ main.asm / fx_timer.inc (polling)
               00007 ;; See => INIT_TIMER0 @ midibox_ay_ini.inc (timer0 ini)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 444


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00008 
               00009 ;; -------------------------------------------------
               00010 ;; -------------------------[MB AY MENU 8]---------- 
               00011 ;; =======================> (F8 has been pressed)
               00012 
               00013 
7338           00014 LABEL_AY_MAIN_MENU_08_FX
               00015         ;; LOAD FX DATA @ CURREND POS for LCD
7338 EC84 F03B 00016         call LOAD_FX_DATA_LCD_CURREND_POS
               00017  
               00018         ;; SHOW MIDIBOX AY MENU SWITCH SCREEN
733C EC82 F016 00019         call    MIOS_LCD_Clear
               00020         
               00021         ;; WRITE LCD ROW 1 to 4
               00022         TABLE_ADDR TEXT_MB_AY_MENUE_FX_ROW1
7340 0E18          M         movlw   LOW(addr)               ; store Lo Byte
7342 6EF6          M         movwf   TBLPTRL
7344 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7346 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7348 EC9E F016 00023         call    MIOS_LCD_PrintString
734C 0E0E      00024                  movlw   LCD_ROW1 + 14
734E EC88 F016 00025                  call    MIOS_LCD_CursorSet
7352 504F      00026                  movf    FX_POS_CURREND, W
7354 EC90 F016 00027                  call    MIOS_LCD_PrintBCD2 ;; 0-31
               00028 
               00029         
               00030         TABLE_ADDR TEXT_MB_AY_MENUE_FX_ROW2
7358 0E20          M         movlw   LOW(addr)               ; store Lo Byte
735A 6EF6          M         movwf   TBLPTRL
735C 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
735E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7360 EC9E F016 00031         call    MIOS_LCD_PrintString
7364 0E4D      00032                 movlw    LCD_ROW2 + 13
7366 EC88 F016 00033                  call    MIOS_LCD_CursorSet
736A 5052      00034                  movf    FX_TIME_PRE_EXECUTION_CURREND, W
736C EC92 F016 00035                  call    MIOS_LCD_PrintBCD3 
               00036 
               00037         ;; Fx FUNCTION
               00038         TABLE_ADDR TEXT_MB_AY_MENUE_FX_ROW3
7370 0E2A          M         movlw   LOW(addr)               ; store Lo Byte
7372 6EF6          M         movwf   TBLPTRL
7374 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7376 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 445


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #endif
7378 EC9E F016 00039         call    MIOS_LCD_PrintString
               00040                 ;; DECODE and WRITE CURREND 
               00041                 ;; FUNCTION NAME TO LCD
737C EC2D F03A 00042                 call    DECODE_FX_FUNCTION_FOR_LCD
               00043 
               00044                 
               00045         TABLE_ADDR TEXT_MB_AY_MENUE_FX_ROW4
7380 0E2E          M         movlw   LOW(addr)               ; store Lo Byte
7382 6EF6          M         movwf   TBLPTRL
7384 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7386 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7388 EC9E F016 00046         call    MIOS_LCD_PrintString
738C 0E5D      00047                 movlw   LCD_ROW4 + 13
738E EC88 F016 00048                  call    MIOS_LCD_CursorSet
7392 5051      00049                  movf    FX_DATA_CURREND, W
7394 EC92 F016 00050                  call    MIOS_LCD_PrintBCD3
               00051         
               00052         
               00053 
7398           00054 MAIN_MENU_08_FX_CHK_EDIT_MODE_POS1
               00055         ;; IS EDIT MODE POS =1?
7398 C207 F003 00056         movff AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
739C 0E01      00057         movlw MENU_ITEM_POS1; WRITE 1 TO WREG
739E 6203      00058         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00059                         
               00060                 ;; NO
               00061                 rgoto MAIN_MENU_08_NOT_EDIT_MODE_POS1
73A0 D00D          M         bra     label
               00062 
               00063         ;; YES
               00064         ;; MAIN MENU 08 EDIT MODE = POS1
               00065         ;; EDITING MODE @ Fx Pos
               00066         ;; PRINT "*" ON EDIT POSITION1
73A2 0E0B      00067         movlw   LCD_ROW1 + 11
73A4 EC88 F016 00068         call    MIOS_LCD_CursorSet
73A8 0E2A      00069         movlw   '*'
73AA EC94 F016 00070         call    MIOS_LCD_PrintChar
               00071         
73AE 0E0C      00072         movlw   LCD_ROW1 + 12
73B0 EC88 F016 00073         call    MIOS_LCD_CursorSet
73B4 0E3E      00074         movlw   '>'
73B6 EC94 F016 00075         call    MIOS_LCD_PrintChar
               00076                         ;; Check POS2
               00077                         rgoto MAIN_MENU_08_CHK_EDIT_POS2
73BA D006          M         bra     label
               00078 
               00079 
73BC           00080 MAIN_MENU_08_NOT_EDIT_MODE_POS1
               00081         ;; NO EDITING MODE @ Fx Pos 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 446


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00082         ;; PRINT "=" ON POS 1
73BC 0E0B      00083         movlw   LCD_ROW1 + 11
73BE EC88 F016 00084         call    MIOS_LCD_CursorSet
73C2 0E3D      00085         movlw   '='
73C4 EC94 F016 00086         call    MIOS_LCD_PrintChar
               00087         ;; NEXT CHECK POS2 
               00088         
               00089 ;; -------------------[POS2 ?]------------------------------------
73C8           00090 MAIN_MENU_08_CHK_EDIT_POS2
               00091         ;; IS EDIT POS = 2?
73C8 C207 F003 00092         movff AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
73CC 0E02      00093         movlw MENU_ITEM_POS2; WRITE 2 TO WREG
73CE 6203      00094         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00095                         
               00096                 ;; NO
               00097                 rgoto MAIN_MENU_08_EDIT_MODE_IS_NOT_POS2
73D0 D00D          M         bra     label
               00098 
               00099         ;; YES
               00100         ;; PRINT "*" ON EDIT POSITION2
73D2 0E4B      00101         movlw   LCD_ROW2 + 11
73D4 EC88 F016 00102         call    MIOS_LCD_CursorSet
73D8 0E2A      00103         movlw   '*'
73DA EC94 F016 00104         call    MIOS_LCD_PrintChar
               00105         
73DE 0E4C      00106         movlw   LCD_ROW2 + 12
73E0 EC88 F016 00107         call    MIOS_LCD_CursorSet
73E4 0E3E      00108         movlw   '>'
73E6 EC94 F016 00109         call    MIOS_LCD_PrintChar
               00110                         ;; GO AND CHECK POS3
               00111                         rgoto MAIN_MENU_08_CHK_EDIT_POS3
73EA D006          M         bra     label
               00112 
               00113 
73EC           00114 MAIN_MENU_08_EDIT_MODE_IS_NOT_POS2
               00115         ;; PRINT "=" ON EDIT POSITION2
73EC 0E4B      00116         movlw   LCD_ROW2 + 11
73EE EC88 F016 00117         call    MIOS_LCD_CursorSet
73F2 0E3D      00118         movlw   '='
73F4 EC94 F016 00119         call    MIOS_LCD_PrintChar
               00120         ;; GO CHECK POS3
               00121 
               00122 ;; -------------------[POS3 ?]------------------------------------      
73F8           00123 MAIN_MENU_08_CHK_EDIT_POS3
               00124         ;; IS EDITING MODE POS = 3?
73F8 C207 F003 00125         movff AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
73FC 0E03      00126         movlw MENU_ITEM_POS3; WRITE 3 TO WREG
73FE 6203      00127         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00128                         
               00129                 ;; NO
               00130                 rgoto MAIN_MENU_08_EDITING_MODE_IS_NOT_POS3
7400 D00D          M         bra     label
               00131 
               00132         ;; YES
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 447


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00133         ;; MAIN MENU 08 EDITING MODE = POS3     
               00134         ;; Fx
               00135         ;; PRINT "*" ON EDIT POSITION3
7402 0E13      00136         movlw   LCD_ROW3 + 3
7404 EC88 F016 00137         call    MIOS_LCD_CursorSet
7408 0E2A      00138         movlw   '*'
740A EC94 F016 00139         call    MIOS_LCD_PrintChar
               00140                 
740E 0E14      00141         movlw   LCD_ROW3 + 4
7410 EC88 F016 00142         call    MIOS_LCD_CursorSet
7414 0E3E      00143         movlw   '>'
7416 EC94 F016 00144         call    MIOS_LCD_PrintChar
               00145                 
               00146                 ;; CHECK POS4
               00147                 rgoto MAIN_MENU_08_CHK_EDITING_MODE_POS4
741A D006          M         bra     label
               00148 
               00149 
741C           00150 MAIN_MENU_08_EDITING_MODE_IS_NOT_POS3
               00151         ;; Fx
               00152         ;; PRINT "=" ON EDIT POSITION3
741C 0E13      00153         movlw   LCD_ROW3 + 3
741E EC88 F016 00154         call    MIOS_LCD_CursorSet
7422 0E3D      00155         movlw   '='
7424 EC94 F016 00156         call    MIOS_LCD_PrintChar
               00157         ;; GO ON WITH POS4
               00158 
               00159 ;; -------------------[POS4 ?]------------------------------------
7428           00160 MAIN_MENU_08_CHK_EDITING_MODE_POS4
               00161         ;; IS EDING MODE POS = 4?
7428 C207 F003 00162         movff AY_LCD_COURSER_POS_MAIN_MENU_FX, MIOS_PARAMETER1
742C 0E04      00163         movlw MENU_ITEM_POS4; WRITE 4 TO WREG
742E 6203      00164         cpfseq MIOS_PARAMETER1 ;; COMPARE F WITH WREG
               00165                         
               00166                 ;; NO
               00167                 rgoto MAIN_MENU_08_EDITING_MODE_IS_NOT_POS4
7430 D00D          M         bra     label
               00168 
               00169         ;; YES
               00170         ;; PRINT "*" ON EDIT POSITION4
7432 0E5B      00171         movlw   LCD_ROW4 + 11
7434 EC88 F016 00172         call    MIOS_LCD_CursorSet
7438 0E2A      00173         movlw   '*'
743A EC94 F016 00174         call    MIOS_LCD_PrintChar
               00175         
743E 0E5C      00176         movlw   LCD_ROW4 + 12
7440 EC88 F016 00177         call    MIOS_LCD_CursorSet
7444 0E3E      00178         movlw   '>'
7446 EC94 F016 00179         call    MIOS_LCD_PrintChar      
               00180                         ;; Exit Here
744A 0012      00181                         return
               00182 
               00183 
744C           00184 MAIN_MENU_08_EDITING_MODE_IS_NOT_POS4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 448


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00185         ;; NO EDITING MODE @ NOISE PERIOD
               00186         ;; PRINT "=" ON EDIT POSITION4
744C 0E5B      00187         movlw   LCD_ROW4 + 11
744E EC88 F016 00188         call    MIOS_LCD_CursorSet
7452 0E3D      00189         movlw   '='
7454 EC94 F016 00190         call    MIOS_LCD_PrintChar
               00191                         ;; Exit Here
7458 0012      00192                         return
               00193 
               00194 
               00195 ;; -------------------------------------------------------
               00196 
745A           00197 DECODE_FX_FUNCTION_FOR_LCD
               00198 
               00199         ;; DECODE Fx FUNCTION
745A 5050      00200         movf FX_FUNCTION_CURREND, W
               00201         JUMPTABLE_2BYTES 42 ;; [0 to 41]
745C 0FD6          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
745E B0D8          M         skpnc
7460 0ED6          M         movlw   -(max_value)
7462 0F2A          M         addlw   max_value
7464 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00202                 rgoto        LCD_FX_FUNC_000    ;; 0x00
7468 D029          M         bra     label
               00203                 rgoto        LCD_FX_FUNC_001    ;; 0x01
746A D02F          M         bra     label
               00204                 rgoto        LCD_FX_FUNC_002    ;; ...
746C D035          M         bra     label
               00205                 rgoto        LCD_FX_FUNC_003
746E D03B          M         bra     label
               00206                 rgoto        LCD_FX_FUNC_004
7470 D041          M         bra     label
               00207                 rgoto        LCD_FX_FUNC_005
7472 D047          M         bra     label
               00208                 rgoto        LCD_FX_FUNC_006
7474 D04D          M         bra     label
               00209                 rgoto        LCD_FX_FUNC_007
7476 D053          M         bra     label
               00210                 rgoto        LCD_FX_FUNC_008
7478 D059          M         bra     label
               00211                 rgoto        LCD_FX_FUNC_009
747A D05F          M         bra     label
               00212                 rgoto        LCD_FX_FUNC_010
747C D065          M         bra     label
               00213                 rgoto        LCD_FX_FUNC_011
747E D06B          M         bra     label
               00214                 rgoto        LCD_FX_FUNC_012
7480 D071          M         bra     label
               00215                 rgoto        LCD_FX_FUNC_013
7482 D077          M         bra     label
               00216                 rgoto        LCD_FX_FUNC_014
7484 D07D          M         bra     label
               00217                 rgoto        LCD_FX_FUNC_015
7486 D083          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 449


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00218                 rgoto        LCD_FX_FUNC_016
7488 D089          M         bra     label
               00219                 rgoto        LCD_FX_FUNC_017
748A D08F          M         bra     label
               00220                 rgoto        LCD_FX_FUNC_018
748C D095          M         bra     label
               00221                 rgoto        LCD_FX_FUNC_019
748E D09B          M         bra     label
               00222                 rgoto        LCD_FX_FUNC_020
7490 D0A1          M         bra     label
               00223                 rgoto        LCD_FX_FUNC_021
7492 D0A7          M         bra     label
               00224                 rgoto        LCD_FX_FUNC_022
7494 D0AD          M         bra     label
               00225                 rgoto        LCD_FX_FUNC_023
7496 D0B3          M         bra     label
               00226                 rgoto        LCD_FX_FUNC_024
7498 D0B9          M         bra     label
               00227                 rgoto        LCD_FX_FUNC_025
749A D0BF          M         bra     label
               00228                 rgoto        LCD_FX_FUNC_026
749C D0C5          M         bra     label
               00229                 rgoto        LCD_FX_FUNC_027
749E D0CB          M         bra     label
               00230                 rgoto        LCD_FX_FUNC_028
74A0 D0D1          M         bra     label
               00231                 rgoto        LCD_FX_FUNC_029
74A2 D0D7          M         bra     label
               00232                 rgoto        LCD_FX_FUNC_030
74A4 D0DD          M         bra     label
               00233                 rgoto        LCD_FX_FUNC_031
74A6 D0E3          M         bra     label
               00234                 rgoto        LCD_FX_FUNC_032
74A8 D0E9          M         bra     label
               00235                 rgoto        LCD_FX_FUNC_033
74AA D0EF          M         bra     label
               00236                 rgoto        LCD_FX_FUNC_034
74AC D0F5          M         bra     label
               00237                 rgoto        LCD_FX_FUNC_035
74AE D0FB          M         bra     label
               00238                 rgoto        LCD_FX_FUNC_036
74B0 D101          M         bra     label
               00239                 rgoto        LCD_FX_FUNC_037
74B2 D107          M         bra     label
               00240                 rgoto        LCD_FX_FUNC_038
74B4 D10D          M         bra     label
               00241                 rgoto        LCD_FX_FUNC_039
74B6 D113          M         bra     label
               00242                 rgoto        LCD_FX_FUNC_040
74B8 D119          M         bra     label
               00243                 rgoto        LCD_FX_FUNC_041    ;; 0x29
74BA D11F          M         bra     label
               00244 
               00245 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 450


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
74BC           00246 LCD_FX_FUNC_000
               00247         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC0
74BC 0E38          M         movlw   LOW(addr)               ; store Lo Byte
74BE 6EF6          M         movwf   TBLPTRL
74C0 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
74C2 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
74C4 EC9E F016 00248         call    MIOS_LCD_PrintString
74C8 0012      00249                 return
               00250 
74CA           00251 LCD_FX_FUNC_001
               00252         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC1
74CA 0E42          M         movlw   LOW(addr)               ; store Lo Byte
74CC 6EF6          M         movwf   TBLPTRL
74CE 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
74D0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
74D2 EC9E F016 00253         call    MIOS_LCD_PrintString
74D6 0012      00254                 return
               00255 
74D8           00256 LCD_FX_FUNC_002
               00257         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC2
74D8 0E4A          M         movlw   LOW(addr)               ; store Lo Byte
74DA 6EF6          M         movwf   TBLPTRL
74DC 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
74DE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
74E0 EC9E F016 00258         call    MIOS_LCD_PrintString
74E4 0012      00259                 return
               00260 
74E6           00261 LCD_FX_FUNC_003
               00262         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC3
74E6 0E52          M         movlw   LOW(addr)               ; store Lo Byte
74E8 6EF6          M         movwf   TBLPTRL
74EA 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
74EC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
74EE EC9E F016 00263         call    MIOS_LCD_PrintString
74F2 0012      00264                 return
               00265 
74F4           00266 LCD_FX_FUNC_004
               00267         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 451


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
74F4 0E5A          M         movlw   LOW(addr)               ; store Lo Byte
74F6 6EF6          M         movwf   TBLPTRL
74F8 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
74FA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
74FC EC9E F016 00268         call    MIOS_LCD_PrintString
7500 0012      00269                 return
               00270         
7502           00271 LCD_FX_FUNC_005
               00272         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC5
7502 0E62          M         movlw   LOW(addr)               ; store Lo Byte
7504 6EF6          M         movwf   TBLPTRL
7506 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7508 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
750A EC9E F016 00273         call    MIOS_LCD_PrintString
750E 0012      00274                 return
               00275 
7510           00276 LCD_FX_FUNC_006
               00277         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC6
7510 0E6A          M         movlw   LOW(addr)               ; store Lo Byte
7512 6EF6          M         movwf   TBLPTRL
7514 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7516 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7518 EC9E F016 00278         call    MIOS_LCD_PrintString
751C 0012      00279                 return
               00280 
751E           00281 LCD_FX_FUNC_007
               00282         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC7
751E 0E72          M         movlw   LOW(addr)               ; store Lo Byte
7520 6EF6          M         movwf   TBLPTRL
7522 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7524 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7526 EC9E F016 00283         call    MIOS_LCD_PrintString
752A 0012      00284                 return
               00285 
752C           00286 LCD_FX_FUNC_008
               00287         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC8
752C 0E80          M         movlw   LOW(addr)               ; store Lo Byte
752E 6EF6          M         movwf   TBLPTRL
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 452


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7530 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7532 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7534 EC9E F016 00288         call    MIOS_LCD_PrintString
7538 0012      00289                 return
               00290 
753A           00291 LCD_FX_FUNC_009
               00292         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC9
753A 0E8E          M         movlw   LOW(addr)               ; store Lo Byte
753C 6EF6          M         movwf   TBLPTRL
753E 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7540 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7542 EC9E F016 00293         call    MIOS_LCD_PrintString
7546 0012      00294                 return
               00295 
7548           00296 LCD_FX_FUNC_010
               00297         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC10
7548 0E9C          M         movlw   LOW(addr)               ; store Lo Byte
754A 6EF6          M         movwf   TBLPTRL
754C 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
754E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7550 EC9E F016 00298         call    MIOS_LCD_PrintString
7554 0012      00299                 return
               00300 
7556           00301 LCD_FX_FUNC_011
               00302         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC11
7556 0EAA          M         movlw   LOW(addr)               ; store Lo Byte
7558 6EF6          M         movwf   TBLPTRL
755A 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
755C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
755E EC9E F016 00303         call    MIOS_LCD_PrintString
7562 0012      00304                 return
               00305 
7564           00306 LCD_FX_FUNC_012
               00307         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC12
7564 0EB8          M         movlw   LOW(addr)               ; store Lo Byte
7566 6EF6          M         movwf   TBLPTRL
7568 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
756A 6EF7          M         movwf   TBLPTRH
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 453


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
756C EC9E F016 00308         call    MIOS_LCD_PrintString
7570 0012      00309                 return
               00310 
7572           00311 LCD_FX_FUNC_013
               00312         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC13
7572 0EC6          M         movlw   LOW(addr)               ; store Lo Byte
7574 6EF6          M         movwf   TBLPTRL
7576 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7578 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
757A EC9E F016 00313         call    MIOS_LCD_PrintString
757E 0012      00314                 return
               00315 
7580           00316 LCD_FX_FUNC_014
               00317         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC14
7580 0ED4          M         movlw   LOW(addr)               ; store Lo Byte
7582 6EF6          M         movwf   TBLPTRL
7584 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7586 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7588 EC9E F016 00318         call    MIOS_LCD_PrintString
758C 0012      00319                 return
               00320 
758E           00321 LCD_FX_FUNC_015
               00322         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC15
758E 0EE2          M         movlw   LOW(addr)               ; store Lo Byte
7590 6EF6          M         movwf   TBLPTRL
7592 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
7594 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7596 EC9E F016 00323         call    MIOS_LCD_PrintString
759A 0012      00324                 return
               00325 
759C           00326 LCD_FX_FUNC_016
               00327         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC16
759C 0EF0          M         movlw   LOW(addr)               ; store Lo Byte
759E 6EF6          M         movwf   TBLPTRL
75A0 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
75A2 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 454


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movwf   TBLPTRU
                   M #endif
75A4 EC9E F016 00328         call    MIOS_LCD_PrintString
75A8 0012      00329                 return
               00330 
75AA           00331 LCD_FX_FUNC_017
               00332         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC17
75AA 0EFE          M         movlw   LOW(addr)               ; store Lo Byte
75AC 6EF6          M         movwf   TBLPTRL
75AE 0E3C          M         movlw   HIGH(addr)              ; store Hi Byte
75B0 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
75B2 EC9E F016 00333         call    MIOS_LCD_PrintString
75B6 0012      00334                 return
               00335 
75B8           00336 LCD_FX_FUNC_018
               00337         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC18
75B8 0E0C          M         movlw   LOW(addr)               ; store Lo Byte
75BA 6EF6          M         movwf   TBLPTRL
75BC 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
75BE 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
75C0 EC9E F016 00338         call    MIOS_LCD_PrintString
75C4 0012      00339                 return
               00340 
75C6           00341 LCD_FX_FUNC_019
               00342         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC19
75C6 0E1A          M         movlw   LOW(addr)               ; store Lo Byte
75C8 6EF6          M         movwf   TBLPTRL
75CA 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
75CC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
75CE EC9E F016 00343         call    MIOS_LCD_PrintString
75D2 0012      00344                 return
               00345 
75D4           00346 LCD_FX_FUNC_020
               00347         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC20
75D4 0E28          M         movlw   LOW(addr)               ; store Lo Byte
75D6 6EF6          M         movwf   TBLPTRL
75D8 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
75DA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 455


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
75DC EC9E F016 00348         call    MIOS_LCD_PrintString
75E0 0012      00349                 return
               00350 
75E2           00351 LCD_FX_FUNC_021
               00352         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC21
75E2 0E36          M         movlw   LOW(addr)               ; store Lo Byte
75E4 6EF6          M         movwf   TBLPTRL
75E6 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
75E8 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
75EA EC9E F016 00353         call    MIOS_LCD_PrintString
75EE 0012      00354                 return
               00355 
75F0           00356 LCD_FX_FUNC_022
               00357         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC22
75F0 0E44          M         movlw   LOW(addr)               ; store Lo Byte
75F2 6EF6          M         movwf   TBLPTRL
75F4 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
75F6 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
75F8 EC9E F016 00358         call    MIOS_LCD_PrintString
75FC 0012      00359                 return
               00360 
75FE           00361 LCD_FX_FUNC_023
               00362         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC23
75FE 0E52          M         movlw   LOW(addr)               ; store Lo Byte
7600 6EF6          M         movwf   TBLPTRL
7602 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7604 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7606 EC9E F016 00363         call    MIOS_LCD_PrintString
760A 0012      00364                 return
               00365 
760C           00366 LCD_FX_FUNC_024
               00367         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC24
760C 0E5E          M         movlw   LOW(addr)               ; store Lo Byte
760E 6EF6          M         movwf   TBLPTRL
7610 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7612 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7614 EC9E F016 00368         call    MIOS_LCD_PrintString
7618 0012      00369                 return
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 456


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00370 
761A           00371 LCD_FX_FUNC_025
               00372         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC25
761A 0E6A          M         movlw   LOW(addr)               ; store Lo Byte
761C 6EF6          M         movwf   TBLPTRL
761E 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7620 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7622 EC9E F016 00373         call    MIOS_LCD_PrintString
7626 0012      00374                 return
               00375 
7628           00376 LCD_FX_FUNC_026
               00377         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC26
7628 0E76          M         movlw   LOW(addr)               ; store Lo Byte
762A 6EF6          M         movwf   TBLPTRL
762C 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
762E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7630 EC9E F016 00378         call    MIOS_LCD_PrintString
7634 0012      00379                 return
               00380 
7636           00381 LCD_FX_FUNC_027
               00382         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC27
7636 0E82          M         movlw   LOW(addr)               ; store Lo Byte
7638 6EF6          M         movwf   TBLPTRL
763A 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
763C 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
763E EC9E F016 00383         call    MIOS_LCD_PrintString
7642 0012      00384                 return
               00385 
7644           00386 LCD_FX_FUNC_028
               00387         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC28
7644 0E8E          M         movlw   LOW(addr)               ; store Lo Byte
7646 6EF6          M         movwf   TBLPTRL
7648 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
764A 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
764C EC9E F016 00388         call    MIOS_LCD_PrintString
7650 0012      00389                 return
               00390 
7652           00391 LCD_FX_FUNC_029
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 457


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00392         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC29
7652 0E9A          M         movlw   LOW(addr)               ; store Lo Byte
7654 6EF6          M         movwf   TBLPTRL
7656 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7658 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
765A EC9E F016 00393         call    MIOS_LCD_PrintString
765E 0012      00394                 return
               00395 
7660           00396 LCD_FX_FUNC_030
               00397         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC30
7660 0EA8          M         movlw   LOW(addr)               ; store Lo Byte
7662 6EF6          M         movwf   TBLPTRL
7664 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7666 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7668 EC9E F016 00398         call    MIOS_LCD_PrintString
766C 0012      00399                 return
               00400 
766E           00401 LCD_FX_FUNC_031
               00402         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC31
766E 0EB4          M         movlw   LOW(addr)               ; store Lo Byte
7670 6EF6          M         movwf   TBLPTRL
7672 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7674 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7676 EC9E F016 00403         call    MIOS_LCD_PrintString
767A 0012      00404                 return
               00405 
767C           00406 LCD_FX_FUNC_032
               00407         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC32
767C 0EC2          M         movlw   LOW(addr)               ; store Lo Byte
767E 6EF6          M         movwf   TBLPTRL
7680 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7682 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7684 EC9E F016 00408         call    MIOS_LCD_PrintString
7688 0012      00409                 return
               00410 
768A           00411 LCD_FX_FUNC_033
               00412         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC33
768A 0ED0          M         movlw   LOW(addr)               ; store Lo Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 458


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
768C 6EF6          M         movwf   TBLPTRL
768E 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
7690 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7692 EC9E F016 00413         call    MIOS_LCD_PrintString
7696 0012      00414                 return
               00415 
7698           00416 LCD_FX_FUNC_034
               00417         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC34
7698 0EDE          M         movlw   LOW(addr)               ; store Lo Byte
769A 6EF6          M         movwf   TBLPTRL
769C 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
769E 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76A0 EC9E F016 00418         call    MIOS_LCD_PrintString
76A4 0012      00419                 return
               00420 
76A6           00421 LCD_FX_FUNC_035
               00422         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC35
76A6 0EEC          M         movlw   LOW(addr)               ; store Lo Byte
76A8 6EF6          M         movwf   TBLPTRL
76AA 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
76AC 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76AE EC9E F016 00423         call    MIOS_LCD_PrintString
76B2 0012      00424                 return
               00425 
76B4           00426 LCD_FX_FUNC_036
               00427         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC36
76B4 0EFA          M         movlw   LOW(addr)               ; store Lo Byte
76B6 6EF6          M         movwf   TBLPTRL
76B8 0E3D          M         movlw   HIGH(addr)              ; store Hi Byte
76BA 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76BC EC9E F016 00428         call    MIOS_LCD_PrintString
76C0 0012      00429                 return
               00430 
76C2           00431 LCD_FX_FUNC_037
               00432         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC37
76C2 0E08          M         movlw   LOW(addr)               ; store Lo Byte
76C4 6EF6          M         movwf   TBLPTRL
76C6 0E3E          M         movlw   HIGH(addr)              ; store Hi Byte
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 459


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
76C8 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76CA EC9E F016 00433         call    MIOS_LCD_PrintString
76CE 0012      00434                 return
               00435 
76D0           00436 LCD_FX_FUNC_038
               00437         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC38
76D0 0E16          M         movlw   LOW(addr)               ; store Lo Byte
76D2 6EF6          M         movwf   TBLPTRL
76D4 0E3E          M         movlw   HIGH(addr)              ; store Hi Byte
76D6 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76D8 EC9E F016 00438         call    MIOS_LCD_PrintString
76DC 0012      00439                 return
               00440 
76DE           00441 LCD_FX_FUNC_039
               00442         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC39
76DE 0E24          M         movlw   LOW(addr)               ; store Lo Byte
76E0 6EF6          M         movwf   TBLPTRL
76E2 0E3E          M         movlw   HIGH(addr)              ; store Hi Byte
76E4 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76E6 EC9E F016 00443         call    MIOS_LCD_PrintString
76EA 0012      00444                 return
               00445 
76EC           00446 LCD_FX_FUNC_040
               00447         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC40
76EC 0E32          M         movlw   LOW(addr)               ; store Lo Byte
76EE 6EF6          M         movwf   TBLPTRL
76F0 0E3E          M         movlw   HIGH(addr)              ; store Hi Byte
76F2 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
76F4 EC9E F016 00448         call    MIOS_LCD_PrintString
76F8 0012      00449                 return
               00450 
76FA           00451 LCD_FX_FUNC_041
               00452         TABLE_ADDR TEXT_MB_AY_MENUE_FX_FUNC41
76FA 0E40          M         movlw   LOW(addr)               ; store Lo Byte
76FC 6EF6          M         movwf   TBLPTRL
76FE 0E3E          M         movlw   HIGH(addr)              ; store Hi Byte
7700 6EF7          M         movwf   TBLPTRH
                   M #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 460


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
                   M         movlw   UPPER(addr)             ; store Upper Byte
                   M         movwf   TBLPTRU
                   M #endif
7702 EC9E F016 00453         call    MIOS_LCD_PrintString
7706 0012      00454                 return
               00455 
               00456 
               00457 ;; ------------------------------------------------------------------------
               00458 ;; LOAD Fx CURREND DATA for POS (FX_POS_CURREND) for LCD
               00459 ;; ------------------------------------------------------------------------
7708           00460 LOAD_FX_DATA_LCD_CURREND_POS
               00461         ;; used by [+] and [-] submenu pos routine for Fx Main Menu (LCD)
7708 0E02      00462         movlw SELECT_Fx_RAM_BANK;; INDIRECT RAM ADDRESSING:
770A 6EEA      00463         movwf FSR0H             ;; SET THE RAM BANK TO 2
               00464         
               00465         ;; LOAD FX FUNCTION Reg. @ Currend Fx Pos       
770C 0E20      00466         movlw RAM_OFFSET_FX_FUNCTION ;; FX FUNCTIONS regs OFFSET 
770E 244F      00467         addwf FX_POS_CURREND, W ;; + (0 to 31 [32]) => Fx Tab Pos
7710 6EE9      00468         movwf FSR0L             ;; LOAD CURREND OFFSET IND. ADR. for Fx Fuction Reg. @ current Fx Pos.
7712 CFEF F050 00469         movff INDF0, FX_FUNCTION_CURREND ;; WRITE FX FUNCTION @ currend Pos
               00470 
               00471         ;; LOAD FX Data Reg. @ Currend Fx Pos   
7716 0E40      00472         movlw RAM_OFFSET_FX_DATA;; FX Data Regs OFFSET
7718 244F      00473         addwf FX_POS_CURREND, W ;; + (0 to 31 [32]) => Fx Tab Pos
771A 6EE9      00474         movwf FSR0L             ;; LOAD CURREND OFFSET to Fx Fuction Reg. @ current Fx Pos.
771C CFEF F051 00475         movff INDF0,FX_DATA_CURREND     ;; WRITE FX Data @ currend Pos
               00476 
               00477         ;; LOAD FX Delay TIME Reg. @ Currend Fx Pos     
7720 0E60      00478         movlw RAM_OFFSET_FX_TIME_PRE_EXECUTION ;; FX TIME Regs OFFSET 
7722 244F      00479         addwf FX_POS_CURREND, W ;; + (0 to 31 [32]) => Fx Tab Pos
7724 6EE9      00480         movwf FSR0L             ;; LOAD CURREND OFFSET To Ind. Reg Adress
7726 CFEF F052 00481         movff INDF0,FX_TIME_PRE_EXECUTION_CURREND       ;; WRITE FX Data @ currend Pos
               00482         
772A 0012      00483                 return
               00484 
               00115 
               00116 ;; ---[Fx Timer Polling]--------------
               00117 #include "fx_timer.inc"
               00001 ;; ------------
               00002 ;; fx_timer.inc
               00003 ;; ------------
               00004 
               00005 
               00006 ;; Function: Fx timer (timer0 polling)
               00007 ;; IF timer0 overrun flag had been set by timer0: RESET timer0 overrun flag AND INC FX_TIMER +1
               00008 ;; IF timer0 overrun flag is clear do nothing
               00009 
772C           00010 FX_TIMER_POLLING
               00011         
               00012         ;; check timer0 overrun flag is set
               00013         BRA_IFCLR INTCON, TMR0IF, ACCESS, Fx_Clk_NoInc
772C A4F2          M         btfss   reg, bit, reg_a
772E D003          M         bra     label
               00014                 ; timer0 overrun flag has been set, so
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 461


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00015                 ; clear overrun flag (reset bit2 @ INTCON to 0)
7730 94F2      00016                 bcf INTCON, TMR0IF
               00017         ; now inc FX_TIMER
7732           00018 Fx_Clk_Inc
               00019         ;; INC FX TIMER +1
7732 2A53      00020                         incf FX_TIMER, F 
               00021                         ; Then Quit
7734 0012      00022                                 return
               00023 
               00024 
7736           00025 Fx_Clk_NoInc
               00026         ; timer0 overrun flag has NOT been set, so
               00027         ; quit here witout Inc of FX_TIMER
7736 0012      00118 
               00119 ;; ---[Fx Pipeline]-------------------
               00120 #include "fx_pipeline.inc"
               00001 ;; fx_pipeline.inc
               00002 ;; ---------------
               00003 
               00004 ;; fucnction: perform fx routines if fx mode @ a|b|c is on
               00005 ;; this function is called by USER_Tick periodically
               00006 
7738           00007 FX_PIPELINE
               00008         
               00009         ;; CHECK IF FX MODE IS ON
               00010         ;; AND FILTER: 
               00011         ;; FX MIDI ON  A|B|C [AND WITH] FX USER ON A|B|C 
               00012         ;; MIDI CH ABC          [x|x|x|x|x|x|C|B|A]
               00013         ;; USER FX SETTING      [x|x|x|x|x|x|C|B|A]
               00014                 
7738 504E      00015         movf    Fx_MIDI_NOTE_ON_OR_OFF, W
773A 144D      00016         andwf   FX_USER_ON_OFF_ABC, W
773C 6E57      00017         movwf   FX_FILTER
               00018                 
773E 6AE8      00019                 clrw
7740 6457      00020                 cpfsgt FX_FILTER
               00021                 
               00022                                 ;; GO ON IF A|B|C NOTE ON MATCH
               00023                                 ;; with     A|B|C Fx User ON 
               00024                                 ;; IF FX Filter = 0 Exit here
               00025                                 rgoto FX_PIPELINE_EXIT
7742 D291          M         bra     label
               00026 
               00027 
               00028                         ;; OK. LET's GO ON...
               00029                         ;; CHECK IF THERE IS A NEW FX SESSION
7744 5054      00030                         movf FX_MIDI_NOTE_ON_SESSION, W
7746 6255      00031                         cpfseq FX_PIPELINE_SESSION
               00032                                 ;; NO, NOT THE SAME NOTE ON SESSION
               00033                                 ;; OK, LET'S RESET Fx SESSION POS
               00034                                 rgoto FX_NEW_SESSION_RESET_POS
7748 D001          M         bra     label
               00035 
               00036                                 ;; YES, THE SAME NOTE ON SESSION - GO ON WITH A NOTHER FX POS BUT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 462


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00037                                 ;; FIRST CHECK IF Fx Tab Pos > 31 ==> NOP ON (NO Fx OPERATION)
               00038                                 rgoto CHECK_IF_FX_POS_CURREND_SESSION_IS_NOP
774A D006          M         bra     label
               00039 
               00040 
774C           00041 FX_NEW_SESSION_RESET_POS
               00042         ;; reset currend session/pos
               00043         ;; after every new *note on* event
774C C054 F055 00044         movff   FX_MIDI_NOTE_ON_SESSION, FX_PIPELINE_SESSION
7750 6A61      00045         clrf    FX_POS_SESSION_CURREND  ;; RESET FX TABLE POS.
7752 6A53      00046         clrf    FX_TIMER                ;; RESET FX Timer
7754 6A56      00047         clrf    FX_NOP_ON_OFF           ;; RESET Fx NOP [NO OPERATION] (0x00 = NOP:OFF)
               00048         ;; NOW THE RESET WAS DONE
               00049         ;; GO AND LOAD Fx Pos DATA @ Pos 0
               00050         rgoto LOAD_CURREND_SESSION_POS_FX_DATA  
7756 D003          M         bra     label
               00051 
               00052 
7758           00053 CHECK_IF_FX_POS_CURREND_SESSION_IS_NOP
               00054         ;; = 0 = Fx NOP IS OF (FX OPERATION IS ON)
               00055         ;; > 0 = Fx NOP IS ON (FX OPERATION IS OFF)
7758 0E00      00056         movlw   0x00
775A 6256      00057         cpfseq  FX_NOP_ON_OFF
               00058                 
               00059                 ;; NO - Fx NOP > 0
               00060                 ;; SO EXIT HERE ((0x01-0xFF = NOP:ON)
               00061                 rgoto FX_PIPELINE_EXIT
775C D284          M         bra     label
               00062 
               00063         ;; YES - Fx NOP = 0 (0x00 = NOP:OFF)
               00064         ;; SO GO ON AND LOAD Fx DATA 
               00065         
775E           00066 LOAD_CURREND_SESSION_POS_FX_DATA
               00067         ;; UPDATE Currend Fx 
               00068         ;; POINTER TO FX SESSION CURREND POS [Pos Range: 0 to 31]
               00069         ;; ------------------------
               00070         ;; LOAD FX_FUNCTION_SESSION_CURREND             @ THE CURREND Fx POS = FX_POS_SESSION_CURREND
               00071         ;; FX_TIME_PRE_EXECUTION_SESSION_CURREND        @ THE CURREND Fx POS = FX_POS_SESSION_CURREND
               00072         ;; FX_DATA_SESSION_CURREND                      @ THE CURREND Fx POS = FX_POS_SESSION_CURREND
775E EC36 F03E 00073         call LOAD_FX_SESSION_DATA_CURREND_POS           
               00074         
               00075                 
               00076         ;; WORKFLOW *PRE Fx TIME PERIOD* 
               00077         ;; (TIME Bevor the Fx will be Executed)
               00078         ;; principle: 
               00079         ;; IS Fx Timer (triggert by Timer0) [0-255] > FX_TIME_PRE_EXECUTION_SESSION_CURREND [0-200]
               00080         ;; FX TIMER > FX_TIME_PRE_EXECUTION_SESSION_CURREND ?
7762 5063      00081         movf FX_TIME_PRE_EXECUTION_SESSION_CURREND, W
7764 6453      00082         cpfsgt FX_TIMER
               00083                 ;; NO - Currend Fx Pre Delay Time takes more Timer0 Cycles
               00084                 ;; SO QUIT HERE and try again...
               00085                 ;; FX TIMER < or = FX_TIME_PRE_EXECUTION_SESSION_CURREND
               00086                 rgoto FX_PIPELINE_EXIT
7766 D27F          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 463


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00087 
               00088         ;; YES 
               00089         ;; FX TIMER > FX_TIME_PRE_EXECUTION_SESSION_CURREND
               00090         ;; SO GO ON WITH Corrend Pos Fx Execution
               00091         ;; TO DO - GO ON WITH Fx Function Switch
               00092         
               00093 
7768           00094 EXECUTE_FX_AT_CURREND_POS
               00095         
               00096         ;; Fx Functions
               00097 
               00098         ;; FUNCTIONS [0x00 to 0x25]
               00099         ;; ------------------------
               00100         ;; 0  0x00 => End Fx                    (Fx Off)
               00101         ;; 1  0x01 => On  Tone A                
               00102         ;; 2  0x02 => Off Tone A
               00103         ;; 3  0x03 => On  Tone B
               00104         ;; 4  0x04 => Off Tone B
               00105         ;; 5  0x05 => On  Tone C
               00106         ;; 6  0x06 => Off Tone C
               00107         ;; 7  0x07 => +Tune A   [Data: 0-255]
               00108         ;; 8  0x08 => -Tune A   [Data: 0-255]
               00109         ;; 9  0x09 => +Tune B   [Data: 0-255]
               00110         ;; 10 0x0A => -Tune B   [Data: 0-255]
               00111         ;; 11 0x0B => +Tune C   [Data: 0-255]
               00112         ;; 12 0x0C => -Tune C   [Data: 0-255]
               00113         ;; 13 0x0D => Vol.A     [Data: 0-15] (This function overrides the ENVELOPE Mode during the Fx period)
               00114         ;; 14 0x0E => Vol.B     [Data: 0-15] (This function overrides the ENVELOPE Mode during the Fx period)
               00115         ;; 15 0x0F => Vol.C     [Data: 0-15] (This function overrides the ENVELOPE Mode during the Fx period)
               00116         ;; 16 0x10 => On  Noise A
               00117         ;; 17 0x11 => Off Noise A
               00118         ;; 18 0x12 => On  Noise B
               00119         ;; 19 0x13 => Off Noise B
               00120         ;; 20 0x14 => On  Noise C 
               00121         ;; 21 0x15 => Off Noise C
               00122         ;; 22 0x16 => Noise Frq. [Data: 0-31]
               00123         ;; 23 0x17 => ENV ON  A
               00124         ;; 24 0x18 => ENV OFF A
               00125         ;; 25 0x19 => ENV ON  B
               00126         ;; 26 0x1A => ENV OFF B
               00127         ;; 27 0x1B => ENV ON  C
               00128         ;; 28 0x1C => ENV OFF C
               00129         ;; 29 0x1D => ENV Shape [Data: 0-15]
               00130         ;; 30 0x1E => ENV Fine  [Data: 0-255]
               00131         ;; 31 0x1F => ENV Coar  [Data: 0-255]
               00132         ;; 32 0x20 => WRITE NOTE ON #1 ==> Tone A
               00133         ;; 33 0x21 => WRITE NOTE ON #2 ==> Tone A
               00134         ;; 34 0x22 => WRITE NOTE ON #3 ==> Tone A
               00135         ;; 35 0x23 => WRITE NOTE ON #1 ==> Tone B
               00136         ;; 36 0x24 => WRITE NOTE ON #2 ==> Tone B
               00137         ;; 37 0x25 => WRITE NOTE ON #3 ==> Tone B
               00138         ;; 38 0x26 => WRITE NOTE ON #1 ==> Tone C
               00139         ;; 39 0x27 => WRITE NOTE ON #2 ==> Tone C
               00140         ;; 40 0x28 => WRITE NOTE ON #3 ==> Tone C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 464


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00141         ;; 41 0x29 => GOTO Fx POS [Data: 0-31]
               00142 
               00143         ;; JUMP TO THE GIVEN Fx FUNCTION
7768 5062      00144         movf FX_FUNCTION_SESSION_CURREND, W
               00145         JUMPTABLE_2BYTES 42 ;; [0 to 41]
776A 0FD6          M         addlw   -(max_value)    ; ensure that jump index is not greater than (max_value-1)
776C B0D8          M         skpnc
776E 0ED6          M         movlw   -(max_value)
7770 0F2A          M         addlw   max_value
7772 ECC8 F016     M         call    MIOS_HLP_GetIndex_2bytes
               00146                 rgoto        FX_FUNC_000 ;;   0x00      End Fx (Fx Off)
7776 D029          M         bra     label
               00147                 rgoto        FX_FUNC_001 ;;   0x01      On  Tone A
7778 D029          M         bra     label
               00148                 rgoto        FX_FUNC_002 ;;   0x02      Off Tone A
777A D035          M         bra     label
               00149                 rgoto        FX_FUNC_003 ;;   0x03      On  Tone B
777C D041          M         bra     label
               00150                 rgoto        FX_FUNC_004 ;;      ...    Off Tone B
777E D04D          M         bra     label
               00151                 rgoto        FX_FUNC_005 ;;                     On  Tone C
7780 D059          M         bra     label
               00152                 rgoto        FX_FUNC_006 ;;                     Off Tone C
7782 D065          M         bra     label
               00153                 rgoto        FX_FUNC_007        ;;                      ...
7784 D071          M         bra     label
               00154                 rgoto        FX_FUNC_008
7786 D087          M         bra     label
               00155                 rgoto        FX_FUNC_009
7788 D09D          M         bra     label
               00156                 rgoto        FX_FUNC_010
778A D0B3          M         bra     label
               00157                 rgoto        FX_FUNC_011
778C D0C9          M         bra     label
               00158                 rgoto        FX_FUNC_012
778E D0DF          M         bra     label
               00159                 rgoto        FX_FUNC_013
7790 D0F5          M         bra     label
               00160                 rgoto        FX_FUNC_014
7792 D100          M         bra     label
               00161                 rgoto        FX_FUNC_015
7794 D10B          M         bra     label
               00162                 rgoto        FX_FUNC_016
7796 D116          M         bra     label
               00163                 rgoto        FX_FUNC_017
7798 D122          M         bra     label
               00164                 rgoto        FX_FUNC_018
779A D12E          M         bra     label
               00165                 rgoto        FX_FUNC_019
779C D13A          M         bra     label
               00166                 rgoto        FX_FUNC_020
779E D146          M         bra     label
               00167                 rgoto        FX_FUNC_021
77A0 D152          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 465


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00168                 rgoto        FX_FUNC_022
77A2 D15E          M         bra     label
               00169                 rgoto        FX_FUNC_023
77A4 D16D          M         bra     label
               00170                 rgoto        FX_FUNC_024
77A6 D17E          M         bra     label
               00171                 rgoto        FX_FUNC_025
77A8 D187          M         bra     label
               00172                 rgoto        FX_FUNC_026
77AA D198          M         bra     label
               00173                 rgoto        FX_FUNC_027
77AC D1A1          M         bra     label
               00174                 rgoto        FX_FUNC_028
77AE D1B2          M         bra     label
               00175                 rgoto        FX_FUNC_029
77B0 D1BB          M         bra     label
               00176                 rgoto        FX_FUNC_030
77B2 D1C6          M         bra     label
               00177                 rgoto        FX_FUNC_031
77B4 D1CC          M         bra     label
               00178                 rgoto        FX_FUNC_032
77B6 D1D2          M         bra     label
               00179                 rgoto        FX_FUNC_033
77B8 D1DE          M         bra     label
               00180                 rgoto        FX_FUNC_034
77BA D1EA          M         bra     label
               00181                 rgoto        FX_FUNC_035
77BC D1F6          M         bra     label
               00182                 rgoto        FX_FUNC_036
77BE D202          M         bra     label
               00183                 rgoto        FX_FUNC_037
77C0 D20E          M         bra     label
               00184                 rgoto        FX_FUNC_038
77C2 D21A          M         bra     label
               00185                 rgoto        FX_FUNC_039
77C4 D226          M         bra     label
               00186                 rgoto        FX_FUNC_040
77C6 D232          M         bra     label
               00187                 rgoto        FX_FUNC_041
77C8 D23E          M         bra     label
               00188 
               00189 
77CA           00190 FX_FUNC_000
               00191         ;; 0x00 => End Fx (Fx Off)
               00192         ;; Do NOTHING and Quit Here
77CA 0012      00193         return
               00194         
77CC           00195 FX_FUNC_001     
               00196         ;; 0x01 => On Tone A
               00197         ;; TONE A ON
               00198 
               00199         ;; USER SETTING FILTER 
               00200         ;; MIDI TONE ON FILTER 
               00201         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 466


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00202         
               00203         
               00204         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00205         ;; move USER SWITCH settings to W REG
77CC 5020      00206         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00207                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00208                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00209                         ;; TONE/NOISE A/B/C 
               00210 
               00211         ;; MIDI EVENT FILTER:
               00212         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00213         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00214         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00215          
               00216         
77CE 1022      00217         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00218                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00219                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00220                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00221                 ;; MOVE THE RESULT TO W REG
               00222         
               00223         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00224         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
77D0 6E6B      00225         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00226 
               00227         ;; TONE A ON
77D2 C06B F058 00228         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
77D6 9058      00229         bcf  Fx_TEMP, BIT0_TONE_A_ON_OFF        
               00230         
               00231                 ;; SEND DATA TO AY REG 7 (AY Chip)
77D8 0E07      00232                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
77DA 6E39      00233                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR   => AY_SR_Write
               00234         
               00235                 ;; COPY DATA
77DC C058 F03A 00236                 movff Fx_TEMP, AY_REG_DATA
               00237         
               00238                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
77E0 ECAA F01B 00239                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00240                 ;; ==========================================================================================   
               00241                 
               00242                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
77E4 D239          M         bra     label
               00243 
77E6           00244 FX_FUNC_002
               00245         ;; 0x02 => Off Tone A
               00246         ;; TONE A OFF
               00247         
               00248         
               00249         ;; USER SETTING FILTER 
               00250         ;; MIDI TONE ON FILTER 
               00251         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00252         
               00253         
               00254         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 467


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00255         ;; move USER SWITCH settings to W REG
77E6 5020      00256         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00257                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00258                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00259                         ;; TONE/NOISE A/B/C 
               00260 
               00261         ;; MIDI EVENT FILTER:
               00262         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00263         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00264         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00265          
               00266         
77E8 1022      00267         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00268                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00269                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00270                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00271                 ;; MOVE THE RESULT TO W REG
               00272         
               00273         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00274         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
77EA 6E6B      00275         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00276 
               00277         
               00278         ;; TONE A OFF
77EC C06B F058 00279         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
77F0 8058      00280         bsf  Fx_TEMP,BIT0_TONE_A_ON_OFF
               00281         
               00282                 ;; SEND DATA TO AY REG 7 (AY Chip)
77F2 0E07      00283                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
77F4 6E39      00284                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00285         
               00286                 ;; COPY DATA
77F6 C058 F03A 00287                 movff Fx_TEMP, AY_REG_DATA
               00288         
               00289                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
77FA ECAA F01B 00290                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00291                 ;; ==========================================================================================
               00292 
               00293 
               00294                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
77FE D22C          M         bra     label
               00295 
7800           00296 FX_FUNC_003
               00297         ;; 0x03 => On  Tone B
               00298         
               00299         ;; USER SETTING FILTER 
               00300         ;; MIDI TONE ON FILTER 
               00301         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00302         
               00303         
               00304         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00305         ;; move USER SWITCH settings to W REG
7800 5020      00306         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00307                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 468


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00308                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00309                         ;; TONE/NOISE A/B/C 
               00310 
               00311         ;; MIDI EVENT FILTER:
               00312         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00313         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00314         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00315          
               00316         
7802 1022      00317         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00318                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00319                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00320                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00321                 ;; MOVE THE RESULT TO W REG
               00322         
               00323         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00324         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7804 6E6B      00325         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00326 
               00327 
7806 C06B F058 00328         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
780A 9258      00329         bcf  Fx_TEMP, BIT1_TONE_B_ON_OFF        
               00330         
               00331                 ;; SEND DATA TO AY REG 7
780C 0E07      00332                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
780E 6E39      00333                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00334         
               00335                 ;; COPY DATA
7810 C058 F03A 00336                 movff Fx_TEMP, AY_REG_DATA
               00337         
               00338                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7814 ECAA F01B 00339                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00340                 ;; ==========================================================================================   
               00341                 
               00342 
               00343                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7818 D21F          M         bra     label
               00344 
781A           00345 FX_FUNC_004
               00346         ;; 0x04 => Off Tone B
               00347 
               00348         ;; USER SETTING FILTER 
               00349         ;; MIDI TONE ON FILTER 
               00350         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00351         
               00352         
               00353         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00354         ;; move USER SWITCH settings to W REG
781A 5020      00355         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00356                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00357                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00358                         ;; TONE/NOISE A/B/C 
               00359 
               00360         ;; MIDI EVENT FILTER:
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 469


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00361         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00362         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00363         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00364          
               00365         
781C 1022      00366         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00367                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00368                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00369                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00370                 ;; MOVE THE RESULT TO W REG
               00371         
               00372         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00373         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
781E 6E6B      00374         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00375 
               00376 
7820 C06B F058 00377         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
7824 8258      00378         bsf  Fx_TEMP, BIT1_TONE_B_ON_OFF        
               00379         
               00380                 ;; SEND DATA TO AY REG 7
7826 0E07      00381                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
7828 6E39      00382                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00383         
               00384                 ;; COPY DATA
782A C058 F03A 00385                 movff Fx_TEMP, AY_REG_DATA
               00386         
               00387                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
782E ECAA F01B 00388                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00389                 ;; ==========================================================================================
               00390 
               00391                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7832 D212          M         bra     label
               00392 
7834           00393 FX_FUNC_005
               00394         ;; 0x05 => On  Tone C
               00395 
               00396         ;; USER SETTING FILTER 
               00397         ;; MIDI TONE ON FILTER 
               00398         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00399         
               00400         
               00401         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00402         ;; move USER SWITCH settings to W REG
7834 5020      00403         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00404                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00405                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00406                         ;; TONE/NOISE A/B/C 
               00407 
               00408         ;; MIDI EVENT FILTER:
               00409         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00410         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00411         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00412          
               00413         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 470


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7836 1022      00414         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00415                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00416                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00417                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00418                 ;; MOVE THE RESULT TO W REG
               00419         
               00420         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00421         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7838 6E6B      00422         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00423 
               00424         ;; On  Tone C
783A C06B F058 00425         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
783E 9458      00426         bcf  Fx_TEMP, BIT2_TONE_C_ON_OFF
               00427         
               00428                 ;; SEND DATA TO AY REG 7
7840 0E07      00429                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
7842 6E39      00430                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00431         
               00432                 ;; COPY DATA
7844 C058 F03A 00433                 movff Fx_TEMP, AY_REG_DATA
               00434         
               00435                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7848 ECAA F01B 00436                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00437                 ;; ==========================================================================================   
               00438                 
               00439                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
784C D205          M         bra     label
               00440 
784E           00441 FX_FUNC_006
               00442         ;; 0x06 => Off Tone C
               00443 
               00444         ;; USER SETTING FILTER 
               00445         ;; MIDI TONE ON FILTER 
               00446         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00447         
               00448         
               00449         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00450         ;; move USER SWITCH settings to W REG
784E 5020      00451         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00452                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00453                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00454                         ;; TONE/NOISE A/B/C 
               00455 
               00456         ;; MIDI EVENT FILTER:
               00457         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00458         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00459         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00460          
               00461         
7850 1022      00462         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00463                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00464                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00465                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00466                 ;; MOVE THE RESULT TO W REG
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 471


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00467         
               00468         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00469         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7852 6E6B      00470         movwf AY_R7_ENABLE_ABC_NOISE_IO
               00471 
               00472         ;; Off Tone C
7854 C06B F058 00473         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
7858 8458      00474         bsf  Fx_TEMP, BIT2_TONE_C_ON_OFF
               00475         
               00476                 ;; SEND DATA TO AY REG 7
785A 0E07      00477                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
785C 6E39      00478                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00479         
               00480                 ;; COPY DATA
785E C058 F03A 00481                 movff Fx_TEMP, AY_REG_DATA
               00482         
               00483                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7862 ECAA F01B 00484                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00485                 ;; ==========================================================================================
               00486                         
               00487                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7866 D1F8          M         bra     label
               00488 
               00489 
7868           00490 FX_FUNC_007
               00491         ;; PLUS Tune A  [Data: 0-255]
               00492         ;; Fx Call for Tune +
               00493         
               00494         ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               00495         ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
7868 C02C F01E 00496         movff AY_TONE_A_TUNE_COARSE_MIDI, TUNE_COARSE_TEMP
786C C029 F01F 00497         movff AY_TONE_A_TUNE_FINE_MIDI, TUNE_FINE_TEMP
               00498 
               00499         
               00500         ;; [ADD TUNE +] TUNE [PLUS] CURREND Fx DATA BYTE
7870 EC55 F03E 00501         call FX_TUNE_PLUS
               00502 
               00503         ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               00504         ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
7874 C01E F02C 00505         movff TUNE_COARSE_TEMP, AY_TONE_A_TUNE_COARSE_MIDI
7878 C01F F029 00506         movff TUNE_FINE_TEMP, AY_TONE_A_TUNE_FINE_MIDI
               00507 
               00508                 ;; SEND TUNE A TO AY CHIP
787C 0E01      00509                 movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE; ADRESS => AY REGISTER
787E 6E39      00510                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00511         
7880 502C      00512                 movf  AY_TONE_A_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
7882 6E3A      00513                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00514         
7884 ECAA F01B 00515                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00516                                                 ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00517 
7888 0E00      00518                 movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE; ADRESS => AY REGISTER
788A 6E39      00519                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 472


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00520 
788C 5029      00521                 movf  AY_TONE_A_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
788E 6E3A      00522                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00523         
7890 ECAA F01B 00524                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00525                                                 ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00526 
               00527         
               00528                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7894 D1E1          M         bra     label
               00529 
7896           00530 FX_FUNC_008
               00531         ;; MINUS Tune A [Data: 0-255]
               00532         ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               00533         ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
7896 C02C F01E 00534         movff AY_TONE_A_TUNE_COARSE_MIDI, TUNE_COARSE_TEMP
789A C029 F01F 00535         movff AY_TONE_A_TUNE_FINE_MIDI, TUNE_FINE_TEMP
               00536 
               00537         
               00538         ;; [TUNE -] Currend TUNE [MINUS] CURREND Fx DATA
789E EC63 F03E 00539         call FX_TUNE_MINUS
               00540 
               00541         ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               00542         ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
78A2 C01E F02C 00543         movff TUNE_COARSE_TEMP, AY_TONE_A_TUNE_COARSE_MIDI
78A6 C01F F029 00544         movff TUNE_FINE_TEMP, AY_TONE_A_TUNE_FINE_MIDI
               00545 
               00546                 ;; SEND TUNE A TO AY CHIP
78AA 0E01      00547                 movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE     ; ADRESS => AY REGISTER
78AC 6E39      00548                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00549         
78AE 502C      00550                 movf  AY_TONE_A_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
78B0 6E3A      00551                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00552         
78B2 ECAA F01B 00553                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00554                                                         ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00555 
78B6 0E00      00556                 movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE ; ADRESS => AY REGISTER
78B8 6E39      00557                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00558 
78BA 5029      00559                 movf  AY_TONE_A_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
78BC 6E3A      00560                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00561         
78BE ECAA F01B 00562                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00563                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00564         
               00565                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
78C2 D1CA          M         bra     label
               00566 
78C4           00567 FX_FUNC_009
               00568         ;; 0x09 => PLUS Tune B  [Data: 0-255]
               00569         ;; Fx Call for Tune +
               00570         
               00571         ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 473


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00572         ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
78C4 C02D F01E 00573         movff AY_TONE_B_TUNE_COARSE_MIDI, TUNE_COARSE_TEMP
78C8 C02A F01F 00574         movff AY_TONE_B_TUNE_FINE_MIDI, TUNE_FINE_TEMP
               00575 
               00576         
               00577         ;; [ADD TUNE +] TUNE TEMP - CURREND Fx DATA BYTE
78CC EC55 F03E 00578         call FX_TUNE_PLUS
               00579 
               00580         ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               00581         ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
78D0 C01E F02C 00582         movff TUNE_COARSE_TEMP, AY_TONE_A_TUNE_COARSE_MIDI
78D4 C01F F02A 00583         movff TUNE_FINE_TEMP, AY_TONE_B_TUNE_FINE_MIDI
               00584 
               00585                 ;; SEND TUNE B TO AY CHIP
78D8 0E03      00586                 movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE     ; ADRESS => AY REGISTER
78DA 6E39      00587                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00588         
78DC 502D      00589                 movf  AY_TONE_B_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
78DE 6E3A      00590                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00591         
78E0 ECAA F01B 00592                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00593                                                 ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00594 
78E4 0E02      00595                 movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE       ; ADRESS => AY REGISTER
78E6 6E39      00596                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00597 
78E8 502A      00598                 movf  AY_TONE_B_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
78EA 6E3A      00599                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00600         
78EC ECAA F01B 00601                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00602                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00603                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
78F0 D1B3          M         bra     label
               00604 
78F2           00605 FX_FUNC_010
               00606         ;; 0x0A => MINUS Tune B [Data: 0-255]
               00607         ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               00608         ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
78F2 C02D F01E 00609         movff AY_TONE_B_TUNE_COARSE_MIDI, TUNE_COARSE_TEMP
78F6 C02A F01F 00610         movff AY_TONE_B_TUNE_FINE_MIDI, TUNE_FINE_TEMP
               00611 
               00612         
               00613         ;; [TUNE -] Currend TUNE [MINUS] CURREND Fx DATA
78FA EC63 F03E 00614         call FX_TUNE_MINUS
               00615 
               00616         ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               00617         ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
78FE C01E F02D 00618         movff TUNE_COARSE_TEMP, AY_TONE_B_TUNE_COARSE_MIDI
7902 C01F F02A 00619         movff TUNE_FINE_TEMP, AY_TONE_B_TUNE_FINE_MIDI
               00620 
               00621                 ;; SEND TUNE A TO AY CHIP
7906 0E03      00622                 movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE     ; ADRESS => AY REGISTER
7908 6E39      00623                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00624         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 474


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
790A 502D      00625                 movf  AY_TONE_B_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
790C 6E3A      00626                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00627         
790E ECAA F01B 00628                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00629                                                 ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00630 
7912 0E02      00631                 movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE       ; ADRESS => AY REGISTER
7914 6E39      00632                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00633 
7916 502A      00634                 movf  AY_TONE_B_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
7918 6E3A      00635                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00636         
791A ECAA F01B 00637                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00638                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00639  
               00640                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
791E D19C          M         bra     label
               00641 
7920           00642 FX_FUNC_011
               00643         ;; 0x0B => +Tune C      [Data: 0-255]
               00644         ;; Fx Call for Tune +
               00645         
               00646         ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               00647         ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
7920 C02E F01E 00648         movff AY_TONE_C_TUNE_COARSE_MIDI, TUNE_COARSE_TEMP
7924 C02B F01F 00649         movff AY_TONE_C_TUNE_FINE_MIDI, TUNE_FINE_TEMP
               00650 
               00651         
               00652         ;; [ADD TUNE +] TUNE TEMP - CURREND Fx DATA BYTE
7928 EC55 F03E 00653         call FX_TUNE_PLUS
               00654 
               00655         ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               00656         ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
792C C01E F02C 00657         movff TUNE_COARSE_TEMP, AY_TONE_A_TUNE_COARSE_MIDI
7930 C01F F02B 00658         movff TUNE_FINE_TEMP, AY_TONE_C_TUNE_FINE_MIDI
               00659 
               00660                 ;; SEND TUNE C TO AY CHIP
7934 0E05      00661                 movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE  ; ADRESS => AY REGISTER
7936 6E39      00662                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00663         
7938 502E      00664                 movf  AY_TONE_C_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
793A 6E3A      00665                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00666         
793C ECAA F01B 00667                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00668                                                 ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00669 
7940 0E04      00670                 movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE       ; ADRESS => AY REGISTER
7942 6E39      00671                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00672 
7944 502B      00673                 movf  AY_TONE_C_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
7946 6E3A      00674                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00675         
7948 ECAA F01B 00676                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00677                                                 ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 475


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00678 
               00679                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
794C D185          M         bra     label
               00680 
794E           00681 FX_FUNC_012
               00682         ;; 0x0C => -Tune C      [Data: 0-255]
               00683         ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               00684         ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
794E C02E F01E 00685         movff AY_TONE_C_TUNE_COARSE_MIDI, TUNE_COARSE_TEMP
7952 C02B F01F 00686         movff AY_TONE_C_TUNE_FINE_MIDI, TUNE_FINE_TEMP
               00687 
               00688         
               00689         ;; [TUNE -] Currend TUNE [MINUS] CURREND Fx DATA
7956 EC63 F03E 00690         call FX_TUNE_MINUS
               00691 
               00692         ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               00693         ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
795A C01E F02E 00694         movff TUNE_COARSE_TEMP, AY_TONE_C_TUNE_COARSE_MIDI
795E C01F F02B 00695         movff TUNE_FINE_TEMP, AY_TONE_C_TUNE_FINE_MIDI
               00696 
               00697                 ;; SEND TUNE A TO AY CHIP
7962 0E05      00698                 movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE  ; ADRESS => AY REGISTER
7964 6E39      00699                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00700         
7966 502E      00701                 movf  AY_TONE_C_TUNE_COARSE_MIDI, W     ; DATA FOR AY REG X
7968 6E3A      00702                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00703         
796A ECAA F01B 00704                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00705                                                 ;(AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE      
               00706 
796E 0E04      00707                 movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE       ; ADRESS => AY REGISTER
7970 6E39      00708                 movwf AY_REG_ADDRESS                    ; ADDRESS FOR => AY_SR_Write
               00709 
7972 502B      00710                 movf  AY_TONE_C_TUNE_FINE_MIDI, W       ; DATA FOR AY REG X
7974 6E3A      00711                 movwf AY_REG_DATA                       ; FOR => AY_SR_Write (WRITE DATA TO AY REG)
               00712         
7976 ECAA F01B 00713                         call LABEL_AY_SR_Write          ; WRITING 8BIT DATA 
               00714                                                         ;; (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00715 
               00716                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
797A D16E          M         bra     label
               00717 
797C           00718 FX_FUNC_013
               00719         ;; 0x0D FUNCTION WRITE => Vol.A [Data: 0-15]
               00720         ;; FORMAT VALUE TO 0-15 (DELETE values > 15)
               00721         
797C 0E0F      00722         movlw VOLUME_ABC_MAX_VALUE ;; B'00001111'
797E 647B      00723         cpfsgt FX_DATA_SESSION_CURREND
               00724                 ;; =< 15
               00725                 rgoto FX_FUNC_013_WRITE_TO_AY_CHIP
7980 D002          M         bra     label
               00726                 
               00727                 ;; >15  
               00728                 ;; FORMAT VALUE TO 0-15 (DELETE values > 15)
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 476


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7982 0E0F      00729                 movlw B'00001111'
7984 6E7B      00730                 movwf FX_DATA_SESSION_CURREND
               00731                 
7986           00732 FX_FUNC_013_WRITE_TO_AY_CHIP            
               00733                 ;; SEND DATA TO AY CHIP
7986 0E08      00734                 movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF ; REG ADRESS         => AY REGISTER 
7988 6E39      00735                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00736                 ;; COPY DATA
               00737                 ;; WRITE VOL Tone A
798A C07B F03A 00738                 movff FX_DATA_SESSION_CURREND, AY_REG_DATA
               00739                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
798E ECAA F01B 00740                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00741                 ;; ==========================================================================================
               00742                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7992 D162          M         bra     label
               00743 
7994           00744 FX_FUNC_014
               00745         ;; 0x0E => Vol.B        [Data: 0-15]
7994 0E0F      00746         movlw VOLUME_ABC_MAX_VALUE  ;; B'00001111'
7996 647B      00747         cpfsgt FX_DATA_SESSION_CURREND
               00748                 ;; <= 15
               00749                 rgoto FX_FUNC_014_WRITE_TO_AY_CHIP
7998 D002          M         bra     label
               00750                 
               00751                 ;; > 15 
               00752                 ;; FORMAT VALUE TO 0-15 (DELETE values > 15)
799A 0E0F      00753                 movlw B'00001111'
799C 6E7B      00754                 movwf FX_DATA_SESSION_CURREND
               00755                 
799E           00756 FX_FUNC_014_WRITE_TO_AY_CHIP            
               00757                 ;; SEND DATA TO AY REG 9
799E 0E09      00758                 movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER 
79A0 6E39      00759                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00760                 ;; COPY DATA
               00761                 ;; WRITE VOL Tone B
79A2 C07B F03A 00762                 movff FX_DATA_SESSION_CURREND, AY_REG_DATA
               00763                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
79A6 ECAA F01B 00764                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00765                 ;; ==========================================================================================
               00766                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
79AA D156          M         bra     label
               00767 
79AC           00768 FX_FUNC_015
               00769         ;; 0x0F => Vol.C        [Data: 0-15]
79AC 0E0F      00770         movlw VOLUME_ABC_MAX_VALUE  ;; B'00001111'
79AE 647B      00771         cpfsgt FX_DATA_SESSION_CURREND
               00772                 ;; <=15
               00773                 rgoto FX_FUNC_015_WRITE_TO_AY_CHIP
79B0 D002          M         bra     label
               00774                 
               00775                 ;; >15  
               00776                 ;; FORMAT VALUE TO 0-15 (DELETE values > 15)
79B2 0E0F      00777                 movlw B'00001111'
79B4 6E7B      00778                 movwf FX_DATA_SESSION_CURREND
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 477


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00779                 
79B6           00780 FX_FUNC_015_WRITE_TO_AY_CHIP            
               00781                 ;; SEND DATA TO AY REG 10
79B6 0E0A      00782                 movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF      ; REG ADRESS    => AY REGISTER 
79B8 6E39      00783                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00784                 ;; COPY DATA
79BA C07B F03A 00785                 movff FX_DATA_SESSION_CURREND, AY_REG_DATA
               00786                 ;; WRITE VOL Tone C
               00787                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
79BE ECAA F01B 00788                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00789                 ;; ==========================================================================================
               00790                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
79C2 D14A          M         bra     label
               00791 
79C4           00792 FX_FUNC_016
               00793         ;; On  Noise A
               00794         ;; USER SETTING FILTER 
               00795         ;; MIDI TONE ON FILTER 
               00796         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00797         
               00798         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00799         ;; move USER SWITCH settings to W REG
79C4 5020      00800         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00801                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00802                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00803                         ;; TONE/NOISE A/B/C 
               00804 
               00805         ;; MIDI EVENT FILTER:
               00806         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00807         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00808         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00809          
               00810         
79C6 1022      00811         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00812                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00813                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00814                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00815                 ;; MOVE THE RESULT TO W REG
               00816         
               00817         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00818         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
79C8 6E6B      00819         movwf AY_R7_ENABLE_ABC_NOISE_IO
79CA C06B F058 00820         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
               00821         
               00822         ;; On  Noise A
79CE 9658      00823         bcf  Fx_TEMP, BIT3_NOISE_A_ON_OFF
               00824                 
               00825                 ;; ==========================================================================================
               00826                 ;; SEND DATA TO AY REG 7
79D0 0E07      00827                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
79D2 6E39      00828                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00829                 ;; COPY DATA
79D4 C058 F03A 00830                 movff Fx_TEMP, AY_REG_DATA
               00831                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 478


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
79D8 ECAA F01B 00832                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00833                 ;; ==========================================================================================
               00834                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
79DC D13D          M         bra     label
               00835 
79DE           00836 FX_FUNC_017
               00837         ;; Off Noise A
               00838         ;; USER SETTING FILTER 
               00839         ;; MIDI TONE ON FILTER 
               00840         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00841         
               00842         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00843         ;; move USER SWITCH settings to W REG
79DE 5020      00844         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00845                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00846                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00847                         ;; TONE/NOISE A/B/C 
               00848 
               00849         ;; MIDI EVENT FILTER:
               00850         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00851         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00852         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00853          
               00854         
79E0 1022      00855         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00856                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00857                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00858                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00859                 ;; MOVE THE RESULT TO W REG
               00860         
               00861         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00862         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
79E2 6E6B      00863         movwf AY_R7_ENABLE_ABC_NOISE_IO
79E4 C06B F058 00864         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
               00865         
               00866         ;; OFF  Noise A
79E8 8658      00867         bsf  Fx_TEMP, BIT3_NOISE_A_ON_OFF
               00868                 ;; ==========================================================================================   
               00869                 ;; SEND DATA TO AY REG 7
79EA 0E07      00870                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
79EC 6E39      00871                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00872                 ;; COPY DATA
79EE C058 F03A 00873                 movff Fx_TEMP, AY_REG_DATA
               00874                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
79F2 ECAA F01B 00875                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00876                 ;; ==========================================================================================
               00877                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
79F6 D130          M         bra     label
               00878 
79F8           00879 FX_FUNC_018
               00880         ;; On  Noise B
               00881         ;; USER SETTING FILTER 
               00882         ;; MIDI TONE ON FILTER 
               00883         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 479


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00884         
               00885         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00886         ;; move USER SWITCH settings to W REG
79F8 5020      00887         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00888                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00889                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00890                         ;; TONE/NOISE A/B/C 
               00891 
               00892         ;; MIDI EVENT FILTER:
               00893         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00894         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00895         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00896          
               00897         
79FA 1022      00898         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00899                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00900                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00901                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00902                 ;; MOVE THE RESULT TO W REG
               00903         
               00904         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00905         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
79FC 6E6B      00906         movwf AY_R7_ENABLE_ABC_NOISE_IO
79FE C06B F058 00907         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
               00908 
               00909         ;; On  Noise B
7A02 9858      00910         bcf  Fx_TEMP, BIT4_NOISE_B_ON_OFF       
               00911                 ;; ==========================================================================================   
               00912                 ;; SEND DATA TO AY REG 7
7A04 0E07      00913                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
7A06 6E39      00914                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00915                 ;; COPY DATA
7A08 C058 F03A 00916                 movff Fx_TEMP, AY_REG_DATA
               00917                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7A0C ECAA F01B 00918                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00919                 ;; ==========================================================================================
               00920 
               00921                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7A10 D123          M         bra     label
               00922 
7A12           00923 FX_FUNC_019
               00924         ;; Off Noise B
               00925 
               00926         ;; USER SETTING FILTER 
               00927         ;; MIDI TONE ON FILTER 
               00928         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00929         
               00930         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00931         ;; move USER SWITCH settings to W REG
7A12 5020      00932         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00933                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00934                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00935                         ;; TONE/NOISE A/B/C 
               00936 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 480


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00937         ;; MIDI EVENT FILTER:
               00938         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00939         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00940         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00941          
               00942         
7A14 1022      00943         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00944                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               00945                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00946                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00947                 ;; MOVE THE RESULT TO W REG
               00948         
               00949         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00950         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7A16 6E6B      00951         movwf AY_R7_ENABLE_ABC_NOISE_IO
7A18 C06B F058 00952         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
               00953          
               00954         ;; Off Noise B
7A1C 8858      00955         bsf  Fx_TEMP, BIT4_NOISE_B_ON_OFF       
               00956 
               00957                 ;; ==========================================================================================
               00958                 ;; SEND DATA TO AY REG 7
7A1E 0E07      00959                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF ; REG ADRESS     => AY REGISTER FOR AY CHIP REG 7
7A20 6E39      00960                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               00961                 ;; COPY DATA
7A22 C058 F03A 00962                 movff Fx_TEMP, AY_REG_DATA
               00963                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7A26 ECAA F01B 00964                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               00965                 ;; ==========================================================================================
               00966 
               00967                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7A2A D116          M         bra     label
               00968 
7A2C           00969 FX_FUNC_020
               00970         ;; On  Noise C 
               00971         
               00972         ;; USER SETTING FILTER 
               00973         ;; MIDI TONE ON FILTER 
               00974         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               00975         
               00976         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               00977         ;; move USER SWITCH settings to W REG
7A2C 5020      00978         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               00979                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               00980                         ;; USER CLEAR or SET A BIT BY SWITCHING
               00981                         ;; TONE/NOISE A/B/C 
               00982 
               00983         ;; MIDI EVENT FILTER:
               00984         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               00985         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               00986         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               00987          
7A2E 1022      00988         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               00989                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 481


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00990                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               00991                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               00992                 ;; MOVE THE RESULT TO W REG
               00993         
               00994         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               00995         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7A30 6E6B      00996         movwf AY_R7_ENABLE_ABC_NOISE_IO
7A32 C06B F058 00997         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
               00998         
               00999         ;; On  Noise C 
7A36 9A58      01000         bcf  Fx_TEMP, BIT5_NOISE_C_ON_OFF       
               01001         
               01002                 ;; ==========================================================================================
               01003                 ;; SEND DATA TO AY REG 7
7A38 0E07      01004                 movlw AY_CHIP_ADR_07_TONE_NOISE_ON_OFF ; REG ADRESS     => AY REGISTER FOR AY CHIP REG 7
7A3A 6E39      01005                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01006                 ;; COPY DATA
7A3C C058 F03A 01007                 movff Fx_TEMP, AY_REG_DATA
               01008                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7A40 ECAA F01B 01009                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01010                 ;; ==========================================================================================
               01011                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7A44 D109          M         bra     label
               01012 
7A46           01013 FX_FUNC_021
               01014         ;; Off Noise C
               01015         
               01016         ;; USER SETTING FILTER 
               01017         ;; MIDI TONE ON FILTER 
               01018         ;; OR ==> AY_R7_ENABLE_ABC_NOISE_IO
               01019         
               01020         ;; USER SETTING => TONE A|B|C ON/OFF [FILTER]:
               01021         ;; move USER SWITCH settings to W REG
7A46 5020      01022         movf AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH, W 
               01023                         ;; ABC TONE + NOISE ON/OFF USER SWITCH
               01024                         ;; USER CLEAR or SET A BIT BY SWITCHING
               01025                         ;; TONE/NOISE A/B/C 
               01026 
               01027         ;; MIDI EVENT FILTER:
               01028         ;; *OR* [AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH] WITH [AY_TONE_ABC_MIDI_ON_OFF]
               01029         ;; MEMO: => MIDI EVENTS SET OR CLEAR BITS @ AY_TONE_ABC_MIDI_ON_OFF
               01030         ;; MEMO: => CLEAR BIT = [TONE / NOISE] *ON*
               01031          
7A48 1022      01032         iorwf AY_TONE_ABC_MIDI_ON_OFF, W        
               01033                 ;; OR AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH
               01034                 ;; WITH AY_TONE_ABC_MIDI_ON_OFF
               01035                 ;; NOW JUST THE RIGHT TONE/NOISE IS SWITCHED
               01036                 ;; MOVE THE RESULT TO W REG
               01037         
               01038         ;; WRITE W REG TO THE SHADOW AY CHIP REG 7 
               01039         ;; ==> AY_R7_ENABLE_ABC_NOISE_IO
7A4A 6E6B      01040         movwf AY_R7_ENABLE_ABC_NOISE_IO
7A4C C06B F058 01041         movff AY_R7_ENABLE_ABC_NOISE_IO, Fx_TEMP
               01042         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 482


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01043         ;; Off Noise C
7A50 8A58      01044         bsf  Fx_TEMP, BIT5_NOISE_C_ON_OFF       
               01045 
               01046                 ;; ==========================================================================================   
               01047                 ;; SEND DATA TO AY REG 7
7A52 0E07      01048                 movlw 0x07                      ; REG ADRESS    => AY REGISTER FOR AY CHIP REG 7
7A54 6E39      01049                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01050                 ;; COPY DATA
7A56 C058 F03A 01051                 movff Fx_TEMP, AY_REG_DATA
               01052                 ;; --------------[SEND DATA TO AY REG 7]-----------------------------------------------------
7A5A ECAA F01B 01053                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01054                 ;; ==========================================================================================
               01055                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7A5E D0FC          M         bra     label
               01056 
7A60           01057 FX_FUNC_022
               01058         ;;  Noise Frq.  [Data: 0-31]
7A60 0E1F      01059         movlw NOISE_PERIOD_MAX_VALUE ;; NOISE PERIOD MAX VALUE = B'00011111', 31 dec, 01F hex
7A62 647B      01060         cpfsgt FX_DATA_SESSION_CURREND
               01061                 ;; OK, GO ON
               01062                 ;; FX_DATA_SESSION_CURREND is not out of range [0-31]
               01063                 rgoto FX_FUNC_022_GO_ON
7A64 D002          M         bra     label
               01064                 
               01065                 ;; write noise period max MAX VALUE [fX DATA WAS OUT OF RAGE] 
7A66 0E1F      01066                 movlw   NOISE_PERIOD_MAX_VALUE
7A68 6E7B      01067                 movwf   FX_DATA_SESSION_CURREND
               01068                 
7A6A           01069 FX_FUNC_022_GO_ON               
               01070         ;; REVERSE NOISE PERIOD VALUE 
               01071         ;; [THE NOISE PERIOD VALUE IS REVERSED ON LCD ALSO]
               01072         ;; [FX DATA]  0 => [AY CHIP REG 6 REVERSE VALUE] = 31
               01073         ;; [FX DATA]  1 => [AY CHIP REG 6 REVERSE VALUE] = 30
               01074         ;; [FX DATA]  2 => [AY CHIP REG 6 REVERSE VALUE] = 29
               01075         ;; [FX DATA]  3 => [AY CHIP REG 6 REVERSE VALUE] = 28
               01076         ;; ...
               01077         ;; [FX DATA] 31 => [AY CHIP REG 6REVERSE VALUE]  = 0
7A6A 0E1F      01078         movlw NOISE_PERIOD_MAX_VALUE  ;; 31
7A6C 6E36      01079         movwf AY_R6_NOISE_PERIOD_REVERSE_VALUE
7A6E 507B      01080         movf FX_DATA_SESSION_CURREND, W
7A70 5E36      01081         subwf AY_R6_NOISE_PERIOD_REVERSE_VALUE, F
               01082                 ;; ==========================================================================================
               01083                 ;; SEND DATA TO AY REG 6
7A72 0E06      01084                 movlw AY_CHIP_ADR_06_NOISE_PERIOD ; REG ADRESS  => AY REGISTER FOR AY CHIP REG 6
7A74 6E39      01085                 movwf AY_REG_ADDRESS              ; ADDRESS FOR         => AY_SR_Write
               01086                 ;; COPY DATA
7A76 C036 F03A 01087                 movff AY_R6_NOISE_PERIOD_REVERSE_VALUE, AY_REG_DATA
               01088                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7A7A ECAA F01B 01089                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01090                 ;; ==========================================================================================
               01091                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7A7E D0EC          M         bra     label
               01092 
7A80           01093 FX_FUNC_023
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 483


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01094         ;; ENV ON A
               01095         
               01096         ;; get currend envelope shape
7A80 ECA1 F02A 01097         call ENVELOPE_TRANSLATOR_CALL
               01098                         
7A84 C06C F058 01099         movff AY_R8_CH_A_AMPLITUDE, Fx_TEMP
               01100         ;; SET bit 4 => ENV MODE ON A
7A88 8858      01101         bsf     Fx_TEMP, BIT4_ENVELOPE_ON_OFF
               01102 
               01103                 ;; ==========================================================================================
               01104                 ;; SEND DATA TO AY CHIP
7A8A 0E08      01105                 movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF      ; SELECT ADRESS => SET REGISTER OF AY CHIP
7A8C 6E39      01106                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01107                 ;; COPY DATA
7A8E C058 F03A 01108                 movff Fx_TEMP, AY_REG_DATA
               01109                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7A92 ECAA F01B 01110                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01111                 ;; ==========================================================================================
               01112                 ;;; -------------[WRITE ENVELOPE SHAPE/CYCLE]------------------
               01113                 ;; SEND DATA TO AY REG 13 (ENV. SHAPE Cycle REG)
               01114                 ;; SET AY REGISTER
7A96 0E0D      01115                 movlw  AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  
7A98 6E39      01116                 movwf  AY_REG_ADDRESS           
               01117                 ;; WRITE GLOBAL [A|B|C] ENVELOPE SHAPE DATA TO AY CHIP
7A9A C071 F03A 01118                 movff  AY_R13_ENV_SHAPE_CYCLE, AY_REG_DATA
               01119                 ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
7A9E ECAA F01B 01120                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01121                 ;; ==========================================================================================
               01122         
               01123                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7AA2 D0DA          M         bra     label
               01124 
7AA4           01125 FX_FUNC_024
               01126         ;; ENV OFF A
7AA4 C06C F058 01127         movff AY_R8_CH_A_AMPLITUDE, Fx_TEMP
               01128         ;; SET bit 4 => ENV MODE ON A
7AA8 9858      01129         bcf     Fx_TEMP, BIT4_ENVELOPE_ON_OFF
               01130 
               01131                 ;; ==========================================================================================
               01132                 ;; SEND DATA TO AY CHIP
7AAA 0E08      01133                 movlw AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF      ; SET AY CHIP REGISTER  
7AAC 6E39      01134                 movwf AY_REG_ADDRESS            ; => AY_SR_Write
               01135                 ;; COPY DATA
7AAE C058 F03A 01136                 movff Fx_TEMP, AY_REG_DATA
               01137                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7AB2 ECAA F01B 01138                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01139                 ;; ==========================================================================================
               01140                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7AB6 D0D0          M         bra     label
               01141 
               01142 
7AB8           01143 FX_FUNC_025
               01144         ;; ENV ON B
               01145 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 484


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01146         ;; get currend envelope shape
7AB8 ECA1 F02A 01147         call ENVELOPE_TRANSLATOR_CALL
               01148 
7ABC C06D F058 01149         movff AY_R9_CH_B_AMPLITUDE, Fx_TEMP
               01150         ;; SET bit 4 => ENV MODE ON B
7AC0 8858      01151         bsf     Fx_TEMP, BIT4_ENVELOPE_ON_OFF
               01152         
               01153                 ;; ==========================================================================================
               01154                 ;; SEND DATA TO AY CHIP
7AC2 0E09      01155                 movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF ; SELECT ADRESS => SET REGISTER OF AY CHIP
7AC4 6E39      01156                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01157                 ;; COPY DATA
7AC6 C058 F03A 01158                 movff Fx_TEMP, AY_REG_DATA
               01159                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7ACA ECAA F01B 01160                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01161                 ;; ==========================================================================================
               01162                 ;;; -------------[WRITE ENVELOPE SHAPE/CYCLE]------------------
               01163                 ;; SEND DATA TO AY REG 13 (ENV. SHAPE Cycle REG)
               01164                 ;; SET AY REGISTER
7ACE 0E0D      01165                 movlw  AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  
7AD0 6E39      01166                 movwf  AY_REG_ADDRESS           
               01167                 ;; WRITE GLOBAL [A|B|C] ENVELOPE SHAPE DATA TO AY CHIP
7AD2 C071 F03A 01168                 movff  AY_R13_ENV_SHAPE_CYCLE, AY_REG_DATA
               01169                 ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
7AD6 ECAA F01B 01170                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01171                 ;; ==========================================================================================
               01172                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7ADA D0BE          M         bra     label
               01173 
7ADC           01174 FX_FUNC_026
               01175         ;; ENV OFF B
7ADC C06D F058 01176         movff AY_R9_CH_B_AMPLITUDE, Fx_TEMP
               01177         ;; SET bit 4 => ENV MODE ON A
7AE0 9858      01178         bcf     Fx_TEMP, BIT4_ENVELOPE_ON_OFF
               01179         
               01180                 ;; ==========================================================================================
               01181                 ;; SEND DATA TO AY CHIP
7AE2 0E09      01182                 movlw AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF  ; SET AY CHIP REGISTER      
7AE4 6E39      01183                 movwf AY_REG_ADDRESS            ; => AY_SR_Write
               01184                 ;; COPY DATA
7AE6 C058 F03A 01185                 movff Fx_TEMP, AY_REG_DATA
               01186                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7AEA ECAA F01B 01187                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01188                 ;; ==========================================================================================
               01189                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7AEE D0B4          M         bra     label
               01190 
               01191 
7AF0           01192 FX_FUNC_027
               01193         ;; ENV ON C
               01194 
               01195         ;; get currend envelope shape
7AF0 ECA1 F02A 01196         call ENVELOPE_TRANSLATOR_CALL   
               01197 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 485


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7AF4 C06E F058 01198         movff AY_R10_CH_C_AMPLITUDE, Fx_TEMP
               01199         ;; SET bit 4 => ENV MODE ON C
7AF8 8858      01200         bsf     Fx_TEMP, BIT4_ENVELOPE_ON_OFF
               01201         
               01202                 ;; ==========================================================================================
               01203                 ;; SEND DATA TO AY CHIP
7AFA 0E0A      01204                 movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF  ; SELECT ADRESS => SET REGISTER OF AY CHIP
7AFC 6E39      01205                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01206                 ;; COPY DATA
7AFE C058 F03A 01207                 movff Fx_TEMP, AY_REG_DATA
               01208                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B02 ECAA F01B 01209                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01210                 ;; ==========================================================================================
               01211                 ;;; -------------[WRITE ENVELOPE SHAPE/CYCLE]------------------
               01212                 ;; SEND DATA TO AY REG 13 (ENV. SHAPE Cycle REG)
               01213                 ;; SET AY REGISTER
7B06 0E0D      01214                 movlw  AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  
7B08 6E39      01215                 movwf  AY_REG_ADDRESS           
               01216                 ;; WRITE GLOBAL [A|B|C] ENVELOPE SHAPE DATA TO AY CHIP
7B0A C071 F03A 01217                 movff  AY_R13_ENV_SHAPE_CYCLE, AY_REG_DATA
               01218                 ;; --------------[SEND DATA TO AY REG 13]-----------------------------------------------------
7B0E ECAA F01B 01219                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01220                 ;; ==========================================================================================
               01221                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B12 D0A2          M         bra     label
               01222 
7B14           01223 FX_FUNC_028
               01224         ;; ENV OFF C
7B14 C06E F058 01225         movff AY_R10_CH_C_AMPLITUDE, Fx_TEMP
               01226         ;; SET bit 4 => ENV MODE ON A
7B18 9858      01227         bcf     Fx_TEMP, BIT4_ENVELOPE_ON_OFF
               01228         
               01229                 ;; ==========================================================================================
               01230                 ;; SEND DATA TO AY CHIP
7B1A 0E0A      01231                 movlw AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF ; SET AY CHIP REGISTER       
7B1C 6E39      01232                 movwf AY_REG_ADDRESS            ; => AY_SR_Write
               01233                 ;; COPY DATA
7B1E C058 F03A 01234                 movff Fx_TEMP, AY_REG_DATA
               01235                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B22 ECAA F01B 01236                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01237                 ;; ==========================================================================================
               01238                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B26 D098          M         bra     label
               01239 
               01240 
               01241 
               01242 
7B28           01243 FX_FUNC_029
               01244         ;; WRITE ENV Shape/CYCLE        [Data: 0-15]
7B28 0E08      01245         movlw ENVELOPE_SHAPE_MAX_VALUE_8 ; ENVELOPE SHAPE 1-8 (8 = Max Value)
7B2A 647B      01246         cpfsgt FX_DATA_SESSION_CURREND
               01247                 
               01248                 rgoto FX_FUNC_014_WRITE_TO_AY_CHIP
7B2C D738          M         bra     label
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 486


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01249                         
               01250                 ;; FORMAT VALUE TO 0-15 (DELETE values > 15)
7B2E 0E08      01251                 movlw ENVELOPE_SHAPE_MAX_VALUE_8
7B30 6E7B      01252                 movwf FX_DATA_SESSION_CURREND
               01253 
               01254 
               01255                 
7B32           01256 FX_FUNC_029_WRITE_TO_AY_CHIP    
               01257                 ;; SEND DATA TO AY CHIP - ENV SHAPE CYCLE
7B32 0E0D      01258                 movlw AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  ; REG ADRESS     => AY REGISTER 13
7B34 6E39      01259                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01260                 
               01261                 ;; ==========================================================================================
               01262                 ;; COPY DATA
7B36 C07B F03A 01263                 movff FX_DATA_SESSION_CURREND, AY_REG_DATA
               01264                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B3A ECAA F01B 01265                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01266                 ;; ==========================================================================================
               01267                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B3E D08C          M         bra     label
               01268 
               01269 
7B40           01270 FX_FUNC_030
               01271         ;; ENV PERIOD Fine      [Data: 0-255]
               01272                 ;; ==========================================================================================
               01273                 ;; SEND DATA TO AY CHIP
7B40 0E0B      01274                 movlw AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE ; REG ADRESS  => AY REGISTER 11
7B42 6E39      01275                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01276                 ;; COPY DATA
7B44 C07B F03A 01277                 movff FX_DATA_SESSION_CURREND, AY_REG_DATA
               01278                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B48 ECAA F01B 01279                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01280                 ;; ==========================================================================================
               01281                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B4C D085          M         bra     label
               01282 
7B4E           01283 FX_FUNC_031
               01284         ;; WRITE ENV PERIOD Coarse      [Data: 0-255]
               01285                 ;; ==========================================================================================
               01286                 ;; SEND DATA TO AY CHIP
7B4E 0E0C      01287                 movlw AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE ; REG ADRESS        => AY REGISTER 12
7B50 6E39      01288                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01289                 ;; COPY DATA
7B52 C07B F03A 01290                 movff FX_DATA_SESSION_CURREND, AY_REG_DATA
               01291                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B56 ECAA F01B 01292                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01293                 ;; ==========================================================================================
               01294                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B5A D07E          M         bra     label
               01295 
7B5C           01296 FX_FUNC_032
               01297         ;; WRITE NOTE ON #1 ==> Tone A
               01298         
               01299                 ;; SEND DATA TO AY CHIP
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 487


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7B5C 0E00      01300                 movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE      ; REG ADRESS    => AY REGISTER 0
7B5E 6E39      01301                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01302                 
               01303 
               01304                 ;; ==========================================================================================
               01305                 ;; COPY DATA
7B60 C059 F03A 01306                 movff Fx_Note_On_1_tune_fine, AY_REG_DATA
               01307                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B64 ECAA F01B 01308                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01309                 ;; ==========================================================================================
7B68 0E01      01310                 movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE     ; REG ADRESS    => AY REGISTER 12
7B6A 6E39      01311                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01312                 ;; COPY DATA
7B6C C05A F03A 01313                 movff Fx_Note_On_1_tune_coarse, AY_REG_DATA
               01314                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B70 ECAA F01B 01315                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01316                 ;; ==========================================================================================
               01317                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B74 D071          M         bra     label
               01318 
7B76           01319 FX_FUNC_033
               01320         ;; WRITE NOTE ON #1 ==> Tone B
               01321                 ;; SEND DATA TO AY CHIP
7B76 0E02      01322                 movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE  ; REG ADRESS         => AY REGISTER 12
7B78 6E39      01323                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01324                 ;; ==========================================================================================           
               01325                 ;; COPY DATA
7B7A C059 F03A 01326                 movff Fx_Note_On_1_tune_fine, AY_REG_DATA
               01327                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B7E ECAA F01B 01328                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01329                 ;; ==========================================================================================
7B82 0E03      01330                 movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE ; REG ADRESS        => AY REGISTER 12
7B84 6E39      01331                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01332                 ;; COPY DATA
7B86 C05A F03A 01333                 movff Fx_Note_On_1_tune_coarse, AY_REG_DATA
               01334                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B8A ECAA F01B 01335                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01336                 ;; ==========================================================================================
               01337                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7B8E D064          M         bra     label
               01338 
7B90           01339 FX_FUNC_034
               01340         ;; WRITE NOTE ON #1 ==> Tone C
               01341                 
               01342                 ;; SEND DATA TO AY CHIP
7B90 0E04      01343                 movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE ; REG ADRESS  => AY REGISTER
7B92 6E39      01344                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01345                 
               01346                 ;; ==========================================================================================           
               01347                 ;; COPY DATA
7B94 C059 F03A 01348                 movff Fx_Note_On_1_tune_fine, AY_REG_DATA
               01349                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7B98 ECAA F01B 01350                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01351                 ;; ==========================================================================================
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 488


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7B9C 0E05      01352                 movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE ; REG ADRESS     => AY REGISTER
7B9E 6E39      01353                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01354                 ;; COPY DATA
7BA0 C05A F03A 01355                 movff Fx_Note_On_1_tune_coarse, AY_REG_DATA
               01356                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BA4 ECAA F01B 01357                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01358                 ;; ==========================================================================================
               01359                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7BA8 D057          M         bra     label
               01360 
7BAA           01361 FX_FUNC_035
               01362         ;; 0x1F => WRITE NOTE ON #2 ==> Tone A
               01363         ;; SEND DATA TO AY CHIP
7BAA 0E00      01364         movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE  ; REG ADRESS        => AY REGISTER 
7BAC 6E39      01365         movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01366                 
               01367                 ;; ==========================================================================================           
               01368                 ;; COPY DATA
7BAE C05B F03A 01369                 movff Fx_Note_On_2_tune_fine, AY_REG_DATA
               01370                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BB2 ECAA F01B 01371                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01372                 ;; ==========================================================================================
7BB6 0E01      01373                 movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE  ; REG ADRESS       => AY REGISTER 
7BB8 6E39      01374                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01375                 ;; COPY DATA
7BBA C05C F03A 01376                 movff Fx_Note_On_2_tune_coarse, AY_REG_DATA
               01377                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BBE ECAA F01B 01378                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01379                 ;; ==========================================================================================
               01380                                 rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7BC2 D04A          M         bra     label
               01381 
7BC4           01382 FX_FUNC_036
               01383         ;; 0x20 => WRITE NOTE ON #2 ==> Tone B
               01384         ;; SEND DATA TO AY CHIP
7BC4 0E02      01385         movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE  ; REG ADRESS         => AY REGISTER 
7BC6 6E39      01386         movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01387                 ;; ==========================================================================================
               01388                 ;; COPY DATA
7BC8 C05B F03A 01389                 movff Fx_Note_On_2_tune_fine, AY_REG_DATA
               01390                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BCC ECAA F01B 01391                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01392                 ;; ==========================================================================================
7BD0 0E03      01393                 movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE  ; REG ADRESS       => AY REGISTER 
7BD2 6E39      01394                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01395                 ;; COPY DATA
7BD4 C05C F03A 01396                 movff Fx_Note_On_2_tune_coarse, AY_REG_DATA
               01397                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BD8 ECAA F01B 01398                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01399                 ;; ==========================================================================================
               01400                 
               01401                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7BDC D03D          M         bra     label
               01402 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 489


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7BDE           01403 FX_FUNC_037
               01404         ;; 0x21 => WRITE NOTE ON #2 ==> Tone C
               01405         ;; SEND DATA TO AY CHIP
               01406                 
               01407                 ;; ==========================================================================================
7BDE 0E04      01408                 movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE  ; REG ADRESS         => AY REGISTER 
7BE0 6E39      01409                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01410                 ;; COPY DATA
7BE2 C05B F03A 01411                 movff Fx_Note_On_2_tune_fine, AY_REG_DATA
               01412                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BE6 ECAA F01B 01413                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01414                 ;; ==========================================================================================
7BEA 0E05      01415                 movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE  ; REG ADRESS    => AY REGISTER 
7BEC 6E39      01416                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01417                 ;; COPY DATA
7BEE C05C F03A 01418                 movff Fx_Note_On_2_tune_coarse, AY_REG_DATA
               01419                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7BF2 ECAA F01B 01420                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01421                 ;; ==========================================================================================
               01422 
               01423                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7BF6 D030          M         bra     label
               01424 
7BF8           01425 FX_FUNC_038
               01426         ;; WRITE NOTE ON #3 ==> Tone A
               01427                 ;; ==========================================================================================
               01428                 ;; SEND DATA TO AY CHIP
7BF8 0E00      01429                 movlw AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE  ; REG ADRESS        => AY REGISTER 
7BFA 6E39      01430                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01431                 ;; COPY DATA
7BFC C05D F03A 01432                 movff Fx_Note_On_3_tune_fine, AY_REG_DATA
               01433                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7C00 ECAA F01B 01434                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01435                 ;; ==========================================================================================
7C04 0E01      01436                 movlw AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE  ; REG ADRESS       => AY REGISTER 
7C06 6E39      01437                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01438                 ;; COPY DATA
7C08 C05E F03A 01439                 movff Fx_Note_On_3_tune_coarse, AY_REG_DATA
               01440                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7C0C ECAA F01B 01441                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01442                 ;; ==========================================================================================
               01443                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7C10 D023          M         bra     label
               01444 
7C12           01445 FX_FUNC_039
               01446         ;; 0x23 => WRITE NOTE ON #3 ==> Tone B
               01447                 ;; ==========================================================================================
               01448                 ;; SEND DATA TO AY CHIP
7C12 0E02      01449                 movlw AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE  ; REG ADRESS         => AY REGISTER 
7C14 6E39      01450                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01451                 ;; COPY DATA
7C16 C05D F03A 01452                 movff Fx_Note_On_3_tune_fine, AY_REG_DATA
               01453                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7C1A ECAA F01B 01454                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 490


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01455                 ;; ==========================================================================================
7C1E 0E03      01456                 movlw AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE  ; REG ADRESS       => AY REGISTER 
7C20 6E39      01457                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01458                 ;; COPY DATA
7C22 C05E F03A 01459                 movff Fx_Note_On_3_tune_coarse, AY_REG_DATA
               01460                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7C26 ECAA F01B 01461                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01462                 ;; ==========================================================================================
               01463                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7C2A D016          M         bra     label
               01464 
7C2C           01465 FX_FUNC_040
               01466         ;; WRITE NOTE ON #3 ==> Tone C
               01467                 ;; ==========================================================================================
               01468                 ;; SEND DATA TO AY CHIP
7C2C 0E04      01469                 movlw AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE  ; REG ADRESS         => AY REGISTER 
7C2E 6E39      01470                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01471                 ;; COPY DATA
7C30 C05D F03A 01472                 movff Fx_Note_On_3_tune_fine, AY_REG_DATA
               01473                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7C34 ECAA F01B 01474                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01475                 ;; ==========================================================================================
7C38 0E05      01476                 movlw AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE ; REG ADRESS     => AY REGISTER 
7C3A 6E39      01477                 movwf AY_REG_ADDRESS            ; ADDRESS FOR   => AY_SR_Write
               01478                 ;; COPY DATA
7C3C C05E F03A 01479                 movff Fx_Note_On_3_tune_coarse, AY_REG_DATA
               01480                 ;; --------------[SEND DATA TO AY CHIP]-----------------------------------------------------
7C40 ECAA F01B 01481                 call LABEL_AY_SR_Write  ; WRITING 8BIT DATA (AY_REG_ADDRESS, AY_REG_DATA)TO AY REG(X) ROUTINE
               01482                 ;; ==========================================================================================
               01483                         rgoto INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
7C44 D009          M         bra     label
               01484 
               01485 
7C46           01486 FX_FUNC_041
               01487         ;; GOTO Fx POS  [Data: 0-31]
               01488         ;; set FX_POS_CURREND
7C46 C07B F061 01489         movff FX_DATA_SESSION_CURREND, FX_POS_SESSION_CURREND
               01490         
               01491         ;; IS THE GOTO POS VALID?
7C4A 0E1F      01492         movlw FX_POS_MAX_31 
7C4C 6461      01493         cpfsgt FX_POS_SESSION_CURREND
               01494                 ;; FX POS IS OK
               01495                 rgoto FX_FUNC_041_RESET_FX_TIMER
7C4E D002          M         bra     label
               01496                         
               01497                 ;; FX_POS IS OUT OF RANG 
               01498                 ;; SET FX POS TO MAX = POS 31
7C50 0E1F      01499                 movlw FX_POS_MAX_31 
7C52 6E61      01500                 movwf FX_POS_SESSION_CURREND
               01501 
               01502         
7C54           01503 FX_FUNC_041_RESET_FX_TIMER                      
               01504         ;; RESET FX Timer for the next Fx Pos Cycle
7C54 6A53      01505         clrf    FX_TIMER        
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 491


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01506                         ;; GO AND LOAD NEW POS
               01507                         rgoto FX_PIPELINE_EXIT
7C56 D007          M         bra     label
               01508 
               01509 ;; -------------------------------------------------------------------------
               01510 ;; -------------------------------------------------------------------------
               01511 ;; -------------------------------------------------------------------------
               01512 
               01513 
7C58           01514 INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION
               01515         ;; Fx Pos +1
               01516         
               01517         ;; First: RESET FX Timer for the next Fx Pos Cycle
7C58 6A53      01518         clrf    FX_TIMER        
               01519         
               01520         ;; INC Fx POS   
               01521         ;; +1 to Fx Pos
7C5A 2A61      01522         incf    FX_POS_SESSION_CURREND, F
               01523                 ;; chck if Fx Tab Pos > 31
7C5C 0E1F      01524                 movlw FX_POS_MAX_31  ;; 31
7C5E 6461      01525                 cpfsgt FX_POS_SESSION_CURREND
               01526                         ;; NO - OK QUIT HERE
7C60 EF33 F03E 01527                         goto FX_PIPELINE_EXIT
               01528 
               01529                                 ;; YES - END OF Fx Tab
               01530                                 ;; SET Fx NOP = ON = END OF Fx
               01531                                 ;; SET NOP (NO Fx OPERATION)
7C64 6856      01532                                 setf    FX_NOP_ON_OFF   ;; SET Fx NOP
               01533 
               01534         
               01535 
               01536 
7C66           01537 FX_PIPELINE_EXIT
               01538                         ;; LOAD NEXT FX DATA for the NEXT CURREND POS /
               01539                         ;; for the NEXT Fx CYCLE
7C66 EC36 F03E 01540                         call LOAD_FX_SESSION_DATA_CURREND_POS
               01541                                         ;; EXIT
               01542                                         ;; END OF CURREND FX CYCLE                      
7C6A 0012      01543                                         return
               01544 
               01545 
               01546 ;; ----------------------------------------------------------------
               01547 
               01548 ;; ----------------------------------------------------------------
               01549 ;; #####################  Fx Calls  ###############################
               01550 ;; ----------------------------------------------------------------
               01551 ;; Fx Call to Load Curren Fx date @ POS X
               01552 
               01553 ;; LOAD CURREND POS for Fx Pipeline
               01554 
7C6C           01555 LOAD_FX_SESSION_DATA_CURREND_POS
               01556         ;; used by Fx pipeline 
               01557         ;; DO INDIRECT RAM ACCESS via FSR0
7C6C 0E02      01558         movlw SELECT_Fx_RAM_BANK        ;; SET IDIRECT RAM ACCESS REG FSR0 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 492


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7C6E 6EEA      01559         movwf FSR0H                     ;; RAM BANK: Fx DATA RAM AREA
               01560                                         
               01561         ;; LOAD FX FUNCTION @ Currend SESSION Pos (in the Fx Data Area) 
7C70 0E20      01562         movlw RAM_OFFSET_FX_FUNCTION             ;; OFFSET @ RAM BANK 2 @ The RAM AREA of FX FUNCTIONS (in the Fx Data Area)    
7C72 2461      01563         addwf FX_POS_SESSION_CURREND, W          ;; + Fx Tab SESSION Pos (0 to 31 [32])
7C74 6EE9      01564         movwf FSR0L                              ;; SET CURREND SESSION OFFSET for Fx Function @ current Fx SESSION Pos.
7C76 CFEF F062 01565         movff INDF0, FX_FUNCTION_SESSION_CURREND ;; WRITE FX FUNCTION @ currend Session Pos to Working Register
               01566 
               01567         ;; LOAD FX Data Reg. @ Currend SESSION Pos (in the Fx Data Area)        
7C7A 0E40      01568         movlw RAM_OFFSET_FX_DATA        ;; OFFSET @ RAM BANK 2 @ The RAM AREA of FX Data (in the Fx Data Area)  
7C7C 2461      01569         addwf FX_POS_SESSION_CURREND, W ;; + (0 to 31 [32]) => Fx Tab Pos
7C7E 6EE9      01570         movwf FSR0L             ;; SET CURREND OFFSET to Fx DATA @ current Fx SESSION Pos.
7C80 CFEF F07B 01571         movff INDF0,FX_DATA_SESSION_CURREND     ;; WRITE FX Data @ currend Session Pos to Working Register
               01572 
               01573         ;; LOAD FX TIME DELAY @ Currend SESSION Pos (in the Fx Data Area)
7C84 0E60      01574         movlw RAM_OFFSET_FX_TIME_PRE_EXECUTION          ;; OFFSET @ RAM BANK 2 -  
               01575                                                         ;; The RAM AREA of FX TIME DELAY REGS (in the Fx Data Area)      
7C86 2461      01576         addwf FX_POS_SESSION_CURREND, W                 ;; + (0 to 31 [32]) => Fx Tab Pos
7C88 6EE9      01577         movwf FSR0L                                     ;; SET CURREND OFFSET To Ind. Reg Adress
7C8A CFEF F063 01578         movff INDF0,FX_TIME_PRE_EXECUTION_SESSION_CURREND       ;; WRITE FX Pre Execution Time 
               01579                                                                 ;; @ currend Session Pos to Working Register
               01580                 ;; End of Subroutine
7C8E 0012      01581                 return
               01582 
               01583 ;; --------------------------------------------------------------------------
               01584 
               01585 
               01586 
               01587 ;; ##############################################################################
               01588 ;; Fx Call to Load TUNE #1, #2 + #3
7C90           01589 WRITE_FX_TUNE_1_2_3
               01590                 ;; For Fx Tunes #123
               01591                 ;; Save the last 3 Note On Values
               01592                 ;; 1) Fx Tune #2        => Fx Tune #3 (last but two Tune)
               01593                 ;; 2) Fx Tune #1        => Fx Tune #2 (last but one Tune)
               01594                 ;; 3) Currend Note On   => Fx Tune #1 (last Tune)
7C90 C05C F05E 01595                 movff Fx_Note_On_2_tune_coarse, Fx_Note_On_3_tune_coarse
7C94 C05B F05D 01596                 movff Fx_Note_On_2_tune_fine, Fx_Note_On_3_tune_fine
               01597 
7C98 C05A F05C 01598                 movff Fx_Note_On_1_tune_coarse, Fx_Note_On_2_tune_coarse
7C9C C059 F05B 01599                 movff Fx_Note_On_1_tune_fine, Fx_Note_On_2_tune_fine
               01600                 
7CA0 C003 F05A 01601                 movff MIOS_PARAMETER1, Fx_Note_On_1_tune_coarse
7CA4 C004 F059 01602                 movff MIOS_PARAMETER2, Fx_Note_On_1_tune_fine
7CA8 0012      01603                         return
               01604 
               01605 
               01606 ;; ##############################################################################
               01607 ;; ##############################################################################
               01608 ;; Fx Call for Tune +
               01609 ;; (1)
               01610 ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               01611 ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
               01612 ;; bevor call
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 493


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01613 ;;
               01614 ;; (2)
               01615 ;; TUNE_FINE_TEMP - CURREND Fx DATA BYTE
               01616 ;; 
               01617 ;; (3)
               01618 ;; BORROW HANDLING IF NEEDED (DEC TUNE_COARSE_TEMP -1)
               01619 ;; (3a) SET TUNE_COARSE_TEMP and TUNE_FINE_TEMP Min. Value if needed
               01620 ;; 
               01621 ;; (4)
               01622 ;; after return
               01623 ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               01624 ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
7CAA           01625 FX_TUNE_PLUS
               01626 
7CAA 507B      01627         movf FX_DATA_SESSION_CURREND, W
7CAC 80D8      01628         setc
               01629         ;; TUNE_FINE_TEMP - CURREND Fx DATA BYTE
7CAE 5A1F      01630         subwfb TUNE_FINE_TEMP, F        
               01631                         ;; CHECK BORROW BIT
               01632                         ;; IF THE BORROW BIT appear DEC BORROR BIT @ COARSE TUNE REG
7CB0 E301      01633                         bnc FX_TUNE_PLUS_BORROW_BIT_HANDLING
               01634                 
               01635                                         ;; NO BORROW BIT
               01636                                         ;; ALL DONE EXIT
7CB2 0012      01637                                         return
               01638 
               01639                 
               01640 
7CB4           01641 FX_TUNE_PLUS_BORROW_BIT_HANDLING
               01642                         ;; CHECK IF COARSE IS ALLREADY B'0000 0000'
7CB4 0E00      01643                         movlw  0x00
7CB6 621E      01644                         cpfseq TUNE_COARSE_TEMP
               01645                                 ;; COARSE TUNE REG IS > 0
               01646                                 rgoto FX_TUNE_PLUS_BORROW_BIT_HANDLING_DEC_COARSE
7CB8 D001          M         bra     label
               01647                         
               01648                                 ;; COARSE TUNE REG IS = 0
               01649                                 rgoto FX_TUNE_PLUS_BORROW_BIT_HANDLING_SET_HIGHEST_TUNE
7CBA D002          M         bra     label
               01650 
7CBC           01651 FX_TUNE_PLUS_BORROW_BIT_HANDLING_DEC_COARSE
               01652                                 ;; SUBTRACT THE BORROW BIT FROM COARSE TUNE REG
7CBC 061E      01653                                 decf TUNE_COARSE_TEMP, F
               01654                                         ;; ALL DONE EXIT
7CBE 0012      01655                                         return
               01656 
7CC0           01657 FX_TUNE_PLUS_BORROW_BIT_HANDLING_SET_HIGHEST_TUNE
               01658                                         ;; highest Value of FINE TUNE REG IF COARSE TUNE REG IS 0
7CC0 0E0A      01659                                         movlw FINE_TUNE_MIN_VALUE_B00001010 
7CC2 6E1F      01660                                         movwf TUNE_FINE_TEMP
               01661                 
               01662                                                 ;; ALL DONE EXIT
7CC4 0012      01663                                                 return
               01664         
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 494


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01665 
               01666 ;; ##############################################################################
               01667 
               01668 ;; FX Call for Tune -
               01669 ;; (1)
               01670 ;; TUNE COARSE A|B|C => TUNE_COARSE_TEMP
               01671 ;; TUNE FINE   A|B|C => TUNE_FINE_TEMP
               01672 ;; bevor call
               01673 ;;
               01674 ;; (2)
               01675 ;; TUNE_COARSE_TEMP + CURREND Fx DATA BYTE
               01676 ;; 
               01677 ;; (3)
               01678 ;; CARRY HANDLING IF NEEDED (INC TUNE_COARSE_TEMP +1)
               01679 ;; (3a) SET TUNE_COARSE_TEMP and TUNE_FINE_TEMP Max Value if needed
               01680 ;; 
               01681 ;; (4)
               01682 ;; after return
               01683 ;; TUNE_COARSE_TEMP  => TUNE COARSE A|B|C
               01684 ;; TUNE_FINE_TEMP    => TUNE FINE   A|B|C
7CC6           01685 FX_TUNE_MINUS
               01686         ;; COPY CURREND FX DATA BYTE TO WREG
7CC6 507B      01687         movf FX_DATA_SESSION_CURREND, W
               01688                 
7CC8 90D8      01689         clrc ;; CLEAR CARRY BIT @ STATUS REG
               01690         ;; TUNE_FINE_TEMP REG [PLUS] CURREND Fx DATA BYTE
7CCA 221F      01691         addwfc TUNE_FINE_TEMP, F        
               01692                         ;; CHECK CARRY BIT (BRACH IF IT IS SET) 
7CCC E201      01693                         bc FX_TUNE_MINUS_CARRY_BIT_HANDLING
               01694                 
               01695                                 ;; NO CARRY BIT
               01696                                 ;; ALL DONE EXIT
7CCE 0012      01697                                 return
               01698 
               01699                 
               01700 
7CD0           01701 FX_TUNE_MINUS_CARRY_BIT_HANDLING
               01702                         ;; CHECK IF COARSE REG IS ALLREADY B'0000 1111' DEC. 15, HEX 0x0F
7CD0 0E0E      01703                         movlw COARSE_TUNE_MAX_MINUS_1_B00001110
7CD2 641E      01704                         cpfsgt TUNE_COARSE_TEMP
               01705                                 ;; COARSE TUNE REG IS < 0x0F (VALID)
               01706                                 rgoto FX_TUNE_MINUS_CARRY_BIT_HANDLING_INC_COARSE
7CD4 D001          M         bra     label
               01707                                 
               01708                                 ;; VALUE NOT VALID 
               01709                                 ;; COARSE TUNE REG IS > 0x0E = 0x0F or greater so +1 inc Carry will 
               01710                                 ;; not be a VALID value
               01711                                 rgoto FX_TUNE_MINUS_CARRY_BIT_HANDLING_SET_LOWEST_TUNE
7CD6 D002          M         bra     label
               01712                                 
7CD8           01713 FX_TUNE_MINUS_CARRY_BIT_HANDLING_INC_COARSE
               01714                                 ;; INC THE CARRY BIT @ COARSE TUNE REG
7CD8 2A1E      01715                                 incf TUNE_COARSE_TEMP, F
               01716                                         ;; ALL DONE EXIT
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 495


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7CDA 0012      01717                                         return
               01718 
7CDC           01719 FX_TUNE_MINUS_CARRY_BIT_HANDLING_SET_LOWEST_TUNE
               01720                 ;; Lowest Value of COARSE TUNE REG IS B'0000 1111' / DEC. 15 / HEX 0x0F
7CDC 0E0F      01721                 movlw COARSE_TUNE_MAX_VALUE_B00001111
7CDE 6E1E      01722                 movwf TUNE_COARSE_TEMP
               01723                 ;; Lowest Value of FINE TUNE REG IS in this case 0xD2
7CE0 0ED2      01724                 movlw FINE_TUNE_MAX_VALUE_B11010010
7CE2 6E1F      01725                 movwf TUNE_FINE_TEMP
7CE4 0012      01726                                         return
               01727 
               01728 
               01729 ;; ##############################################################################
               01730 ;; ##############################################################################
               01731 ;; ----------------------------[END Fx Calls]------------------------------------
               00121 
               00122 ;; ---[DOUT (LED)]--------------------
               00123 #include "dout_calls.inc"
               00001 ;; dout_calls.inc
               00002 
               00003 
               00004 ;;; LED control
               00005 
7CE6           00006 LED_ToneA_on
               00007         ;; MIOS_DOUT_PinSet1
               00008         ;; DESCRIPTION  set pin to 5V
               00009         ;; IN   Pin number in WREG
7CE6 0E08      00010         movlw LED_ToneA
7CE8 EC64 F016 00011         call MIOS_DOUT_PinSet1
7CEC 0012      00012                 return
               00013 
               00014 
7CEE           00015 LED_ToneA_off
               00016         ;; MIOS_DOUT_PinSet0
               00017         ;; DESCRIPTION  set pin to 0V
               00018         ;; IN   Pin number in WREG
7CEE 0E08      00019         movlw LED_ToneA
7CF0 EC62 F016 00020         call MIOS_DOUT_PinSet0
7CF4 0012      00021                 return
               00022 
               00023 
7CF6           00024 LED_ToneB_on
               00025         ;; MIOS_DOUT_PinSet1
               00026         ;; DESCRIPTION  set pin to 5V
               00027         ;; IN   Pin number in WREG
7CF6 0E09      00028         movlw LED_ToneB
7CF8 EC64 F016 00029         call MIOS_DOUT_PinSet1
7CFC 0012      00030                 return
               00031 
               00032 
7CFE           00033 LED_ToneB_off
               00034         ;; MIOS_DOUT_PinSet0
               00035         ;; DESCRIPTION  set pin to 0V
               00036         ;; IN   Pin number in WREG
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 496


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7CFE 0E09      00037         movlw LED_ToneB
7D00 EC62 F016 00038         call MIOS_DOUT_PinSet0
7D04 0012      00039                 return
               00040 
7D06           00041 LED_ToneC_on
               00042         ;; MIOS_DOUT_PinSet1
               00043         ;; DESCRIPTION  set pin to 5V
               00044         ;; IN   Pin number in WREG
7D06 0E0A      00045         movlw LED_ToneC
7D08 EC64 F016 00046         call MIOS_DOUT_PinSet1
7D0C 0012      00047                 return
               00048 
               00049 
7D0E           00050 LED_ToneC_off
               00051         ;; MIOS_DOUT_PinSet0
               00052         ;; DESCRIPTION  set pin to 0V
               00053         ;; IN   Pin number in WREG
7D0E 0E0A      00054         movlw LED_ToneC
7D10 EC62 F016 00055         call MIOS_DOUT_PinSet0
7D14 0012      00056                 return
               00057 
               00058 
               00059 ;; ---------
               00060 
               00061 
7D16           00062 LED_NoiseA_on
               00063         ;; MIOS_DOUT_PinSet1
               00064         ;; DESCRIPTION  set pin to 5V
               00065         ;; IN   Pin number in WREG
7D16 0E0B      00066         movlw LED_NoiseA
7D18 EC64 F016 00067         call MIOS_DOUT_PinSet1
7D1C 0012      00068                 return
               00069 
               00070 
7D1E           00071 LED_NoiseA_off
               00072         ;; MIOS_DOUT_PinSet0
               00073         ;; DESCRIPTION  set pin to 0V
               00074         ;; IN   Pin number in WREG
7D1E 0E0B      00075         movlw LED_NoiseA
7D20 EC62 F016 00076         call MIOS_DOUT_PinSet0
7D24 0012      00077                 return
               00078 
               00079 
7D26           00080 LED_NoiseB_on
               00081         ;; MIOS_DOUT_PinSet1
               00082         ;; DESCRIPTION  set pin to 5V
               00083         ;; IN   Pin number in WREG
7D26 0E0C      00084         movlw LED_NoiseB
7D28 EC64 F016 00085         call MIOS_DOUT_PinSet1
7D2C 0012      00086                 return
               00087 
               00088 
7D2E           00089 LED_NoiseB_off
               00090         ;; MIOS_DOUT_PinSet0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 497


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00091         ;; DESCRIPTION  set pin to 0V
               00092         ;; IN   Pin number in WREG
7D2E 0E0C      00093         movlw LED_NoiseB
7D30 EC62 F016 00094         call MIOS_DOUT_PinSet0
7D34 0012      00095                 return
               00096 
7D36           00097 LED_NoiseC_on
               00098         ;; MIOS_DOUT_PinSet1
               00099         ;; DESCRIPTION  set pin to 5V
               00100         ;; IN   Pin number in WREG
7D36 0E0D      00101         movlw LED_NoiseC
7D38 EC64 F016 00102         call MIOS_DOUT_PinSet1
7D3C 0012      00103                 return
               00104 
               00105 
7D3E           00106 LED_NoiseC_off
               00107         ;; MIOS_DOUT_PinSet0
               00108         ;; DESCRIPTION  set pin to 0V
               00109         ;; IN   Pin number in WREG
7D3E 0E0D      00110         movlw LED_NoiseC
7D40 EC62 F016 00111         call MIOS_DOUT_PinSet0
7D44 0012      00112                 return
               00113 
               00114 ;; ------
               00115 
               00116 
7D46           00117 LED_EnvelopeModeA_on
               00118         ;; MIOS_DOUT_PinSet1
               00119         ;; DESCRIPTION  set pin to 5V
               00120         ;; IN   Pin number in WREG
7D46 0E0E      00121         movlw LED_EnvelopeModeA
7D48 EC64 F016 00122         call MIOS_DOUT_PinSet1
7D4C 0012      00123                 return
               00124 
               00125 
7D4E           00126 LED_EnvelopeModeA_off
               00127         ;; MIOS_DOUT_PinSet0
               00128         ;; DESCRIPTION  set pin to 0V
               00129         ;; IN   Pin number in WREG
7D4E 0E0E      00130         movlw LED_EnvelopeModeA
7D50 EC62 F016 00131         call MIOS_DOUT_PinSet0
7D54 0012      00132                 return
               00133 
               00134 
7D56           00135 LED_EnvelopeModeB_on
               00136         ;; MIOS_DOUT_PinSet1
               00137         ;; DESCRIPTION  set pin to 5V
               00138         ;; IN   Pin number in WREG
7D56 0E0F      00139         movlw LED_EnvelopeModeB
7D58 EC64 F016 00140         call MIOS_DOUT_PinSet1
7D5C 0012      00141                 return
               00142 
               00143 
7D5E           00144 LED_EnvelopeModeB_off
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 498


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00145         ;; MIOS_DOUT_PinSet0
               00146         ;; DESCRIPTION  set pin to 0V
               00147         ;; IN   Pin number in WREG
7D5E 0E0F      00148         movlw LED_EnvelopeModeB
7D60 EC62 F016 00149         call MIOS_DOUT_PinSet0
7D64 0012      00150                 return
               00151 
7D66           00152 LED_EnvelopeModeC_on
               00153         ;; MIOS_DOUT_PinSet1
               00154         ;; DESCRIPTION  set pin to 5V
               00155         ;; IN   Pin number in WREG
7D66 0E10      00156         movlw LED_EnvelopeModeC
7D68 EC64 F016 00157         call MIOS_DOUT_PinSet1
7D6C 0012      00158                 return
               00159 
               00160 
7D6E           00161 LED_EnvelopeModeC_off
               00162         ;; MIOS_DOUT_PinSet0
               00163         ;; DESCRIPTION  set pin to 0V
               00164         ;; IN   Pin number in WREG
7D6E 0E10      00165         movlw LED_EnvelopeModeC
7D70 EC62 F016 00166         call MIOS_DOUT_PinSet0
7D74 0012      00167                 return
               00168 
               00169 ;; -------------
               00170 
7D76           00171 LED_Fx_A_on
               00172         ;; MIOS_DOUT_PinSet1
               00173         ;; DESCRIPTION  set pin to 5V
               00174         ;; IN   Pin number in WREG
7D76 0E11      00175         movlw LED_Fx_A
7D78 EC64 F016 00176         call MIOS_DOUT_PinSet1
7D7C 0012      00177                 return
               00178 
               00179 
7D7E           00180 LED_Fx_A_off
               00181         ;; MIOS_DOUT_PinSet0
               00182         ;; DESCRIPTION  set pin to 0V
               00183         ;; IN   Pin number in WREG
7D7E 0E11      00184         movlw LED_Fx_A
7D80 EC62 F016 00185         call MIOS_DOUT_PinSet0
7D84 0012      00186                 return
               00187 
               00188 
7D86           00189 LED_Fx_B_on
               00190         ;; MIOS_DOUT_PinSet1
               00191         ;; DESCRIPTION  set pin to 5V
               00192         ;; IN   Pin number in WREG
7D86 0E12      00193         movlw LED_Fx_B
7D88 EC64 F016 00194         call MIOS_DOUT_PinSet1
7D8C 0012      00195                 return
               00196 
               00197 
7D8E           00198 LED_Fx_B_off
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 499


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00199         ;; MIOS_DOUT_PinSet0
               00200         ;; DESCRIPTION  set pin to 0V
               00201         ;; IN   Pin number in WREG
7D8E 0E12      00202         movlw LED_Fx_B
7D90 EC62 F016 00203         call MIOS_DOUT_PinSet0
7D94 0012      00204                 return
               00205 
7D96           00206 LED_Fx_C_on
               00207         ;; MIOS_DOUT_PinSet1
               00208         ;; DESCRIPTION  set pin to 5V
               00209         ;; IN   Pin number in WREG
7D96 0E13      00210         movlw LED_Fx_C
7D98 EC64 F016 00211         call MIOS_DOUT_PinSet1
7D9C 0012      00212                 return
               00213 
               00214 
7D9E           00215 LED_Fx_C_off
               00216         ;; MIOS_DOUT_PinSet0
               00217         ;; DESCRIPTION  set pin to 0V
               00218         ;; IN   Pin number in WREG
7D9E 0E13      00219         movlw LED_Fx_C
7DA0 EC62 F016 00220         call MIOS_DOUT_PinSet0
7DA4 0012      00221                 return
               00222 
               00223 
               00224 ;; ----------------
               00225 
7DA6           00226 LED_Envelope_Shape_1_on
               00227         ;; MIOS_DOUT_PinSet0
               00228         ;; DESCRIPTION  set pin to 0V
               00229         ;; IN   Pin number in WREG
7DA6 0E14      00230         movlw LED_Envelope_Shape_1
7DA8 EC64 F016 00231         call MIOS_DOUT_PinSet1
7DAC 0012      00232                 return
               00233 
7DAE           00234 LED_Envelope_Shape_2_on
               00235         ;; MIOS_DOUT_PinSet0
               00236         ;; DESCRIPTION  set pin to 0V
               00237         ;; IN   Pin number in WREG
7DAE 0E15      00238         movlw LED_Envelope_Shape_2
7DB0 EC64 F016 00239         call MIOS_DOUT_PinSet1
7DB4 0012      00240                 return
               00241 
               00242 
7DB6           00243 LED_Envelope_Shape_3_on
               00244         ;; MIOS_DOUT_PinSet0
               00245         ;; DESCRIPTION  set pin to 0V
               00246         ;; IN   Pin number in WREG
7DB6 0E16      00247         movlw LED_Envelope_Shape_3
7DB8 EC64 F016 00248         call MIOS_DOUT_PinSet1
7DBC 0012      00249                 return
               00250 
7DBE           00251 LED_Envelope_Shape_4_on
               00252         ;; MIOS_DOUT_PinSet0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 500


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00253         ;; DESCRIPTION  set pin to 0V
               00254         ;; IN   Pin number in WREG
7DBE 0E17      00255         movlw LED_Envelope_Shape_4
7DC0 EC64 F016 00256         call MIOS_DOUT_PinSet1
7DC4 0012      00257                 return
               00258 
7DC6           00259 LED_Envelope_Shape_5_on
               00260         ;; MIOS_DOUT_PinSet0
               00261         ;; DESCRIPTION  set pin to 0V
               00262         ;; IN   Pin number in WREG
7DC6 0E18      00263         movlw LED_Envelope_Shape_5
7DC8 EC64 F016 00264         call MIOS_DOUT_PinSet1
7DCC 0012      00265                 return
               00266 
7DCE           00267 LED_Envelope_Shape_6_on
               00268         ;; MIOS_DOUT_PinSet0
               00269         ;; DESCRIPTION  set pin to 0V
               00270         ;; IN   Pin number in WREG
7DCE 0E19      00271         movlw LED_Envelope_Shape_6
7DD0 EC64 F016 00272         call MIOS_DOUT_PinSet1
7DD4 0012      00273                 return
               00274 
7DD6           00275 LED_Envelope_Shape_7_on
               00276         ;; MIOS_DOUT_PinSet0
               00277         ;; DESCRIPTION  set pin to 0V
               00278         ;; IN   Pin number in WREG
7DD6 0E1A      00279         movlw LED_Envelope_Shape_7
7DD8 EC64 F016 00280         call MIOS_DOUT_PinSet1
7DDC 0012      00281                 return
               00282 
7DDE           00283 LED_Envelope_Shape_8_on
               00284         ;; MIOS_DOUT_PinSet0
               00285         ;; DESCRIPTION  set pin to 0V
               00286         ;; IN   Pin number in WREG
7DDE 0E1B      00287         movlw LED_Envelope_Shape_8
7DE0 EC64 F016 00288         call MIOS_DOUT_PinSet1
7DE4 0012      00289                 return
               00290 
               00291                 
7DE6           00292 LED_Envelope_Shape_all_off
               00293         ;; DESCRIPTION  set all *ENV LED's* pins to 0V
               00294         ;; Pin number in WREG
7DE6 0E14      00295         movlw LED_Envelope_Shape_1
7DE8 EC62 F016 00296         call MIOS_DOUT_PinSet0
7DEC 0E15      00297         movlw LED_Envelope_Shape_2
7DEE EC62 F016 00298         call MIOS_DOUT_PinSet0
7DF2 0E16      00299         movlw LED_Envelope_Shape_3
7DF4 EC62 F016 00300         call MIOS_DOUT_PinSet0
7DF8 0E17      00301         movlw LED_Envelope_Shape_4
7DFA EC62 F016 00302         call MIOS_DOUT_PinSet0
7DFE 0E18      00303         movlw LED_Envelope_Shape_5
7E00 EC62 F016 00304         call MIOS_DOUT_PinSet0
7E04 0E19      00305         movlw LED_Envelope_Shape_6
7E06 EC62 F016 00306         call MIOS_DOUT_PinSet0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 501


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7E0A 0E1A      00307         movlw LED_Envelope_Shape_7
7E0C EC62 F016 00308         call MIOS_DOUT_PinSet0
7E10 0E1B      00309         movlw LED_Envelope_Shape_8
7E12 EC62 F016 00310         call MIOS_DOUT_PinSet0
7E16 0012      00124 
               00041 
               00042 
               00043 ;; ==========================================================================
               00044 ;;  All MIOS hooks in one file
               00045 ;; ==========================================================================
               00046 
               00047 ;; --------------------------------------------------------------------------
               00048 ;;  This function is called by MIOS after startup to initialize the 
               00049 ;;  application
               00050 ;; --------------------------------------------------------------------------
7E18           00051 USER_Init
               00052         ;; initialize the scan matrix driver
7E18 EC87 F019 00053         call    SM_Init
               00054 
               00055         ;; initialize the shift registers
7E1C 0E10      00056         movlw   16                      ; use up to 16 shift registers
7E1E EC78 F016 00057         call    MIOS_SRIO_NumberSet
               00058         
               00059         ;; SET C64 Keyboard I/O polling Frequency (DIN/DOUT) HERE
7E22 0E01      00060         movlw   0x01                    ; set update frequncy
7E24 EC80 F016 00061         call    MIOS_SRIO_UpdateFrqSet
               00062         
7E28 0E00      00063         movlw   0x00                    ; disable touch sensor
7E2A EC7C F016 00064         call    MIOS_SRIO_TS_SensitivitySet
               00065 
               00066         ;; --- INIT APLICATION REGS---------
               00067         ;;  SET AY 3 8912 (SHADOW) REGISTERS 
               00068         ;;  WITH DEFAULT VALUES
               00069         ;;  and ADJUST VARIABLES (initial values)
               00070         ;;  @ variables_ini.inc
7E2E ECC7 F01A 00071         call    INIT_VARIABLES
               00072 
               00073         ;; MIDI MERGER Conf.
7E32 EC98 F01B 00074         call    INIT_MIDI_CONF
               00075 
               00076         ;; set up timer0 FOR fx TIMER
7E36 EC9C F01B 00077         call INIT_TIMER0
               00078 
               00079         ;; initialize the USER_Timer (for Fx Timmer polling)
7E3A ECA2 F01B 00080         call INIT_USER_Timer
               00081         
               00082 
               00083 ;; --------------------------------------------------------------------------
               00084 ;;  This function is called by MIOS in the mainloop when nothing else is to do
               00085 ;; --------------------------------------------------------------------------
7E3E           00086 USER_Tick
               00087         ;; SM DRIVER:
               00088         ;; call the scan matrix button handler
7E3E ECBF F019 00089         call    SM_ButtonHandler
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 502


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00090 
               00091         ;; call Fx Routines
7E42 EC9C F03B 00092         call    FX_PIPELINE
               00093 
               00094         ;; C64 Key Handling [For [+] / [-]]
7E46 EC86 F032 00095         call    CHECK_CONSTANT_KEY_PRESSING
               00096                 
7E4A 0012      00097                         return
               00098 
               00099 
               00100 ;; --------------------------------------------------------------------------
               00101 ;;  This function is periodically called by MIOS. The frequency has to be
               00102 ;;  initialized with MIOS_Timer_Set
               00103 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00104 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
               00105 ;; --------------------------------------------------------------------------
7E4C           00106 USER_Timer
               00107                 
               00108         ;; Fx Timer call (polling)
               00109         ;; Function: INC FX TIMER +1 
               00110         ;; @ fx_timer.inc
7E4C EC96 F03B 00111         call    FX_TIMER_POLLING
               00112                 
7E50 0012      00113                 return
               00114 
               00115 
               00116 ;; --------------------------------------------------------------------------
               00117 ;;  This function is called by MIOS when a debug command has been received
               00118 ;;  via SysEx
               00119 ;;  Input:
               00120 ;;     o WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3 like
               00121 ;;       specified in the debug command
               00122 ;;  Output:
               00123 ;;     o return values WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3
               00124 ;; --------------------------------------------------------------------------
7E52           00125 USER_MPROC_DebugTrigger
7E52 0012      00126         return
               00127 
               00128 
               00129 ;; --------------------------------------------------------------------------
               00130 ;;  This function is called by MIOS when the display content should be 
               00131 ;;  initialized. Thats the case during startup and after a temporary message
               00132 ;;  has been printed on the screen
               00133 ;; --------------------------------------------------------------------------
7E54           00134 USER_DISPLAY_Init
               00135 
7E54 EC14 F01A 00136         call AY_START_SCREEN
               00137 
               00138                 ;; -------[appl. main cycle start]---
               00139                 ;; JUMP TO MAIN APPLICATION CYCLE HERE
               00140                 ;; @ main_menue_functions.inc
7E58 EFDD F024 00141                 goto LABEL_MAIN_MENUE_SWITCH
               00142 
               00143 ;; --------------------------------------------------------------------------
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 503


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00144 ;;  This function is called in the mainloop when no temporary message is shown
               00145 ;;  on screen. Print the realtime messages here
               00146 ;; --------------------------------------------------------------------------
7E5C           00147 USER_DISPLAY_Tick
               00148         ;; REDRAW MAIN MENU IF A Control Change (CC, etc.)
               00149         ;; OR MOD WHEEL / PITCH BEND
               00150         ;; MATCH THE currend MAIN MENU
7E5C EC28 F032 00151         call    CHECK_EVENT_MENU_REDRAW
               00152 
7E60 0012      00153                 return
               00154         
               00155 
               00156 
               00157 ;; --------------------------------------------------------------------------
               00158 ;;  This function is called by MIOS when a complete MIDI event has been received
               00159 ;;  Input:
               00160 ;;     o first  MIDI event byte in MIOS_PARAMETER1
               00161 ;;     o second MIDI event byte in MIOS_PARAMETER2
               00162 ;;     o third  MIDI event byte in MIOS_PARAMETER3
               00163 ;; --------------------------------------------------------------------------
7E62           00164 USER_MPROC_NotifyReceivedEvent
               00165         
               00166         ; => MIDI_FUNCTIONS.INC
7E62 EFC6 F032 00167         goto LABEL_MIDI_HANDLING_START
               00168 
7E66 0012      00169               return
               00170 
               00171 
               00172 ;; --------------------------------------------------------------------------
               00173 ;;  This function is called by MIOS when a MIDI event has been received
               00174 ;;  which has been specified in the CONFIG_MIDI_IN table (mios_tables.inc)
               00175 ;;  Input:
               00176 ;;     o number of entry in WREG
               00177 ;;     o first  MIDI event byte in MIOS_PARAMETER1
               00178 ;;     o second MIDI event byte in MIOS_PARAMETER2
               00179 ;;     o third  MIDI event byte in MIOS_PARAMETER3
               00180 ;; --------------------------------------------------------------------------
7E68           00181 USER_MPROC_NotifyFoundEvent
               00182 
7E68 0012      00183         return
               00184 
               00185 
               00186 ;; --------------------------------------------------------------------------
               00187 ;;  This function is called by MIOS when a MIDI event has not been completly
               00188 ;;  received within 2 seconds
               00189 ;; --------------------------------------------------------------------------
7E6A           00190 USER_MPROC_NotifyTimeout
7E6A 0012      00191         return
               00192 
               00193 
               00194 ;; --------------------------------------------------------------------------
               00195 ;;  This function is called by MIOS when a MIDI byte has been received
               00196 ;;  Input:
               00197 ;;     o received MIDI byte in WREG and MIOS_PARAMETER1
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 504


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00198 ;; --------------------------------------------------------------------------
7E6C           00199 USER_MPROC_NotifyReceivedByte
7E6C 0012      00200         return
               00201 
               00202 ;; --------------------------------------------------------------------------
               00203 ;;  This function is called by MIOS before the transfer of a MIDI byte. 
               00204 ;;  It can be used to monitor the Tx activity or to do any other actions
               00205 ;;  (e.g. to switch a pin for multiplexed MIDI Outs) before the byte will 
               00206 ;;  be sent.
               00207 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00208 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
               00209 ;;  Input:
               00210 ;;     o transmitted byte in WREG
               00211 ;; --------------------------------------------------------------------------
7E6E           00212 USER_MIDI_NotifyTx
7E6E 0012      00213         return
               00214 
               00215 ;; --------------------------------------------------------------------------
               00216 ;;  This function is called by MIOS when a MIDI byte has been received.
               00217 ;;  It can be used to monitor the Rx activity or to do any action - e.g.
               00218 ;;  to react on realtime events like MIDI clock (0xf8) with a minimum latency
               00219 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00220 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
               00221 ;;  Input:
               00222 ;;     o received byte in WREG
               00223 ;; --------------------------------------------------------------------------
7E70           00224 USER_MIDI_NotifyRx
7E70 0012      00225         return
               00226 
               00227 
               00228 
               00229 ;; --------------------------------------------------------------------------
               00230 ;;  This function is called by MIOS when an button has been toggled
               00231 ;;  Input:
               00232 ;;     o Button number in WREG and MIOS_PARAMETER1
               00233 ;;     o Button value MIOS_PARAMETER2:
               00234 ;;       - 1 if button has been released (=5V)
               00235 ;;       - 0 if button has been pressed (=0V)
               00236 ;; --------------------------------------------------------------------------
               00237 
               00238 
7E72           00239 USER_DIN_NotifyToggle
               00240 ;; DONT USE USER_DIN_NotifyToggle BECAUSE OF THE
               00241 ;; SM DRIVER!
7E72 0012      00242         return
               00243 
               00244 
7E74           00245 SM_C64_KEY_NotifyToggle
               00246    ;;  ----------------------------------------------------------------
               00247    ;;  JUNMPED IN HERE FROM THE 8x8 SCAN MATRIX DRIVER
               00248    ;;  [THE C64 KEYBOARD DRIVER]
               00249    ;;  A KEY ON THE C64 KEYBOARD HAS BEEN PRESSED
               00250    ;;  JUMPED IN HERE FROM FUNCTION: SM_NotifyToggle
               00251    ;;  DESCRIPTION: This function is NOT called by MIOS, but by the scan matrix
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 505


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00252    ;;  handler when a pin of the scan matrix has been toggled
               00253    ;;  Button number in SM_DRIVER_KEYBOARD_KEY
               00254    ;;  Button value in AY_KEY_STATE:
               00255    ;;  => 1 if button has been released (=5V)
               00256    ;;  => 0 if button has been pressed  (=0V)
               00257                 
               00258                 ;; Start POINT of MAIN MENU ROUTINES
               00259                 ;; and SUB MENU ROUTINES
               00260                 ;; => get_key.inc
7E74 EFD3 F024 00261                 goto  GET_KEY
               00262       
               00263 
               00264 
               00265 ;; --------------------------------------------------------------------------
               00266 ;;  This function is called by MIOS when an encoder has been moved
               00267 ;;  Input:
               00268 ;;     o Encoder number in WREG and MIOS_PARAMETER1
               00269 ;;     o signed incrementer value in MIOS_PARAMETER2:
               00270 ;;       - is positive when encoder has been turned clockwise
               00271 ;;       - is negative when encoder has been turned counter clockwise
               00272 ;; --------------------------------------------------------------------------
7E78           00273 USER_ENC_NotifyChange
7E78 0012      00274         return
               00275 
               00276 
               00277 ;; --------------------------------------------------------------------------
               00278 ;;  This function is called by MIOS before the shift register are loaded
               00279 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00280 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
               00281 ;; --------------------------------------------------------------------------
7E7A           00282 USER_SR_Service_Prepare
               00283         ;; call the scan matrix driver
7E7A EC9F F019 00284         call    SM_PrepareCol
7E7E 0012      00285                 return
               00286 
               00287 
               00288 ;; --------------------------------------------------------------------------
               00289 ;;  This function is called by MIOS after the shift register have been loaded
               00290 ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
               00291 ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
               00292 ;; --------------------------------------------------------------------------
7E80           00293 USER_SR_Service_Finish
               00294         ;; call the scan matrix driver
7E80 ECA9 F019 00295         call    SM_GetRow
7E84 0012      00296                 return
               00297 
               00298 ;; --------------------------------------------------------------------------
               00299 ;;  This function is called by MIOS when a pot has been moved
               00300 ;;  Input:
               00301 ;;     o Pot number in WREG and MIOS_PARAMETER1
               00302 ;;     o LSB value in MIOS_PARAMETER2
               00303 ;;     o MSB value in MIOS_PARAMETER3
               00304 ;; --------------------------------------------------------------------------
7E86           00305 USER_AIN_NotifyChange
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 506


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
7E86 0012      00306         return
               00307 
               00308         
               00309 
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 507


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCS0                             00000006
ADCS1                             00000007
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRESH                            00000FC4
ADRESL                            00000FC3
AN0                               00000000
AN1                               00000001
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN5                               00000000
AN6                               00000001
AN7                               00000002
ASC_PATCH_NAME_WRITING            00004462
ASC_PATCH_NAME_WRITING_TO_LCD     000044B4
AY_CC_6_TMP                       00000040
AY_CC_7_TMP                       00000041
AY_CC_8_TMP                       00000042
AY_CC_9_TMP                       00000043
AY_DETUNE_TEMP                    0000002F
AY_KEYB_SPECIAL_KEY_TOGGLE        00000079
AY_LCD_COURSER_POS_MAIN_MENU_ABC_NOISE  00000202
AY_LCD_COURSER_POS_MAIN_MENU_ABC_TUNE  00000201
AY_LCD_COURSER_POS_MAIN_MENU_AMPLITUDE  00000203
AY_LCD_COURSER_POS_MAIN_MENU_ENVELOPE  00000204
AY_LCD_COURSER_POS_MAIN_MENU_FX   00000207
AY_LCD_COURSER_POS_MAIN_MENU_MIDI_CONFIG  00000205
AY_LCD_COURSER_POS_MAIN_MENU_PATCH_INFO  00000200
AY_LCD_COURSER_POS_MAIN_MENU_VELOCITY_CONFIG  00000206
AY_MIDI_VELOCITY_TO_NOISE_PERIOD  00000035
AY_MIDI_VELOCITY_TO_VOLUME        00000034
AY_R0_CH_A_FINE_TUNE              00000064
AY_R10_CH_C_AMPLITUDE             0000006E
AY_R11_ENV_PERIOD_FINE            0000006F
AY_R12_ENV_PERIOD_COARSE          00000070
AY_R13_ENV_SHAPE_CYCLE            00000071
AY_R14_AY_PORTA_DATA              00000072
AY_R1_CH_A_COARSE_TUNE            00000065
AY_R2_CH_B_FINE_TUNE              00000066
AY_R3_CH_B_COARSE_TUNE            00000067
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 508


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
AY_R4_CH_C_FINE_TUNE              00000068
AY_R5_CH_C_COARSE_TUNE            00000069
AY_R6_NOISE_PERIOD                0000006A
AY_R6_NOISE_PERIOD_REVERSE_VALUE  00000036
AY_R7_ENABLE_ABC_NOISE_IO         0000006B
AY_R8_CH_A_AMPLITUDE              0000006C
AY_R9_CH_B_AMPLITUDE              0000006D
AY_REG_ADDRESS                    00000039
AY_REG_DATA                       0000003A
AY_SR_LAT_BC1                     00000F8B
AY_SR_LAT_BDIR                    00000F8B
AY_SR_LAT_RCLK                    00000F8B
AY_SR_LAT_SCLK                    00000F8B
AY_SR_LAT_SER_OUT                 00000F8B
AY_SR_PIN_BC1                     00000005
AY_SR_PIN_BDIR                    00000004
AY_SR_PIN_RCLK                    00000001
AY_SR_PIN_SCLK                    00000000
AY_SR_PIN_SER_OUT                 00000002
AY_START_SCREEN                   00003428
AY_START_SCREEN_SHOW_TIME         0000345E
AY_SUB_MENUE_KEY_SWITCH           00000075
AY_TONE_ABC_MIDI_ON_OFF           00000022
AY_TONE_A_MIDI_CHANNEL_USER       00000030
AY_TONE_A_TUNE_COARSE_MIDI        0000002C
AY_TONE_A_TUNE_COARSE_MIDI_PITCH_BEND_TMP  00000047
AY_TONE_A_TUNE_COARSE_USER        00000026
AY_TONE_A_TUNE_FINE_MIDI          00000029
AY_TONE_A_TUNE_FINE_MIDI_PITCH_BEND_TMP  0000004A
AY_TONE_A_TUNE_FINE_USER          00000023
AY_TONE_A_TUNE_PITCH_BEND         00000044
AY_TONE_B_MIDI_CHANNEL_USER       00000031
AY_TONE_B_TUNE_COARSE_MIDI        0000002D
AY_TONE_B_TUNE_COARSE_MIDI_PITCH_BEND_TMP  00000048
AY_TONE_B_TUNE_COARSE_USER        00000027
AY_TONE_B_TUNE_FINE_MIDI          0000002A
AY_TONE_B_TUNE_FINE_MIDI_PITCH_BEND_TMP  0000004B
AY_TONE_B_TUNE_FINE_USER          00000024
AY_TONE_B_TUNE_PITCH_BEND         00000045
AY_TONE_C_MIDI_CHANNEL_USER       00000032
AY_TONE_C_TUNE_COARSE_MIDI        0000002E
AY_TONE_C_TUNE_COARSE_MIDI_PITCH_BEND_TMP  00000049
AY_TONE_C_TUNE_COARSE_USER        00000028
AY_TONE_C_TUNE_FINE_MIDI          0000002B
AY_TONE_C_TUNE_FINE_MIDI_PITCH_BEND_TMP  0000004C
AY_TONE_C_TUNE_FINE_USER          00000025
AY_TONE_C_TUNE_PITCH_BEND         00000046
AY_TONE_NOISE_ABC_USER_ON_OFF_SWITCH  00000020
AY_VELOCITY_TO_ABC_NOISE_PERIOD_ON_OFF  00000033
BANKED                            00000001
BANKSTICK_LOW_BYTE_ADR_COUNTER    0000007F
BANKSTICK_PATCH_LOAD_FX_DATA_FROM_BANKSTICK  000042F4
BANKSTICK_PATCH_LOAD_FX_FUNC_FROM_BANKSTICK  000042CE
BANKSTICK_PATCH_LOAD_FX_TIME_FROM_BANKSTICK  0000431A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 509


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BOR                               00000000
BRANCH_TO_SUB_MENUE_KEY           0000591A
BRANCH_TO_SUB_MENUE_KEY_GO        00005924
BRGH                              00000002
BROWSED_PATCH_NAME_ASC_0          00000310
BROWSED_PATCH_NAME_ASC_1          00000311
BROWSED_PATCH_NAME_ASC_2          00000312
BROWSED_PATCH_NAME_ASC_3          00000313
BROWSED_PATCH_NAME_ASC_4          00000314
BROWSED_PATCH_NAME_ASC_5          00000315
BROWSED_PATCH_NAME_ASC_6          00000316
BROWSED_PATCH_NAME_ASC_7          00000317
BROWSE_PATCH_NR                   0000007C
BSR                               00000FE0
C                                 00000000
C64_KEY_AUTO_REPEAT_GENERAL_COUNTER  0000003B
CC10TO15_CHECK_IF_MAIN_MENU_IS_3  000064D4
CC16TO18_CHECK_IF_MAIN_MENU_IS_5  000064E0
CC19TO22_CHECK_IF_MAIN_MENU_IS_7  000064EC
CC1TO5_CHECK_IF_MAIN_MENU_IS_5    000064B0
CC6_CHECK_IF_MAIN_MENU_IS_3       000064BC
CC7TO9_CHECK_IF_MAIN_MENU_IS_4    000064C8
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2                              00000001
CCP2A                             00000003
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CFGS                              00000006
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 510


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
CHCK_ASC_CODE_VALID_0_9_ASC_AREA_END  000043CC
CHCK_ASC_CODE_VALID_0_9_ASC_AREA_START  000043C0
CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_END  000043DC
CHCK_ASC_CODE_VALID_A_Z_ASC_AREA_START  000043D4
CHCK_ASC_CODE_VALID_CURSOR_L      0000442C
CHCK_ASC_CODE_VALID_CURSOR_R      00004424
CHCK_ASC_CODE_VALID_DELITE_KEY    000043EC
CHCK_ASC_CODE_VALID_SPACE_KEY     000043E4
CHCK_KEY_STATE_VALID              000043B6
CHCK_MAIN_MENU1_PATCHNAME_ITEM1   000043A8
CHCK_NEED_FOR_PATCHNAME_EDITING   0000439E
CHECK_CONSTANT_KEY_PRESSING       0000650C
CHECK_EVENT_MENU_REDRAW           00006450
CHECK_IF_FX_POS_CURREND_SESSION_IS_NOP  00007758
CHECK_PATCH_FINGERPRINT           00004098
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CK                                00000006
CKE                               00000006
CKP                               00000004
CLKO                              00000006
CREN                              00000004
CS                                00000002
CSRC                              00000007
CURREND_PATCH_DATA_BYTE_TEMP      0000003F
CURREND_PATCH_NR                  0000003E
CURRENT_MAIN_MENU                 00000074
CURRENT_MIDI_EVENT_NOTE_ON_OFF_A  0000001B
CURRENT_MIDI_EVENT_NOTE_ON_OFF_B  0000001C
CURRENT_MIDI_EVENT_NOTE_ON_OFF_C  0000001D
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DECODE_FX_FUNCTION_FOR_LCD        0000745A
DECODE_KEYBOARD_BUTTON            00004566
DECODE_SM_BUTTON_03_NO_SHIFT      000046CA
DECODE_SM_BUTTON_03_SHIFT         000046D8
DECODE_SM_BUTTON_CRSR_NO_SHIFT    000046A4
DECODE_SM_BUTTON_CRSR_SHIFT       000046B2
DECODE_SM_BUTTON_MATRIX_00        00004682
DECODE_SM_BUTTON_MATRIX_01        0000468C
DECODE_SM_BUTTON_MATRIX_02        0000469A
DECODE_SM_BUTTON_MATRIX_03        000046C0
DECODE_SM_BUTTON_MATRIX_04        000046E6
DECODE_SM_BUTTON_MATRIX_04_F1     000046FA
DECODE_SM_BUTTON_MATRIX_04_F2     00004700
DECODE_SM_BUTTON_MATRIX_05        00004706
DECODE_SM_BUTTON_MATRIX_05_F3     0000471A
DECODE_SM_BUTTON_MATRIX_05_F4     00004720
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 511


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
DECODE_SM_BUTTON_MATRIX_06        00004726
DECODE_SM_BUTTON_MATRIX_06_F5     0000473A
DECODE_SM_BUTTON_MATRIX_06_F6     00004740
DECODE_SM_BUTTON_MATRIX_07        00004746
DECODE_SM_BUTTON_MATRIX_07_CHEK_SHIFT  00004750
DECODE_SM_BUTTON_MATRIX_07_F7     0000475A
DECODE_SM_BUTTON_MATRIX_07_F8     00004760
DECODE_SM_BUTTON_MATRIX_12        00004766
DECODE_SM_BUTTON_MATRIX_12_SHIFT_R_OFF  0000477E
DECODE_SM_BUTTON_MATRIX_12_SHIFT_R_ON  0000477A
DECODE_SM_BUTTON_MATRIX_14        00004782
DECODE_SM_BUTTON_MATRIX_16        00004788
DECODE_SM_BUTTON_MATRIX_17        00004796
DECODE_SM_BUTTON_MATRIX_18        000047A0
DECODE_SM_BUTTON_MATRIX_23        000047AE
DECODE_SM_BUTTON_MATRIX_24        000047BC
DECODE_SM_BUTTON_MATRIX_25        000047C6
DECODE_SM_BUTTON_MATRIX_26        000047D0
DECODE_SM_BUTTON_MATRIX_27        000047DA
DECODE_SM_BUTTON_MATRIX_28        000047E4
DECODE_SM_BUTTON_MATRIX_29        000047EE
DECODE_SM_BUTTON_MATRIX_30        000047F8
DECODE_SM_BUTTON_MATRIX_31        00004802
DECODE_SM_BUTTON_MATRIX_32        0000480C
DECODE_SM_BUTTON_MATRIX_33        00004816
DECODE_SM_BUTTON_MATRIX_34        00004820
DECODE_SM_BUTTON_MATRIX_35        0000482A
DECODE_SM_BUTTON_MATRIX_36        00004834
DECODE_SM_BUTTON_MATRIX_37        00004842
DECODE_SM_BUTTON_MATRIX_38        0000484C
DECODE_SM_BUTTON_MATRIX_39        00004856
DECODE_SM_BUTTON_MATRIX_40        00004860
DECODE_SM_BUTTON_MATRIX_41        0000486A
DECODE_SM_BUTTON_MATRIX_42        00004874
DECODE_SM_BUTTON_MATRIX_43        0000487E
DECODE_SM_BUTTON_MATRIX_44        00004888
DECODE_SM_BUTTON_MATRIX_45        00004896
DECODE_SM_BUTTON_MATRIX_46        000048A4
DECODE_SM_BUTTON_MATRIX_47        000048AE
DECODE_SM_BUTTON_MATRIX_48        000048B8
DECODE_SM_BUTTON_MATRIX_49        000048C2
DECODE_SM_BUTTON_MATRIX_50        000048D0
DECODE_SM_BUTTON_MATRIX_51        000048DE
DECODE_SM_BUTTON_MATRIX_51_SHIFT_L_OFF  000048F6
DECODE_SM_BUTTON_MATRIX_51_SHIFT_L_ON  000048F2
DECODE_SM_BUTTON_MATRIX_52        000048FA
DECODE_SM_BUTTON_MATRIX_53        00004904
DECODE_SM_BUTTON_MATRIX_54        0000490E
DECODE_SM_BUTTON_MATRIX_55        00004918
DECODE_SM_BUTTON_MATRIX_56        00004922
DECODE_SM_BUTTON_MATRIX_57        0000492C
DECODE_SM_BUTTON_MATRIX_58        00004936
DECODE_SM_BUTTON_MATRIX_58_CTRL_DEPRESSED  00004942
DECODE_SM_BUTTON_MATRIX_58_CTRL_PRESSED  00004944
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 512


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
DECODE_SM_BUTTON_MATRIX_58_DEC_MAIN_MENU  00004966
DECODE_SM_BUTTON_MATRIX_58_DEC_MAIN_MENU_CHECK_ZERO  00004974
DECODE_SM_BUTTON_MATRIX_58_GO_MAIN_MENU  00004986
DECODE_SM_BUTTON_MATRIX_58_INC_MAIN_MENU  00004952
DECODE_SM_BUTTON_MATRIX_58_MAIN_MENU_RESET  00004960
DECODE_SM_BUTTON_MATRIX_58_SET_TO_LAST_MAIN_MENU  00004980
DECODE_SM_BUTTON_MATRIX_60        00004988
DECODE_SM_BUTTON_MATRIX_62        00004992
DECODE_SM_BUTTON_MATRIX_63        0000499C
DECODE_SM_BUTTON_MATRIX_NOT_USED_YET  00004678
DEC_FX_DATA                       000061FA
DEC_FX_DELAY_TIME                 000061BE
DEC_FX_DELAY_TIME_WRITE           000061CA
DEC_FX_FUNCTION                   000061DC
DEC_FX_FUNCTION_WRITE             000061E8
DEC_FX_TAB_POS                    000061AA
DEC_PATCH_NAME_POS                0000444C
DISPLAY_UPDATE_REQ                00000010
DONE                              00000002
DO_CHECK_MINUS_KEY                00006550
DO_DEC_PATCH_NAME_CURSOR_POS      0000445A
DO_EXIT_GENERAL_KEY_RATE_CYCLE    0000651E
DO_INC_GENERAL_KEY_RATE_COUNTER   0000651A
DO_INC_PATCH_NAME_CURSOR_POS      00004444
DO_LOAD_CURREND_PATCH_FX_DATA     00004264
DO_NOT_DEC_PATCH_NAME_CURSOR_POS  00004458
DO_NOT_INC_PATCH_NAME_CURSOR_POS  00004442
DO_SET_FIRST_KEY_STRIKE_DELAY_BIT_AND_EXIT_AUTO_REPEAT_ROUTINE  00006582
D_A                               00000005
EEADR                             00000FA9
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_PATCH_LOAD_CS_NOISE_C_OFF  0000422E
EEPROM_PATCH_LOAD_FX_DATA_FROM_EEPROM  0000428E
EEPROM_PATCH_LOAD_FX_FUNC_FROM_EEPROM  0000426E
EEPROM_PATCH_LOAD_FX_TIME_FROM_EEPROM  000042AE
EEPROM_PATCH_LOAD_LED_CS_ENV_A_OFF  00004172
EEPROM_PATCH_LOAD_LED_CS_ENV_B_OFF  00004188
EEPROM_PATCH_LOAD_LED_CS_ENV_C_OFF  0000419E
EEPROM_PATCH_LOAD_R10             0000418C
EEPROM_PATCH_LOAD_R11             000041A2
EEPROM_PATCH_LOAD_R9              00004176
ENVELOPE_TRANSLATOR_CALL          00005542
ENV_SHAPE_0_15_to_1_8_TRANSLATOR  0000007A
EXECUTE_FX_AT_CURREND_POS         00007768
FAST                              00000001
FERR                              00000002
FIRST_KEY_STRIKE_CYCLE_COUNTER    0000003C
FORMAT_BANKSTICK                  00003816
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 513


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
FORMAT_BANKSTICK_CYCLE_COUNTER    0000007E
FREE                              00000004
FREE_RAM_0x302                    00000302
FREE_RAM_0x30B                    0000030B
FREE_RAM_0x30C                    0000030C
FREE_RAM_0x30D                    0000030D
FREE_RAM_0x30E                    0000030E
FREE_RAM_0x30F                    0000030F
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FX_DATA_CURREND                   00000051
FX_DATA_SESSION_CURREND           0000007B
FX_FILTER                         00000057
FX_FUNCTION_CURREND               00000050
FX_FUNCTION_DATA_POS0             00000240
FX_FUNCTION_DATA_POS1             00000241
FX_FUNCTION_DATA_POS10            0000024A
FX_FUNCTION_DATA_POS11            0000024B
FX_FUNCTION_DATA_POS12            0000024C
FX_FUNCTION_DATA_POS13            0000024D
FX_FUNCTION_DATA_POS14            0000024E
FX_FUNCTION_DATA_POS15            0000024F
FX_FUNCTION_DATA_POS16            00000250
FX_FUNCTION_DATA_POS17            00000251
FX_FUNCTION_DATA_POS18            00000252
FX_FUNCTION_DATA_POS19            00000253
FX_FUNCTION_DATA_POS2             00000242
FX_FUNCTION_DATA_POS20            00000254
FX_FUNCTION_DATA_POS21            00000255
FX_FUNCTION_DATA_POS22            00000256
FX_FUNCTION_DATA_POS23            00000257
FX_FUNCTION_DATA_POS24            00000258
FX_FUNCTION_DATA_POS25            00000259
FX_FUNCTION_DATA_POS26            0000025A
FX_FUNCTION_DATA_POS27            0000025B
FX_FUNCTION_DATA_POS28            0000025C
FX_FUNCTION_DATA_POS29            0000025D
FX_FUNCTION_DATA_POS3             00000243
FX_FUNCTION_DATA_POS30            0000025E
FX_FUNCTION_DATA_POS31            0000025F
FX_FUNCTION_DATA_POS4             00000244
FX_FUNCTION_DATA_POS5             00000245
FX_FUNCTION_DATA_POS6             00000246
FX_FUNCTION_DATA_POS7             00000247
FX_FUNCTION_DATA_POS8             00000248
FX_FUNCTION_DATA_POS9             00000249
FX_FUNCTION_POS0                  00000220
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 514


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
FX_FUNCTION_POS1                  00000221
FX_FUNCTION_POS10                 0000022A
FX_FUNCTION_POS11                 0000022B
FX_FUNCTION_POS12                 0000022C
FX_FUNCTION_POS13                 0000022D
FX_FUNCTION_POS14                 0000022E
FX_FUNCTION_POS15                 0000022F
FX_FUNCTION_POS16                 00000230
FX_FUNCTION_POS17                 00000231
FX_FUNCTION_POS18                 00000232
FX_FUNCTION_POS19                 00000233
FX_FUNCTION_POS2                  00000222
FX_FUNCTION_POS20                 00000234
FX_FUNCTION_POS21                 00000235
FX_FUNCTION_POS22                 00000236
FX_FUNCTION_POS23                 00000237
FX_FUNCTION_POS24                 00000238
FX_FUNCTION_POS25                 00000239
FX_FUNCTION_POS26                 0000023A
FX_FUNCTION_POS27                 0000023B
FX_FUNCTION_POS28                 0000023C
FX_FUNCTION_POS29                 0000023D
FX_FUNCTION_POS3                  00000223
FX_FUNCTION_POS30                 0000023E
FX_FUNCTION_POS31                 0000023F
FX_FUNCTION_POS4                  00000224
FX_FUNCTION_POS5                  00000225
FX_FUNCTION_POS6                  00000226
FX_FUNCTION_POS7                  00000227
FX_FUNCTION_POS8                  00000228
FX_FUNCTION_POS9                  00000229
FX_FUNCTION_SESSION_CURREND       00000062
FX_FUNCTION_TIME_POS0             00000260
FX_FUNCTION_TIME_POS1             00000261
FX_FUNCTION_TIME_POS10            0000026A
FX_FUNCTION_TIME_POS11            0000026B
FX_FUNCTION_TIME_POS12            0000026C
FX_FUNCTION_TIME_POS13            0000026D
FX_FUNCTION_TIME_POS14            0000026E
FX_FUNCTION_TIME_POS15            0000026F
FX_FUNCTION_TIME_POS16            00000270
FX_FUNCTION_TIME_POS17            00000271
FX_FUNCTION_TIME_POS18            00000272
FX_FUNCTION_TIME_POS19            00000273
FX_FUNCTION_TIME_POS2             00000262
FX_FUNCTION_TIME_POS20            00000274
FX_FUNCTION_TIME_POS21            00000275
FX_FUNCTION_TIME_POS22            00000276
FX_FUNCTION_TIME_POS23            00000277
FX_FUNCTION_TIME_POS24            00000278
FX_FUNCTION_TIME_POS25            00000279
FX_FUNCTION_TIME_POS26            0000027A
FX_FUNCTION_TIME_POS27            0000027B
FX_FUNCTION_TIME_POS28            0000027C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 515


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
FX_FUNCTION_TIME_POS29            0000027D
FX_FUNCTION_TIME_POS3             00000263
FX_FUNCTION_TIME_POS30            0000027E
FX_FUNCTION_TIME_POS31            0000027F
FX_FUNCTION_TIME_POS4             00000264
FX_FUNCTION_TIME_POS5             00000265
FX_FUNCTION_TIME_POS6             00000266
FX_FUNCTION_TIME_POS7             00000267
FX_FUNCTION_TIME_POS8             00000268
FX_FUNCTION_TIME_POS9             00000269
FX_FUNC_000                       000077CA
FX_FUNC_001                       000077CC
FX_FUNC_002                       000077E6
FX_FUNC_003                       00007800
FX_FUNC_004                       0000781A
FX_FUNC_005                       00007834
FX_FUNC_006                       0000784E
FX_FUNC_007                       00007868
FX_FUNC_008                       00007896
FX_FUNC_009                       000078C4
FX_FUNC_010                       000078F2
FX_FUNC_011                       00007920
FX_FUNC_012                       0000794E
FX_FUNC_013                       0000797C
FX_FUNC_013_WRITE_TO_AY_CHIP      00007986
FX_FUNC_014                       00007994
FX_FUNC_014_WRITE_TO_AY_CHIP      0000799E
FX_FUNC_015                       000079AC
FX_FUNC_015_WRITE_TO_AY_CHIP      000079B6
FX_FUNC_016                       000079C4
FX_FUNC_017                       000079DE
FX_FUNC_018                       000079F8
FX_FUNC_019                       00007A12
FX_FUNC_020                       00007A2C
FX_FUNC_021                       00007A46
FX_FUNC_022                       00007A60
FX_FUNC_022_GO_ON                 00007A6A
FX_FUNC_023                       00007A80
FX_FUNC_024                       00007AA4
FX_FUNC_025                       00007AB8
FX_FUNC_026                       00007ADC
FX_FUNC_027                       00007AF0
FX_FUNC_028                       00007B14
FX_FUNC_029                       00007B28
FX_FUNC_029_WRITE_TO_AY_CHIP      00007B32
FX_FUNC_030                       00007B40
FX_FUNC_031                       00007B4E
FX_FUNC_032                       00007B5C
FX_FUNC_033                       00007B76
FX_FUNC_034                       00007B90
FX_FUNC_035                       00007BAA
FX_FUNC_036                       00007BC4
FX_FUNC_037                       00007BDE
FX_FUNC_038                       00007BF8
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 516


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
FX_FUNC_039                       00007C12
FX_FUNC_040                       00007C2C
FX_FUNC_041                       00007C46
FX_FUNC_041_RESET_FX_TIMER        00007C54
FX_MIDI_NOTE_ON_SESSION           00000054
FX_NEW_SESSION_RESET_POS          0000774C
FX_NOP_ON_OFF                     00000056
FX_PIPELINE                       00007738
FX_PIPELINE_EXIT                  00007C66
FX_PIPELINE_SESSION               00000055
FX_POS_CURREND                    0000004F
FX_POS_SESSION_CURREND            00000061
FX_TAB_LOAD_DATA_CURREND_POS      00005E6C
FX_TIMER                          00000053
FX_TIMER_POLLING                  0000772C
FX_TIME_PRE_EXECUTION_CURREND     00000052
FX_TIME_PRE_EXECUTION_SESSION_CURREND  00000063
FX_TUNE_MINUS                     00007CC6
FX_TUNE_MINUS_CARRY_BIT_HANDLING  00007CD0
FX_TUNE_MINUS_CARRY_BIT_HANDLING_INC_COARSE  00007CD8
FX_TUNE_MINUS_CARRY_BIT_HANDLING_SET_LOWEST_TUNE  00007CDC
FX_TUNE_PLUS                      00007CAA
FX_TUNE_PLUS_BORROW_BIT_HANDLING  00007CB4
FX_TUNE_PLUS_BORROW_BIT_HANDLING_DEC_COARSE  00007CBC
FX_TUNE_PLUS_BORROW_BIT_HANDLING_SET_HIGHEST_TUNE  00007CC0
FX_USER_ON_OFF_ABC                0000004D
Fx_Clk_Inc                        00007732
Fx_Clk_NoInc                      00007736
Fx_LOAD_WRITE_ADR_COUNTER_TMP     00000060
Fx_MIDI_NOTE_ON_OR_OFF            0000004E
Fx_Note_On_1_tune_coarse          0000005A
Fx_Note_On_1_tune_fine            00000059
Fx_Note_On_2_tune_coarse          0000005C
Fx_Note_On_2_tune_fine            0000005B
Fx_Note_On_3_tune_coarse          0000005E
Fx_Note_On_3_tune_fine            0000005D
Fx_PATCH_DATA_TMP                 0000005F
Fx_TEMP                           00000058
GCEN                              00000007
GET_KEY                           000049A6
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GO                                00000002
GO_DONE                           00000002
I2C_DAT                           00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INC_FX_DATA                       00005EAA
INC_FX_DELAY_TIME                 00005E74
INC_FX_FUNCTION                   00005E90
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 517


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
INC_FX_POS_FOR_THE_NEXT_FX_EXECUTION  00007C58
INC_FX_TAB_POS                    00005E60
INC_PATCH_NAME_POS                00004436
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INIT_MIDI_CONF                    00003730
INIT_TIMER0                       00003738
INIT_USER_Timer                   00003744
INIT_VARIABLES                    0000358E
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT2                              00000002
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INTCON                            00000FF2
INTCON1                           00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRQ_TMP1                          0000000B
IRQ_TMP2                          0000000C
IRQ_TMP3                          0000000D
IRQ_TMP4                          0000000E
IRQ_TMP5                          0000000F
IRVST                             00000005
KEY_AUTO_REPEAT_COUNTER           0000003D
LABEL_AY_MAIN_MENU_00_MENU_SWITCH  00004A06
LABEL_AY_MAIN_MENU_00_MENU_SWITCH_DONE  00004A3A
LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE  00004C9E
LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE_BUT_NOT_FORMATED  00004CCC
LABEL_AY_MAIN_MENU_01_BANKSTICK_AVAILABLE_NO_FINGERPRINT  00004CAA
LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE  00004BEC
LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_CHK_POS2  00004C30
LABEL_AY_MAIN_MENU_01_BANKSTICK_NOT_AVAILABLE_PRINT_PATCH_NUMBER  00004C46
LABEL_AY_MAIN_MENU_01_CHK_BANKSTICK_AVAILABLE  00004BDC
LABEL_AY_MAIN_MENU_01_FIND_EDIT_POS1  00004ACC
LABEL_AY_MAIN_MENU_01_NOT_POS1    00004AE4
LABEL_AY_MAIN_MENU_01_NOT_POS2    00004B70
LABEL_AY_MAIN_MENU_01_NOT_POS3    00004BA0
LABEL_AY_MAIN_MENU_01_PATCH_INFO  00004A3C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 518


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_MAIN_MENU_01_PATCH_INFO_PREPARE  000049FE
LABEL_AY_MAIN_MENU_01_POS2        00004AF0
LABEL_AY_MAIN_MENU_01_POS2_BANKSTICK  00004B28
LABEL_AY_MAIN_MENU_01_POS2_EDITING_MODE  00004B58
LABEL_AY_MAIN_MENU_01_POS3        00004B7C
LABEL_AY_MAIN_MENU_01_POS4_FORMAT  00004BCE
LABEL_AY_MAIN_MENU_01_POS_1_NOT_VALID_GO_POS_2  00004CB8
LABEL_AY_MAIN_MENU_01_ROW4        00004BAC
LABEL_AY_MAIN_MENU_02_ABC_TUNE    00004CFE
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A  00004D0E
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A_NEGATIVE  00004D42
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_A_ZERO_AND_POSITIVE  00004D16
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B  00004DD0
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B_NEGATIVE  00004E04
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_B_ZERO_AND_POSITIVE  00004DD8
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C  00004E90
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C_NEGATIVE  00004EC4
LABEL_AY_MAIN_MENU_02_CHK_TUNE_COARSE_C_ZERO_AND_POSITIVE  00004E98
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A  00004D88
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A_NEGATIVE  00004DA4
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_A_ZERO_AND_POSITIVE  00004D90
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B  00004E48
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B_NEGATIVE  00004E64
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_B_ZERO_AND_POSITIVE  00004E50
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C  00004F08
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C_NEGATIVE  00004F24
LABEL_AY_MAIN_MENU_02_CHK_TUNE_FINE_C_ZERO_AND_POSITIVE  00004F10
LABEL_AY_MAIN_MENU_02_DONE        00005040
LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS1  00004F50
LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS2  00004F78
LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS3  00004FA0
LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS4  00004FC8
LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS5  00004FF0
LABEL_AY_MAIN_MENU_02_FIND_EDIT_POS6  00005018
LABEL_AY_MAIN_MENU_02_NOT_POS1    00004F6A
LABEL_AY_MAIN_MENU_02_NOT_POS2    00004F92
LABEL_AY_MAIN_MENU_02_NOT_POS3    00004FBA
LABEL_AY_MAIN_MENU_02_NOT_POS4    00004FE2
LABEL_AY_MAIN_MENU_02_NOT_POS5    0000500A
LABEL_AY_MAIN_MENU_02_NOT_POS6    00005032
LABEL_AY_MAIN_MENU_02_POS1        00004F5C
LABEL_AY_MAIN_MENU_02_POS2        00004F84
LABEL_AY_MAIN_MENU_02_POS3        00004FAC
LABEL_AY_MAIN_MENU_02_POS4        00004FD4
LABEL_AY_MAIN_MENU_02_POS5        00004FFC
LABEL_AY_MAIN_MENU_02_POS6        00005024
LABEL_AY_MAIN_MENU_03_ABC_MIXER   00005042
LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS1  000050D0
LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS2  000050F8
LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS3  00005120
LABEL_AY_MAIN_MENU_03_FIND_EDIT_POS4  00005148
LABEL_AY_MAIN_MENU_03_NOT_POS1    000050EA
LABEL_AY_MAIN_MENU_03_NOT_POS2    00005112
LABEL_AY_MAIN_MENU_03_NOT_POS3    0000513A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 519


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_MAIN_MENU_03_NOT_POS4    00005162
LABEL_AY_MAIN_MENU_03_POS1        000050DC
LABEL_AY_MAIN_MENU_03_POS2        00005104
LABEL_AY_MAIN_MENU_03_POS3        0000512C
LABEL_AY_MAIN_MENU_03_POS4        00005154
LABEL_AY_MAIN_MENU_04_ABC_AMPLITUDE  00005296
LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS1  00005342
LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS2  0000536A
LABEL_AY_MAIN_MENU_04_FIND_EDIT_POS3  00005392
LABEL_AY_MAIN_MENU_04_NOT_POS1    0000535C
LABEL_AY_MAIN_MENU_04_NOT_POS2    00005384
LABEL_AY_MAIN_MENU_04_NOT_POS3    000053AC
LABEL_AY_MAIN_MENU_04_POS1        0000534E
LABEL_AY_MAIN_MENU_04_POS2        00005376
LABEL_AY_MAIN_MENU_04_POS3        0000539E
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE  000053E6
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_0_3  00005562
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_10  0000558C
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_11  0000559A
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_12  000055A8
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_13  000055B6
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_14  000055C4
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_4_7  00005570
LABEL_AY_MAIN_MENU_05_ABC_ENVELOPE_DRAW_ENV_LCD_8  0000557E
LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS1  0000544C
LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS2  00005474
LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS3  0000549C
LABEL_AY_MAIN_MENU_05_FIND_EDIT_POS4  000054C4
LABEL_AY_MAIN_MENU_05_NOT_POS1    00005466
LABEL_AY_MAIN_MENU_05_NOT_POS2    0000548E
LABEL_AY_MAIN_MENU_05_NOT_POS3    000054B6
LABEL_AY_MAIN_MENU_05_NOT_POS4    000054DE
LABEL_AY_MAIN_MENU_05_POS1        00005458
LABEL_AY_MAIN_MENU_05_POS2        00005480
LABEL_AY_MAIN_MENU_05_POS3        000054A8
LABEL_AY_MAIN_MENU_05_POS4        000054D0
LABEL_AY_MAIN_MENU_06_MIDI_CONFIG  00005662
LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_DONE  00005738
LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS1  000056C0
LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS2  000056E8
LABEL_AY_MAIN_MENU_06_MIDI_CONFIG_FIND_EDIT_POS3  00005710
LABEL_AY_MAIN_MENU_06_NOT_POS1    000056CC
LABEL_AY_MAIN_MENU_06_NOT_POS2    000056F4
LABEL_AY_MAIN_MENU_06_NOT_POS3    0000571C
LABEL_AY_MAIN_MENU_06_POS1        000056DA
LABEL_AY_MAIN_MENU_06_POS2        00005702
LABEL_AY_MAIN_MENU_06_POS3        0000572A
LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_1  00005874
LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_2  0000589C
LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_3  000058C4
LABEL_AY_MAIN_MENU_07_VELOCITY_CHECK_EDITING_MODE_ITEM_4  000058EC
LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG  0000573A
LABEL_AY_MAIN_MENU_07_VELOCITY_CONFIG_END  00005914
LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_NOISE_RATE  000058F8
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 520


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_A  00005880
LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_B  000058A8
LABEL_AY_MAIN_MENU_07_VELOCITY_IS_ITEM_TONE_C  000058D0
LABEL_AY_MAIN_MENU_07_VELOCITY_NOISE_RATE  000057DA
LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_NOISE_RATE  00005906
LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_A  0000588E
LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_B  000058B6
LABEL_AY_MAIN_MENU_07_VELOCITY_NOT_ITEM_TONE_C  000058DE
LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_NOISE_RATE  000057EC
LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_A  00005756
LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_B  0000578A
LABEL_AY_MAIN_MENU_07_VELOCITY_OFF_TONE_C  000057BE
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE  00005800
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_CHK_TONE_B  00005826
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_CHK_TONE_C  0000584C
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_ERROR  00005852
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_A  00005806
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_B  0000582C
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_NOISE_RATE_IS_TONE_C  00005854
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_A  00005764
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_B  00005798
LABEL_AY_MAIN_MENU_07_VELOCITY_ON_TONE_C  000057CC
LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_A  0000573A
LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_B  00005772
LABEL_AY_MAIN_MENU_07_VELOCITY_TONE_C  000057A6
LABEL_AY_MAIN_MENU_08_FX          00007338
LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_A  000052D4
LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_B  00005308
LABEL_AY_MENU_AMPLITUDE_CHK_AMPLITUDE_MODE_CH_C  0000533C
LABEL_AY_MENU_AMPLITUDE_CH_A      00005296
LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY  000052BE
LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY_OFF  000052D2
LABEL_AY_MENU_AMPLITUDE_CH_A_CHECK_VELOCITY_ON  000052C4
LABEL_AY_MENU_AMPLITUDE_CH_B      000052DA
LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY  000052F2
LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY_OFF  00005306
LABEL_AY_MENU_AMPLITUDE_CH_B_CHECK_VELOCITY_ON  000052F8
LABEL_AY_MENU_AMPLITUDE_CH_C      0000530E
LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY  00005326
LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY_OFF  0000533A
LABEL_AY_MENU_AMPLITUDE_CH_C_CHECK_VELOCITY_ON  0000532C
LABEL_AY_MENU_AMPLITUDE_END       000053BA
LABEL_AY_MENU_AMPLITUDE_MODE_CH_A_SET  000053BC
LABEL_AY_MENU_AMPLITUDE_MODE_CH_B_SET  000053CA
LABEL_AY_MENU_AMPLITUDE_MODE_CH_C_SET  000053D8
LABEL_AY_MENU_ENVELOPE_CHK_ENV_MODE_ABC  0000542E
LABEL_AY_MENU_ENVELOPE_CHK_MODE_A  0000543A
LABEL_AY_MENU_ENVELOPE_CHK_MODE_B  00005440
LABEL_AY_MENU_ENVELOPE_CHK_MODE_C  00005446
LABEL_AY_MENU_ENVELOPE_CHK_MODE_END  000054EC
LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_A  000054FC
LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_B  00005518
LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_OFF_C  00005534
LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_A  000054EE
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 521


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_B  0000550A
LABEL_AY_MENU_ENVELOPE_RELATIVE_MODE_ON_C  00005526
LABEL_AY_MENU_FX_A                0000509A
LABEL_AY_MENU_FX_A_OFF            00005170
LABEL_AY_MENU_FX_A_ON             0000517E
LABEL_AY_MENU_FX_B                000050A0
LABEL_AY_MENU_FX_B_OFF            0000518C
LABEL_AY_MENU_FX_B_ON             0000519A
LABEL_AY_MENU_FX_C                000050A6
LABEL_AY_MENU_FX_C_OFF            000051A8
LABEL_AY_MENU_FX_C_ON             000051B6
LABEL_AY_MENU_MIX_A               000050AC
LABEL_AY_MENU_MIX_ABC_NOISE_A_NOT  000051C4
LABEL_AY_MENU_MIX_ABC_NOISE_A_SET  000051D2
LABEL_AY_MENU_MIX_ABC_NOISE_B_NOT  000051E0
LABEL_AY_MENU_MIX_ABC_NOISE_B_SET  000051EE
LABEL_AY_MENU_MIX_ABC_NOISE_C_NOT  000051FC
LABEL_AY_MENU_MIX_ABC_NOISE_C_SET  0000520A
LABEL_AY_MENU_MIX_B               000050B2
LABEL_AY_MENU_MIX_C               000050B8
LABEL_AY_MENU_MIX_NOISE_A_NOT     00005218
LABEL_AY_MENU_MIX_NOISE_A_SET     00005226
LABEL_AY_MENU_MIX_NOISE_B_NOT     00005234
LABEL_AY_MENU_MIX_NOISE_B_SET     00005242
LABEL_AY_MENU_MIX_NOISE_C_NOT     00005250
LABEL_AY_MENU_MIX_NOISE_C_SET     0000525E
LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_A  00005076
LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_B  0000507C
LABEL_AY_MENU_MIX_NOISE_PERIOD_CHK_VELOITY_NOISE_PERIOD_TONE_C  00005082
LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VALUE_TO_LCD  00005088
LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_A_NOISE_PERIOD  0000526C
LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_B_NOISE_PERIOD  0000527A
LABEL_AY_MENU_MIX_NOISE_PERIOD_WRITE_VEOCITY_C_NOISE_PERIOD  00005288
LABEL_AY_MENU_NOISE_MIX_A         000050BE
LABEL_AY_MENU_NOISE_MIX_B         000050C4
LABEL_AY_MENU_NOISE_MIX_C         000050CA
LABEL_AY_SR_Write                 00003754
LABEL_AY_SUB_MENU_A               0000620E
LABEL_AY_SUB_MENU_A_CHK1          0000620E
LABEL_AY_SUB_MENU_A_EXIT          0000622C
LABEL_AY_SUB_MENU_A_MAIN_MENU3    00006230
LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM1  00006234
LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM2  0000623C
LABEL_AY_SUB_MENU_A_MAIN_MENU3_CHK_ITEM3  00006244
LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_B3_NOISE_A  00006298
LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_CHA  0000627E
LABEL_AY_SUB_MENU_A_MAIN_MENU3_CLR_FX_A  00006264
LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_B3_NOISE_A  0000628E
LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_CHA  00006274
LABEL_AY_SUB_MENU_A_MAIN_MENU3_SET_FX_A  0000625A
LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_CH_A  0000626E
LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_FX_A  00006250
LABEL_AY_SUB_MENU_A_MAIN_MENU3_TOGGLE_NOISE_A  00006288
LABEL_AY_SUB_MENU_A_MAIN_MENU5    000062A2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 522


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_SUB_MENU_A_MAIN_MENU5_CHK_ITEM4  000062A6
LABEL_AY_SUB_MENU_A_MAIN_MENU5_CLR_BIT4  000062BE
LABEL_AY_SUB_MENU_A_MAIN_MENU5_SEND_TO_AY_BIT4  000062C4
LABEL_AY_SUB_MENU_A_MAIN_MENU5_SET_BIT4  000062B6
LABEL_AY_SUB_MENU_A_MAIN_MENU5_TOGGLE_R_MODE_CH_A  000062B0
LABEL_AY_SUB_MENU_B               000062D4
LABEL_AY_SUB_MENU_B_EXIT          000062F0
LABEL_AY_SUB_MENU_B_MAIN_MENU3    000062F4
LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM1  000062F8
LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM2  00006300
LABEL_AY_SUB_MENU_B_MAIN_MENU3_CHK_ITEM3  00006308
LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_B4_NOISE_B  00006356
LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_CHB  0000633C
LABEL_AY_SUB_MENU_B_MAIN_MENU3_CLR_FX_B  00006322
LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_B4_NOISE_B  0000634C
LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_CHB  00006332
LABEL_AY_SUB_MENU_B_MAIN_MENU3_SET_FX_B  00006318
LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_CH_B  0000632C
LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_FX_B  00006312
LABEL_AY_SUB_MENU_B_MAIN_MENU3_TOGGLE_NOISE_B  00006346
LABEL_AY_SUB_MENU_B_MAIN_MENU5    00006360
LABEL_AY_SUB_MENU_B_MAIN_MENU5_CHK_ITEM4  00006364
LABEL_AY_SUB_MENU_B_MAIN_MENU5_CLR_BIT4  0000637C
LABEL_AY_SUB_MENU_B_MAIN_MENU5_SEND_TO_AY_BIT4  00006382
LABEL_AY_SUB_MENU_B_MAIN_MENU5_SET_BIT4  00006374
LABEL_AY_SUB_MENU_B_MAIN_MENU5_TOGGLE_R_MODE_CH_B  0000636E
LABEL_AY_SUB_MENU_C               00006392
LABEL_AY_SUB_MENU_C_CHK_MAINMENU  00006392
LABEL_AY_SUB_MENU_C_EXIT          000063AE
LABEL_AY_SUB_MENU_C_MAIN_MENU3    000063B2
LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM1  000063B6
LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM2  000063BE
LABEL_AY_SUB_MENU_C_MAIN_MENU3_CHK_ITEM3  000063C6
LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_B5_NOISE_C  00006414
LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_CHC  000063FA
LABEL_AY_SUB_MENU_C_MAIN_MENU3_CLR_FX_C  000063E0
LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_B5_NOISE_C  0000640A
LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_CHC  000063F0
LABEL_AY_SUB_MENU_C_MAIN_MENU3_SET_FX_C  000063D6
LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_CH_C  000063EA
LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_FX_C  000063D0
LABEL_AY_SUB_MENU_C_MAIN_MENU3_TOGGLE_NOISE_C  00006404
LABEL_AY_SUB_MENU_C_MAIN_MENU5    0000641E
LABEL_AY_SUB_MENU_C_MAIN_MENU5_CHK_ITEM4  00006422
LABEL_AY_SUB_MENU_C_MAIN_MENU5_CLR_BIT4  0000643A
LABEL_AY_SUB_MENU_C_MAIN_MENU5_SEND_TO_AY_BIT4  00006440
LABEL_AY_SUB_MENU_C_MAIN_MENU5_SET_BIT4  00006432
LABEL_AY_SUB_MENU_C_MAIN_MENU5_TOGGLE_R_MODE_CH_C  0000642C
LABEL_AY_SUB_MENU_DOWN            00005A62
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU1_DONE  00005AA0
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU2_BACK_POS1  00005AB6
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU2_DONE  00005ABE
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU3_DONE  00005ADA
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU4_BACK_POS1  00005AF0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 523


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU4_DONE  00005AF8
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU5_BACK_POS1  00005B0E
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU5_DONE  00005B16
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU6_BACK_START_POS  00005B2C
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU6_DONE  00005B34
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU7_BACK_POS1  00005B4A
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU7_DONE  00005B52
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU8_BACK_POS1  00005B68
LABEL_AY_SUB_MENU_DOWN_MAIN_MENU8_DONE  00005B70
LABEL_AY_SUB_MENU_EXIT            0000595E
LABEL_AY_SUB_MENU_MINUS           00005EBE
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU1_CHK_ITEM2  00005EF8
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU1_DEC_ITEM2  00005F06
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM1  00005F10
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM2  00005F18
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM3  00005F20
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM4  00005F28
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM5  00005F30
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_CHK_ITEM6  00005F38
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM1  00005F42
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM1_OK  00005F4C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM2  00005F52
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM2_OK  00005F5C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM3  00005F62
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM3_OK  00005F6C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM4  00005F72
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM4_OK  00005F7C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM5  00005F82
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM5_OK  00005F8C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM6  00005F92
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU2_DEC_ITEM6_OK  00005F9C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_CHK_ITEM4  00005FA6
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_DEC_ITEM4  00005FB0
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU3_DEC_ITEM4_OK  00005FBA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM1  00005FD0
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM2  00005FD8
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_CHK_ITEM3  00005FE0
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM1  00005FEA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM1_OK  00005FFA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM2  0000600C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM2_OK  0000601C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM3  0000602E
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU4_DEC_ITEM3_OK  0000603E
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM1  00006054
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM2  0000605C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_CHK_ITEM3  00006064
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM1  0000606E
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM1_OK  00006078
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM2  0000608A
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM2_OK  00006094
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM3  000060A6
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU5_DEC_ITEM3_OK  000060B0
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM1  000060BA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM2  000060C2
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 524


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_CHK_ITEM3  000060CA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM1  000060D4
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM1_OK  000060E4
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM2  000060EA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM2_OK  000060FA
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM3  00006100
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU6_DEC_ITEM3_OK  00006110
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_A  00006158
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_B  0000616A
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_A  0000613C
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_B  00006142
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_C  00006148
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_A  00006170
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_PERIOD  0000614E
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_IS_NOISE_CH_B  0000617A
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_IS_OFF  00006154
LABEL_AY_SUB_MENU_MINUS_MAIN_MENU7_VELOCITY_TO_NOISE_OFF  0000615E
LABEL_AY_SUB_MENU_PLUS            00005B74
LABEL_AY_SUB_MENU_PLUS_CHK_MAINMENU  00005B74
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU1_CHK_ITEM2  00005BAE
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU1_INC_ITEM2  00005BBC
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM1  00005BC6
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM2  00005BCE
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM3  00005BD6
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM4  00005BDE
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM5  00005BE6
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_CHK_ITEM6  00005BEE
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM1  00005BF8
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM1_OK  00005C02
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM2  00005C08
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM2_OK  00005C12
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM3  00005C18
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM3_OK  00005C22
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM4  00005C28
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM4_OK  00005C32
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM5  00005C38
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM5_OK  00005C42
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM6  00005C48
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU2_INC_ITEM6_OK  00005C52
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_CHK_ITEM4  00005C5C
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_INC_ITEM4  00005C66
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU3_INC_ITEM4_OK  00005C70
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM1  00005C86
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM2  00005C8E
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_CHK_ITEM3  00005C96
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM1  00005CA0
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM1_OK  00005CB0
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM2  00005CC2
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM2_OK  00005CD2
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM3  00005CE4
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU4_INC_ITEM3_OK  00005CF4
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM1  00005D0A
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM2  00005D12
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_CHK_ITEM3  00005D1A
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 525


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM1  00005D24
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM1_OK  00005D2E
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM2  00005D40
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM2_OK  00005D4A
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM3  00005D5C
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU5_INC_ITEM3_OK  00005D66
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM1  00005D70
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM2  00005D78
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_CHK_ITEM3  00005D80
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM1  00005D8A
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM1_OK  00005D9A
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM2  00005DA0
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM2_OK  00005DB0
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM3  00005DB6
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU6_INC_ITEM3_OK  00005DC6
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_A  00005E16
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_CHK_VELOCITY_NOISE_CH_B  00005E26
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_A  00005DF2
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_B  00005DF8
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_C  00005DFE
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_A  00005E0A
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_B  00005E1C
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_CH_C  00005E2C
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_SET_VELOCITY_TO_NOISE_PERIOD  00005E04
LABEL_AY_SUB_MENU_PLUS_MAIN_MENU7_VELOCITY_IS_NOISE_CH_C  00005E36
LABEL_AY_SUB_MENU_UP              00005960
LABEL_AY_SUB_MENU_UP_CHK_MAINMENU  00005960
LABEL_AY_SUB_MENU_UP_MAIN_MENU1_DONE  0000599A
LABEL_AY_SUB_MENU_UP_MAIN_MENU2_DONE  000059B6
LABEL_AY_SUB_MENU_UP_MAIN_MENU3_DONE  000059D2
LABEL_AY_SUB_MENU_UP_MAIN_MENU4_DONE  000059EE
LABEL_AY_SUB_MENU_UP_MAIN_MENU5_DONE  00005A0A
LABEL_AY_SUB_MENU_UP_MAIN_MENU6_DONE  00005A26
LABEL_AY_SUB_MENU_UP_MAIN_MENU7_DONE  00005A42
LABEL_AY_SUB_MENU_UP_MAIN_MENU8_DONE  00005A5E
LABEL_MAIN_MENUE_SWITCH           000049BA
LABEL_MAIN_MENUE_SWITCH_EXIT      000049F8
LABEL_MAIN_MENUE_SWITCH_GO        000049C2
LABEL_MIDI_HANDLING_START         0000658C
LABEL_SUB_MENUE_SWITCH            00005916
LATA                              00000F89
LATB                              00000F8A
LATC                              00000F8B
LATD                              00000F8C
LATE                              00000F8D
LCD_CLEAR_ROW1                    00003872
LCD_CLEAR_ROW2                    00003884
LCD_CLEAR_ROW3                    00003896
LCD_CLEAR_ROW4                    000038A8
LCD_FX_FUNC_000                   000074BC
LCD_FX_FUNC_001                   000074CA
LCD_FX_FUNC_002                   000074D8
LCD_FX_FUNC_003                   000074E6
LCD_FX_FUNC_004                   000074F4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 526


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LCD_FX_FUNC_005                   00007502
LCD_FX_FUNC_006                   00007510
LCD_FX_FUNC_007                   0000751E
LCD_FX_FUNC_008                   0000752C
LCD_FX_FUNC_009                   0000753A
LCD_FX_FUNC_010                   00007548
LCD_FX_FUNC_011                   00007556
LCD_FX_FUNC_012                   00007564
LCD_FX_FUNC_013                   00007572
LCD_FX_FUNC_014                   00007580
LCD_FX_FUNC_015                   0000758E
LCD_FX_FUNC_016                   0000759C
LCD_FX_FUNC_017                   000075AA
LCD_FX_FUNC_018                   000075B8
LCD_FX_FUNC_019                   000075C6
LCD_FX_FUNC_020                   000075D4
LCD_FX_FUNC_021                   000075E2
LCD_FX_FUNC_022                   000075F0
LCD_FX_FUNC_023                   000075FE
LCD_FX_FUNC_024                   0000760C
LCD_FX_FUNC_025                   0000761A
LCD_FX_FUNC_026                   00007628
LCD_FX_FUNC_027                   00007636
LCD_FX_FUNC_028                   00007644
LCD_FX_FUNC_029                   00007652
LCD_FX_FUNC_030                   00007660
LCD_FX_FUNC_031                   0000766E
LCD_FX_FUNC_032                   0000767C
LCD_FX_FUNC_033                   0000768A
LCD_FX_FUNC_034                   00007698
LCD_FX_FUNC_035                   000076A6
LCD_FX_FUNC_036                   000076B4
LCD_FX_FUNC_037                   000076C2
LCD_FX_FUNC_038                   000076D0
LCD_FX_FUNC_039                   000076DE
LCD_FX_FUNC_040                   000076EC
LCD_FX_FUNC_041                   000076FA
LCD_REDRAW_EVENT_JUMTABLE         0000645A
LED_EnvelopeModeA_off             00007D4E
LED_EnvelopeModeA_on              00007D46
LED_EnvelopeModeB_off             00007D5E
LED_EnvelopeModeB_on              00007D56
LED_EnvelopeModeC_off             00007D6E
LED_EnvelopeModeC_on              00007D66
LED_Envelope_Shape_1_on           00007DA6
LED_Envelope_Shape_2_on           00007DAE
LED_Envelope_Shape_3_on           00007DB6
LED_Envelope_Shape_4_on           00007DBE
LED_Envelope_Shape_5_on           00007DC6
LED_Envelope_Shape_6_on           00007DCE
LED_Envelope_Shape_7_on           00007DD6
LED_Envelope_Shape_8_on           00007DDE
LED_Envelope_Shape_all_off        00007DE6
LED_Fx_A_off                      00007D7E
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 527


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LED_Fx_A_on                       00007D76
LED_Fx_B_off                      00007D8E
LED_Fx_B_on                       00007D86
LED_Fx_C_off                      00007D9E
LED_Fx_C_on                       00007D96
LED_NoiseA_off                    00007D1E
LED_NoiseA_on                     00007D16
LED_NoiseB_off                    00007D2E
LED_NoiseB_on                     00007D26
LED_NoiseC_off                    00007D3E
LED_NoiseC_on                     00007D36
LED_ToneA_off                     00007CEE
LED_ToneA_on                      00007CE6
LED_ToneB_off                     00007CFE
LED_ToneB_on                      00007CF6
LED_ToneC_off                     00007D0E
LED_ToneC_on                      00007D06
LOAD_CURREND_SESSION_POS_FX_DATA  0000775E
LOAD_FX_DATA_LCD_CURREND_POS      00007708
LOAD_FX_SESSION_DATA_CURREND_POS  00007C6C
LOAD_PATCH_DATA_BYTE              0000437E
LOAD_PATCH_DATA_BYTE_FROM_BANKSTICK  0000438A
LOAD_PATCH_FINGERPRINT_BANKSTICK  000040AE
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
MAIN_MENU_08_CHK_EDITING_MODE_POS4  00007428
MAIN_MENU_08_CHK_EDIT_POS2        000073C8
MAIN_MENU_08_CHK_EDIT_POS3        000073F8
MAIN_MENU_08_EDITING_MODE_IS_NOT_POS3  0000741C
MAIN_MENU_08_EDITING_MODE_IS_NOT_POS4  0000744C
MAIN_MENU_08_EDIT_MODE_IS_NOT_POS2  000073EC
MAIN_MENU_08_FX_CHK_EDIT_MODE_POS1  00007398
MAIN_MENU_08_NOT_EDIT_MODE_POS1   000073BC
MIDI_CC_VALUE                     00000037
MIDI_EVENT_CHANGE_FLAG            00000038
MIDI_EVNT0                        00000011
MIDI_EVNT1                        00000012
MIDI_EVNT_CHANNEL                 00000021
MIDI_EVNT_End                     000065D2
MIDI_EVNT_IS_8x                   000065D4
MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_A  000065D4
MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_B  000065F0
MIDI_EVNT_IS_8x_CHECK_MIDI_CHANNEL_C  0000660C
MIDI_EVNT_IS_8x_NOTE_OFF_TONE_A   000065DC
MIDI_EVNT_IS_8x_NOTE_OFF_TONE_B   000065F8
MIDI_EVNT_IS_8x_NOTE_OFF_TONE_C   00006614
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 528


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_IS_8x_SEND_NOTE_OFF_TO_AY_CHIP  00006628
MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_A  000065EA
MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_B  00006606
MIDI_EVNT_IS_8x_SWITCH_OFF_TONE_C  00006622
MIDI_EVNT_IS_9x                   0000663A
MIDI_EVNT_IS_9x_AND_VELOCITY_IS_NOT_ZERO  00006644
MIDI_EVNT_IS_9x_NOTE_ON_WRITE_TUNE_VALUES  0000346E
MIDI_EVNT_IS_Ax                   00006D92
MIDI_EVNT_IS_Bx                   00006648
MIDI_EVNT_IS_Bx_CC0               000066E0
MIDI_EVNT_IS_Bx_CC1               000066E2
MIDI_EVNT_IS_Bx_CC10              000068E4
MIDI_EVNT_IS_Bx_CC10_EXIT         00006904
MIDI_EVNT_IS_Bx_CC10_TONE_A_OFF   000068FC
MIDI_EVNT_IS_Bx_CC10_TONE_A_ON    000068F4
MIDI_EVNT_IS_Bx_CC10_TONE_A_ON_OR_OFF  000068EC
MIDI_EVNT_IS_Bx_CC11              00006906
MIDI_EVNT_IS_Bx_CC11_EXIT         00006926
MIDI_EVNT_IS_Bx_CC11_TONE_B_OFF   0000691E
MIDI_EVNT_IS_Bx_CC11_TONE_B_ON    00006916
MIDI_EVNT_IS_Bx_CC11_TONE_B_ON_OR_OFF  0000690E
MIDI_EVNT_IS_Bx_CC12              00006928
MIDI_EVNT_IS_Bx_CC12_EXIT         0000694C
MIDI_EVNT_IS_Bx_CC12_TONE_C_OFF   00006944
MIDI_EVNT_IS_Bx_CC12_TONE_C_ON    0000693C
MIDI_EVNT_IS_Bx_CC12_TONE_C_ON_OR_OFF  00006930
MIDI_EVNT_IS_Bx_CC13              0000694E
MIDI_EVNT_IS_Bx_CC13_EXIT         00006972
MIDI_EVNT_IS_Bx_CC13_NOISE_A_OFF  00006968
MIDI_EVNT_IS_Bx_CC13_NOISE_A_ON   0000695E
MIDI_EVNT_IS_Bx_CC13_NOISE_A_ON_OR_OFF  00006956
MIDI_EVNT_IS_Bx_CC14              00006974
MIDI_EVNT_IS_Bx_CC14_EXIT         00006998
MIDI_EVNT_IS_Bx_CC14_NOISE_B_OFF  00006990
MIDI_EVNT_IS_Bx_CC14_NOISE_B_ON   00006988
MIDI_EVNT_IS_Bx_CC14_NOISE_B_ON_OR_OFF  0000697C
MIDI_EVNT_IS_Bx_CC15              0000699A
MIDI_EVNT_IS_Bx_CC15_EXIT         000069BA
MIDI_EVNT_IS_Bx_CC15_NOISE_C_OFF  000069B2
MIDI_EVNT_IS_Bx_CC15_NOISE_C_ON   000069AA
MIDI_EVNT_IS_Bx_CC15_NOISE_C_ON_OR_OFF  000069A2
MIDI_EVNT_IS_Bx_CC16              000069BC
MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_OFF  000069D6
MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_ON  000069CC
MIDI_EVNT_IS_Bx_CC16_ENV_TONE_A_SET_OR_CLEAR  000069C4
MIDI_EVNT_IS_Bx_CC16_EXIT         000069DC
MIDI_EVNT_IS_Bx_CC17              000069DE
MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_OFF  000069F6
MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_ON  000069EE
MIDI_EVNT_IS_Bx_CC17_ENV_TONE_B_SET_OR_CLEAR  000069E6
MIDI_EVNT_IS_Bx_CC17_EXIT         000069FC
MIDI_EVNT_IS_Bx_CC18              000069FE
MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_OFF  00006A16
MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_ON  00006A0E
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 529


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_IS_Bx_CC18_ENV_TONE_C_SET_OR_CLEAR  00006A06
MIDI_EVNT_IS_Bx_CC18_EXIT         00006A1C
MIDI_EVNT_IS_Bx_CC19              00006A1E
MIDI_EVNT_IS_Bx_CC19_EXIT         00006A34
MIDI_EVNT_IS_Bx_CC19_VELOCITY_OFF  00006A32
MIDI_EVNT_IS_Bx_CC19_VELOCITY_ON  00006A2E
MIDI_EVNT_IS_Bx_CC19_VELOCITY_ON_OFF  00006A26
MIDI_EVNT_IS_Bx_CC1_CHK_CH_A      000066E2
MIDI_EVNT_IS_Bx_CC1_CHK_CH_B      000066EE
MIDI_EVNT_IS_Bx_CC1_CHK_CH_C      000066FA
MIDI_EVNT_IS_Bx_CC1_VALUE_CORRETION  00006718
MIDI_EVNT_IS_Bx_CC1_WRITE_TO_ENV_SHAPE  00006704
MIDI_EVNT_IS_Bx_CC1_WRITE_TO_SHAPE_SELECTOR  0000671C
MIDI_EVNT_IS_Bx_CC2               00006726
MIDI_EVNT_IS_Bx_CC20              00006A36
MIDI_EVNT_IS_Bx_CC20_EXIT         00006A4C
MIDI_EVNT_IS_Bx_CC20_VELOCITY_OFF  00006A4A
MIDI_EVNT_IS_Bx_CC20_VELOCITY_ON  00006A46
MIDI_EVNT_IS_Bx_CC20_VELOCITY_ON_OFF  00006A3E
MIDI_EVNT_IS_Bx_CC21              00006A4E
MIDI_EVNT_IS_Bx_CC21_EXIT         00006A64
MIDI_EVNT_IS_Bx_CC21_VELOCITY_OFF  00006A62
MIDI_EVNT_IS_Bx_CC21_VELOCITY_ON  00006A5E
MIDI_EVNT_IS_Bx_CC21_VELOCITY_ON_OFF  00006A56
MIDI_EVNT_IS_Bx_CC22              00006A66
MIDI_EVNT_IS_Bx_CC22_CHECK_IF_VALUE_IS_2  00006A98
MIDI_EVNT_IS_Bx_CC22_CHECK_IF_VALUE_IS_3  00006AAC
MIDI_EVNT_IS_Bx_CC22_CHK_CH_B     00006A6E
MIDI_EVNT_IS_Bx_CC22_CHK_CH_C     00006A76
MIDI_EVNT_IS_Bx_CC22_EXIT         00006AC8
MIDI_EVNT_IS_Bx_CC22_TOGGLE_VELOCITY_NOISE_PERIOD  00006A7E
MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_A  00006A8E
MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_B  00006AA0
MIDI_EVNT_IS_Bx_CC22_VELOCITY_TONE_C  00006AB4
MIDI_EVNT_IS_Bx_CC22_VELOCITY_TO_NOISE_PERIOD_OFF  00006AC0
MIDI_EVNT_IS_Bx_CC22_VELOCITY_TO_NOISE_PERIOD_ON  00006A86
MIDI_EVNT_IS_Bx_CC23              00006ACA
MIDI_EVNT_IS_Bx_CC24              00006ACC
MIDI_EVNT_IS_Bx_CC25              00006ACE
MIDI_EVNT_IS_Bx_CC26              00006AD0
MIDI_EVNT_IS_Bx_CC27              00006AD2
MIDI_EVNT_IS_Bx_CC28              00006AD4
MIDI_EVNT_IS_Bx_CC29              00006AD6
MIDI_EVNT_IS_Bx_CC2_CHK_CH_A      00006726
MIDI_EVNT_IS_Bx_CC2_CHK_CH_B      0000672E
MIDI_EVNT_IS_Bx_CC2_CHK_CH_C      00006736
MIDI_EVNT_IS_Bx_CC2_WRITE_ENV_FINE  0000673E
MIDI_EVNT_IS_Bx_CC3               00006754
MIDI_EVNT_IS_Bx_CC3_CHK_CH_A      00006754
MIDI_EVNT_IS_Bx_CC3_CHK_CH_B      0000675C
MIDI_EVNT_IS_Bx_CC3_CHK_CH_C      00006764
MIDI_EVNT_IS_Bx_CC3_CLEAR_BIT7    00006778
MIDI_EVNT_IS_Bx_CC3_SET_BIT7      00006774
MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE  0000677C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 530


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_IS_Bx_CC3_WRITE_ENV_FINE_OFFSET_BIT7  0000676C
MIDI_EVNT_IS_Bx_CC4               0000678A
MIDI_EVNT_IS_Bx_CC4_CHK_CH_A      0000678A
MIDI_EVNT_IS_Bx_CC4_CHK_CH_B      00006792
MIDI_EVNT_IS_Bx_CC4_CHK_CH_C      0000679A
MIDI_EVNT_IS_Bx_CC4_WRITE_ENV_COARSE  000067A2
MIDI_EVNT_IS_Bx_CC5               000067B8
MIDI_EVNT_IS_Bx_CC5_CHK_CH_A      000067B8
MIDI_EVNT_IS_Bx_CC5_CHK_CH_B      000067C0
MIDI_EVNT_IS_Bx_CC5_CHK_CH_C      000067C8
MIDI_EVNT_IS_Bx_CC5_CLEAR_BIT7    000067DC
MIDI_EVNT_IS_Bx_CC5_SET_BIT7      000067D8
MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_COARSE  000067E0
MIDI_EVNT_IS_Bx_CC5_WRITE_ENV_FINE_OFFSET_BIT7  000067D0
MIDI_EVNT_IS_Bx_CC6               000067EE
MIDI_EVNT_IS_Bx_CC6_CHK_CH_B      000067F6
MIDI_EVNT_IS_Bx_CC6_CHK_CH_C      000067FE
MIDI_EVNT_IS_Bx_CC6_CORRECT_VALUE  00006824
MIDI_EVNT_IS_Bx_CC6_GO_ON_TO_WRITE_NOISE_PERIOD  00006804
MIDI_EVNT_IS_Bx_CC6_WRITE_AY_NOISE_PERIOD  00006828
MIDI_EVNT_IS_Bx_CC7               0000683A
MIDI_EVNT_IS_Bx_CC7_EXIT          0000686E
MIDI_EVNT_IS_Bx_CC7_WRITE_TO_VOLUME  00006842
MIDI_EVNT_IS_Bx_CC8               00006870
MIDI_EVNT_IS_Bx_CC8_EXIT          000068A8
MIDI_EVNT_IS_Bx_CC8_WRITE_TO_VOLUME  0000687C
MIDI_EVNT_IS_Bx_CC9               000068AA
MIDI_EVNT_IS_Bx_CC9_EXIT          000068E2
MIDI_EVNT_IS_Bx_CC9_WRITE_TO_VOLUME  000068B6
MIDI_EVNT_IS_Bx_CC_JUMPTABLE      00006658
MIDI_EVNT_IS_Cx                   00006D94
MIDI_EVNT_IS_Dx                   00006D96
MIDI_EVNT_IS_Ex                   00006AD8
MIDI_EVNT_IS_Ex_CHK_CH_C          00006CB8
MIDI_EVNT_IS_Ex_EXIT              00006D90
MIDI_EVNT_IS_Ex_PITCH_BEND_TONE_B  00006BE8
MIDI_EVNT_IS_Ex_PITCH_BEND_TONE_C  00006CC0
MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_16x  00006C1E
MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_2x  00006C2A
MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_4x  00006C26
MIDI_EVNT_IS_Ex_PITCH_B_POSITIVE_RATIO_CHANGE_DIVIDE_8x  00006C22
MIDI_EVNT_IS_Ex_PITCH_CARRY_COARSE_REG_B_INC  00006C9C
MIDI_EVNT_IS_Ex_PITCH_CARRY_COARSE_REG_C_INC  00006D74
MIDI_EVNT_IS_Ex_PITCH_CARRY_COASE_REG_B_DEC_GO_ON  00006C42
MIDI_EVNT_IS_Ex_PITCH_CARRY_COASE_REG_C_DEC_GO_ON  00006D1A
MIDI_EVNT_IS_Ex_PITCH_CARRY_WRITE_HIGHEST_PITCH_B  00006C46
MIDI_EVNT_IS_Ex_PITCH_CARRY_WRITE_HIGHEST_PITCH_C  00006D1E
MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_16x  00006CF6
MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_2x  00006D02
MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_4x  00006CFE
MIDI_EVNT_IS_Ex_PITCH_C_POSITIVE_RATIO_CHANGE_DIVIDE_8x  00006CFA
MIDI_EVNT_IS_Ex_PITCH_POSITIVE_COASE_REG_B_DEC_VALUE  00006C3A
MIDI_EVNT_IS_Ex_PITCH_POSITIVE_COASE_REG_C_DEC_VALUE  00006D12
MIDI_EVNT_IS_Ex_PITCH_TONE_B_NEGATIVE  00006C4C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 531


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_IS_Ex_PITCH_TONE_B_POSITIVE  00006BF0
MIDI_EVNT_IS_Ex_PITCH_TONE_B_POSITIVE_COARSE_REG_INC_VALUE  00006C94
MIDI_EVNT_IS_Ex_PITCH_TONE_C_NEGATIVE  00006D24
MIDI_EVNT_IS_Ex_PITCH_TONE_C_POSITIVE  00006CC8
MIDI_EVNT_IS_Ex_PITCH_TONE_C_POSITIVE_COARSE_REG_INC_VALUE  00006D6C
MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_B  00006CA0
MIDI_EVNT_IS_Ex_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_C  00006D78
MIDI_EVNT_IS_Fx                   00006D98
MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_A_INC  00006E76
MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_B_INC  00007050
MIDI_EVNT_NOTE_ON_CARRY_COARSE_REG_C_INC  00007226
MIDI_EVNT_NOTE_ON_CHECK_DETUNE_A  00006DD0
MIDI_EVNT_NOTE_ON_CHECK_DETUNE_A_FINE_IS_PLUS_OR_MINUS  00006E22
MIDI_EVNT_NOTE_ON_CHECK_DETUNE_B  00006FAA
MIDI_EVNT_NOTE_ON_CHECK_DETUNE_C  00007184
MIDI_EVNT_NOTE_ON_CHECK_DETUNE_C_FINE_IS_PLUS_OR_MINUS  000071D2
MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_A  00006D9A
MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_B  00006F74
MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_C  0000714E
MIDI_EVNT_NOTE_ON_CHECK_MIDI_CHANNEL_TONE_A_B_C  00006D9A
MIDI_EVNT_NOTE_ON_CHECK_TONE_A_COARSE_DETUNE  00006DD0
MIDI_EVNT_NOTE_ON_CHECK_TONE_A_DETUNE_FINE  00006E1A
MIDI_EVNT_NOTE_ON_CHECK_TONE_B_COARSE_DETUNE  00006FAA
MIDI_EVNT_NOTE_ON_CHECK_TONE_B_DETUNE_FINE  00006FF4
MIDI_EVNT_NOTE_ON_CHECK_TONE_B_FINE_DETUNE_MINUS_OR_PLUS  00006FFC
MIDI_EVNT_NOTE_ON_CHECK_TONE_C_COARSE_DETUNE  00007184
MIDI_EVNT_NOTE_ON_CHECK_TONE_C_DETUNE_FINE  000071CA
MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_A_TO_MAX_VALUE  00006DF4
MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_B_TO_MAX_VALUE  00006FCC
MIDI_EVNT_NOTE_ON_DETUNE_NEGATIVE_SET_COARSE_TUNE_C_TO_MAX_VALUE  000071A4
MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_A_INC  00006E6E
MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_B_INC  00007048
MIDI_EVNT_NOTE_ON_FINE_DETUNE_NEGATIVE_REG_OVERFLOW_COARSE_REG_C_INC  0000721E
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_A_GO_ON  00006ED6
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_B_GO_ON  000070B0
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_CARRYBIT_DEC_COARSE_REG_C_GO_ON  00007286
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_A_DEC  00006ECA
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_B_DEC  000070A4
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_COARSE_REG_C_DEC  0000727A
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_A  00006EC4
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_B  0000709E
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_DETUNE_TO_MIDI_VALUE_TONE_C  00007274
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_A  00006EDA
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_B  000070B4
MIDI_EVNT_NOTE_ON_FINE_DETUNE_POSITIVE_WRITE_HIGHEST_VALUE_PITCH_C  0000728A
MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_A_ENV_MODE  00006DC4
MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_B_ENV_MODE  00006F9E
MIDI_EVNT_NOTE_ON_MIDI_CHANNEL_TONE_C_ENV_MODE  00007178
MIDI_EVNT_NOTE_ON_SENT_DATA_TO_AY_CHIP  0000732A
MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_A_TO_HIGHEST_TUNE  00006E0A
MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_B_TO_MIN_VALUE_IS_HIGHEST_TUNE  00006FE4
MIDI_EVNT_NOTE_ON_SET_MIDI_TUNE_C_TO_HIGHEST_TUNE  000071BA
MIDI_EVNT_NOTE_ON_TONE_A_CHCK_ENVELOPE_MODE  00006DBE
MIDI_EVNT_NOTE_ON_TONE_A_CHECK_COARSE_DETUNE_PLUS_OR_MINUS  00006DDA
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 532


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_ADDITIVE_GO_ON  00006E14
MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_IS_MINUS  00006DE2
MIDI_EVNT_NOTE_ON_TONE_A_COARSE_DETUNE_IS_PLUS  00006DFE
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_MINUS  00006E2A
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_GO_ON  00006E64
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE  00006E3E
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x  00006E54
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  00006E60
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  00006E5C
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  00006E58
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_PLUS  00006E84
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_GO_ON  00006EBC
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE  00006E96
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x  00006EAC
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x  00006EB8
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x  00006EB4
MIDI_EVNT_NOTE_ON_TONE_A_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x  00006EB0
MIDI_EVNT_NOTE_ON_TONE_A_SEND_TUNE_TO_AY_CHIP  00006EE0
MIDI_EVNT_NOTE_ON_TONE_B_CHCK_ENVELOPE_MODE  00006F98
MIDI_EVNT_NOTE_ON_TONE_B_CHECK_COARSE_DETUNE_PLUS_OR_MINUS  00006FB2
MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY  0000710C
MIDI_EVNT_NOTE_ON_TONE_B_CHECK_VELOCITY_TO_NOISE_PERIOD  000070D8
MIDI_EVNT_NOTE_ON_TONE_B_COARSE_DETUNE_IS_MINUS  00006FBA
MIDI_EVNT_NOTE_ON_TONE_B_COARSE_DETUNE_IS_PLUS  00006FD8
MIDI_EVNT_NOTE_ON_TONE_B_COASE_DETUNE_ADDITIVE_GO_ON  00006FEE
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_MINUS  00007004
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_GO_ON  0000703E
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE  00007018
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x  0000702E
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  0000703A
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  00007036
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  00007032
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_PLUS  0000705E
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_GO_ON  00007096
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE  00007070
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x  00007086
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x  00007092
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x  0000708E
MIDI_EVNT_NOTE_ON_TONE_B_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x  0000708A
MIDI_EVNT_NOTE_ON_TONE_B_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD  000070FA
MIDI_EVNT_NOTE_ON_TONE_B_SEND_TUNE_TO_AY_CHIP  000070BA
MIDI_EVNT_NOTE_ON_TONE_B_SEND_VELOCITY_NOT_TO_VOLUME  00007112
MIDI_EVNT_NOTE_ON_TONE_B_SEND_VELOCITY_TO_VOLUME  00007122
MIDI_EVNT_NOTE_ON_TONE_B_WRITE_VELOCITY_TO_NOISE_PERIOD  000070DE
MIDI_EVNT_NOTE_ON_TONE_B_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW  000070FE
MIDI_EVNT_NOTE_ON_TONE_C_CHCK_ENVELOPE_MODE  00007172
MIDI_EVNT_NOTE_ON_TONE_C_CHECK_COARSE_DETUNE_PLUS_OR_MINUS  0000718C
MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY  000072E2
MIDI_EVNT_NOTE_ON_TONE_C_CHECK_VELOCITY_TO_NOISE_PERIOD  000072AE
MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_ADDITIVE_GO_ON  000071C4
MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_IS_MINUS  00007194
MIDI_EVNT_NOTE_ON_TONE_C_COARSE_DETUNE_IS_PLUS  000071AE
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_MINUS  000071DA
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_GO_ON  00007214
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 533


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE  000071EE
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_16x  00007204
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  00007210
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  0000720C
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  00007208
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_PLUS  00007234
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_GO_ON  0000726C
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE  00007246
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_16x  0000725C
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_2x  00007268
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_4x  00007264
MIDI_EVNT_NOTE_ON_TONE_C_FINE_DETUNE_POSITIVE_RATIO_CHANGE_DIVIDE_8x  00007260
MIDI_EVNT_NOTE_ON_TONE_C_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD  000072D0
MIDI_EVNT_NOTE_ON_TONE_C_SEND_TUNE_TO_AY_CHIP  00007290
MIDI_EVNT_NOTE_ON_TONE_C_SEND_VELOCITY_NOT_TO_VOLUME  000072E8
MIDI_EVNT_NOTE_ON_TONE_C_SEND_VELOCITY_TO_VOLUME  000072F8
MIDI_EVNT_NOTE_ON_TONE_C_WRITE_VELOCITY_TO_NOISE_PERIOD  000072B4
MIDI_EVNT_NOTE_ON_TONE_C_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW  000072D4
MIDI_EVNT_NOTE_ON_TONE_FILTER     00007324
MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_A  00006E7A
MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_B  00007054
MIDI_EVNT_NOTE_ON_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_C  0000722A
MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_16x  00006B3E
MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_2x  00006B4A
MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_4x  00006B46
MIDI_EVNT_PITCH_BEND_A_POSITIVE_RATIO_CHANGE_DIVIDE_8x  00006B42
MIDI_EVNT_PITCH_BEND_CHK_CH_A     00006B00
MIDI_EVNT_PITCH_BEND_CHK_CH_B     00006BE0
MIDI_EVNT_PITCH_BEND_PITCH_A_NAGATIVE_RATIO_CHANGE  00006B84
MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_GO_ON  00006BAA
MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_16x  00006B9A
MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  00006BA6
MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  00006BA2
MIDI_EVNT_PITCH_BEND_PITCH_A_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  00006B9E
MIDI_EVNT_PITCH_BEND_PITCH_A_POSITIVE_GO_ON  00006B4E
MIDI_EVNT_PITCH_BEND_PITCH_A_POSITIVE_RATIO_CHANGE  00006B28
MIDI_EVNT_PITCH_BEND_PITCH_BEND_TONE_A  00006B08
MIDI_EVNT_PITCH_BEND_PITCH_B_NAGATIVE_RATIO_CHANGE  00006C64
MIDI_EVNT_PITCH_BEND_PITCH_B_NEGATIVE_GO_ON  00006C8A
MIDI_EVNT_PITCH_BEND_PITCH_B_POSITIVE_GO_ON  00006C2E
MIDI_EVNT_PITCH_BEND_PITCH_B_POSITIVE_RATIO_CHANGE  00006C08
MIDI_EVNT_PITCH_BEND_PITCH_CARRY_COARSE_A_REG_INC  00006BBA
MIDI_EVNT_PITCH_BEND_PITCH_CARRY_COARSE_REG_A_DEC_GO_ON  00006B62
MIDI_EVNT_PITCH_BEND_PITCH_CARRY_WRITE_HIGHEST_PITCH_A  00006B66
MIDI_EVNT_PITCH_BEND_PITCH_C_NAGATIVE_RATIO_CHANGE  00006D3C
MIDI_EVNT_PITCH_BEND_PITCH_C_NEGATIVE_GO_ON  00006D62
MIDI_EVNT_PITCH_BEND_PITCH_C_POSITIVE_GO_ON  00006D06
MIDI_EVNT_PITCH_BEND_PITCH_C_POSITIVE_RATIO_CHANGE  00006CE0
MIDI_EVNT_PITCH_BEND_PITCH_POSITIVE_COARSE_REG_A_DEC_VALUE  00006B5A
MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_NEGATIVE  00006B6C
MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_POSITIVE  00006B10
MIDI_EVNT_PITCH_BEND_PITCH_TONE_A_POSITIVE_COARSE_REG_INC_VALUE  00006BB2
MIDI_EVNT_PITCH_BEND_WRITE_MAXIMUM_VALUE_TO_FINE_AND_COARSE_REG_TONE_A  00006BBE
MIDI_EVNT_PITCH_BEND_WRITE_PITCH_BEND_TO_AY_CHIP_TONE_A  00006BC8
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 534


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_16x  00006C7A
MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  00006C86
MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  00006C82
MIDI_EVNT_PITCH_B_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  00006C7E
MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_16x  00006D52
MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_2x  00006D5E
MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_4x  00006D5A
MIDI_EVNT_PITCH_C_NEGATIVE_RATIO_CHANGE_DIVIDE_8x  00006D56
MIDI_EVNT_TONE_A_CHECK_VELOCITY   00006F32
MIDI_EVNT_TONE_A_CHECK_VELOCITY_TO_NOISE_PERIOD  00006EFE
MIDI_EVNT_TONE_A_MAKE_VALID_VELOCITY_TO_NOISE_PERIOD  00006F20
MIDI_EVNT_TONE_A_SEND_VELOCITY_NOT_TO_VOLUME  00006F38
MIDI_EVNT_TONE_A_SEND_VELOCITY_TO_VOLUME  00006F48
MIDI_EVNT_TONE_A_WRITE_VELOCITY_TO_NOISE_PERIOD  00006F04
MIDI_EVNT_TONE_A_WRITE_VELOCITY_TO_NOISE_PERIOD_NOW  00006F24
MIDI_EVNT_VALUE                   00000013
MINUS_KEY_AUTO_REPEAT_DELAY_CYCLE  0000656E
MINUS_KEY_DO_FINISH_FIRST_KEY_STRIKE_DELAY_CYCLE  00006568
MINUS_KEY_DO_INC_FIRST_KEY_STRIKE_CYCLE_COUNTER  00006564
MINUS_KEY_FINISH_AUTO_REPEAT_DELAY_CYCLE  0000657A
MINUS_KEY_FIRST_KEY_STRIKE_DELAY_CYCLE  0000655C
MINUS_KEY_INC_AUTO_REPEAT_CYCLE_COUNTER  00006576
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU0  00005EF0
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU1  00005EF4
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU2  00005F0C
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU3  00005FA2
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU4  00005FCC
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU5  00006050
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU6  000060B6
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU7  00006116
MINUS_KEY_SUBROUTINE_AT_MAIN_MENU8  00006184
MIOS_AIN_DeadbandGet              00002C5C
MIOS_AIN_DeadbandSet              00002C60
MIOS_AIN_DynamicPrioGet           00002DD4
MIOS_AIN_DynamicPrioSet           00002DD0
MIOS_AIN_LastPinsGet              00002DD8
MIOS_AIN_Muxed                    00002C64
MIOS_AIN_NumberGet                00002C68
MIOS_AIN_NumberSet                00002C6C
MIOS_AIN_Pin7bitGet               00002C70
MIOS_AIN_PinGet                   00002C74
MIOS_AIN_PinLSBGet                00002C78
MIOS_AIN_PinMSBGet                00002C7C
MIOS_AIN_UnMuxed                  00002C80
MIOS_BANKSTICK_CtrlGet            00002DE0
MIOS_BANKSTICK_CtrlSet            00002DDC
MIOS_BANKSTICK_Read               00002D70
MIOS_BANKSTICK_ReadPage           00002E30
MIOS_BANKSTICK_Write              00002D74
MIOS_BANKSTICK_WritePage          00002DE4
MIOS_BOX_CFG0                     00000000
MIOS_BOX_CFG0_20MHz               00000007
MIOS_BOX_CFG0_LCD_TYPE0           00000000
MIOS_BOX_CFG0_LCD_TYPE1           00000001
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 535


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIOS_BOX_CFG0_LCD_TYPE2           00000002
MIOS_BOX_CFG0_MBLINK              00000005
MIOS_BOX_CFG0_MERGER              00000004
MIOS_BOX_CFG0_TO_HOST             00000006
MIOS_BOX_CFG0_USE_GLCD            00000003
MIOS_BOX_CFG1                     00000001
MIOS_BOX_CFG1_BS_A0               00000000
MIOS_BOX_CFG1_BS_A1               00000001
MIOS_BOX_CFG1_BS_A2               00000002
MIOS_BOX_CFG1_BS_DIS_VERIFY       00000003
MIOS_BOX_CFG1_IIC_STRETCH_CLK     00000004
MIOS_BOX_STAT                     00000002
MIOS_BOX_STAT_AUTOREPEAT          00000004
MIOS_BOX_STAT_BS_AVAILABLE        00000000
MIOS_BOX_STAT_FERR                00000006
MIOS_BOX_STAT_MBLINK_TUNNEL_PASS  00000001
MIOS_BOX_STAT_MLCD_TRANSFER       00000005
MIOS_BOX_STAT_SUSPEND_ALL         00000002
MIOS_BOX_STAT_SUSPEND_USER        00000003
MIOS_CLCD_SpecialCharInit         00002DC8
MIOS_CLCD_SpecialCharsInit        00002DCC
MIOS_DIN_PinAutoRepeatDisable     00002DC0
MIOS_DIN_PinAutoRepeatEnable      00002DBC
MIOS_DIN_PinAutoRepeatGet         00002DC4
MIOS_DIN_PinGet                   00002CB4
MIOS_DIN_SRGet                    00002CB8
MIOS_DOUT_PinGet                  00002CBC
MIOS_DOUT_PinSet                  00002CC0
MIOS_DOUT_PinSet0                 00002CC4
MIOS_DOUT_PinSet1                 00002CC8
MIOS_DOUT_SRGet                   00002CCC
MIOS_DOUT_SRSet                   00002CD0
MIOS_Delay                        00002D9C
MIOS_EEPROM_Read                  00002D60
MIOS_EEPROM_ReadPage              00002E34
MIOS_EEPROM_Write                 00002D64
MIOS_EEPROM_WritePage             00002E38
MIOS_ENC_Abs7bitAdd               00002CD4
MIOS_ENC_Abs7bitGet               00002CD8
MIOS_ENC_Abs7bitSet               00002CDC
MIOS_ENC_MODE_DETENTED            00000080
MIOS_ENC_MODE_DETENTED1           00000080
MIOS_ENC_MODE_DETENTED2           00000081
MIOS_ENC_MODE_DETENTED3           00000082
MIOS_ENC_MODE_NON_DETENTED        00000000
MIOS_ENC_NumberGet                00002CE0
MIOS_ENC_SPEED_FAST               00000002
MIOS_ENC_SPEED_NORMAL             00000001
MIOS_ENC_SPEED_SLOW               00000000
MIOS_ENC_SpeedGet                 00002CE4
MIOS_ENC_SpeedSet                 00002CE8
MIOS_FLASH_Read                   00002D68
MIOS_FLASH_Write                  00002D6C
MIOS_GLCD_BUFFER                  00000570
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 536


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIOS_GLCD_FONT                    00007CFC
MIOS_GLCD_FONT_HEIGHT             0000057E
MIOS_GLCD_FONT_OFFSET             00000580
MIOS_GLCD_FONT_PTRH               00000582
MIOS_GLCD_FONT_PTRL               00000581
MIOS_GLCD_FONT_PTRU               0000058E
MIOS_GLCD_FONT_WIDTH              0000057D
MIOS_GLCD_FONT_X0                 0000057F
MIOS_GLCD_FontInit                00002D54
MIOS_GLCD_GCURSOR_X               0000057B
MIOS_GLCD_GCURSOR_Y               0000057C
MIOS_GLCD_GCursorGet              00002D58
MIOS_GLCD_GCursorSet              00002D5C
MIOS_GLCD_TMP1                    00000585
MIOS_GLCD_TMP2                    00000586
MIOS_GLCD_TMP3                    00000587
MIOS_GLCD_TMP4                    00000588
MIOS_GPCounterGet                 00002DA0
MIOS_HLP_16bitAddSaturate         00002DB8
MIOS_HLP_AddressFromTable         00002D84
MIOS_HLP_Dec2BCD                  00002DE8
MIOS_HLP_GetBitANDMask            00002D88
MIOS_HLP_GetBitORMask             00002D8C
MIOS_HLP_GetIndex_2bytes          00002D90
MIOS_HLP_GetIndex_4bytes          00002D94
MIOS_HLP_IndirectJump             00002D98
MIOS_IIC_AckSend                  00002E14
MIOS_IIC_ByteReceive              00002E10
MIOS_IIC_ByteSend                 00002E0C
MIOS_IIC_CtrlGet                  00002E20
MIOS_IIC_CtrlSet                  00002E1C
MIOS_IIC_NakSend                  00002E18
MIOS_IIC_Start                    00002E04
MIOS_IIC_Stop                     00002E08
MIOS_LCD_CURSOR_POS               0000057A
MIOS_LCD_CURSOR_POS_REAL          0000058D
MIOS_LCD_Clear                    00002D04
MIOS_LCD_Cmd                      00002D08
MIOS_LCD_CursorGet                00002D0C
MIOS_LCD_CursorSet                00002D10
MIOS_LCD_Data                     00002D14
MIOS_LCD_Init                     00002D18
MIOS_LCD_MessageStart             00002DF4
MIOS_LCD_MessageStop              00002DF8
MIOS_LCD_OPTION1                  00000578
MIOS_LCD_OPTION2                  00000579
MIOS_LCD_PrintBCD1                00002D1C
MIOS_LCD_PrintBCD2                00002D20
MIOS_LCD_PrintBCD3                00002D24
MIOS_LCD_PrintBCD4                00002DEC
MIOS_LCD_PrintBCD5                00002DF0
MIOS_LCD_PrintChar                00002D28
MIOS_LCD_PrintHex1                00002D2C
MIOS_LCD_PrintHex2                00002D30
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 537


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIOS_LCD_PrintMessage             00002D34
MIOS_LCD_PrintPreconfString       00002D38
MIOS_LCD_PrintString              00002D3C
MIOS_LCD_TIMEOUT0                 00000583
MIOS_LCD_TIMEOUT1                 00000584
MIOS_LCD_TYPE_CLCD                00000000
MIOS_LCD_TYPE_GLCD0               00000001
MIOS_LCD_TYPE_GLCD1               00000002
MIOS_LCD_TYPE_GLCD2               00000003
MIOS_LCD_TYPE_GLCD3               00000004
MIOS_LCD_TYPE_GLCD4               00000005
MIOS_LCD_TYPE_GLCD_CUSTOM         00000007
MIOS_LCD_TYPE_MLCD                00000006
MIOS_LCD_TypeAutoSet              00002D40
MIOS_LCD_TypeGet                  00002D44
MIOS_LCD_TypeSet                  00002D48
MIOS_LCD_Y0_OFFSET                00000589
MIOS_LCD_Y1_OFFSET                0000058A
MIOS_LCD_Y2_OFFSET                0000058B
MIOS_LCD_Y3_OFFSET                0000058C
MIOS_LCD_YAddressGet              00002D4C
MIOS_LCD_YAddressSet              00002D50
MIOS_MF_DeadbandGet               00002C94
MIOS_MF_DeadbandSet               00002C98
MIOS_MF_Disable                   00002C9C
MIOS_MF_Enable                    00002CA0
MIOS_MF_FaderMove                 00002CA4
MIOS_MF_PWM_DutyCycleDownGet      00002C84
MIOS_MF_PWM_DutyCycleDownSet      00002C88
MIOS_MF_PWM_DutyCycleUpGet        00002C8C
MIOS_MF_PWM_DutyCycleUpSet        00002C90
MIOS_MF_PWM_PeriodGet             00002DFC
MIOS_MF_PWM_PeriodSet             00002E00
MIOS_MF_SuspendDisable            00002CA8
MIOS_MF_SuspendEnable             00002CAC
MIOS_MF_SuspendGet                00002CB0
MIOS_MF_TouchDetectionReset       00002E2C
MIOS_MIDI_BeginStream             00002C00
MIOS_MIDI_DeviceIDAutoSet         00002C04
MIOS_MIDI_DeviceIDGet             00002C08
MIOS_MIDI_DeviceIDSet             00002C0C
MIOS_MIDI_EndStream               00002C10
MIOS_MIDI_INTERFACE_COMMON        00000000
MIOS_MIDI_INTERFACE_TO_HOST       00000001
MIOS_MIDI_Init                    00002C14
MIOS_MIDI_InterfaceAutoSet        00002C18
MIOS_MIDI_InterfaceGet            00002C1C
MIOS_MIDI_InterfaceSet            00002C20
MIOS_MIDI_MERGER_DISABLED         00000000
MIOS_MIDI_MERGER_ENABLED          00000001
MIOS_MIDI_MERGER_MBLINK_EP        00000002
MIOS_MIDI_MERGER_MBLINK_FP        00000003
MIOS_MIDI_MergerGet               00002C24
MIOS_MIDI_MergerSet               00002C28
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 538


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIOS_MIDI_RxBufferFree            00002C2C
MIOS_MIDI_RxBufferGet             00002C30
MIOS_MIDI_RxBufferPut             00002C34
MIOS_MIDI_RxBufferUsed            00002C38
MIOS_MIDI_TxBufferFlush           00002C3C
MIOS_MIDI_TxBufferFree            00002C40
MIOS_MIDI_TxBufferGet             00002C44
MIOS_MIDI_TxBufferPut             00002C48
MIOS_MIDI_TxBufferUsed            00002C4C
MIOS_MPROC_EVENT_TABLE            00003080
MIOS_MPROC_MergerDisable          00002C50
MIOS_MPROC_MergerEnable           00002C54
MIOS_MPROC_MergerGet              00002C58
MIOS_PARAMETER1                   00000003
MIOS_PARAMETER2                   00000004
MIOS_PARAMETER3                   00000005
MIOS_RESERVED_144                 00002E40
MIOS_RESERVED_145                 00002E44
MIOS_RESERVED_146                 00002E48
MIOS_RESERVED_147                 00002E4C
MIOS_RESERVED_148                 00002E50
MIOS_RESERVED_149                 00002E54
MIOS_RESERVED_150                 00002E58
MIOS_RESERVED_151                 00002E5C
MIOS_RESERVED_152                 00002E60
MIOS_RESERVED_153                 00002E64
MIOS_RESERVED_154                 00002E68
MIOS_RESERVED_155                 00002E6C
MIOS_RESERVED_156                 00002E70
MIOS_RESERVED_157                 00002E74
MIOS_RESERVED_158                 00002E78
MIOS_RESERVED_159                 00002E7C
MIOS_RESERVED_160                 00002E80
MIOS_RESERVED_161                 00002E84
MIOS_RESERVED_162                 00002E88
MIOS_RESERVED_163                 00002E8C
MIOS_RESERVED_164                 00002E90
MIOS_RESERVED_165                 00002E94
MIOS_RESERVED_166                 00002E98
MIOS_RESERVED_167                 00002E9C
MIOS_RESERVED_168                 00002EA0
MIOS_RESERVED_169                 00002EA4
MIOS_RESERVED_170                 00002EA8
MIOS_RESERVED_171                 00002EAC
MIOS_RESERVED_172                 00002EB0
MIOS_RESERVED_173                 00002EB4
MIOS_RESERVED_174                 00002EB8
MIOS_RESERVED_175                 00002EBC
MIOS_RESERVED_176                 00002EC0
MIOS_RESERVED_177                 00002EC4
MIOS_RESERVED_178                 00002EC8
MIOS_RESERVED_179                 00002ECC
MIOS_RESERVED_180                 00002ED0
MIOS_RESERVED_181                 00002ED4
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 539


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIOS_RESERVED_182                 00002ED8
MIOS_RESERVED_183                 00002EDC
MIOS_RESERVED_184                 00002EE0
MIOS_RESERVED_185                 00002EE4
MIOS_RESERVED_186                 00002EE8
MIOS_RESERVED_187                 00002EEC
MIOS_RESERVED_188                 00002EF0
MIOS_RESERVED_189                 00002EF4
MIOS_RESERVED_190                 00002EF8
MIOS_RESERVED_191                 00002EFC
MIOS_RESERVED_192                 00002F00
MIOS_RESERVED_193                 00002F04
MIOS_RESERVED_194                 00002F08
MIOS_RESERVED_195                 00002F0C
MIOS_RESERVED_196                 00002F10
MIOS_RESERVED_197                 00002F14
MIOS_RESERVED_198                 00002F18
MIOS_RESERVED_199                 00002F1C
MIOS_RESERVED_200                 00002F20
MIOS_RESERVED_201                 00002F24
MIOS_RESERVED_202                 00002F28
MIOS_RESERVED_203                 00002F2C
MIOS_RESERVED_204                 00002F30
MIOS_RESERVED_205                 00002F34
MIOS_RESERVED_206                 00002F38
MIOS_RESERVED_207                 00002F3C
MIOS_RESERVED_208                 00002F40
MIOS_RESERVED_209                 00002F44
MIOS_RESERVED_210                 00002F48
MIOS_RESERVED_211                 00002F4C
MIOS_RESERVED_212                 00002F50
MIOS_RESERVED_213                 00002F54
MIOS_RESERVED_214                 00002F58
MIOS_RESERVED_215                 00002F5C
MIOS_RESERVED_216                 00002F60
MIOS_RESERVED_217                 00002F64
MIOS_RESERVED_218                 00002F68
MIOS_RESERVED_219                 00002F6C
MIOS_RESERVED_220                 00002F70
MIOS_RESERVED_221                 00002F74
MIOS_RESERVED_222                 00002F78
MIOS_RESERVED_223                 00002F7C
MIOS_RESERVED_224                 00002F80
MIOS_RESERVED_225                 00002F84
MIOS_RESERVED_226                 00002F88
MIOS_RESERVED_227                 00002F8C
MIOS_RESERVED_228                 00002F90
MIOS_RESERVED_229                 00002F94
MIOS_RESERVED_230                 00002F98
MIOS_RESERVED_231                 00002F9C
MIOS_RESERVED_232                 00002FA0
MIOS_RESERVED_233                 00002FA4
MIOS_RESERVED_234                 00002FA8
MIOS_RESERVED_235                 00002FAC
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 540


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
MIOS_RESERVED_236                 00002FB0
MIOS_RESERVED_237                 00002FB4
MIOS_RESERVED_238                 00002FB8
MIOS_RESERVED_239                 00002FBC
MIOS_RESERVED_240                 00002FC0
MIOS_RESERVED_241                 00002FC4
MIOS_RESERVED_242                 00002FC8
MIOS_RESERVED_243                 00002FCC
MIOS_RESERVED_244                 00002FD0
MIOS_RESERVED_245                 00002FD4
MIOS_RESERVED_246                 00002FD8
MIOS_RESERVED_247                 00002FDC
MIOS_RESERVED_248                 00002FE0
MIOS_RESERVED_249                 00002FE4
MIOS_RESERVED_250                 00002FE8
MIOS_RESERVED_251                 00002FEC
MIOS_RESERVED_252                 00002FF0
MIOS_RESERVED_253                 00002FF4
MIOS_RESERVED_254                 00002FF8
MIOS_RESERVED_255                 00002FFC
MIOS_Reset                        00002DA4
MIOS_SRIO_DebounceGet             00002E28
MIOS_SRIO_DebounceSet             00002E24
MIOS_SRIO_NumberGet               00002CEC
MIOS_SRIO_NumberSet               00002CF0
MIOS_SRIO_TS_SensitivityGet       00002CF4
MIOS_SRIO_TS_SensitivitySet       00002CF8
MIOS_SRIO_UpdateFrqGet            00002CFC
MIOS_SRIO_UpdateFrqSet            00002D00
MIOS_SystemResume                 00002DA8
MIOS_SystemSuspend                00002DAC
MIOS_TIMER_Init                   00002D78
MIOS_TIMER_ReInit                 00002E3C
MIOS_TIMER_Start                  00002D7C
MIOS_TIMER_Stop                   00002D80
MIOS_UserResume                   00002DB0
MIOS_UserSuspend                  00002DB4
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_RI                            00000004
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NO_EVENT_FLAG_SO_EXIT             00006458
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 541


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
OBF                               00000006
OERR                              00000001
OSC2                              00000006
OSCCON                            00000FD3
OV                                00000003
P                                 00000004
PATCH_DATA_LOADING_Failed         00004364
PATCH_LOAD                        0000407C
PATCH_LOAD_CHK_FX_B               00004248
PATCH_LOAD_CHK_FX_C               00004256
PATCH_LOAD_CHK_NOISE_A            00004208
PATCH_LOAD_CHK_NOISE_B            00004216
PATCH_LOAD_CHK_NOISE_C            00004224
PATCH_LOAD_CHK_TONE_B_ON_OFF      000041EC
PATCH_LOAD_CHK_TONE_C             000041FA
PATCH_LOAD_CS_NOISE_A_OFF         00004212
PATCH_LOAD_CS_NOISE_B_OFF         00004220
PATCH_LOAD_CS_TONE_A_OFF          000041E8
PATCH_LOAD_CS_TONE_B_OFF          000041F6
PATCH_LOAD_CS_TONE_C_OFF          00004204
PATCH_LOAD_DO                     000040C6
PATCH_LOAD_FX_USER_ON_OFF         00004232
PATCH_LOAD_LED_CS_FX_A_OFF        00004244
PATCH_LOAD_LED_CS_FX_B_OFF        00004252
PATCH_LOAD_LED_CS_FX_C_OFF        00004260
PATCH_LOAD_OK                     00004340
PATCH_MENU_STATE_FLAGS            0000007D
PATCH_NAME_ASC_0                  00000303
PATCH_NAME_ASC_1                  00000304
PATCH_NAME_ASC_2                  00000305
PATCH_NAME_ASC_3                  00000306
PATCH_NAME_ASC_4                  00000307
PATCH_NAME_ASC_5                  00000308
PATCH_NAME_ASC_6                  00000309
PATCH_NAME_ASC_7                  0000030A
PATCH_NAME_ASC_KEY                00000300
PATCH_NAME_ASC_POS                00000301
PATCH_WRITE                       00003E4E
PATCH_WRITE_CHECK_IF_BANKSTICK_IS_FORMATTED  00003E6C
PATCH_WRITE_DO                    00003E70
PATCH_WRITE_DO_FORMAT_BANKSTICK   00003832
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PEIE                              00000006
PEN                               00000002
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 542


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
PIR2                              00000FA1
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
PLUS_FIRST_KEY_STRIKE_DELAY_CYCLE  0000652C
PLUS_KEY_AUTO_REPEAT_DELAY_CYCLE  0000653E
PLUS_KEY_DO_AUTO_REPEAT           0000654A
PLUS_KEY_DO_FINISH_FIRST_KEY_STRIKE_DELAY_CYCLE  00006538
PLUS_KEY_DO_INC_FIRST_KEY_STRIKE_CYCLE_COUNTER  00006534
PLUS_KEY_DO_INC_KEY_AUTO_REPEAT_CUNTER  00006546
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU0  00005BA6
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU1  00005BAA
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU2  00005BC2
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU3  00005C58
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU4  00005C82
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU5  00005D06
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU6  00005D6C
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU7  00005DCC
PLUS_KEY_SUBROUTINE_AT_MAIN_MENU8  00005E3A
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTD                             00000F83
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRODH                             00000FF4
PRODL                             00000FF3
PSA                               00000003
PSP0                              00000000
PSP1                              00000001
PSP2                              00000002
PSP3                              00000003
PSP4                              00000004
PSP5                              00000005
PSP6                              00000006
PSP7                              00000007
PSPIE                             00000007
PSPIF                             00000007
PSPIP                             00000007
PSPMODE                           00000004
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 543


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD0                               00000000
RD1                               00000001
RD16                              00000007
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
RESET_PATCH_NAME                  000043F4
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 544


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
R_W                               00000002
S                                 00000003
SCK                               00000003
SCL                               00000003
SCS                               00000000
SDA                               00000004
SDI                               00000004
SDO                               00000005
SEN                               00000000
SET_FX_POS_TO_MAX                 000061B6
SMP                               00000007
SM_BUTTON_COLUMN                  00000014
SM_BUTTON_COLUMN_CTR              00000018
SM_BUTTON_ROW                     00000015
SM_BUTTON_VALUE                   00000016
SM_ButtonHandler                  0000337E
SM_ButtonHandler_Loop             00003382
SM_ButtonHandler_Loop_Next        000033AE
SM_C64_KEY_NotifyToggle           00007E74
SM_DRIVER_KEYBOARD_KEY            00000076
SM_GetRow                         00003352
SM_Init                           0000330E
SM_Init_Loop1                     00003316
SM_Init_Loop2                     00003324
SM_KEYB_KEY_GATE                  00000078
SM_KEYB_KEY_STATE                 00000077
SM_NotifyToggle                   0000341C
SM_NotifyToggle_Pin0              000033B8
SM_NotifyToggle_Pin1              000033BE
SM_NotifyToggle_Pin2              000033C4
SM_NotifyToggle_Pin3              000033CA
SM_NotifyToggle_Pin4              000033D0
SM_NotifyToggle_Pin5              000033D6
SM_NotifyToggle_Pin6              000033DC
SM_NotifyToggle_Pin7              000033E2
SM_NotifyToggle_Pin_Cont          000033E6
SM_PrepareCol                     0000333E
SM_ROW0_CHANGED                   00000108
SM_ROW0_VALUE                     00000100
SM_ROW1_CHANGED                   00000109
SM_ROW1_VALUE                     00000101
SM_ROW2_CHANGED                   0000010A
SM_ROW2_VALUE                     00000102
SM_ROW3_CHANGED                   0000010B
SM_ROW3_VALUE                     00000103
SM_ROW4_CHANGED                   0000010C
SM_ROW4_VALUE                     00000104
SM_ROW5_CHANGED                   0000010D
SM_ROW5_VALUE                     00000105
SM_ROW6_CHANGED                   0000010E
SM_ROW6_VALUE                     00000106
SM_ROW7_CHANGED                   0000010F
SM_ROW7_VALUE                     00000107
SM_SELECTED_COLUMN                00000017
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 545


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
SPBRG                             00000FAF
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
SUB_MENU_DOWN_MAIN_MENU0          00005A82
SUB_MENU_DOWN_MAIN_MENU1          00005A86
SUB_MENU_DOWN_MAIN_MENU2          00005AA4
SUB_MENU_DOWN_MAIN_MENU3          00005AC2
SUB_MENU_DOWN_MAIN_MENU4          00005ADE
SUB_MENU_DOWN_MAIN_MENU5          00005AFC
SUB_MENU_DOWN_MAIN_MENU6          00005B1A
SUB_MENU_DOWN_MAIN_MENU7          00005B38
SUB_MENU_DOWN_MAIN_MENU8          00005B56
SUB_MENU_UP_MAIN_MENU0            00005980
SUB_MENU_UP_MAIN_MENU1            00005982
SUB_MENU_UP_MAIN_MENU2            0000599E
SUB_MENU_UP_MAIN_MENU3            000059BA
SUB_MENU_UP_MAIN_MENU4            000059D6
SUB_MENU_UP_MAIN_MENU5            000059F2
SUB_MENU_UP_MAIN_MENU6            00005A0E
SUB_MENU_UP_MAIN_MENU7            00005A2A
SUB_MENU_UP_MAIN_MENU8            00005A46
SWDTE                             00000000
SWDTEN                            00000000
SWITCH_BETWEEN_MAIN_AND_SUBMENU   00000073
SYNC                              00000004
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0IP                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 546


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
T0SE                              00000004
T1CKI                             00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1INSYNC                          00000002
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3INSYNC                          00000002
T3SYNC                            00000002
TABLAT                            00000FF5
TABLE_NOTE_TO_HZ                  0000348E
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TEXT_AY_MB_AY_BANKSTICK_NOT_FORMATED  0000394C
TEXT_AY_MB_AY_MENUE_SWITCH_ROW1   000038F4
TEXT_AY_MB_AY_MENUE_SWITCH_ROW2   00003906
TEXT_AY_MB_AY_MENUE_SWITCH_ROW3   00003918
TEXT_AY_MB_AY_MENUE_SWITCH_ROW4   0000392A
TEXT_AY_MB_AY_PATCH_BS_PATCH      00003980
TEXT_AY_MB_AY_PATCH_DO            0000398A
TEXT_AY_MB_AY_PATCH_ERROR         000039F4
TEXT_AY_MB_AY_PATCH_EXE           0000399C
TEXT_AY_MB_AY_PATCH_EXE_JUST_FORMAT  000039D2
TEXT_AY_MB_AY_PATCH_EXE_NO_FORMAT  000039AE
TEXT_AY_MB_AY_PATCH_EXE_NO_LT_ERT_FMT  000039C0
TEXT_AY_MB_AY_PATCH_FORMATTING_BS  000039FC
TEXT_AY_MB_AY_PATCH_INT_PATCH     00003976
TEXT_AY_MB_AY_PATCH_LOAD_OK       000039EC
TEXT_AY_MB_AY_PATCH_NAME          0000393A
TEXT_AY_MB_AY_PATCH_NO_BS         0000395E
TEXT_AY_MB_AY_PATCH_NR            00003970
TEXT_AY_MB_AY_PATCH_WRITE_OK      000039E4
TEXT_AY_MENU3_FX_A_OFF            00003A2C
TEXT_AY_MENU3_FX_A_ON             00003A30
TEXT_AY_MENU3_FX_B_OFF            00003A34
TEXT_AY_MENU3_FX_B_ON             00003A38
TEXT_AY_MENU3_FX_C_OFF            00003A3C
TEXT_AY_MENU3_FX_C_ON             00003A40
TEXT_AY_MENU_ABC_TUNE             00003A00
TEXT_AY_MENU_ABC_TUNE_CHA_TUNE    00003A12
TEXT_AY_MENU_ABC_TUNE_CHB_TUNE    00003A18
TEXT_AY_MENU_ABC_TUNE_CHC_TUNE    00003A1E
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 547


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TEXT_AY_MENU_AMPLITUDE_CH_A       00003ABC
TEXT_AY_MENU_AMPLITUDE_CH_A_ENV   00003ADA
TEXT_AY_MENU_AMPLITUDE_CH_A_VELOC  00003AF8
TEXT_AY_MENU_AMPLITUDE_CH_B       00003AC6
TEXT_AY_MENU_AMPLITUDE_CH_B_ENV   00003AE4
TEXT_AY_MENU_AMPLITUDE_CH_B_VELOC  00003B02
TEXT_AY_MENU_AMPLITUDE_CH_C       00003AD0
TEXT_AY_MENU_AMPLITUDE_CH_C_ENV   00003AEE
TEXT_AY_MENU_AMPLITUDE_CH_C_VELOC  00003B0C
TEXT_AY_MENU_AMPLITUDE_HEADLINE   00003AAA
TEXT_AY_MENU_ENVELOPE_COASE       00003B16
TEXT_AY_MENU_ENVELOPE_FINE        00003B22
TEXT_AY_MENU_ENVELOPE_MODE        00003B36
TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_A  00003B4E
TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_B  00003B52
TEXT_AY_MENU_ENVELOPE_MODE_NOT_SET_C  00003B56
TEXT_AY_MENU_ENVELOPE_MODE_SET_A  00003B42
TEXT_AY_MENU_ENVELOPE_MODE_SET_B  00003B46
TEXT_AY_MENU_ENVELOPE_MODE_SET_C  00003B4A
TEXT_AY_MENU_ENVELOPE_SHAPE       00003B2E
TEXT_AY_MENU_ENVELOPE_SHAPE_0_3   00003B5A
TEXT_AY_MENU_ENVELOPE_SHAPE_10    00003B74
TEXT_AY_MENU_ENVELOPE_SHAPE_11    00003B80
TEXT_AY_MENU_ENVELOPE_SHAPE_12    00003B88
TEXT_AY_MENU_ENVELOPE_SHAPE_13    00003B92
TEXT_AY_MENU_ENVELOPE_SHAPE_14    00003B96
TEXT_AY_MENU_ENVELOPE_SHAPE_4_7   00003B60
TEXT_AY_MENU_ENVELOPE_SHAPE_8     00003B6A
TEXT_AY_MENU_MIXER_FX_ON_OFF      00003A24
TEXT_AY_MENU_NOISE_PERIOD         00003A8A
TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_A  00003A98
TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_B  00003A9E
TEXT_AY_MENU_NOISE_PERIOD_VELOCITY_C  00003AA4
TEXT_AY_MENU_TONE_ABC_MIX_A_NOT   00003A4E
TEXT_AY_MENU_TONE_ABC_MIX_A_SET   00003A52
TEXT_AY_MENU_TONE_ABC_MIX_B_NOT   00003A56
TEXT_AY_MENU_TONE_ABC_MIX_B_SET   00003A5A
TEXT_AY_MENU_TONE_ABC_MIX_C_NOT   00003A5E
TEXT_AY_MENU_TONE_ABC_MIX_C_SET   00003A62
TEXT_AY_MENU_TONE_ABC_MIX_NOISE_A_NOT  00003A72
TEXT_AY_MENU_TONE_ABC_MIX_NOISE_A_SET  00003A76
TEXT_AY_MENU_TONE_ABC_MIX_NOISE_B_NOT  00003A7A
TEXT_AY_MENU_TONE_ABC_MIX_NOISE_B_SET  00003A7E
TEXT_AY_MENU_TONE_ABC_MIX_NOISE_C_NOT  00003A82
TEXT_AY_MENU_TONE_ABC_MIX_NOISE_C_SET  00003A86
TEXT_AY_MENU_TONE_ABC_NOISE_MIX   00003A44
TEXT_AY_MENU_TONE_ABC_NOISE_MIX2  00003A66
TEXT_AY_MIDI_CONFIG_ROW1          00003BA0
TEXT_AY_MIDI_CONFIG_ROW2          00003BB2
TEXT_AY_MIDI_CONFIG_ROW3          00003BC4
TEXT_AY_MIDI_CONFIG_ROW4          00003BD6
TEXT_AY_START_SCREEN_ROW1         000038BA
TEXT_AY_START_SCREEN_ROW2         000038C4
TEXT_AY_START_SCREEN_ROW3         000038D0
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 548


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TEXT_AY_START_SCREEN_ROW4         000038E2
TEXT_AY_VELOCITY_CONFIG_ROW1      00003BE8
TEXT_AY_VELOCITY_CONFIG_ROW2      00003BF4
TEXT_AY_VELOCITY_CONFIG_ROW3      00003C00
TEXT_AY_VELOCITY_CONFIG_ROW4      00003C0C
TEXT_MB_AY_MENUE_FX_FUNC0         00003C38
TEXT_MB_AY_MENUE_FX_FUNC1         00003C42
TEXT_MB_AY_MENUE_FX_FUNC10        00003C9C
TEXT_MB_AY_MENUE_FX_FUNC11        00003CAA
TEXT_MB_AY_MENUE_FX_FUNC12        00003CB8
TEXT_MB_AY_MENUE_FX_FUNC13        00003CC6
TEXT_MB_AY_MENUE_FX_FUNC14        00003CD4
TEXT_MB_AY_MENUE_FX_FUNC15        00003CE2
TEXT_MB_AY_MENUE_FX_FUNC16        00003CF0
TEXT_MB_AY_MENUE_FX_FUNC17        00003CFE
TEXT_MB_AY_MENUE_FX_FUNC18        00003D0C
TEXT_MB_AY_MENUE_FX_FUNC19        00003D1A
TEXT_MB_AY_MENUE_FX_FUNC2         00003C4A
TEXT_MB_AY_MENUE_FX_FUNC20        00003D28
TEXT_MB_AY_MENUE_FX_FUNC21        00003D36
TEXT_MB_AY_MENUE_FX_FUNC22        00003D44
TEXT_MB_AY_MENUE_FX_FUNC23        00003D52
TEXT_MB_AY_MENUE_FX_FUNC24        00003D5E
TEXT_MB_AY_MENUE_FX_FUNC25        00003D6A
TEXT_MB_AY_MENUE_FX_FUNC26        00003D76
TEXT_MB_AY_MENUE_FX_FUNC27        00003D82
TEXT_MB_AY_MENUE_FX_FUNC28        00003D8E
TEXT_MB_AY_MENUE_FX_FUNC29        00003D9A
TEXT_MB_AY_MENUE_FX_FUNC3         00003C52
TEXT_MB_AY_MENUE_FX_FUNC30        00003DA8
TEXT_MB_AY_MENUE_FX_FUNC31        00003DB4
TEXT_MB_AY_MENUE_FX_FUNC32        00003DC2
TEXT_MB_AY_MENUE_FX_FUNC33        00003DD0
TEXT_MB_AY_MENUE_FX_FUNC34        00003DDE
TEXT_MB_AY_MENUE_FX_FUNC35        00003DEC
TEXT_MB_AY_MENUE_FX_FUNC36        00003DFA
TEXT_MB_AY_MENUE_FX_FUNC37        00003E08
TEXT_MB_AY_MENUE_FX_FUNC38        00003E16
TEXT_MB_AY_MENUE_FX_FUNC39        00003E24
TEXT_MB_AY_MENUE_FX_FUNC4         00003C5A
TEXT_MB_AY_MENUE_FX_FUNC40        00003E32
TEXT_MB_AY_MENUE_FX_FUNC41        00003E40
TEXT_MB_AY_MENUE_FX_FUNC5         00003C62
TEXT_MB_AY_MENUE_FX_FUNC6         00003C6A
TEXT_MB_AY_MENUE_FX_FUNC7         00003C72
TEXT_MB_AY_MENUE_FX_FUNC8         00003C80
TEXT_MB_AY_MENUE_FX_FUNC9         00003C8E
TEXT_MB_AY_MENUE_FX_ROW1          00003C18
TEXT_MB_AY_MENUE_FX_ROW2          00003C20
TEXT_MB_AY_MENUE_FX_ROW3          00003C2A
TEXT_MB_AY_MENUE_FX_ROW4          00003C2E
TMP1                              00000006
TMP2                              00000007
TMP3                              00000008
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 549


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TMP4                              00000009
TMP5                              0000000A
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000F92
TRISB                             00000F93
TRISC                             00000F94
TRISD                             00000F95
TRISE                             00000F96
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TUNE_COARSE_TEMP                  0000001E
TUNE_FINE_TEMP                    0000001F
TX                                00000006
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 550


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
USER_AIN_NotifyChange             00007E86
USER_DIN_NotifyToggle             00007E72
USER_DISPLAY_Init                 00007E54
USER_DISPLAY_Tick                 00007E5C
USER_ENC_NotifyChange             00007E78
USER_Init                         00007E18
USER_LCD_Clear                    00003302
USER_LCD_Cmd                      0000330A
USER_LCD_CursorSet                00003304
USER_LCD_Data                     00003308
USER_LCD_Init                     00003300
USER_LCD_PrintChar                00003306
USER_LCD_SpecialCharInit          0000330C
USER_MIDI_NotifyRx                00007E70
USER_MIDI_NotifyTx                00007E6E
USER_MPROC_DebugTrigger           00007E52
USER_MPROC_NotifyFoundEvent       00007E68
USER_MPROC_NotifyReceivedByte     00007E6C
USER_MPROC_NotifyReceivedEvent    00007E62
USER_MPROC_NotifyTimeout          00007E6A
USER_RESERVED_25                  00003060
USER_RESERVED_26                  00003064
USER_RESERVED_27                  00003068
USER_RESERVED_28                  0000306C
USER_RESERVED_29                  00003070
USER_RESERVED_30                  00003074
USER_RESERVED_31                  00003078
USER_RESERVED_32                  0000307C
USER_SR_Service_Finish            00007E80
USER_SR_Service_Prepare           00007E7A
USER_TICK_CC_DO_MAIN_MENU_REDRAW  00006504
USER_TICK_CC_DO_NO_REDRAW         000064AA
USER_TICK_PITCH_BEND_CHECK_IF_MAIN_MENU_IS_2  000064F8
USER_Tick                         00007E3E
USER_Timer                        00007E4C
VREFM                             00000002
VREFP                             00000003
W                                 00000000
WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_ALL_FX_PATCH_DATA_TO_BANKSTICK  00003FB8
WRITE_ALL_FX_PATCH_DATA_TO_EEPROM  00003F58
WRITE_ENV_01_TO_LCD               000055F2
WRITE_ENV_02_TO_LCD               00005600
WRITE_ENV_03_TO_LCD               0000560E
WRITE_ENV_04_TO_LCD               0000561C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 551


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
WRITE_ENV_05_TO_LCD               0000562A
WRITE_ENV_06_TO_LCD               00005638
WRITE_ENV_07_TO_LCD               00005646
WRITE_ENV_08_TO_LCD               00005654
WRITE_ENV_NAME_TO_LCD_CALL        000055D2
WRITE_FX_TUNE_1_2_3               00007C90
WRITE_PATCH_DATA_BYTE             0000402E
WRITE_PATCH_DATA_BYTE_TO_BANKSTICK  0000403A
WRITE_PATCH_FINGERPRINT           0000404E
WRITE_PATCH_FINGERPRINT_BANKSTICK  0000405E
WRITE_PATCH_FINISH                00004008
WRITE_PATCH_FINISH_WRITE_ON_LCD   00004014
WRITE_PATCH_FX_DATA_TO_BANKSTICK  00003FD2
WRITE_PATCH_FX_DATA_TO_EEPROM     00003F78
WRITE_PATCH_FX_FUNC_TO_BANKSTICK  00003FB8
WRITE_PATCH_FX_FUNC_TO_EEPROM     00003F58
WRITE_PATCH_FX_TIME_TO_BANKSTICK  00003FEC
WRITE_PATCH_FX_TIME_TO_EEPROM     00003F98
WRITE_PATCH_NAME_ASC_POS1         00004484
WRITE_PATCH_NAME_ASC_POS2         0000448A
WRITE_PATCH_NAME_ASC_POS3         00004490
WRITE_PATCH_NAME_ASC_POS4         00004496
WRITE_PATCH_NAME_ASC_POS5         0000449C
WRITE_PATCH_NAME_ASC_POS6         000044A2
WRITE_PATCH_NAME_ASC_POS7         000044A8
WRITE_PATCH_NAME_ASC_POS8         000044AE
WRITE_PATCH_NAME_ON_LCD           000044E4
Z                                 00000002
_BORV_20_2L                       000000FF
_BORV_27_2L                       000000FB
_BORV_42_2L                       000000F7
_BORV_45_2L                       000000F3
_BOR_OFF_2L                       000000FD
_BOR_ON_2L                        000000FF
_CCP2MX_OFF_3H                    000000FE
_CCP2MX_ON_3H                     000000FF
_CONFIG1H                         00300001
_CONFIG1L                         00300000
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG3L                         00300004
_CONFIG4H                         00300007
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 552


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CP3_OFF_5L                       000000FF
_CP3_ON_5L                        000000F7
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTR3_OFF_7L                     000000FF
_EBTR3_ON_7L                      000000F7
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_ECIO_OSC_1H                      000000FD
_EC_OSC_1H                        000000FC
_HSPLL_OSC_1H                     000000FE
_HS_OSC_1H                        000000FA
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_LP_OSC_1H                        000000F8
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_OSCS_OFF_1H                      000000FF
_OSCS_ON_1H                       000000DF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_RCIO_OSC_1H                      000000FF
_RC_OSC_1H                        000000FB
_STVR_OFF_4L                      000000FE
_STVR_ON_4L                       000000FF
_USER_AIN_NotifyChange            00003028
_USER_DIN_NotifyToggle            00003020
_USER_DISPLAY_Init                00003010
_USER_DISPLAY_Tick                00003014
_USER_ENC_NotifyChange            00003024
_USER_LCD_Clear                   00003040
_USER_LCD_Cmd                     00003058
_USER_LCD_CursorSet               00003044
_USER_LCD_Data                    00003054
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 553


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_USER_LCD_Init                    0000303C
_USER_LCD_PrintChar               00003048
_USER_LCD_SpecialCharInit         0000305C
_USER_MIDI_NotifyRx               0000304C
_USER_MIDI_NotifyTx               00003050
_USER_MPROC_DebugTrigger          0000300C
_USER_MPROC_NotifyFoundEvent      00003038
_USER_MPROC_NotifyReceivedByte    0000302C
_USER_MPROC_NotifyReceivedEvent   00003034
_USER_MPROC_NotifyTimeout         00003030
_USER_SR_Service_Finish           0000301C
_USER_SR_Service_Prepare          00003018
_USER_Tick                        00003004
_USER_Timer                       00003008
_User_Init                        00003000
_WDTPS_128_2H                     000000FF
_WDTPS_16_2H                      000000F9
_WDTPS_1_2H                       000000F1
_WDTPS_2_2H                       000000F3
_WDTPS_32_2H                      000000FB
_WDTPS_4_2H                       000000F5
_WDTPS_64_2H                      000000FD
_WDTPS_8_2H                       000000F7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRT3_OFF_6L                      000000FF
_WRT3_ON_6L                       000000F7
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XT_OSC_1H                        000000F9
__18F452                          00000001
AY_CHIP_ADR_00_TONE_A_FREQUENCY_FINE  0x00
AY_CHIP_ADR_01_TONE_A_FREQUENCY_PERIOD_COARSE  0x01
AY_CHIP_ADR_02_TONE_B_FREQUENCY_PERIOD_FINE  0x02
AY_CHIP_ADR_03_TONE_B_FREQUENCY_PERIOD_COARSE  0x03
AY_CHIP_ADR_04_TONE_C_FREQUENCY_PERIOD_FINE  0x04
AY_CHIP_ADR_05_TONE_C_TONE_PERIOD_COARSE  0x05
AY_CHIP_ADR_06_NOISE_PERIOD       0x06
AY_CHIP_ADR_07_TONE_NOISE_ON_OFF  0x07
AY_CHIP_ADR_08_TONE_A_VOLUME_ENV_MODE_ON_OFF  0x08
AY_CHIP_ADR_09_TONE_B_VOLUME_ENV_MODE_ON_OFF  0x09
AY_CHIP_ADR_10_TONE_C_VOLUME_ENV_MODE_ON_OFF  0x0A
AY_CHIP_ADR_11_GLOBAL_ENVELOPE_FINE  0x0B
AY_CHIP_ADR_12_GLOBAL_ENVELOPE_COARSE  0x0C
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 554


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
AY_CHIP_ADR_13_ENVELOPE_SHAPE_AND_CYCLE  0x0D
AY_CHIP_ADR_14_IO_PORT_A_DATA     0x0E
AY_CHIP_ADR_15_IO_PORT_B_DATA     0x0F
BANKSTICK_ADR_FINGERPRINT         0x00
BANKSTICK_MAX_PATCH_NUMBER        127
BANKSTICK_OFFSET_FX_DATA          0x3D
BANKSTICK_OFFSET_FX_TIME_PRE_EXECUTION  0x5D
BANKSTICK_PATCH_FINGERPRINT       0x88
BANKSTICK_PATCH_OFFSET_FX_FUNCTION  0x1D
BIT0_BANKSTICK_FOUND              0
BIT0_FX_ON_OFF_TONE_A             0
BIT0_TONE_A_ON_OFF                0
BIT0_VELOCITY_ON_OFF_TONE_A       0
BIT1_BANKSTICK_SELECTED_PATCH_FORMATED  1
BIT1_FX_ON_OFF_TONE_B             1
BIT1_TONE_B_ON_OFF                1
BIT1_VELOCITY_ON_OFF_TONE_B       1
BIT2_FX_ON_OFF_TONE_C             2
BIT2_SELECTED_PATCH_BANKSTICK_OR_INTERNAL  2
BIT2_TONE_C_ON_OFF                2
BIT2_VELOCITY_ON_OFF_TONE_C       2
BIT3_NOISE_A_ON_OFF               3
BIT3_SELECTED_PATCH_FORMAT_BANKSTICK  3
BIT3_VELOCITY_TO_NOISE_PERIOD_ON_OFF  3
BIT4_ENVELOPE_ON_OFF              4
BIT4_NOISE_B_ON_OFF               4
BIT5_NOISE_C_ON_OFF               5
BIT5_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_A_ON_OFF  5
BIT5_VELOCITY_A_TO_NOISE_PERIOD_ON_OFF  5
BIT6_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_B_ON_OFF  6
BIT6_VELOCITY_B_TO_NOISE_PERIOD_ON_OFF  6
BIT7_NOISE_PERIOD_CONTROLED_VIA_VELOCITY_TONE_C_ON_OFF  7
BIT7_VELOCITY_C_TO_NOISE_PERIOD_ON_OFF  7
C64_KEY_AUTO_REPEAT_GENERAL_TIME  0x5F
CC22_VALUE_1                      0x01
CC22_VALUE_2                      0x02
CC22_VALUE_3                      0x03
CC_30_PITCH_BEND                  0x1E
CC_MAX_VALUE_29                   0x1D
CHK_POS_NEG_VIA_63                0x3F
CLEAR_OFFSET_128                  0x80
COARSE_TUNE_MAX_MINUS_1_B00001110  0x0E
COARSE_TUNE_MAX_VALUE_B00001111   0x0F
COARSE_TUNE_MIN_VALUE_B00000000   0x00
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
EEPROM_ADR_FINGERPRINT            0x00
EEPROM_OFFSET_FX_DATA             0x40
EEPROM_OFFSET_FX_FUNCTION         0x20
EEPROM_OFFSET_FX_TIME_PRE_EXECUTION  0x60
ENVELOPE_SHAPE_MAX_VALUE_8        0x08
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 555


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
FINE_TUNE_MAX_VALUE_B11010010     0xD2
FINE_TUNE_MIN_VALUE_B00001010     0x0A
FIRST_KEY_STRIKE_CYCLE_TIME       0x8F
FIRST_KEY_STRIKE_TRUE_OR_FALSE_BIT1  1
FX_FUNCTIONS_MAX                  0x29
FX_FUNCTIONS_MAX_PULS_1           0x2A
FX_POS_MAX                        0x1F
FX_POS_MAX_31                     0x1F
FX_POS_MAX_PLUS1                  0x20
Fx_DELAY_TIME_MAX                 0xC8
INI_COURSER_POS                   0x01
INI_FX_USER_ON_OFF_ABC            0x00
INI_MIDI_ALL_OFF                  0x3F
INI_MIOS_MIDI_MERGER_ON_OFF       0x01
INI_REG0_FINE_TUNE_A              0x40
INI_REG10_VOLUME_C_ENVELOPE_ON_OFF  0x0C
INI_REG11_ENVELOPE_FINE           0x0F
INI_REG12_ENVELOPE_COARSE         0x0F
INI_REG13_ENVELOPE_SHAPE          0x01
INI_REG14_IO_A                    0xAA
INI_REG15_IO_B                    0x00
INI_REG1_COARSE_TUNE_A            0x01
INI_REG2_FINE_TUNE_B              0x42
INI_REG3_COARSE_TUNE_B            0x09
INI_REG4_FINE_TUNE_C              0x44
INI_REG5_COARSE_TUNE_C            0x02
INI_REG6_NOISE_PERIOD             0x04
INI_REG7_TONE_ABC_NOISE_ABC_IO_AB  0xF8
INI_REG8_VOLUME_A_ENVELOPE_ON_OFF  0x0C
INI_REG9_VOLUME_B_ENVELOPE_ON_OFF  0x0C
INI_START_UP_MAIN_MENU            0x00
INI_SUB_MENU                      0x00
INI_TONE_A_MIDI_CHANNEL_USER      0x00
INI_TONE_B_MIDI_CHANNEL_USER      0x01
INI_TONE_C_MIDI_CHANNEL_USER      0x02
INI_TUNE_COARSE_USER              0x07
INI_TUNE_FINE_USER                0x80
INI_USER_TONE_ABC_NOISE_ABC_ON_OFF  0xF8
INI_VELOCITY_TO_ACB_NOISE_PERIOD  0x07
KEY_AUTO_REPEAT_TIME              0x0F
KEY_PRESSED_STATE_0               0x00
LCD_ROW1                          0x00
LCD_ROW2                          0x40
LCD_ROW3                          0x10
LCD_ROW4                          0x50
LED_EnvelopeModeA                 0x0E
LED_EnvelopeModeB                 0x0F
LED_EnvelopeModeC                 0x10
LED_Envelope_Shape_1              0x14
LED_Envelope_Shape_2              0x15
LED_Envelope_Shape_3              0x16
LED_Envelope_Shape_4              0x17
LED_Envelope_Shape_5              0x18
LED_Envelope_Shape_6              0x19
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 556


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
LED_Envelope_Shape_7              0x1A
LED_Envelope_Shape_8              0x1B
LED_Fx_A                          0x11
LED_Fx_B                          0x12
LED_Fx_C                          0x13
LED_NoiseA                        0x0B
LED_NoiseB                        0x0C
LED_NoiseC                        0x0D
LED_ToneA                         0x08
LED_ToneB                         0x09
LED_ToneC                         0x0A
MAIN_MENU_00                      0x00
MAIN_MENU_01                      0x01
MAIN_MENU_02                      0x02
MAIN_MENU_03                      0x03
MAIN_MENU_04                      0x04
MAIN_MENU_05                      0x05
MAIN_MENU_06                      0x06
MAIN_MENU_07                      0x07
MAIN_MENU_08                      0x08
MAIN_MENU_ON_VIA_0                0x00
MENU_ITEM_POS0_NOT_VALID          0x00
MENU_ITEM_POS1                    0x01
MENU_ITEM_POS2                    0x02
MENU_ITEM_POS3                    0x03
MENU_ITEM_POS4                    0x04
MENU_ITEM_POS5                    0x05
MENU_ITEM_POS6                    0x06
MIDI_CH_PLUS_1_OFFSETT            0x01
MIDI_FILTER_ALL_OFF               0x3F
MINUS_SUBMENU_KEY_VALUE           0x04
NIBBLE_B00001111                  0x0F
NOISE_PERIOD_MAX_VALUE            0x1F
OFFSET_COARSE_TUNE_IS_7           0x07
OFFSET_FINE_TUNE_IS_128           0x80
PATCH_NAME_ASC_CODE_0_MINUS1      0x2F
PATCH_NAME_ASC_CODE_9_PLUS1       0x3A
PATCH_NAME_ASC_CODE_A_MINUS1      0x40
PATCH_NAME_ASC_CODE_DEL_KEY       0x14
PATCH_NAME_ASC_CODE_SPACE_KEY     0x5F
PATCH_NAME_ASC_CODE_Z_PLUS1       0x5B
PATCH_NAME_CURSOR_LEFT_KEY        0x9D
PATCH_NAME_CURSOR_POS_MAX         0x07
PATCH_NAME_CURSOR_RIGHT_KEY       0x1D
PATCH_NUMBER_VALUE_MAX            0x7F
PIC_DERIVATIVE_CMCON_INIT         0
PIC_DERIVATIVE_CODE_SIZE          0x08000
PIC_DERIVATIVE_EEPROM_SIZE        0x100
PIC_DERIVATIVE_IRQ_WORKAROUND     0
PIC_DERIVATIVE_NEW_ADC            0
PIC_DERIVATIVE_RAM_SIZE           0x600
PIC_DERIVATIVE_SET_LCD_4BIT       0
PIC_DERIVATIVE_T08BIT_INVERTED    0
PIC_INT_EEPROM_FINGERPRINT        0x12
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 557


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
PLUS_1_CARRY_BIT_KILLER           0x01
PLUS_POS_Fx                       5
PLUS_SUBMENU_KEY_VALUE            0x03
PROOF_POSITIVE_OR_NEGATIVE_VIA_0X06  0x06
PROOF_POSITIVE_OR_NEGATIVE_VIA_0X7F  0x7F
RAM_OFFSET_FX_DATA                0x40
RAM_OFFSET_FX_FUNCTION            0x20
RAM_OFFSET_FX_TIME_PRE_EXECUTION  0x60
SELECT_Fx_RAM_BANK                0x02
SM_COLUMN_DOUT                    0x00
SM_ROW_DIN                        0x00
SM_SWAP_CR                        0
START_SCREEN_TIME                 0x12
SWITCH_MAIN_MENU_OFF_SUB_MENU_ON_0x01  0x01
VOLUME_ABC_MAX_VALUE              0x0F
clrc                              bcf	STATUS, C
clrz                              bcf	STATUS, Z
rlf                               rlcf
rrf                               rrcf
setc                              bsf	STATUS, C
setz                              bsf	STATUS, Z
skpc                              btfss	STATUS, C
skpdc                             btfss	STATUS, DC
skpnc                             btfsc	STATUS, C
skpndc                            btfsc	STATUS, DC
skpnz                             btfsc	STATUS, Z
skpz                              btfss	STATUS, Z


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

00003000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000030c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000031c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000033c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000034c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000035c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 558


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00003640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000036c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000037c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000038c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000039c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00003fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000040c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000041c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000042c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 559


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
000043c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000044c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000045c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000046c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000047c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000048c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000049c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00004fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000050c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 560


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00005140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000051c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000052c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000053c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000054c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000055c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000056c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000057c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000058c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000059c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 561


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00005ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00005fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000060c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000061c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000062c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000063c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000064c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000065c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000066c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000067c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000068c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000069c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 562


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00006c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006e80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006ec0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006f00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006f40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006f80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00006fc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000070c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000071c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000072c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000073c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000074c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000075c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000076c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000077c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
000078c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
gpasm-0.13.6 beta               main.asm    11-7-2009  21:23:48          PAGE 563


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
000079c0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007a00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007a40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007a80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007ac0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007b00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007b40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007b80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007bc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007c00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007c40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007c80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007cc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007d00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007d40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007d80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007dc0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007e00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007e40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00007e80 : XXXXXXXX-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used: 9988


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

