gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 10-29-2008  12:45:28
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ; $Id: mios_wrapper.asm 63 2008-01-31 20:44:17Z tk $
                                           ;
                                           ; This is the MIOS wrapper for SDCC (qualified for v2.5.0 and v2.6.0)
                                           ;
                                           ; the upper boundary of the stacks are defined here 
                                           ; customize the values for your needs
                                           #ifndef STACK_HEAD
                                           #define STACK_HEAD 0x37f
                                           #endif
                                           
                                           #ifndef STACK_IRQ_HEAD
                                           #define STACK_IRQ_HEAD 0x33f
                                           #endif
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; ---[ MIOS header file ]---
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           
                                           ;; ---[ vectors to MIOS functions (never change!) ]---
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           
                                           ;; ---[ user hooks (never change!) ]---
                                           #include <user_vectors.inc>
                                           ; $Id: user_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; User vectortable - contains user hooks to MIOS
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           	;; never change the origin or the order of entries!
                                           	org	0x3000
                                           _User_Init
003000   efc8     goto	0x3d90              	goto	USER_Init
003002   f01e
                                           _USER_Tick
003004   efce     goto	0x3d9c              	goto	USER_Tick
003006   f01e
                                           _USER_Timer
003008   efd4     goto	0x3da8              	goto	USER_Timer
00300a   f01e
                                           _USER_MPROC_DebugTrigger
00300c   efe3     goto	0x3dc6              	goto	USER_MPROC_DebugTrigger
00300e   f01e
                                           _USER_DISPLAY_Init
003010   efe4     goto	0x3dc8              	goto	USER_DISPLAY_Init
003012   f01e
                                           _USER_DISPLAY_Tick
003014   efea     goto	0x3dd4              	goto	USER_DISPLAY_Tick
003016   f01e
                                           _USER_SR_Service_Prepare
003018   ef26     goto	0x3e4c              	goto	USER_SR_Service_Prepare
00301a   f01f
                                           _USER_SR_Service_Finish
00301c   ef35     goto	0x3e6a              	goto	USER_SR_Service_Finish
00301e   f01f
                                           _USER_DIN_NotifyToggle
003020   ef16     goto	0x3e2c              	goto	USER_DIN_NotifyToggle
003022   f01f
                                           _USER_ENC_NotifyChange
003024   ef1e     goto	0x3e3c              	goto	USER_ENC_NotifyChange
003026   f01f
                                           _USER_AIN_NotifyChange
003028   ef44     goto	0x3e88              	goto	USER_AIN_NotifyChange
00302a   f01f
                                           _USER_MPROC_NotifyReceivedByte
00302c   ef0e     goto	0x3e1c              	goto	USER_MPROC_NotifyReceivedByte
00302e   f01f
                                           _USER_MPROC_NotifyTimeout
003030   ef08     goto	0x3e10              	goto	USER_MPROC_NotifyTimeout
003032   f01f
                                           _USER_MPROC_NotifyReceivedEvent
003034   eff0     goto	0x3de0              	goto	USER_MPROC_NotifyReceivedEvent
003036   f01e
                                           _USER_MPROC_NotifyFoundEvent
003038   effb     goto	0x3df6              	goto	USER_MPROC_NotifyFoundEvent
00303a   f01e
                                           _USER_LCD_Init
00303c   efe0     goto	0x45c0              	goto	USER_LCD_Init
00303e   f022
                                           _USER_LCD_Clear
003040   efe1     goto	0x45c2              	goto	USER_LCD_Clear
003042   f022
                                           _USER_LCD_CursorSet
003044   efe2     goto	0x45c4              	goto	USER_LCD_CursorSet
003046   f022
                                           _USER_LCD_PrintChar
003048   efe3     goto	0x45c6              	goto	USER_LCD_PrintChar
00304a   f022
                                           _USER_MIDI_NotifyRx
00304c   ef15     goto	0x3e2a              	goto	USER_MIDI_NotifyRx
00304e   f01f
                                           _USER_MIDI_NotifyTx
003050   ef14     goto	0x3e28              	goto	USER_MIDI_NotifyTx
003052   f01f
                                           _USER_LCD_Data
003054   efe4     goto	0x45c8              	goto	USER_LCD_Data
003056   f022
                                           _USER_LCD_Cmd
003058   efe5     goto	0x45ca              	goto	USER_LCD_Cmd
00305a   f022
                                           _USER_LCD_SpecialCharInit
00305c   efe6     goto	0x45cc              	goto	USER_LCD_SpecialCharInit
00305e   f022
                                           USER_RESERVED_25
003060   0012     return	0                 	return
003062   0000     nop                      	nop
                                           USER_RESERVED_26
003064   0012     return	0                 	return
003066   0000     nop                      	nop
                                           USER_RESERVED_27
003068   0012     return	0                 	return
00306a   0000     nop                      	nop
                                           USER_RESERVED_28
00306c   0012     return	0                 	return
00306e   0000     nop                      	nop
                                           USER_RESERVED_29
003070   0012     return	0                 	return
003072   0000     nop                      	nop
                                           USER_RESERVED_30
003074   0012     return	0                 	return
003076   0000     nop                      	nop
                                           USER_RESERVED_31
003078   0012     return	0                 	return
00307a   0000     nop                      	nop
                                           USER_RESERVED_32
00307c   0012     return	0                 	return
00307e   0000     nop                      	nop
                                           
                                           ;; ==========================================================================
                                           ;;  General Application Settings
                                           ;; ==========================================================================
                                           
                                           ;; ---[ configuration table for MIDI processor ]---
                                           #ifndef DONT_INCLUDE_MIOS_MT_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use MT entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_MT_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_MT_TABLE {
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x10), // CC#16
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x11), // CC#17
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x12), // CC#18
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x13), // CC#19
                                           ;;   MIOS_MT_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           ;; 
                                           ;; Note that due to the inflexibility of the MT Table concept, it isn't
                                           ;; recommented for new designs
                                           #include <mios_mt_table.inc>
                                           ; $Id: mios_mt_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" MIDI Trigger Configuaration Table
                                           ; 
                                           ; Should be included by the application, if the MIDI processor feature
                                           ; is not used in order to pre-initialize the table area with EOT's
                                           ;
                                           ; Note: due to the inflexible concept (e.g. handling of Note On/Off events),
                                           ; the usage of this function is not recommented for new designs - please parse 
                                           ; MIDI events locally within the application.
                                           ;
                                           ;
                                           	org	0x3080		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; The MIDI Trigger table maps incoming MIDI events to control elements
                                           ;; (pots/faders, encoders, buttons, LEDs, ...)
                                           ;; 
                                           ;; After the MIOS MIDI processor (MPROC) has received a complete event, it
                                           ;; searches in this table for a matching entry and calls USER_MPROC_NotifyFoundEvent
                                           ;; with the table index in WREG and the MIDI event in MIOS_PARAMETER[123]
                                           ;; 
                                           ;; Note also that the MIDI processor stops scanning the table after
                                           ;; the first MT_EOT entry
                                           ;; 
                                           ;; Note2: never change the origin (memory location) of this table!
                                           ;; 
                                           ;; Optionally this table can also be used to define events, which should be
                                           ;; transmitted (Example: see example_ain64_din128_dout128), so that incoming
                                           ;; and outgoing events are located at one place
                                           ;; 
                                           ;; The table *must* contain 256 entries. Unused entries should be filled with
                                           ;; MT_EOT.
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; MIDI Trigger entry structure
                                           MT_ENTRY MACRO event_0, event_1
                                           	dw	(event_1 << 8) | event_0
                                           	ENDM
                                           
                                           MT_EOT	MACRO
003080   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003082   ffff     dw	0xffff  ;unknown opcode 
003084   ffff     dw	0xffff  ;unknown opcode 
003086   ffff     dw	0xffff  ;unknown opcode 
003088   ffff     dw	0xffff  ;unknown opcode 
00308a   ffff     dw	0xffff  ;unknown opcode 
00308c   ffff     dw	0xffff  ;unknown opcode 
00308e   ffff     dw	0xffff  ;unknown opcode 
003090   ffff     dw	0xffff  ;unknown opcode 
003092   ffff     dw	0xffff  ;unknown opcode 
003094   ffff     dw	0xffff  ;unknown opcode 
003096   ffff     dw	0xffff  ;unknown opcode 
003098   ffff     dw	0xffff  ;unknown opcode 
00309a   ffff     dw	0xffff  ;unknown opcode 
00309c   ffff     dw	0xffff  ;unknown opcode 
00309e   ffff     dw	0xffff  ;unknown opcode 
0030a0   ffff     dw	0xffff  ;unknown opcode 
0030a2   ffff     dw	0xffff  ;unknown opcode 
0030a4   ffff     dw	0xffff  ;unknown opcode 
0030a6   ffff     dw	0xffff  ;unknown opcode 
0030a8   ffff     dw	0xffff  ;unknown opcode 
0030aa   ffff     dw	0xffff  ;unknown opcode 
0030ac   ffff     dw	0xffff  ;unknown opcode 
0030ae   ffff     dw	0xffff  ;unknown opcode 
0030b0   ffff     dw	0xffff  ;unknown opcode 
0030b2   ffff     dw	0xffff  ;unknown opcode 
0030b4   ffff     dw	0xffff  ;unknown opcode 
0030b6   ffff     dw	0xffff  ;unknown opcode 
0030b8   ffff     dw	0xffff  ;unknown opcode 
0030ba   ffff     dw	0xffff  ;unknown opcode 
0030bc   ffff     dw	0xffff  ;unknown opcode 
0030be   ffff     dw	0xffff  ;unknown opcode 
0030c0   ffff     dw	0xffff  ;unknown opcode 
0030c2   ffff     dw	0xffff  ;unknown opcode 
0030c4   ffff     dw	0xffff  ;unknown opcode 
0030c6   ffff     dw	0xffff  ;unknown opcode 
0030c8   ffff     dw	0xffff  ;unknown opcode 
0030ca   ffff     dw	0xffff  ;unknown opcode 
0030cc   ffff     dw	0xffff  ;unknown opcode 
0030ce   ffff     dw	0xffff  ;unknown opcode 
0030d0   ffff     dw	0xffff  ;unknown opcode 
0030d2   ffff     dw	0xffff  ;unknown opcode 
0030d4   ffff     dw	0xffff  ;unknown opcode 
0030d6   ffff     dw	0xffff  ;unknown opcode 
0030d8   ffff     dw	0xffff  ;unknown opcode 
0030da   ffff     dw	0xffff  ;unknown opcode 
0030dc   ffff     dw	0xffff  ;unknown opcode 
0030de   ffff     dw	0xffff  ;unknown opcode 
0030e0   ffff     dw	0xffff  ;unknown opcode 
0030e2   ffff     dw	0xffff  ;unknown opcode 
0030e4   ffff     dw	0xffff  ;unknown opcode 
0030e6   ffff     dw	0xffff  ;unknown opcode 
0030e8   ffff     dw	0xffff  ;unknown opcode 
0030ea   ffff     dw	0xffff  ;unknown opcode 
0030ec   ffff     dw	0xffff  ;unknown opcode 
0030ee   ffff     dw	0xffff  ;unknown opcode 
0030f0   ffff     dw	0xffff  ;unknown opcode 
0030f2   ffff     dw	0xffff  ;unknown opcode 
0030f4   ffff     dw	0xffff  ;unknown opcode 
0030f6   ffff     dw	0xffff  ;unknown opcode 
0030f8   ffff     dw	0xffff  ;unknown opcode 
0030fa   ffff     dw	0xffff  ;unknown opcode 
0030fc   ffff     dw	0xffff  ;unknown opcode 
0030fe   ffff     dw	0xffff  ;unknown opcode 
003100   ffff     dw	0xffff  ;unknown opcode 
003102   ffff     dw	0xffff  ;unknown opcode 
003104   ffff     dw	0xffff  ;unknown opcode 
003106   ffff     dw	0xffff  ;unknown opcode 
003108   ffff     dw	0xffff  ;unknown opcode 
00310a   ffff     dw	0xffff  ;unknown opcode 
00310c   ffff     dw	0xffff  ;unknown opcode 
00310e   ffff     dw	0xffff  ;unknown opcode 
003110   ffff     dw	0xffff  ;unknown opcode 
003112   ffff     dw	0xffff  ;unknown opcode 
003114   ffff     dw	0xffff  ;unknown opcode 
003116   ffff     dw	0xffff  ;unknown opcode 
003118   ffff     dw	0xffff  ;unknown opcode 
00311a   ffff     dw	0xffff  ;unknown opcode 
00311c   ffff     dw	0xffff  ;unknown opcode 
00311e   ffff     dw	0xffff  ;unknown opcode 
003120   ffff     dw	0xffff  ;unknown opcode 
003122   ffff     dw	0xffff  ;unknown opcode 
003124   ffff     dw	0xffff  ;unknown opcode 
003126   ffff     dw	0xffff  ;unknown opcode 
003128   ffff     dw	0xffff  ;unknown opcode 
00312a   ffff     dw	0xffff  ;unknown opcode 
00312c   ffff     dw	0xffff  ;unknown opcode 
00312e   ffff     dw	0xffff  ;unknown opcode 
003130   ffff     dw	0xffff  ;unknown opcode 
003132   ffff     dw	0xffff  ;unknown opcode 
003134   ffff     dw	0xffff  ;unknown opcode 
003136   ffff     dw	0xffff  ;unknown opcode 
003138   ffff     dw	0xffff  ;unknown opcode 
00313a   ffff     dw	0xffff  ;unknown opcode 
00313c   ffff     dw	0xffff  ;unknown opcode 
00313e   ffff     dw	0xffff  ;unknown opcode 
003140   ffff     dw	0xffff  ;unknown opcode 
003142   ffff     dw	0xffff  ;unknown opcode 
003144   ffff     dw	0xffff  ;unknown opcode 
003146   ffff     dw	0xffff  ;unknown opcode 
003148   ffff     dw	0xffff  ;unknown opcode 
00314a   ffff     dw	0xffff  ;unknown opcode 
00314c   ffff     dw	0xffff  ;unknown opcode 
00314e   ffff     dw	0xffff  ;unknown opcode 
003150   ffff     dw	0xffff  ;unknown opcode 
003152   ffff     dw	0xffff  ;unknown opcode 
003154   ffff     dw	0xffff  ;unknown opcode 
003156   ffff     dw	0xffff  ;unknown opcode 
003158   ffff     dw	0xffff  ;unknown opcode 
00315a   ffff     dw	0xffff  ;unknown opcode 
00315c   ffff     dw	0xffff  ;unknown opcode 
00315e   ffff     dw	0xffff  ;unknown opcode 
003160   ffff     dw	0xffff  ;unknown opcode 
003162   ffff     dw	0xffff  ;unknown opcode 
003164   ffff     dw	0xffff  ;unknown opcode 
003166   ffff     dw	0xffff  ;unknown opcode 
003168   ffff     dw	0xffff  ;unknown opcode 
00316a   ffff     dw	0xffff  ;unknown opcode 
00316c   ffff     dw	0xffff  ;unknown opcode 
00316e   ffff     dw	0xffff  ;unknown opcode 
003170   ffff     dw	0xffff  ;unknown opcode 
003172   ffff     dw	0xffff  ;unknown opcode 
003174   ffff     dw	0xffff  ;unknown opcode 
003176   ffff     dw	0xffff  ;unknown opcode 
003178   ffff     dw	0xffff  ;unknown opcode 
00317a   ffff     dw	0xffff  ;unknown opcode 
00317c   ffff     dw	0xffff  ;unknown opcode 
00317e   ffff     dw	0xffff  ;unknown opcode 
003180   ffff     dw	0xffff  ;unknown opcode 
003182   ffff     dw	0xffff  ;unknown opcode 
003184   ffff     dw	0xffff  ;unknown opcode 
003186   ffff     dw	0xffff  ;unknown opcode 
003188   ffff     dw	0xffff  ;unknown opcode 
00318a   ffff     dw	0xffff  ;unknown opcode 
00318c   ffff     dw	0xffff  ;unknown opcode 
00318e   ffff     dw	0xffff  ;unknown opcode 
003190   ffff     dw	0xffff  ;unknown opcode 
003192   ffff     dw	0xffff  ;unknown opcode 
003194   ffff     dw	0xffff  ;unknown opcode 
003196   ffff     dw	0xffff  ;unknown opcode 
003198   ffff     dw	0xffff  ;unknown opcode 
00319a   ffff     dw	0xffff  ;unknown opcode 
00319c   ffff     dw	0xffff  ;unknown opcode 
00319e   ffff     dw	0xffff  ;unknown opcode 
0031a0   ffff     dw	0xffff  ;unknown opcode 
0031a2   ffff     dw	0xffff  ;unknown opcode 
0031a4   ffff     dw	0xffff  ;unknown opcode 
0031a6   ffff     dw	0xffff  ;unknown opcode 
0031a8   ffff     dw	0xffff  ;unknown opcode 
0031aa   ffff     dw	0xffff  ;unknown opcode 
0031ac   ffff     dw	0xffff  ;unknown opcode 
0031ae   ffff     dw	0xffff  ;unknown opcode 
0031b0   ffff     dw	0xffff  ;unknown opcode 
0031b2   ffff     dw	0xffff  ;unknown opcode 
0031b4   ffff     dw	0xffff  ;unknown opcode 
0031b6   ffff     dw	0xffff  ;unknown opcode 
0031b8   ffff     dw	0xffff  ;unknown opcode 
0031ba   ffff     dw	0xffff  ;unknown opcode 
0031bc   ffff     dw	0xffff  ;unknown opcode 
0031be   ffff     dw	0xffff  ;unknown opcode 
0031c0   ffff     dw	0xffff  ;unknown opcode 
0031c2   ffff     dw	0xffff  ;unknown opcode 
0031c4   ffff     dw	0xffff  ;unknown opcode 
0031c6   ffff     dw	0xffff  ;unknown opcode 
0031c8   ffff     dw	0xffff  ;unknown opcode 
0031ca   ffff     dw	0xffff  ;unknown opcode 
0031cc   ffff     dw	0xffff  ;unknown opcode 
0031ce   ffff     dw	0xffff  ;unknown opcode 
0031d0   ffff     dw	0xffff  ;unknown opcode 
0031d2   ffff     dw	0xffff  ;unknown opcode 
0031d4   ffff     dw	0xffff  ;unknown opcode 
0031d6   ffff     dw	0xffff  ;unknown opcode 
0031d8   ffff     dw	0xffff  ;unknown opcode 
0031da   ffff     dw	0xffff  ;unknown opcode 
0031dc   ffff     dw	0xffff  ;unknown opcode 
0031de   ffff     dw	0xffff  ;unknown opcode 
0031e0   ffff     dw	0xffff  ;unknown opcode 
0031e2   ffff     dw	0xffff  ;unknown opcode 
0031e4   ffff     dw	0xffff  ;unknown opcode 
0031e6   ffff     dw	0xffff  ;unknown opcode 
0031e8   ffff     dw	0xffff  ;unknown opcode 
0031ea   ffff     dw	0xffff  ;unknown opcode 
0031ec   ffff     dw	0xffff  ;unknown opcode 
0031ee   ffff     dw	0xffff  ;unknown opcode 
0031f0   ffff     dw	0xffff  ;unknown opcode 
0031f2   ffff     dw	0xffff  ;unknown opcode 
0031f4   ffff     dw	0xffff  ;unknown opcode 
0031f6   ffff     dw	0xffff  ;unknown opcode 
0031f8   ffff     dw	0xffff  ;unknown opcode 
0031fa   ffff     dw	0xffff  ;unknown opcode 
0031fc   ffff     dw	0xffff  ;unknown opcode 
0031fe   ffff     dw	0xffff  ;unknown opcode 
003200   ffff     dw	0xffff  ;unknown opcode 
003202   ffff     dw	0xffff  ;unknown opcode 
003204   ffff     dw	0xffff  ;unknown opcode 
003206   ffff     dw	0xffff  ;unknown opcode 
003208   ffff     dw	0xffff  ;unknown opcode 
00320a   ffff     dw	0xffff  ;unknown opcode 
00320c   ffff     dw	0xffff  ;unknown opcode 
00320e   ffff     dw	0xffff  ;unknown opcode 
003210   ffff     dw	0xffff  ;unknown opcode 
003212   ffff     dw	0xffff  ;unknown opcode 
003214   ffff     dw	0xffff  ;unknown opcode 
003216   ffff     dw	0xffff  ;unknown opcode 
003218   ffff     dw	0xffff  ;unknown opcode 
00321a   ffff     dw	0xffff  ;unknown opcode 
00321c   ffff     dw	0xffff  ;unknown opcode 
00321e   ffff     dw	0xffff  ;unknown opcode 
003220   ffff     dw	0xffff  ;unknown opcode 
003222   ffff     dw	0xffff  ;unknown opcode 
003224   ffff     dw	0xffff  ;unknown opcode 
003226   ffff     dw	0xffff  ;unknown opcode 
003228   ffff     dw	0xffff  ;unknown opcode 
00322a   ffff     dw	0xffff  ;unknown opcode 
00322c   ffff     dw	0xffff  ;unknown opcode 
00322e   ffff     dw	0xffff  ;unknown opcode 
003230   ffff     dw	0xffff  ;unknown opcode 
003232   ffff     dw	0xffff  ;unknown opcode 
003234   ffff     dw	0xffff  ;unknown opcode 
003236   ffff     dw	0xffff  ;unknown opcode 
003238   ffff     dw	0xffff  ;unknown opcode 
00323a   ffff     dw	0xffff  ;unknown opcode 
00323c   ffff     dw	0xffff  ;unknown opcode 
00323e   ffff     dw	0xffff  ;unknown opcode 
003240   ffff     dw	0xffff  ;unknown opcode 
003242   ffff     dw	0xffff  ;unknown opcode 
003244   ffff     dw	0xffff  ;unknown opcode 
003246   ffff     dw	0xffff  ;unknown opcode 
003248   ffff     dw	0xffff  ;unknown opcode 
00324a   ffff     dw	0xffff  ;unknown opcode 
00324c   ffff     dw	0xffff  ;unknown opcode 
00324e   ffff     dw	0xffff  ;unknown opcode 
003250   ffff     dw	0xffff  ;unknown opcode 
003252   ffff     dw	0xffff  ;unknown opcode 
003254   ffff     dw	0xffff  ;unknown opcode 
003256   ffff     dw	0xffff  ;unknown opcode 
003258   ffff     dw	0xffff  ;unknown opcode 
00325a   ffff     dw	0xffff  ;unknown opcode 
00325c   ffff     dw	0xffff  ;unknown opcode 
00325e   ffff     dw	0xffff  ;unknown opcode 
003260   ffff     dw	0xffff  ;unknown opcode 
003262   ffff     dw	0xffff  ;unknown opcode 
003264   ffff     dw	0xffff  ;unknown opcode 
003266   ffff     dw	0xffff  ;unknown opcode 
003268   ffff     dw	0xffff  ;unknown opcode 
00326a   ffff     dw	0xffff  ;unknown opcode 
00326c   ffff     dw	0xffff  ;unknown opcode 
00326e   ffff     dw	0xffff  ;unknown opcode 
003270   ffff     dw	0xffff  ;unknown opcode 
003272   ffff     dw	0xffff  ;unknown opcode 
003274   ffff     dw	0xffff  ;unknown opcode 
003276   ffff     dw	0xffff  ;unknown opcode 
003278   ffff     dw	0xffff  ;unknown opcode 
00327a   ffff     dw	0xffff  ;unknown opcode 
00327c   ffff     dw	0xffff  ;unknown opcode 
00327e   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           
                                           _MIOS_MPROC_EVENT_TABLE
                                           MIOS_MPROC_EVENT_TABLE
                                           	;; entry 0x00-0x0f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x10-0x1f	
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x20-0x2f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x30-0x3f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x40-0x4f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x50-0x5f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           		
                                           	;; entry 0x60-0x6f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x70-0x7f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x80-0x8f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x90-0x9f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xa0-0xaf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xb1-0xbf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xc0-0xcf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xd0-0xdf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xe0-0xef
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xf0-0xff
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           #endif
                                           
                                           ;; ---[ configuration table for rotary encoders ]---
                                           #ifndef DONT_INCLUDE_MIOS_ENC_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use ENC entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_ENC_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_ENC_TABLE {
                                           ;;              // sr pin mode
                                           ;;   MIOS_ENC_ENTRY(1, 0, MIOS_ENC_MODE_DETENTED), // VPot #1
                                           ;;   MIOS_ENC_ENTRY(1, 2, MIOS_ENC_MODE_DETENTED), // VPot #2
                                           ;;   MIOS_ENC_ENTRY(1, 4, MIOS_ENC_MODE_DETENTED), // VPot #3
                                           ;;   MIOS_ENC_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           #include <mios_enc_table.inc>
                                           ; $Id: mios_enc_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" Configuration Table for Rotary Encoders
                                           ; 
                                           ; Should be included by the application, if no rotary encoders are connected
                                           ; in order to pre-initialize the table area with EOT's
                                           ; 
                                           ; ==========================================================================
                                           
                                           	org	0x3280		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; In this table DIN pins have to be assigned to rotary encoders for the
                                           ;; MIOS_ENC driver 
                                           ;; 
                                           ;; up to 64 entries are provided
                                           ;; 
                                           ;; The table must be terminated with an ENC_EOT entry. Unused entries should
                                           ;; be filled with ENC_EOT
                                           ;; 
                                           ;; ENC_ENTRY provides following parameters
                                           ;;    o first parameter: number of shift register - 1, 2, 3, ... 16
                                           ;;    o second parameter: number of pin; since two pins are necessary
                                           ;;      for each encoder, an even number is expected: 0, 2, 4 or 6
                                           ;;    o the third parameter contains the encoder mode:
                                           ;;      either MIOS_ENC_MODE_NON_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED2
                                           ;;          or MIOS_ENC_MODE_DETENTED3
                                           ;;
                                           ;; Configuration Examples:
                                           ;;    ENC_ENTRY  1,  0,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 0 and 1 of SR 1
                                           ;;    ENC_ENTRY  1,  2,  MIOS_ENC_MODE_DETENTED        ; detented encoder at pin 2 and 3 of SR 1
                                           ;;    ENC_ENTRY  9,  6,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 6 and 7 of SR 9
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; encoder entry structure
                                           ENC_ENTRY MACRO sr, din_0, mode
                                           	dw	(mode << 8) | (din_0 + 8*(sr-1))
                                           	ENDM	
                                           ENC_EOT	MACRO
003280   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003282   ffff     dw	0xffff  ;unknown opcode 
003284   ffff     dw	0xffff  ;unknown opcode 
003286   ffff     dw	0xffff  ;unknown opcode 
003288   ffff     dw	0xffff  ;unknown opcode 
00328a   ffff     dw	0xffff  ;unknown opcode 
00328c   ffff     dw	0xffff  ;unknown opcode 
00328e   ffff     dw	0xffff  ;unknown opcode 
003290   ffff     dw	0xffff  ;unknown opcode 
003292   ffff     dw	0xffff  ;unknown opcode 
003294   ffff     dw	0xffff  ;unknown opcode 
003296   ffff     dw	0xffff  ;unknown opcode 
003298   ffff     dw	0xffff  ;unknown opcode 
00329a   ffff     dw	0xffff  ;unknown opcode 
00329c   ffff     dw	0xffff  ;unknown opcode 
00329e   ffff     dw	0xffff  ;unknown opcode 
0032a0   ffff     dw	0xffff  ;unknown opcode 
0032a2   ffff     dw	0xffff  ;unknown opcode 
0032a4   ffff     dw	0xffff  ;unknown opcode 
0032a6   ffff     dw	0xffff  ;unknown opcode 
0032a8   ffff     dw	0xffff  ;unknown opcode 
0032aa   ffff     dw	0xffff  ;unknown opcode 
0032ac   ffff     dw	0xffff  ;unknown opcode 
0032ae   ffff     dw	0xffff  ;unknown opcode 
0032b0   ffff     dw	0xffff  ;unknown opcode 
0032b2   ffff     dw	0xffff  ;unknown opcode 
0032b4   ffff     dw	0xffff  ;unknown opcode 
0032b6   ffff     dw	0xffff  ;unknown opcode 
0032b8   ffff     dw	0xffff  ;unknown opcode 
0032ba   ffff     dw	0xffff  ;unknown opcode 
0032bc   ffff     dw	0xffff  ;unknown opcode 
0032be   ffff     dw	0xffff  ;unknown opcode 
0032c0   ffff     dw	0xffff  ;unknown opcode 
0032c2   ffff     dw	0xffff  ;unknown opcode 
0032c4   ffff     dw	0xffff  ;unknown opcode 
0032c6   ffff     dw	0xffff  ;unknown opcode 
0032c8   ffff     dw	0xffff  ;unknown opcode 
0032ca   ffff     dw	0xffff  ;unknown opcode 
0032cc   ffff     dw	0xffff  ;unknown opcode 
0032ce   ffff     dw	0xffff  ;unknown opcode 
0032d0   ffff     dw	0xffff  ;unknown opcode 
0032d2   ffff     dw	0xffff  ;unknown opcode 
0032d4   ffff     dw	0xffff  ;unknown opcode 
0032d6   ffff     dw	0xffff  ;unknown opcode 
0032d8   ffff     dw	0xffff  ;unknown opcode 
0032da   ffff     dw	0xffff  ;unknown opcode 
0032dc   ffff     dw	0xffff  ;unknown opcode 
0032de   ffff     dw	0xffff  ;unknown opcode 
0032e0   ffff     dw	0xffff  ;unknown opcode 
0032e2   ffff     dw	0xffff  ;unknown opcode 
0032e4   ffff     dw	0xffff  ;unknown opcode 
0032e6   ffff     dw	0xffff  ;unknown opcode 
0032e8   ffff     dw	0xffff  ;unknown opcode 
0032ea   ffff     dw	0xffff  ;unknown opcode 
0032ec   ffff     dw	0xffff  ;unknown opcode 
0032ee   ffff     dw	0xffff  ;unknown opcode 
0032f0   ffff     dw	0xffff  ;unknown opcode 
0032f2   ffff     dw	0xffff  ;unknown opcode 
0032f4   ffff     dw	0xffff  ;unknown opcode 
0032f6   ffff     dw	0xffff  ;unknown opcode 
0032f8   ffff     dw	0xffff  ;unknown opcode 
0032fa   ffff     dw	0xffff  ;unknown opcode 
0032fc   ffff     dw	0xffff  ;unknown opcode 
0032fe   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           _MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_PIN_TABLE
                                           	;; encoders 1-16
                                           	;;        SR  Pin  Mode
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 17-32
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 33-48
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 49-64
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           #endif
                                           
                                           	org	0x3300		; never change the origin!
                                           
                                           ; Don't enable this --- its only used by a special testcase which checks 
                                           ; parameter passing on functions which are difficult to verify with
                                           ; directed tests
                                           #ifndef PARAMETER_PASSING_TEST
                                           #define PARAMETER_PASSING_TEST 0
                                           #endif
                                           
                                           ;; ==========================================================================
                                           ;;  Export MIOS variables
                                           ;; ==========================================================================
                                           	global	_MIOS_BOX_CFG0
                                           	global	_MIOS_BOX_CFG1
                                           	global	_MIOS_BOX_STAT
                                           	global	_MIOS_PARAMETER1
                                           	global	_MIOS_PARAMETER2
                                           	global	_MIOS_PARAMETER3
                                           
                                           MIOS_VARIABLES		udata	0x0000
                                           _MIOS_BOX_CFG0		res	1
                                           _MIOS_BOX_CFG1		res	1
                                           _MIOS_BOX_STAT		res	1
                                           _MIOS_PARAMETER1	res	1
                                           _MIOS_PARAMETER2	res	1
                                           _MIOS_PARAMETER3	res	1
                                           _TMP1			res	1
                                           _TMP2			res	1
                                           _TMP3			res	1
                                           _TMP4			res	1
                                           _TMP5			res	1
                                           _IRQ_TMP1		res	1
                                           _IRQ_TMP2		res	1
                                           _IRQ_TMP3		res	1
                                           _IRQ_TMP4		res	1
                                           _IRQ_TMP5		res	1
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  USER_LCD_* vectors defined externally in $MIOS_PATH/modules/app_lcd/*/*.asm
                                           ;; ==========================================================================
                                           	extern	USER_LCD_Init
                                           	extern	USER_LCD_Data
                                           	extern	USER_LCD_Cmd
                                           	extern	USER_LCD_Clear
                                           	extern	USER_LCD_CursorSet
                                           	extern	USER_LCD_PrintChar
                                           	extern	USER_LCD_SpecialCharInit
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  All MIOS hooks in one file
                                           ;; ==========================================================================
                                           
                                           MIOS_WRAPPER_CODE	code
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after startup to initialize the 
                                           ;;  application
                                           ;; --------------------------------------------------------------------------
                                           USER_Init
                                           	extern	_Init
                                           
003d90   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003d92   f07f
003d94   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003d96   f07f
003d98   ef7a     goto	0x42f4              	goto	_Init	
003d9a   f021
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS in the mainloop when nothing else is to do
                                           ;; --------------------------------------------------------------------------
                                           USER_Tick
                                           	extern	_Tick
                                           
003d9c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003d9e   f07f
003da0   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003da2   f07f
003da4   ef4e     goto	0x3e9c              	goto	_Tick
003da6   f01f
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is periodically called by MIOS. The frequency has to be
                                           ;;  initialized with MIOS_Timer_Set
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;; --------------------------------------------------------------------------
                                           USER_Timer
                                           	extern	_Timer
                                           
003da8   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
003daa   f03f
003dac   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
003dae   ffdd
003db0   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
003db2   ffdd
003db4   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
003db6   f03d
003db8   ec4a     call	0x4694, 0           	call	_Timer			; call C hook
003dba   f023
003dbc   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
003dbe   ffe9
003dc0   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
003dc2   ffea
003dc4   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a debug command has been received
                                           ;;  via SysEx
                                           ;;  Input:
                                           ;;     o WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3 like
                                           ;;       specified in the debug command
                                           ;;  Output:
                                           ;;     o return values WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_DebugTrigger
                                           	;; not really required for C programs
003dc6   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the display content should be 
                                           ;;  initialized. Thats the case during startup and after a temporary message
                                           ;;  has been printed on the screen
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Init
                                           	extern	_DISPLAY_Init
                                           
003dc8   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003dca   f07f
003dcc   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003dce   f07f
003dd0   ef58     goto	0x46b0              	goto	_DISPLAY_Init
003dd2   f023
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called in the mainloop when no temporary message is shown
                                           ;;  on screen. Print the realtime messages here
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Tick
                                           	extern	_DISPLAY_Tick
                                           
003dd4   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003dd6   f07f
003dd8   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003dda   f07f
003ddc   ef57     goto	0x46ae              	goto	_DISPLAY_Tick
003dde   f023
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a complete MIDI event has been received
                                           ;;  Input:
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedEvent
                                           	extern	_MPROC_NotifyReceivedEvnt
                                           
003de0   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003de2   f07f
003de4   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003de6   f07f
                                           
003de8   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
003dea   ffed
003dec   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003dee   ffed
003df0   5003     movf	0x3, 0, 0           	movf	MIOS_PARAMETER1, W
003df2   efc3     goto	0x3f86              	goto	_MPROC_NotifyReceivedEvnt
003df4   f01f
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has been received
                                           ;;  which has been specified in the CONFIG_MIDI_IN table
                                           ;;  Input:
                                           ;;     o number of entry in WREG
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyFoundEvent
                                           	extern	_MPROC_NotifyFoundEvent
                                           
003df6   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003df8   f07f
003dfa   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003dfc   f07f
                                           
003dfe   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
003e00   ffed
003e02   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003e04   ffed
003e06   c003     movff	0x3, 0xfed         	movff	MIOS_PARAMETER1, POSTDEC0
003e08   ffed
003e0a   6eed     movwf	0xed, 0            	movwf	POSTDEC0		; TK: required for SDCC 2.5.0, don't know why...
                                           	;; entry number still in wreg
003e0c   eff5     goto	0x45ea              	goto	_MPROC_NotifyFoundEvent
003e0e   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has not been completly
                                           ;;  received within 2 seconds
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyTimeout
                                           	extern	_MPROC_NotifyTimeout
                                           
003e10   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e12   f07f
003e14   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e16   f07f
003e18   ef56     goto	0x46ac              	goto	_MPROC_NotifyTimeout
003e1a   f023
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received
                                           ;;  Input:
                                           ;;     o received MIDI byte in WREG and MIOS_PARAMETER1
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedByte
                                           	extern	_MPROC_NotifyReceivedByte
                                           
003e1c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e1e   f07f
003e20   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e22   f07f
                                           
                                           	;; MIDI byte still in WREG
003e24   ef30     goto	0x4060              	goto	_MPROC_NotifyReceivedByte
003e26   f020
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the transfer of a MIDI byte. 
                                           ;;  It can be used to monitor the Tx activity or to do any other actions
                                           ;;  (e.g. to switch a pin for multiplexed MIDI Outs) before the byte will 
                                           ;;  be sent.
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o transmitted byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyTx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_TX
                                           	extern	_MIDI_NotifyTx
                                           	goto	_MIDI_NotifyTx
                                           #else
003e28   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received.
                                           ;;  It can be used to monitor the Rx activity or to do any action - e.g.
                                           ;;  to react on realtime events like MIDI clock (0xf8) with a minimum latency
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o received byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyRx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_RX
                                           	extern	_MIDI_NotifyRx
                                           	goto	_MIDI_NotifyRx
                                           #else
003e2a   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an button has been toggled
                                           ;;  Input:
                                           ;;     o Button number in WREG and MIOS_PARAMETER1
                                           ;;     o Button value MIOS_PARAMETER2:
                                           ;;       - 1 if button has been released (=5V)
                                           ;;       - 0 if button has been pressed (=0V)
                                           ;; --------------------------------------------------------------------------
                                           USER_DIN_NotifyToggle
                                           	extern	_DIN_NotifyToggle
                                           
003e2c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e2e   f07f
003e30   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e32   f07f
                                           
003e34   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003e36   ffed
                                           	;; button number still in WREG
003e38   ef80     goto	0x3300              	goto	_DIN_NotifyToggle
003e3a   f019
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an encoder has been moved
                                           ;;  Input:
                                           ;;     o Encoder number in WREG and MIOS_PARAMETER1
                                           ;;     o signed incrementer value in MIOS_PARAMETER2:
                                           ;;       - is positive when encoder has been turned clockwise
                                           ;;       - is negative when encoder has been turned counter clockwise
                                           ;; --------------------------------------------------------------------------
                                           USER_ENC_NotifyChange
                                           	extern	_ENC_NotifyChange
                                           
003e3c   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e3e   f07f
003e40   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e42   f07f
                                           
003e44   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003e46   ffed
                                           	;; encoder number still in WREG
003e48   efee     goto	0x45dc              	goto	_ENC_NotifyChange
003e4a   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the shift register are loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Prepare
                                           	extern	_SR_Service_Prepare
                                           
003e4c   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
003e4e   f03f
003e50   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
003e52   ffdd
003e54   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
003e56   ffdd
003e58   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
003e5a   f03d
003e5c   ec55     call	0x46aa, 0           	call	_SR_Service_Prepare	; call C hook
003e5e   f023
003e60   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
003e62   ffe9
003e64   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
003e66   ffea
003e68   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after the shift register have been loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Finish
                                           	extern	_SR_Service_Finish
                                           
003e6a   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
003e6c   f03f
003e6e   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
003e70   ffdd
003e72   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
003e74   ffdd
003e76   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
003e78   f03d
003e7a   ec54     call	0x46a8, 0           	call	_SR_Service_Finish	; call C hook
003e7c   f023
003e7e   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
003e80   ffe9
003e82   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
003e84   ffea
003e86   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a pot has been moved
                                           ;;  Input:
                                           ;;     o Pot number in WREG and MIOS_PARAMETER1
                                           ;;     o LSB value in MIOS_PARAMETER2
                                           ;;     o MSB value in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_AIN_NotifyChange
                                           	extern	_AIN_NotifyChange
                                           
003e88   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e8a   f07f
003e8c   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e8e   f07f
                                           
003e90   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
003e92   ffed
003e94   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003e96   ffed
                                           	;; pot number still in WREG
003e98   efe7     goto	0x45ce              	goto	_AIN_NotifyChange
003e9a   f022
                                           
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  LINKS TO THE MIOS FUNCTIONS
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           .MIOS_MIDI_BeginStream code MIOS_MIDI_BeginStream
                                           _MIOS_MIDI_BeginStream
                                           	global	_MIOS_MIDI_BeginStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDAutoSet code MIOS_MIDI_DeviceIDAutoSet
                                           _MIOS_MIDI_DeviceIDAutoSet
                                           	global	_MIOS_MIDI_DeviceIDAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDGet code MIOS_MIDI_DeviceIDGet
                                           _MIOS_MIDI_DeviceIDGet
                                           	global	_MIOS_MIDI_DeviceIDGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDSet code MIOS_MIDI_DeviceIDSet
                                           _MIOS_MIDI_DeviceIDSet
                                           	global	_MIOS_MIDI_DeviceIDSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_EndStream code MIOS_MIDI_EndStream
                                           _MIOS_MIDI_EndStream
                                           	global	_MIOS_MIDI_EndStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_Init code MIOS_MIDI_Init
                                           _MIOS_MIDI_Init
                                           	global	_MIOS_MIDI_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceAutoSet code MIOS_MIDI_InterfaceAutoSet
                                           _MIOS_MIDI_InterfaceAutoSet
                                           	global	_MIOS_MIDI_InterfaceAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceGet code MIOS_MIDI_InterfaceGet
                                           _MIOS_MIDI_InterfaceGet
                                           	global	_MIOS_MIDI_InterfaceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceSet code MIOS_MIDI_InterfaceSet
                                           _MIOS_MIDI_InterfaceSet
                                           	global	_MIOS_MIDI_InterfaceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerGet code MIOS_MIDI_MergerGet
                                           _MIOS_MIDI_MergerGet
                                           	global	_MIOS_MIDI_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerSet code MIOS_MIDI_MergerSet
                                           _MIOS_MIDI_MergerSet
                                           	global	_MIOS_MIDI_MergerSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferFree code MIOS_MIDI_RxBufferFree
                                           _MIOS_MIDI_RxBufferFree
                                           	global	_MIOS_MIDI_RxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferGet code MIOS_MIDI_RxBufferGet
                                           _MIOS_MIDI_RxBufferGet
                                           	global	_MIOS_MIDI_RxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferPut code MIOS_MIDI_RxBufferPut
                                           _MIOS_MIDI_RxBufferPut
                                           	global	_MIOS_MIDI_RxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferUsed code MIOS_MIDI_RxBufferUsed
                                           _MIOS_MIDI_RxBufferUsed
                                           	global	_MIOS_MIDI_RxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFlush code MIOS_MIDI_TxBufferFlush
                                           _MIOS_MIDI_TxBufferFlush
                                           	global	_MIOS_MIDI_TxBufferFlush
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFree code MIOS_MIDI_TxBufferFree
                                           _MIOS_MIDI_TxBufferFree
                                           	global	_MIOS_MIDI_TxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferGet code MIOS_MIDI_TxBufferGet
                                           _MIOS_MIDI_TxBufferGet
                                           	global	_MIOS_MIDI_TxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferPut code MIOS_MIDI_TxBufferPut
                                           _MIOS_MIDI_TxBufferPut
                                           	global	_MIOS_MIDI_TxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferUsed code MIOS_MIDI_TxBufferUsed
                                           _MIOS_MIDI_TxBufferUsed
                                           	global	_MIOS_MIDI_TxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerDisable code MIOS_MPROC_MergerDisable
                                           _MIOS_MPROC_MergerDisable
                                           	global	_MIOS_MPROC_MergerDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerEnable code MIOS_MPROC_MergerEnable
                                           _MIOS_MPROC_MergerEnable
                                           	global	_MIOS_MPROC_MergerEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerGet code MIOS_MPROC_MergerGet
                                           _MIOS_MPROC_MergerGet
                                           	global	_MIOS_MPROC_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandGet code MIOS_AIN_DeadbandGet
                                           _MIOS_AIN_DeadbandGet
                                           	global	_MIOS_AIN_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandSet code MIOS_AIN_DeadbandSet
                                           _MIOS_AIN_DeadbandSet
                                           	global	_MIOS_AIN_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Muxed code MIOS_AIN_Muxed
                                           _MIOS_AIN_Muxed
                                           	global	_MIOS_AIN_Muxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberGet code MIOS_AIN_NumberGet
                                           _MIOS_AIN_NumberGet
                                           	global	_MIOS_AIN_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberSet code MIOS_AIN_NumberSet
                                           _MIOS_AIN_NumberSet
                                           	global	_MIOS_AIN_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Pin7bitGet code MIOS_AIN_Pin7bitGet
                                           _MIOS_AIN_Pin7bitGet
                                           	global	_MIOS_AIN_Pin7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinGet code
                                           _MIOS_AIN_PinGet
                                           	global	_MIOS_AIN_PinGet
                                           
00468a   ec3a     call	0x2c74, 0           	call	MIOS_AIN_PinGet
00468c   f016
00468e   c004     movff	0x4, 0xff3         	movff	MIOS_PARAMETER2, PRODL	; high byte -> PRODL
004690   fff3
004692   0012     return	0                 	return				; low byte already in WREG
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinLSBGet code MIOS_AIN_PinLSBGet
                                           _MIOS_AIN_PinLSBGet
                                           	global	_MIOS_AIN_PinLSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinMSBGet code MIOS_AIN_PinMSBGet
                                           _MIOS_AIN_PinMSBGet
                                           	global	_MIOS_AIN_PinMSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_UnMuxed code MIOS_AIN_UnMuxed
                                           _MIOS_AIN_UnMuxed
                                           	global	_MIOS_AIN_UnMuxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownGet code MIOS_MF_PWM_DutyCycleDownGet
                                           _MIOS_MF_PWM_DutyCycleDownGet
                                           	global	_MIOS_MF_PWM_DutyCycleDownGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownSet code MIOS_MF_PWM_DutyCycleDownSet
                                           _MIOS_MF_PWM_DutyCycleDownSet
                                           	global	_MIOS_MF_PWM_DutyCycleDownSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpGet code MIOS_MF_PWM_DutyCycleUpGet
                                           _MIOS_MF_PWM_DutyCycleUpGet
                                           	global	_MIOS_MF_PWM_DutyCycleUpGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpSet code MIOS_MF_PWM_DutyCycleUpSet
                                           _MIOS_MF_PWM_DutyCycleUpSet
                                           	global	_MIOS_MF_PWM_DutyCycleUpSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandGet code MIOS_MF_DeadbandGet
                                           _MIOS_MF_DeadbandGet
                                           	global	_MIOS_MF_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandSet code MIOS_MF_DeadbandSet
                                           _MIOS_MF_DeadbandSet
                                           	global	_MIOS_MF_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Disable code MIOS_MF_Disable
                                           _MIOS_MF_Disable
                                           	global	_MIOS_MF_Disable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Enable code MIOS_MF_Enable
                                           _MIOS_MF_Enable
                                           	global	_MIOS_MF_Enable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_FaderMove code
                                           _MIOS_MF_FaderMove
                                           	global	_MIOS_MF_FaderMove
                                           
004542   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004544   ffd9
004546   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004548   f003
00454a   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
00454c   f004
00454e   ef52     goto	0x2ca4              	goto	MIOS_MF_FaderMove
004550   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendDisable code MIOS_MF_SuspendDisable
                                           _MIOS_MF_SuspendDisable
                                           	global	_MIOS_MF_SuspendDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendEnable code MIOS_MF_SuspendEnable
                                           _MIOS_MF_SuspendEnable
                                           	global	_MIOS_MF_SuspendEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendGet code MIOS_MF_SuspendGet
                                           _MIOS_MF_SuspendGet
                                           	global	_MIOS_MF_SuspendGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodGet code MIOS_MF_PWM_PeriodGet
                                           _MIOS_MF_PWM_PeriodGet
                                           	global	_MIOS_MF_PWM_PeriodGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodSet code MIOS_MF_PWM_PeriodSet
                                           _MIOS_MF_PWM_PeriodSet
                                           	global	_MIOS_MF_PWM_PeriodSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_TouchDetectionReset code MIOS_MF_TouchDetectionReset
                                           _MIOS_MF_TouchDetectionReset
                                           	global	_MIOS_MF_TouchDetectionReset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinGet code MIOS_DIN_PinGet
                                           _MIOS_DIN_PinGet
                                           	global	_MIOS_DIN_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_SRGet code MIOS_DIN_SRGet
                                           _MIOS_DIN_SRGet
                                           	global	_MIOS_DIN_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinGet code MIOS_DOUT_PinGet
                                           _MIOS_DOUT_PinGet
                                           	global	_MIOS_DOUT_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet code
                                           _MIOS_DOUT_PinSet
                                           	global	_MIOS_DOUT_PinSet
                                           
004606   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004608   ffd9
00460a   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
00460c   f003
00460e   ef60     goto	0x2cc0              	goto	MIOS_DOUT_PinSet
004610   f016
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet0 code MIOS_DOUT_PinSet0
                                           _MIOS_DOUT_PinSet0
                                           	global	_MIOS_DOUT_PinSet0
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet1 code MIOS_DOUT_PinSet1
                                           _MIOS_DOUT_PinSet1
                                           	global	_MIOS_DOUT_PinSet1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRGet code MIOS_DOUT_SRGet
                                           _MIOS_DOUT_SRGet
                                           	global	_MIOS_DOUT_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRSet code
                                           _MIOS_DOUT_SRSet
                                           	global	_MIOS_DOUT_SRSet
                                           	
004612   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004614   ffd9
004616   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004618   f003
00461a   ef68     goto	0x2cd0              	goto	MIOS_DOUT_SRSet
00461c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitAdd code
                                           _MIOS_ENC_Abs7bitAdd
                                           	global	_MIOS_ENC_Abs7bitAdd
                                           	
00461e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004620   ffd9
004622   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004624   f003
004626   ef6a     goto	0x2cd4              	goto	MIOS_ENC_Abs7bitAdd
004628   f016
                                           	
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitGet code MIOS_ENC_Abs7bitGet
                                           _MIOS_ENC_Abs7bitGet
                                           	global	_MIOS_ENC_Abs7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitSet code
                                           _MIOS_ENC_Abs7bitSet
                                           	global	_MIOS_ENC_Abs7bitSet
                                           
00462a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00462c   ffd9
00462e   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004630   f003
004632   ef6e     goto	0x2cdc              	goto	MIOS_ENC_Abs7bitSet
004634   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_NumberGet code MIOS_ENC_NumberGet
                                           _MIOS_ENC_NumberGet
                                           	global	_MIOS_ENC_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedGet code
                                           _MIOS_ENC_SpeedGet
                                           	global	_MIOS_ENC_SpeedGet
                                           
004636   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004638   ffd9
00463a   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
00463c   f003
00463e   ef72     goto	0x2ce4              	goto	MIOS_ENC_SpeedGet
004640   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedSet code
                                           _MIOS_ENC_SpeedSet
                                           	global	_MIOS_ENC_SpeedSet
                                           
004552   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004554   ffd9
004556   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004558   f003
00455a   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
00455c   f004
00455e   ef74     goto	0x2ce8              	goto	MIOS_ENC_SpeedSet
004560   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberGet code MIOS_SRIO_NumberGet
                                           _MIOS_SRIO_NumberGet
                                           	global	_MIOS_SRIO_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberSet code MIOS_SRIO_NumberSet
                                           _MIOS_SRIO_NumberSet
                                           	global	_MIOS_SRIO_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivityGet code MIOS_SRIO_TS_SensitivityGet
                                           _MIOS_SRIO_TS_SensitivityGet
                                           	global	_MIOS_SRIO_TS_SensitivityGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivitySet code MIOS_SRIO_TS_SensitivitySet
                                           _MIOS_SRIO_TS_SensitivitySet
                                           	global	_MIOS_SRIO_TS_SensitivitySet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqGet code MIOS_SRIO_UpdateFrqGet
                                           _MIOS_SRIO_UpdateFrqGet
                                           	global	_MIOS_SRIO_UpdateFrqGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqSet code MIOS_SRIO_UpdateFrqSet
                                           _MIOS_SRIO_UpdateFrqSet
                                           	global	_MIOS_SRIO_UpdateFrqSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceGet code MIOS_SRIO_DebounceGet
                                           _MIOS_SRIO_DebounceGet
                                           	global	_MIOS_SRIO_DebounceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceSet code MIOS_SRIO_DebounceSet
                                           _MIOS_SRIO_DebounceSet
                                           	global	_MIOS_SRIO_DebounceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Clear code MIOS_LCD_Clear
                                           _MIOS_LCD_Clear
                                           	global	_MIOS_LCD_Clear
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Cmd code MIOS_LCD_Cmd
                                           _MIOS_LCD_Cmd
                                           	global	_MIOS_LCD_Cmd
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorGet code MIOS_LCD_CursorGet
                                           _MIOS_LCD_CursorGet
                                           	global	_MIOS_LCD_CursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorSet code MIOS_LCD_CursorSet
                                           _MIOS_LCD_CursorSet
                                           	global	_MIOS_LCD_CursorSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Data code MIOS_LCD_Data
                                           _MIOS_LCD_Data
                                           	global	_MIOS_LCD_Data
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Init code MIOS_LCD_Init
                                           _MIOS_LCD_Init
                                           	global	_MIOS_LCD_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD1 code MIOS_LCD_PrintBCD1
                                           _MIOS_LCD_PrintBCD1
                                           	global	_MIOS_LCD_PrintBCD1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD2 code MIOS_LCD_PrintBCD2
                                           _MIOS_LCD_PrintBCD2
                                           	global	_MIOS_LCD_PrintBCD2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD3 code MIOS_LCD_PrintBCD3
                                           _MIOS_LCD_PrintBCD3
                                           	global	_MIOS_LCD_PrintBCD3
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD4 code
                                           _MIOS_LCD_PrintBCD4
                                           	global	_MIOS_LCD_PrintBCD4
                                           
004642   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004644   ffd9
004646   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004648   f003
00464a   eff6     goto	0x2dec              	goto	MIOS_LCD_PrintBCD4
00464c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD5 code
                                           _MIOS_LCD_PrintBCD5
                                           	global	_MIOS_LCD_PrintBCD5
                                           
00464e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004650   ffd9
004652   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004654   f003
004656   eff8     goto	0x2df0              	goto	MIOS_LCD_PrintBCD5
004658   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintChar code MIOS_LCD_PrintChar
                                           _MIOS_LCD_PrintChar
                                           	global	_MIOS_LCD_PrintChar
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex1 code MIOS_LCD_PrintHex1
                                           _MIOS_LCD_PrintHex1
                                           	global	_MIOS_LCD_PrintHex1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex2 code MIOS_LCD_PrintHex2
                                           _MIOS_LCD_PrintHex2
                                           	global	_MIOS_LCD_PrintHex2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintMessage code
                                           _MIOS_LCD_PrintMessage
                                           	global	_MIOS_LCD_PrintMessage
                                           
0044d6   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0044d8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044da   ffd9
0044dc   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0044de   fff7
0044e0   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0044e2   fff8
0044e4   ef9a     goto	0x2d34              	goto	MIOS_LCD_PrintMessage
0044e6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintPreconfString code
                                           _MIOS_LCD_PrintPreconfString
                                           	global	_MIOS_LCD_PrintPreconfString
                                           
00449a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00449c   ffd9
00449e   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0044a0   fff8
0044a2   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0044a4   fff7
0044a6   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
0044a8   fff6
0044aa   ef9c     goto	0x2d38              	goto	MIOS_LCD_PrintPreconfString
0044ac   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintString code
                                           _MIOS_LCD_PrintString
                                           	global	_MIOS_LCD_PrintString
                                           
0044e8   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0044ea   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044ec   ffd9
0044ee   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0044f0   fff7
0044f2   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0044f4   fff8
0044f6   ef9e     goto	0x2d3c              	goto	MIOS_LCD_PrintString
0044f8   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeAutoSet code MIOS_LCD_TypeAutoSet
                                           _MIOS_LCD_TypeAutoSet
                                           	global	_MIOS_LCD_TypeAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeGet code MIOS_LCD_TypeGet
                                           _MIOS_LCD_TypeGet
                                           	global	_MIOS_LCD_TypeGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeSet code
                                           _MIOS_LCD_TypeSet
                                           	global	_MIOS_LCD_TypeSet
                                           
004562   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004564   ffd9
004566   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004568   f003
00456a   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
00456c   f004
00456e   efa4     goto	0x2d48              	goto	MIOS_LCD_TypeSet
004570   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressGet code
                                           _MIOS_LCD_YAddressGet
                                           	global	_MIOS_LCD_YAddressGet
0046a4   efa6     goto	0x2d4c              	goto	MIOS_LCD_YAddressGet
0046a6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressSet code
                                           _MIOS_LCD_YAddressSet
                                           	global	_MIOS_LCD_YAddressSet
                                           
0044ae   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044b0   ffd9
0044b2   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0044b4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0044b6   f004
0044b8   cfdc     movff	0xfdc, 0x5          	movff	PREINC2, MIOS_PARAMETER3
0044ba   f005
0044bc   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
0044be   efa8     goto	0x2d50              	goto	MIOS_LCD_YAddressSet
0044c0   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStart code MIOS_LCD_MessageStart
                                           _MIOS_LCD_MessageStart
                                           	global	_MIOS_LCD_MessageStart
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStop code MIOS_LCD_MessageStop
                                           _MIOS_LCD_MessageStop
                                           	global	_MIOS_LCD_MessageStop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharInit code
                                           _MIOS_CLCD_SpecialCharInit
                                           	global	_MIOS_CLCD_SpecialCharInit
                                           
0044c2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044c4   ffd9
0044c6   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
0044c8   fff6
0044ca   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0044cc   fff7
0044ce   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0044d0   fff8
0044d2   efe4     goto	0x2dc8              	goto	MIOS_CLCD_SpecialCharInit
0044d4   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharsInit code
                                           _MIOS_CLCD_SpecialCharsInit
                                           	global	_MIOS_CLCD_SpecialCharsInit
                                           
0044fa   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0044fc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044fe   ffd9
004500   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004502   fff7
004504   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004506   fff8
004508   efe6     goto	0x2dcc              	goto	MIOS_CLCD_SpecialCharsInit
00450a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_FontInit code
                                           _MIOS_GLCD_FontInit
                                           	global	_MIOS_GLCD_FontInit
                                           
00450c   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
00450e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004510   ffd9
004512   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004514   fff7
004516   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004518   fff8
00451a   efaa     goto	0x2d54              	goto	MIOS_GLCD_FontInit
00451c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorGet code MIOS_GLCD_GCursorGet
                                           _MIOS_GLCD_GCursorGet
                                           	global	_MIOS_GLCD_GCursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorSet code
                                           _MIOS_GLCD_GCursorSet
                                           	global	_MIOS_GLCD_GCursorSet
                                           
00465a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00465c   ffd9
00465e   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004660   f003
004662   efae     goto	0x2d5c              	goto	MIOS_GLCD_GCursorSet
004664   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Read code
                                           _MIOS_EEPROM_Read
                                           	global	_MIOS_EEPROM_Read
                                           
00469e   6ea9     movwf	0xa9, 0            	movwf	EEADR
0046a0   efb0     goto	0x2d60              	goto	MIOS_EEPROM_Read
0046a2   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Write code
                                           _MIOS_EEPROM_Write
                                           	global	_MIOS_EEPROM_Write
                                           
004666   6ea9     movwf	0xa9, 0            	movwf	EEADR
004668   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00466a   ffd9
00466c   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
00466e   efb2     goto	0x2d64              	goto	MIOS_EEPROM_Write
004670   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_ReadPage code
                                           _MIOS_EEPROM_ReadPage
                                           	global	_MIOS_EEPROM_ReadPage
                                           
00451e   6ea9     movwf	0xa9, 0            	movwf	EEADR
004520   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004522   ffd9
004524   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004526   ffe1
004528   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00452a   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00452c   ef1a     goto	0x2e34              	goto	MIOS_EEPROM_ReadPage
00452e   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_WritePage code
                                           _MIOS_EEPROM_WritePage
                                           	global	_MIOS_EEPROM_WritePage
                                           
004530   6ea9     movwf	0xa9, 0            	movwf	EEADR
004532   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004534   ffd9
004536   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004538   ffe1
00453a   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00453c   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00453e   ef1c     goto	0x2e38              	goto	MIOS_EEPROM_WritePage
004540   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Read code
                                           _MIOS_FLASH_Read
                                           	global	_MIOS_FLASH_Read
                                           
00443a   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
00443c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00443e   ffd9
004440   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004442   fff7
004444   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004446   fff8
004448   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
00444a   ffe1
00444c   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00444e   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004450   efb4     goto	0x2d68              	goto	MIOS_FLASH_Read
004452   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Write code
                                           _MIOS_FLASH_Write
                                           	global	_MIOS_FLASH_Write
                                           
004454   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004456   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004458   ffd9
00445a   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00445c   fff7
00445e   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004460   fff8
004462   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004464   ffe1
004466   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004468   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00446a   efb6     goto	0x2d6c              	goto	MIOS_FLASH_Write
00446c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Read code
                                           _MIOS_BANKSTICK_Read
                                           	global	_MIOS_BANKSTICK_Read
                                           
0045b2   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0045b4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0045b6   ffd9
0045b8   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0045ba   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
0045bc   efb8     goto	0x2d70              	goto	MIOS_BANKSTICK_Read
0045be   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Write code
                                           _MIOS_BANKSTICK_Write
                                           	global	_MIOS_BANKSTICK_Write
                                           
004572   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
004574   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004576   ffd9
004578   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00457a   f004
00457c   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00457e   efba     goto	0x2d74              	goto	MIOS_BANKSTICK_Write
004580   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlSet code MIOS_BANKSTICK_CtrlSet
                                           _MIOS_BANKSTICK_CtrlSet
                                           	global	_MIOS_BANKSTICK_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlGet code MIOS_BANKSTICK_CtrlGet
                                           _MIOS_BANKSTICK_CtrlGet
                                           	global	_MIOS_BANKSTICK_CtrlGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_WritePage code
                                           _MIOS_BANKSTICK_WritePage
                                           	global	_MIOS_BANKSTICK_WritePage
                                           
00446e   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
004470   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004472   ffd9
004474   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
004476   f004
004478   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
00447a   ffe1
00447c   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00447e   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004480   eff2     goto	0x2de4              	goto	MIOS_BANKSTICK_WritePage
004482   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_ReadPage code
                                           _MIOS_BANKSTICK_ReadPage
                                           	global	_MIOS_BANKSTICK_ReadPage
                                           	
004484   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
004486   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004488   ffd9
00448a   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00448c   f004
00448e   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004490   ffe1
004492   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004494   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004496   ef18     goto	0x2e30              	goto	MIOS_BANKSTICK_ReadPage
004498   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Init code
                                           _MIOS_TIMER_Init
                                           	global	_MIOS_TIMER_Init
                                           
004582   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004584   ffd9
004586   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004588   f003
00458a   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00458c   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00458e   efbc     goto	0x2d78              	goto	MIOS_TIMER_Init
004590   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Start code MIOS_TIMER_Start
                                           _MIOS_TIMER_Start
                                           	global	_MIOS_TIMER_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Stop code MIOS_TIMER_Stop
                                           _MIOS_TIMER_Stop
                                           	global	_MIOS_TIMER_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_ReInit code
                                           _MIOS_TIMER_ReInit
                                           	global	_MIOS_TIMER_ReInit
                                           
004592   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004594   ffd9
004596   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004598   f003
00459a   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00459c   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
00459e   ef1e     goto	0x2e3c              	goto	MIOS_TIMER_ReInit
0045a0   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitANDMask code MIOS_HLP_GetBitANDMask
                                           _MIOS_HLP_GetBitANDMask
                                           	global	_MIOS_HLP_GetBitANDMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitORMask code MIOS_HLP_GetBitORMask
                                           _MIOS_HLP_GetBitORMask
                                           	global	_MIOS_HLP_GetBitORMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_16bitAddSaturate code
                                           _MIOS_HLP_16bitAddSaturate
                                           	global	_MIOS_HLP_16bitAddSaturate
                                           
004338   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00433a   ffd9
00433c   6e0a     movwf	0xa, 0             	movwf	TMP5
                                           
00433e   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004340   ffe1
004342   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004344   ffe2
004346   52dc     movf	0xdc, 0x1, 0        	movf	PREINC2, F
004348   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
00434a   f003
00434c   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00434e   f004
                                           
004350   cfe6     movff	0xfe6, 0x6         	movff	POSTINC1, TMP1	; due to requirement that FSR1 is aligned to 16bit address
004352   f006
004354   cfe6     movff	0xfe6, 0x7         	movff	POSTINC1, TMP2
004356   f007
004358   ee10     lfsr	0x1, 0x6            	lfsr	FSR1, TMP1
00435a   f006
                                           
00435c   500a     movf	0xa, 0, 0           	movf	TMP5, W
00435e   ecdc     call	0x2db8, 0           	call	MIOS_HLP_16bitAddSaturate
004360   f016
004362   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004364   ffd9
004366   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004368   ffe1
00436a   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00436c   ffe2
00436e   c006     movff	0x6, 0xfe6         	movff	TMP1, POSTINC1
004370   ffe6
004372   c007     movff	0x7, 0xfe6         	movff	TMP2, POSTINC1
004374   ffe6
004376   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_Dec2BCD code
                                           _MIOS_HLP_Dec2BCD
                                           	global	_MIOS_HLP_Dec2BCD
                                           
004672   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004674   ffd9
004676   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004678   f003
00467a   eff4     goto	0x2de8              	goto	MIOS_HLP_Dec2BCD
00467c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Delay code MIOS_Delay
                                           _MIOS_Delay
                                           	global	_MIOS_Delay
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GPCounterGet code MIOS_GPCounterGet
                                           _MIOS_GPCounterGet
                                           	global	_MIOS_GPCounterGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Reset code MIOS_Reset
                                           _MIOS_Reset
                                           	global	_MIOS_Reset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemResume code MIOS_SystemResume
                                           _MIOS_SystemResume
                                           	global	_MIOS_SystemResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemSuspend code MIOS_SystemSuspend
                                           _MIOS_SystemSuspend
                                           	global	_MIOS_SystemSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserResume code MIOS_UserResume
                                           _MIOS_UserResume
                                           	global	_MIOS_UserResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserSuspend code MIOS_UserSuspend
                                           _MIOS_UserSuspend
                                           	global	_MIOS_UserSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatEnable code MIOS_DIN_PinAutoRepeatEnable
                                           _MIOS_DIN_PinAutoRepeatEnable
                                           	global	_MIOS_DIN_PinAutoRepeatEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatDisable code MIOS_DIN_PinAutoRepeatDisable
                                           _MIOS_DIN_PinAutoRepeatDisable
                                           	global	_MIOS_DIN_PinAutoRepeatDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatGet code MIOS_DIN_PinAutoRepeatGet
                                           _MIOS_DIN_PinAutoRepeatGet
                                           	global	_MIOS_DIN_PinAutoRepeatGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioSet code MIOS_AIN_DynamicPrioSet
                                           _MIOS_AIN_DynamicPrioSet
                                           	global	_MIOS_AIN_DynamicPrioSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioGet code MIOS_AIN_DynamicPrioGet
                                           _MIOS_AIN_DynamicPrioGet
                                           	global	_MIOS_AIN_DynamicPrioGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_LastPinsGet code MIOS_AIN_LastPinsGet
                                           _MIOS_AIN_LastPinsGet
                                           	global	_MIOS_AIN_LastPinsGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Start code MIOS_IIC_Start
                                           _MIOS_IIC_Start
                                           	global	_MIOS_IIC_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Stop code MIOS_IIC_Stop
                                           _MIOS_IIC_Stop
                                           	global	_MIOS_IIC_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteSend code MIOS_IIC_ByteSend
                                           _MIOS_IIC_ByteSend
                                           	global	_MIOS_IIC_ByteSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteReceive code MIOS_IIC_ByteReceive
                                           _MIOS_IIC_ByteReceive
                                           	global	_MIOS_IIC_ByteReceive
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_AckSend code MIOS_IIC_AckSend
                                           _MIOS_IIC_AckSend
                                           	global	_MIOS_IIC_AckSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_NakSend code MIOS_IIC_NakSend
                                           _MIOS_IIC_NakSend
                                           	global	_MIOS_IIC_NakSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlSet code MIOS_IIC_CtrlSet
                                           _MIOS_IIC_CtrlSet
                                           	global	_MIOS_IIC_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlGet code MIOS_IIC_CtrlGet
                                           _MIOS_IIC_CtrlGet
                                           	global	_MIOS_IIC_CtrlGet
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  Special functions supported by the wrapper
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintCString code
                                           _MIOS_LCD_PrintCString
                                           	global	_MIOS_LCD_PrintCString
                                           
0042b0   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0042b2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0042b4   ffd9
0042b6   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0042b8   fff7
0042ba   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           	;; SDCC passes a 24bit pointer, the MSB (now in WREG) bit 6 and 7 tells us, where the data is located:
                                           	;; 00 -> code
                                           	;; 01 -> EEPROM (not supported by MIOS_LCD_PrintCString yet)
                                           	;; 10 -> data
                                           	;; 11 -> unimplemented
                                           
0042bc   bee8     btfsc	0xe8, 0x7, 0       	btfsc	WREG, 7
0042be   d008     bra	0x42d0               	bra	_MIOS_LCD_PrintCString_RAM
                                           _MIOS_LCD_PrintCString_Code
0042c0   6ef8     movwf	0xf8, 0            	movwf	TBLPTRU
                                           _MIOS_LCD_PrintCStringLoop_Code
0042c2   0009     tblrd	*+                 	tblrd*+
0042c4   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
0042c6   e003     bz	0x42ce                	bz	_MIOS_LCD_PrintCString_Code_End
0042c8   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
0042ca   f016
0042cc   d7fa     bra	0x42c2               	bra	_MIOS_LCD_PrintCStringLoop_Code
                                           _MIOS_LCD_PrintCString_Code_End
0042ce   0012     return	0                 	return
                                           
                                           _MIOS_LCD_PrintCString_RAM
                                           	;; using FSR2 as temporary pointer - store current FSR2 into TMP[12]
0042d0   cfd9     movff	0xfd9, 0x6         	movff	FSR2L, TMP1
0042d2   f006
0042d4   cfda     movff	0xfda, 0x7         	movff	FSR2H, TMP2
0042d6   f007
0042d8   cff6     movff	0xff6, 0xfd9       	movff	TBLPTRL, FSR2L
0042da   ffd9
0042dc   cff7     movff	0xff7, 0xfda       	movff	TBLPTRH, FSR2H
0042de   ffda
                                           _MIOS_LCD_PrintCStringLoop_RAM
0042e0   50de     movf	0xde, 0, 0          	movf	POSTINC2, W
0042e2   e003     bz	0x42ea                	bz	_MIOS_LCD_PrintCString_RAM_End
0042e4   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
0042e6   f016
0042e8   d7fb     bra	0x42e0               	bra	_MIOS_LCD_PrintCStringLoop_RAM
                                           _MIOS_LCD_PrintCString_RAM_End
                                           	;; restore FSR2
0042ea   c006     movff	0x6, 0xfd9         	movff	TMP1, FSR2L
0042ec   ffd9
0042ee   c007     movff	0x7, 0xfda         	movff	TMP2, FSR2H
0042f0   ffda
0042f2   0012     return	0                 	return
                                           
                                           	END
                                           ; $Id: app_lcd.asm 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; Wrapper for app_lcd.inc
                                           ; To be used for relocatable programs
                                           ;
                                           ; ==========================================================================
                                           
                                           	radix	dec
                                           
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           #include <macros.h>
                                           ; $Id: macros.h 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; Macro Definitions
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           BRA_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           
                                           BRA_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           GOTO_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           
                                           GOTO_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           CALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           
                                           CALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           RCALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           
                                           RCALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           IRQ_DISABLE MACRO
                                                   bcf     INTCON, GIE
                                                   ENDM
                                           
                                           IRQ_ENABLE MACRO
                                                   bsf     INTCON, GIE
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TABLE_ADDR_FULL MACRO addr
                                           	movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   movlw   UPPER(addr)		; store upper Byte
                                                   movwf   TBLPTRU
                                                   ENDM
                                                   
                                           TABLE_ADDR MACRO addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                                   movlw   UPPER(addr)		; store Upper Byte
                                                   movwf   TBLPTRU
                                           #endif
                                                   ENDM
                                                   
                                           TABLE_H MACRO   addr
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   ENDM
                                           
                                           TABLE_L MACRO   addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   ENDM
                                           
                                           TABLE_ADD_W MACRO
                                           	addwf	TBLPTRL, F
                                           	movlw	0x00
                                           	addwfc	TBLPTRH, F
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	movlw	0x00
                                           	addwfc	TBLPTRU, F
                                           #endif
                                                   ENDM
                                           
                                           TABLE_ADDR_MUL_W MACRO addr, multiplicator
                                           	mullw	multiplicator
                                           	movlw	LOW(addr)
                                           	addwf	PRODL, W
                                           	movwf	TBLPTRL
                                           	movlw	HIGH(addr)
                                           	addwfc	PRODH, W
                                           	movwf	TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	clrf    TBLPTRU
                                                   movlw   UPPER(addr)
                                           	addwfc	TBLPTRU, F
                                           #endif
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           JUMPTABLE_2BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	movlw	-(max_value)
                                           	addlw	max_value
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_2BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	return
                                           	addlw	(max_value)
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TWOBYTE_ENTRY MACRO low_byte, high_byte
                                                   dw      (high_byte << 8) | (low_byte)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           #define skpnz	btfsc	STATUS, Z 
                                           #define skpz	btfss	STATUS, Z 
                                           #define skpndc	btfsc	STATUS, DC 
                                           #define skpdc	btfss	STATUS, DC
                                           #define skpnc	btfsc	STATUS, C
                                           #define skpc	btfss	STATUS, C
                                           #define clrc	bcf	STATUS, C
                                           #define setc	bsf	STATUS, C
                                           #define clrz	bcf	STATUS, Z
                                           #define setz	bsf	STATUS, Z
                                           #define rrf	rrcf	
                                           #define rlf	rlcf
                                           
                                           rgoto   MACRO   label
                                                   bra     label
                                                   ENDM
                                           
                                           SET_BSR MACRO   reg
                                                   movlb   HIGH(reg)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           FONT_ENTRY MACRO width, height, x0, char_offset
                                           	dw	((height) << 8) | (width), ((char_offset) << 8) | (x0)
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           STRING MACRO length, pos, str
                                           	da	((length) << 8) | (pos), str
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           ; ==========================================================================
                                           ; Import/Export Labels
                                           ; ==========================================================================
                                           	global	USER_LCD_Init
                                           	global	USER_LCD_Data
                                           	global	USER_LCD_Cmd
                                           	global	USER_LCD_Clear
                                           	global	USER_LCD_CursorSet
                                           	global	USER_LCD_PrintChar
                                           	global	USER_LCD_SpecialCharInit
                                           
                                           ; ==========================================================================
                                           ; Start code section and include driver code
                                           ; ==========================================================================
                                           APP_LCD CODE
                                           #include "app_lcd.inc"
                                           ; $Id: app_lcd.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; MIOS Custom LCD Driver Skeleton
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  Following system variables are given by MIOS and can be directly 
                                           ;;  accessed by the driver. The addresses are defined in mios.h and
                                           ;;  should not be changed
                                           ;; 
                                           ;;  MIOS_GLCD_BUFFER	     a 8 byte buffer for data transfers
                                           ;;  MIOS_LCD_OPTION1	     contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_OPTION2	     contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_CURSOR_POS	     the current cursor pos of characters (GLCD: multiplied by width)
                                           ;;  MIOS_GLCD_GCURSOR_X	     for GLCDs: the current X position of graphical cursor
                                           ;;  MIOS_GLCD_GCURSOR_Y	     for GLCDs: the current Y position of graphical cursor
                                           ;;  MIOS_GLCD_FONT_WIDTH     for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_HEIGHT    for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_X0        for GLCDs: the first byte within a char entry
                                           ;;  MIOS_GLCD_FONT_OFFSET    for GLCDs: the byte offset between the characters
                                           ;;  MIOS_GLCD_FONT_PTRL      for GLCDs: pointer to the character table, low-byte
                                           ;;  MIOS_GLCD_FONT_PTRH      for GLCDs: pointer to the character table, high-byte
                                           ;;  MIOS_LCD_TIMEOUT0        can be used for timeout loops
                                           ;;  MIOS_LCD_TIMEOUT1        can be used for timeout loops
                                           ;;  MIOS_GLCD_TMP1           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP2           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP3           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP4           can be used as temporary buffer
                                           ;;  MIOS_LCD_Y0_OFFSET       Y0 offset of LCD
                                           ;;  MIOS_LCD_Y1_OFFSET       Y1 offset of LCD
                                           ;;  MIOS_LCD_Y2_OFFSET       Y2 offset of LCD
                                           ;;  MIOS_LCD_Y3_OFFSET       Y3 offset of LCD
                                           ;;  MIOS_LCD_CURSOR_POS_REAL unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           ;; 
                                           ;;  Note: the addresses are located in an upper bank and therefore have to
                                           ;;        be accessed with the BANKED flag. Also the BSR has to be justified
                                           ;;        before using the registers
                                           ;;  Example:
                                           ;;	SET_BSR MIOS_LCD_OPTION1	; sets BSR to the bank where MIOS_LCD_*
                                           ;;					; has been located. You don't need to
                                           ;;					; change the BSR for the other LCD registers
                                           ;;      movf    MIOS_LCD_OPTION1, W, BANKED	; get LCD option #1
                                           ;; 
                                           ;;  Important: to allow a proper interaction with MIOS applications, you are
                                           ;;  only allowed to modify MIOS_PARAMETER[123], the mutliplication registers
                                           ;;  and FSR1. You are not allowed to change TMP[1-5] or FSR0
                                           ;;  if you need some temporary registers, use the given addresses above or
                                           ;;  locate them to addresses which are not used by the application
                                           ;; --------------------------------------------------------------------------
                                           	
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be initialized
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Init
0045c0   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be cleared
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Clear
0045c2   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the cursor should be changed
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_GLCD_CURSOR_X - horizontal cursor position (for GLCDs)
                                           ;;       MIOS_GLCD_CURSOR_X - vertical cursor position   (for GLCDs)
                                           ;;       MIOS_LCD_CURSOR    - character cursor position  (for CLCDs)
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_CursorSet
0045c4   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a character should be print
                                           ;;  In:  WREG - character
                                           ;;       all other MIOS_*LCD_* registers
                                           ;;  Out: GLCDs should justify the X/Y cursor position
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_PrintChar
0045c6   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Data
                                           ;;  DESCRIPTION: sends a data value to the LCD display.<BR>
                                           ;;  On CLCDs: branch directly to USER_LCD_PrintChar<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  data which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Data
0045c8   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Cmd
                                           ;;  DESCRIPTION: sends a command to the LCD display.<BR>
                                           ;;  On CLCDs: use this function to decode the HD44780 commands if required<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  command which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Cmd
0045ca   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_SpecialCharInit
                                           ;;  DESCRIPTION: see MIOS_CLCD_SpecialCharInit
                                           ;;  IN:  number of special character (0-7) in WREG
                                           ;;       pointer to special char pattern in TBLPTR (consists of 8
                                           ;;          entries for every character-line)
                                           ;;  OUT: TBLPTR has to be set to next table entry (TBLPTR+=8)
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_SpecialCharInit
0045cc   0012     return	0                 	return
                                           	END
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.0 #4818 (Jan 18 2008)
                                           ; This file generated Wed Oct 29 12:45:28 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f452
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _preset_load
                                           	global _preset_store
                                           	global _inout_map_build
                                           	global _screen_print
                                           	global _current_screen_set
                                           	global _current_bus_set
                                           	global _current_preset_set
                                           	global _timed_function_start
                                           	global _timed_function_stop
                                           	global _led_flash_start
                                           	global _led_flash_set
                                           	global _current_screen_num
                                           	global _current_preset_num
                                           	global _current_bus_num
                                           	global _current_shift_state
                                           	global _timed_function
                                           	global _timer_ticks_count
                                           	global _led_flash_led
                                           	global _led_flash_count
                                           	global _led_flash_ticks
                                           	global _current_preset
                                           	global _midi_inout_map
                                           	global _Init
                                           	global _preset_init
                                           	global _Timer
                                           	global _Tick
                                           	global _DIN_NotifyToggle
                                           	global _MPROC_NotifyReceivedByte
                                           	global _MPROC_NotifyReceivedEvnt
                                           	global _DISPLAY_Init
                                           	global _DISPLAY_Tick
                                           	global _MPROC_NotifyFoundEvent
                                           	global _MPROC_NotifyTimeout
                                           	global _SR_Service_Prepare
                                           	global _SR_Service_Finish
                                           	global _ENC_NotifyChange
                                           	global _AIN_NotifyChange
                                           	global _int_bit_ormask
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _MIOS_BOX_CFG0
                                           	extern _MIOS_BOX_CFG1
                                           	extern _MIOS_BOX_STAT
                                           	extern _MIOS_PARAMETER1
                                           	extern _MIOS_PARAMETER2
                                           	extern _MIOS_PARAMETER3
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MIOS_MIDI_TxBufferPut
                                           	extern _MIOS_DOUT_PinSet
                                           	extern _MIOS_DOUT_SRSet
                                           	extern _MIOS_SRIO_NumberSet
                                           	extern _MIOS_SRIO_UpdateFrqSet
                                           	extern _MIOS_SRIO_DebounceSet
                                           	extern _MIOS_EEPROM_Read
                                           	extern _MIOS_EEPROM_Write
                                           	extern _MIOS_BANKSTICK_CtrlSet
                                           	extern _MIOS_BANKSTICK_WritePage
                                           	extern _MIOS_BANKSTICK_ReadPage
                                           	extern _MIOS_TIMER_Init
                                           	extern _MIOS_TIMER_Stop
                                           	extern _MIOS_HLP_GetBitORMask
                                           	extern _mios_enc_pin_table
                                           	extern _mios_mproc_event_table
                                           	extern _MIOS_MPROC_EVENT_TABLE
                                           	extern _MIOS_ENC_PIN_TABLE
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L equ 0xfe1 ;; normaly 0xfe9, changed by mios-gpasm
                                           FSR0H equ 0xfe2 ;; normaly 0xfea, changed by mios-gpasm
                                           FSR1L equ 0xfe9 ;; normaly 0xfe1, changed by mios-gpasm
                                           FSR2L	equ	0xfd9
                                           INDF0 equ 0xfe7 ;; normaly 0xfef, changed by mios-gpasm
                                           POSTINC0 equ 0xfe6 ;; normaly 0xfee, changed by mios-gpasm
                                           POSTDEC1 equ 0xfed ;; normaly 0xfe5, changed by mios-gpasm
                                           PREINC1 equ 0xfec ;; normaly 0xfe4, changed by mios-gpasm
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _current_screen_num	db	0x00
                                           _current_preset_num	db	0x00
                                           _current_bus_num	db	0x00
                                           _current_shift_state	db	0x00
                                           _timed_function	db	0x00
                                           _timer_ticks_count	db	0x00, 0x00
                                           _led_flash_led	db	0x00
                                           _led_flash_count	db	0x00
                                           _led_flash_ticks	db	0x00
                                           _MPROC_NotifyReceivedByte_fx_status_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers udata_ovr 0x0010 ;; normaly 0x0000, changed by mios-gpasm
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           
                                           udata_main_0	udata
                                           _current_preset	res	64
                                           
                                           udata_main_1	udata
                                           _midi_inout_map	res	256
                                           
                                           udata_main_2	udata
                                           _inout_map_build_outputs_1_1	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__AIN_NotifyChange	code
                                           _AIN_NotifyChange:
                                           ;	.line	409; main.c	void AIN_NotifyChange(unsigned char pin, unsigned int pin_value) __wparam{
0045ce   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0045d0   ffed
0045d2   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0045d4   ffd9
                                           ;	.line	410; main.c	}
0045d6   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0045d8   ffd9
0045da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ENC_NotifyChange	code
                                           _ENC_NotifyChange:
                                           ;	.line	406; main.c	void ENC_NotifyChange(unsigned char encoder, char incrementer) __wparam{
0045dc   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0045de   ffed
0045e0   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0045e2   ffd9
                                           ;	.line	407; main.c	}
0045e4   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0045e6   ffd9
0045e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Finish	code
                                           _SR_Service_Finish:
                                           ;	.line	404; main.c	}
0046a8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Prepare	code
                                           _SR_Service_Prepare:
                                           ;	.line	401; main.c	}
0046aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyTimeout	code
                                           _MPROC_NotifyTimeout:
                                           ;	.line	398; main.c	}
0046ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyFoundEvent	code
                                           _MPROC_NotifyFoundEvent:
                                           ;	.line	394; main.c	void MPROC_NotifyFoundEvent(unsigned entry, unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
0045ea   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0045ec   ffed
0045ee   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0045f0   ffd9
                                           ;	.line	395; main.c	}
0045f2   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0045f4   ffd9
0045f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Tick	code
                                           _DISPLAY_Tick:
                                           ;	.line	392; main.c	}
0046ae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Init	code
                                           _DISPLAY_Init:
                                           ;	.line	389; main.c	}
0046b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedEvnt	code
                                           _MPROC_NotifyReceivedEvnt:
                                           ;	.line	370; main.c	void MPROC_NotifyReceivedEvnt(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
003f86   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003f88   ffed
003f8a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003f8c   ffd9
003f8e   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003f90   ffed
003f92   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003f94   ffed
003f96   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003f98   ffed
003f9a   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003f9c   ffed
003f9e   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003fa0   ffed
003fa2   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003fa4   ffed
003fa6   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003fa8   ffed
003faa   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003fac   ffed
003fae   6e10     movwf	0x10, 0            	MOVWF	r0x00
003fb0   0e02     movlw	0x2                	MOVLW	0x02
003fb2   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
003fb4   f011
003fb6   0e03     movlw	0x3                	MOVLW	0x03
003fb8   cfdb     movff	0xfdb, 0x12        	MOVFF	PLUSW2, r0x02
003fba   f012
                                           ;	.line	372; main.c	unsigned char evnt_type = evnt0 & 0xf0;
003fbc   0ef0     movlw	0xf0               	MOVLW	0xf0
003fbe   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
003fc0   6e13     movwf	0x13, 0            	MOVWF	r0x03
                                           ;	.line	373; main.c	unsigned char in_chn = evnt0 & 0x0f;
003fc2   0e0f     movlw	0xf                	MOVLW	0x0f
003fc4   1610     andwf	0x10, 0x1, 0       	ANDWF	r0x00, F
                                           ;	.line	374; main.c	unsigned char evnt2_send = !(evnt_type == 0xc0 || evnt_type == 0xd0);
003fc6   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003fc8   0ac0     xorlw	0xc0               	XORLW	0xc0
003fca   e005     bz	0x3fd6                	BZ	_00407_DS_
003fcc   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003fce   0ad0     xorlw	0xd0               	XORLW	0xd0
003fd0   e002     bz	0x3fd6                	BZ	_00407_DS_
003fd2   6a14     clrf	0x14, 0             	CLRF	r0x04
003fd4   d002     bra	0x3fda               	BRA	_00408_DS_
                                           _00407_DS_:
003fd6   0e01     movlw	0x1                	MOVLW	0x01
003fd8   6e14     movwf	0x14, 0            	MOVWF	r0x04
                                           _00408_DS_:
003fda   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003fdc   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
003fde   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
003fe0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003fe2   6a14     clrf	0x14, 0             	CLRF	r0x04
003fe4   3614     rlcf	0x14, 0x1, 0        	RLCF	r0x04, F
                                           ;	.line	375; main.c	for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
003fe6   6a15     clrf	0x15, 0             	CLRF	r0x05
                                           _00400_DS_:
003fe8   0e10     movlw	0x10               	MOVLW	0x10
003fea   5c15     subwf	0x15, 0, 0         	SUBWF	r0x05, W
003fec   e226     bc	0x403a                	BC	_00404_DS_
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003fee   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ff0   0d10     mullw	0x10               	MULLW	0x10
003ff2   cff3     movff	0xff3, 0x16        	MOVFF	PRODL, r0x06
003ff4   f016
003ff6   cff4     movff	0xff4, 0x17        	MOVFF	PRODH, r0x07
003ff8   f017
003ffa   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003ffc   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003ffe   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
004000   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
004002   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
004004   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
004006   6ae8     clrf	0xe8, 0             	CLRF	WREG
004008   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
00400a   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
00400c   ffe1
00400e   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
004010   ffe2
004012   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
004014   f016
004016   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004018   0aff     xorlw	0xff               	XORLW	0xff
00401a   e00f     bz	0x403a                	BZ	_00404_DS_
                                           ;	.line	376; main.c	MIOS_MIDI_TxBufferPut(evnt_type+midi_inout_map[in_chn][i]);
00401c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00401e   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
004020   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004022   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004024   f016
                                           ;	.line	377; main.c	MIOS_MIDI_TxBufferPut(evnt1);
004026   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004028   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
00402a   f016
                                           ;	.line	378; main.c	if(evnt2_send)
00402c   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
00402e   e003     bz	0x4036                	BZ	_00402_DS_
                                           ;	.line	379; main.c	MIOS_MIDI_TxBufferPut(evnt2);
004030   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
004032   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004034   f016
                                           _00402_DS_:
                                           ;	.line	375; main.c	for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
004036   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
004038   d7d7     bra	0x3fe8               	BRA	_00400_DS_
                                           _00404_DS_:
00403a   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
00403c   f017
00403e   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
004040   f016
004042   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
004044   f015
004046   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004048   f014
00404a   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00404c   f013
00404e   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004050   f012
004052   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004054   f011
004056   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004058   f010
00405a   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00405c   ffd9
00405e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedByte	code
                                           _MPROC_NotifyReceivedByte:
                                           ;	.line	342; main.c	void MPROC_NotifyReceivedByte(unsigned char byte) __wparam{
004060   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004062   ffed
004064   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004066   ffd9
004068   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00406a   ffed
00406c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00406e   ffed
004070   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	344; main.c	if(byte >= 0xf0){//system status byte
004072   0ef0     movlw	0xf0               	MOVLW	0xf0
004074   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
004076   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
004078   6a11     clrf	0x11, 0             	CLRF	r0x01
00407a   3611     rlcf	0x11, 0x1, 0        	RLCF	r0x01, F
00407c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00407e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004080   d03d     bra	0x40fc               	BRA	_00379_DS_
                                           ;	.line	345; main.c	MIOS_MIDI_TxBufferPut(byte);
004082   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004084   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004086   f016
                                           ;	.line	347; main.c	switch(byte){
004088   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00408a   e135     bnz	0x40f6               	BNZ	_00372_DS_
00408c   0ef4     movlw	0xf4               	MOVLW	0xf4
00408e   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
004090   e232     bc	0x40f6                	BC	_00372_DS_
004092   0e10     movlw	0x10               	MOVLW	0x10
004094   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004096   6e11     movwf	0x11, 0            	MOVWF	r0x01
004098   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00409a   ffed
00409c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00409e   ffed
0040a0   6a13     clrf	0x13, 0             	CLRF	r0x03
0040a2   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
0040a4   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
0040a6   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
0040a8   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
0040aa   0bfc     andlw	0xfc               	ANDLW	0xfc
0040ac   6e12     movwf	0x12, 0            	MOVWF	r0x02
0040ae   0e00     movlw	0                  	MOVLW	UPPER(_00391_DS_)
0040b0   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
0040b2   0e40     movlw	0x40               	MOVLW	HIGH(_00391_DS_)
0040b4   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0040b6   0ece     movlw	0xce               	MOVLW	LOW(_00391_DS_)
0040b8   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0040ba   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0040bc   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0040be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0040c0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0040c2   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0040c4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0040c6   f013
0040c8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0040ca   f012
0040cc   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00391_DS_:
0040ce   ef77     goto	0x40ee              	GOTO	_00371_DS_
0040d0   f020
0040d2   ef6f     goto	0x40de              	GOTO	_00369_DS_
0040d4   f020
0040d6   ef73     goto	0x40e6              	GOTO	_00370_DS_
0040d8   f020
0040da   ef6f     goto	0x40de              	GOTO	_00369_DS_
0040dc   f020
                                           _00369_DS_:
                                           ;	.line	350; main.c	fx_status = 1;
0040de   0e01     movlw	0x1                	MOVLW	0x01
0040e0   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
0040e2   6fea     movwf	0xea, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	351; main.c	break; 	
0040e4   d017     bra	0x4114               	BRA	_00381_DS_
                                           _00370_DS_:
                                           ;	.line	353; main.c	fx_status = 2;				
0040e6   0e02     movlw	0x2                	MOVLW	0x02
0040e8   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
0040ea   6fea     movwf	0xea, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	354; main.c	break;
0040ec   d013     bra	0x4114               	BRA	_00381_DS_
                                           _00371_DS_:
                                           ;	.line	356; main.c	fx_status = 0xff;
0040ee   0eff     movlw	0xff               	MOVLW	0xff
0040f0   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
0040f2   6fea     movwf	0xea, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	357; main.c	break;
0040f4   d00f     bra	0x4114               	BRA	_00381_DS_
                                           _00372_DS_:
0040f6   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	359; main.c	fx_status = 0;
0040f8   6bea     clrf	0xea, 0x1           	CLRF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	360; main.c	}   
0040fa   d00c     bra	0x4114               	BRA	_00381_DS_
                                           _00379_DS_:
0040fc   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	362; main.c	else if(fx_status){
0040fe   51ea     movf	0xea, 0, 0x1        	MOVF	_MPROC_NotifyReceivedByte_fx_status_1_1, W, B
004100   e009     bz	0x4114                	BZ	_00381_DS_
                                           ;	.line	363; main.c	MIOS_MIDI_TxBufferPut(byte);
004102   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004104   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004106   f016
004108   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	364; main.c	if(fx_status!=0xff)
00410a   51ea     movf	0xea, 0, 0x1        	MOVF	_MPROC_NotifyReceivedByte_fx_status_1_1, W, B
00410c   0aff     xorlw	0xff               	XORLW	0xff
00410e   e002     bz	0x4114                	BZ	_00381_DS_
                                           _00393_DS_:
004110   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	365; main.c	fx_status--;
004112   07ea     decf	0xea, 0x1, 0x1      	DECF	_MPROC_NotifyReceivedByte_fx_status_1_1, F, B
                                           _00381_DS_:
004114   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004116   f011
004118   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00411a   f010
00411c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00411e   ffd9
004120   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DIN_NotifyToggle	code
                                           _DIN_NotifyToggle:
                                           ;	.line	273; main.c	void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value) __wparam{
003300   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003302   ffed
003304   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003306   ffd9
003308   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00330a   ffed
00330c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00330e   ffed
003310   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003312   ffed
003314   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003316   ffed
003318   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
00331a   ffed
00331c   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
00331e   ffed
003320   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003322   ffed
003324   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003326   ffed
003328   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
00332a   ffed
00332c   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
00332e   ffed
003330   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003332   ffed
003334   6e10     movwf	0x10, 0            	MOVWF	r0x00
003336   0e02     movlw	0x2                	MOVLW	0x02
003338   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
00333a   f011
00333c   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	275; main.c	if(timed_function==1)
00333e   51e4     movf	0xe4, 0, 0x1        	MOVF	_timed_function, W, B
003340   0a01     xorlw	0x1                	XORLW	0x01
003342   e103     bnz	0x334a               	BNZ	_00297_DS_
                                           ;	.line	276; main.c	timed_function_stop();//stop clear request on every button change
003344   ecd1     call	0x45a2, 0           	CALL	_timed_function_stop
003346   f022
003348   d008     bra	0x335a               	BRA	_00298_DS_
                                           _00297_DS_:
00334a   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	277; main.c	else if(timed_function==2 && !pin_value)
00334c   51e4     movf	0xe4, 0, 0x1        	MOVF	_timed_function, W, B
00334e   0a02     xorlw	0x2                	XORLW	0x02
003350   e104     bnz	0x335a               	BNZ	_00298_DS_
003352   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003354   e102     bnz	0x335a               	BNZ	_00298_DS_
                                           ;	.line	278; main.c	return;//button push will only be processed when no LED's are flashing.
003356   efb0     goto	0x3760              	GOTO	_00326_DS_
003358   f01b
                                           _00298_DS_:
                                           ;	.line	279; main.c	if(pin > 7 && !pin_value){//this is a value button. only handle if button is pushed
00335a   0e08     movlw	0x8                	MOVLW	0x08
00335c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00335e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003360   d1af     bra	0x36c0               	BRA	_00323_DS_
003362   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003364   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
003366   d1ac     bra	0x36c0               	BRA	_00323_DS_
                                           ;	.line	280; main.c	value = pin - 8;
003368   0ef8     movlw	0xf8               	MOVLW	0xf8
00336a   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00336c   6e12     movwf	0x12, 0            	MOVWF	r0x02
                                           ;	.line	281; main.c	switch(current_screen_num){
00336e   0e04     movlw	0x4                	MOVLW	0x04
003370   0100     movlb	0                  	BANKSEL	_current_screen_num
003372   5de0     subwf	0xe0, 0, 0x1       	SUBWF	_current_screen_num, W, B
003374   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003376   d1f2     bra	0x375c               	BRA	_00324_DS_
003378   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
00337a   ffed
00337c   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
00337e   ffed
003380   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
                                           ; removed redundant BANKSEL
003382   35e0     rlcf	0xe0, 0, 0x1        	RLCF	_current_screen_num, W, B
003384   361c     rlcf	0x1c, 0x1, 0        	RLCF	r0x0c, F
003386   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003388   361c     rlcf	0x1c, 0x1, 0        	RLCF	r0x0c, F
00338a   0bfc     andlw	0xfc               	ANDLW	0xfc
00338c   6e1b     movwf	0x1b, 0            	MOVWF	r0x0b
00338e   0e00     movlw	0                  	MOVLW	UPPER(_00359_DS_)
003390   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003392   0e33     movlw	0x33               	MOVLW	HIGH(_00359_DS_)
003394   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003396   0eae     movlw	0xae               	MOVLW	LOW(_00359_DS_)
003398   261b     addwf	0x1b, 0x1, 0       	ADDWF	r0x0b, F
00339a   501c     movf	0x1c, 0, 0          	MOVF	r0x0c, W
00339c   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
00339e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0033a0   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0033a2   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
0033a4   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
0033a6   f01c
0033a8   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
0033aa   f01b
0033ac   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00359_DS_:
0033ae   efdf     goto	0x33be              	GOTO	_00299_DS_
0033b0   f019
0033b2   ef0b     goto	0x3416              	GOTO	_00303_DS_
0033b4   f01a
0033b6   ef0f     goto	0x341e              	GOTO	_00304_DS_
0033b8   f01a
0033ba   efb8     goto	0x3570              	GOTO	_00308_DS_
0033bc   f01a
                                           _00299_DS_:
                                           ;	.line	283; main.c	if (current_shift_state & int_bit_ormask[0]){
0033be   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
0033c0   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0033c2   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
0033c4   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0033c6   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0033c8   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
0033ca   0009     tblrd	*+                 	TBLRD*+	
0033cc   cff5     movff	0xff5, 0x13        	MOVFF	TABLAT, r0x03
0033ce   f013
0033d0   0009     tblrd	*+                 	TBLRD*+	
0033d2   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
0033d4   f014
0033d6   c0e3     movff	0xe3, 0x15         	MOVFF	_current_shift_state, r0x05
0033d8   f015
0033da   6a16     clrf	0x16, 0             	CLRF	r0x06
0033dc   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0033de   1613     andwf	0x13, 0x1, 0       	ANDWF	r0x03, F
0033e0   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0033e2   1614     andwf	0x14, 0x1, 0       	ANDWF	r0x04, F
0033e4   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0033e6   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
0033e8   e012     bz	0x340e                	BZ	_00301_DS_
0033ea   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	284; main.c	preset_store(current_preset_num);
0033ec   51e1     movf	0xe1, 0, 0x1        	MOVF	_current_preset_num, W, B
0033ee   ec91     call	0x4122, 0           	CALL	_preset_store
0033f0   f020
                                           ;	.line	285; main.c	led_flash_start(current_preset_num+8,0,50);//LED off for half a second to indicate save
0033f2   0e08     movlw	0x8                	MOVLW	0x08
0033f4   0100     movlb	0                  	BANKSEL	_current_preset_num
0033f6   25e1     addwf	0xe1, 0, 0x1       	ADDWF	_current_preset_num, W, B
0033f8   6e13     movwf	0x13, 0            	MOVWF	r0x03
0033fa   0e32     movlw	0x32               	MOVLW	0x32
0033fc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033fe   0e00     movlw	0                  	MOVLW	0x00
003400   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003402   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003404   ec35     call	0x426a, 0           	CALL	_led_flash_start
003406   f021
003408   0e02     movlw	0x2                	MOVLW	0x02
00340a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
00340c   d1a7     bra	0x375c               	BRA	_00324_DS_
                                           _00301_DS_:
                                           ;	.line	288; main.c	current_preset_set(value);
00340e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003410   ecbc     call	0x4378, 0           	CALL	_current_preset_set
003412   f021
                                           ;	.line	289; main.c	break;			
003414   d1a3     bra	0x375c               	BRA	_00324_DS_
                                           _00303_DS_:
                                           ;	.line	291; main.c	current_bus_set(value);
003416   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003418   ecea     call	0x43d4, 0           	CALL	_current_bus_set
00341a   f021
                                           ;	.line	292; main.c	break;			
00341c   d19f     bra	0x375c               	BRA	_00324_DS_
                                           _00304_DS_:
                                           ;	.line	294; main.c	if (current_shift_state & int_bit_ormask[2]){//add/remove input chanel
00341e   0e00     movlw	0                  	MOVLW	LOW(_int_bit_ormask + 4)
003420   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
003422   0e44     movlw	0x44               	MOVLW	HIGH(_int_bit_ormask + 4)
003424   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
003426   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask + 4)
003428   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
00342a   0009     tblrd	*+                 	TBLRD*+	
00342c   cff5     movff	0xff5, 0x13        	MOVFF	TABLAT, r0x03
00342e   f013
003430   0009     tblrd	*+                 	TBLRD*+	
003432   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
003434   f014
003436   c0e3     movff	0xe3, 0x15         	MOVFF	_current_shift_state, r0x05
003438   f015
00343a   6a16     clrf	0x16, 0             	CLRF	r0x06
00343c   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00343e   1613     andwf	0x13, 0x1, 0       	ANDWF	r0x03, F
003440   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003442   1614     andwf	0x14, 0x1, 0       	ANDWF	r0x04, F
003444   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003446   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
003448   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00344a   d04c     bra	0x34e4               	BRA	_00306_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00344c   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	295; main.c	current_preset[current_bus_num].inputs = 
00344e   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003450   0d04     mullw	0x4                	MULLW	0x04
003452   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x03
003454   f013
003456   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003458   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
00345a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00345c   6a14     clrf	0x14, 0             	CLRF	r0x04
00345e   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003460   c013     movff	0x13, 0x15         	MOVFF	r0x03, r0x05
003462   f015
003464   c014     movff	0x14, 0x16         	MOVFF	r0x04, r0x06
003466   f016
                                           ;	.line	296; main.c	(current_preset[current_bus_num].inputs & int_bit_ormask[value])?
003468   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
00346a   ffe1
00346c   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00346e   ffe2
003470   cfe6     movff	0xfe6, 0x13        	MOVFF	POSTINC0, r0x03
003472   f013
003474   cfe7     movff	0xfe7, 0x14        	MOVFF	INDF0, r0x04
003476   f014
                                           ; ;multiply lit val:0x02 by variable r0x02 and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003478   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00347a   3412     rlcf	0x12, 0, 0          	RLCF	r0x02, W
00347c   6e17     movwf	0x17, 0            	MOVWF	r0x07
00347e   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003480   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
003482   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
003484   6a18     clrf	0x18, 0             	CLRF	r0x08
003486   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003488   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
00348a   6a19     clrf	0x19, 0             	CLRF	r0x09
00348c   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
00348e   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
003490   fff6
003492   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
003494   fff7
003496   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
003498   fff8
00349a   0009     tblrd	*+                 	TBLRD*+	
00349c   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
00349e   f017
0034a0   0009     tblrd	*+                 	TBLRD*+	
0034a2   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
0034a4   f018
0034a6   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0034a8   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
0034aa   6e19     movwf	0x19, 0            	MOVWF	r0x09
0034ac   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0034ae   1414     andwf	0x14, 0, 0         	ANDWF	r0x04, W
0034b0   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
0034b2   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
0034b4   101a     iorwf	0x1a, 0, 0         	IORWF	r0x0a, W
0034b6   e007     bz	0x34c6                	BZ	_00328_DS_
                                           ;	.line	297; main.c	(current_preset[current_bus_num].inputs ^ int_bit_ormask[value]):
0034b8   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0034ba   1813     xorwf	0x13, 0, 0         	XORWF	r0x03, W
0034bc   6e19     movwf	0x19, 0            	MOVWF	r0x09
0034be   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0034c0   1814     xorwf	0x14, 0, 0         	XORWF	r0x04, W
0034c2   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
0034c4   d006     bra	0x34d2               	BRA	_00329_DS_
                                           _00328_DS_:
                                           ;	.line	298; main.c	(current_preset[current_bus_num].inputs | int_bit_ormask[value]);
0034c6   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0034c8   1013     iorwf	0x13, 0, 0         	IORWF	r0x03, W
0034ca   6e19     movwf	0x19, 0            	MOVWF	r0x09
0034cc   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0034ce   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
0034d0   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
                                           _00329_DS_:
0034d2   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
0034d4   ffe1
0034d6   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
0034d8   ffe2
0034da   c019     movff	0x19, 0xfe6        	MOVFF	r0x09, POSTINC0
0034dc   ffe6
0034de   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
0034e0   ffe7
0034e2   d043     bra	0x356a               	BRA	_00307_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00306_DS_:
0034e4   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	301; main.c	current_preset[current_bus_num].inputs = 
0034e6   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
0034e8   0d04     mullw	0x4                	MULLW	0x04
0034ea   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x03
0034ec   f013
0034ee   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0034f0   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0034f2   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0034f4   6a14     clrf	0x14, 0             	CLRF	r0x04
0034f6   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0034f8   c013     movff	0x13, 0x15         	MOVFF	r0x03, r0x05
0034fa   f015
0034fc   c014     movff	0x14, 0x16         	MOVFF	r0x04, r0x06
0034fe   f016
                                           ;	.line	302; main.c	(current_preset[current_bus_num].inputs==int_bit_ormask[value]) ? 0x0000 :int_bit_ormask[value];
003500   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003502   ffe1
003504   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003506   ffe2
003508   cfe6     movff	0xfe6, 0x13        	MOVFF	POSTINC0, r0x03
00350a   f013
00350c   cfe7     movff	0xfe7, 0x14        	MOVFF	INDF0, r0x04
00350e   f014
                                           ; ;multiply lit val:0x02 by variable r0x02 and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003510   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003512   3412     rlcf	0x12, 0, 0          	RLCF	r0x02, W
003514   6e17     movwf	0x17, 0            	MOVWF	r0x07
003516   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003518   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
00351a   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
00351c   6a18     clrf	0x18, 0             	CLRF	r0x08
00351e   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003520   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003522   6a19     clrf	0x19, 0             	CLRF	r0x09
003524   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
003526   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
003528   fff6
00352a   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
00352c   fff7
00352e   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
003530   fff8
003532   0009     tblrd	*+                 	TBLRD*+	
003534   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
003536   f017
003538   0009     tblrd	*+                 	TBLRD*+	
00353a   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
00353c   f018
00353e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003540   1817     xorwf	0x17, 0, 0         	XORWF	r0x07, W
003542   e103     bnz	0x354a               	BNZ	_00360_DS_
003544   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003546   1818     xorwf	0x18, 0, 0         	XORWF	r0x08, W
003548   e001     bz	0x354c                	BZ	_00361_DS_
                                           _00360_DS_:
00354a   d003     bra	0x3552               	BRA	_00330_DS_
                                           _00361_DS_:
00354c   6a13     clrf	0x13, 0             	CLRF	r0x03
00354e   6a14     clrf	0x14, 0             	CLRF	r0x04
003550   d004     bra	0x355a               	BRA	_00331_DS_
                                           _00330_DS_:
003552   c017     movff	0x17, 0x13         	MOVFF	r0x07, r0x03
003554   f013
003556   c018     movff	0x18, 0x14         	MOVFF	r0x08, r0x04
003558   f014
                                           _00331_DS_:
00355a   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
00355c   ffe1
00355e   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
003560   ffe2
003562   c013     movff	0x13, 0xfe6        	MOVFF	r0x03, POSTINC0
003564   ffe6
003566   c014     movff	0x14, 0xfe7        	MOVFF	r0x04, INDF0
003568   ffe7
                                           _00307_DS_:
                                           ;	.line	304; main.c	inout_map_build();
00356a   ecc9     call	0x3792, 0           	CALL	_inout_map_build
00356c   f01b
                                           ;	.line	305; main.c	break;			
00356e   d0f6     bra	0x375c               	BRA	_00324_DS_
                                           _00308_DS_:
                                           ;	.line	307; main.c	if (current_shift_state & int_bit_ormask[3]){//set/unset output chanel
003570   0e02     movlw	0x2                	MOVLW	LOW(_int_bit_ormask + 6)
003572   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
003574   0e44     movlw	0x44               	MOVLW	HIGH(_int_bit_ormask + 6)
003576   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
003578   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask + 6)
00357a   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
00357c   0009     tblrd	*+                 	TBLRD*+	
00357e   cff5     movff	0xff5, 0x13        	MOVFF	TABLAT, r0x03
003580   f013
003582   0009     tblrd	*+                 	TBLRD*+	
003584   cff5     movff	0xff5, 0x14        	MOVFF	TABLAT, r0x04
003586   f014
003588   c0e3     movff	0xe3, 0x15         	MOVFF	_current_shift_state, r0x05
00358a   f015
00358c   6a16     clrf	0x16, 0             	CLRF	r0x06
00358e   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003590   1613     andwf	0x13, 0x1, 0       	ANDWF	r0x03, F
003592   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003594   1614     andwf	0x14, 0x1, 0       	ANDWF	r0x04, F
003596   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003598   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
00359a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00359c   d04c     bra	0x3636               	BRA	_00310_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00359e   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	308; main.c	current_preset[current_bus_num].outputs = 
0035a0   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
0035a2   0d04     mullw	0x4                	MULLW	0x04
0035a4   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x03
0035a6   f013
0035a8   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0035aa   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0035ac   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0035ae   6a14     clrf	0x14, 0             	CLRF	r0x04
0035b0   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
0035b2   0e02     movlw	0x2                	MOVLW	0x02
0035b4   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
0035b6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0035b8   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
                                           ;	.line	309; main.c	(current_preset[current_bus_num].outputs & int_bit_ormask[value])?
0035ba   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0035bc   ffe1
0035be   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0035c0   ffe2
0035c2   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
0035c4   f015
0035c6   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
0035c8   f016
                                           ; ;multiply lit val:0x02 by variable r0x02 and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0035ca   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0035cc   3412     rlcf	0x12, 0, 0          	RLCF	r0x02, W
0035ce   6e17     movwf	0x17, 0            	MOVWF	r0x07
0035d0   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
0035d2   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
0035d4   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
0035d6   6a18     clrf	0x18, 0             	CLRF	r0x08
0035d8   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0035da   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0035dc   6a19     clrf	0x19, 0             	CLRF	r0x09
0035de   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
0035e0   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
0035e2   fff6
0035e4   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
0035e6   fff7
0035e8   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
0035ea   fff8
0035ec   0009     tblrd	*+                 	TBLRD*+	
0035ee   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0035f0   f017
0035f2   0009     tblrd	*+                 	TBLRD*+	
0035f4   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
0035f6   f018
0035f8   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0035fa   1415     andwf	0x15, 0, 0         	ANDWF	r0x05, W
0035fc   6e19     movwf	0x19, 0            	MOVWF	r0x09
0035fe   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003600   1416     andwf	0x16, 0, 0         	ANDWF	r0x06, W
003602   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003604   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
003606   101a     iorwf	0x1a, 0, 0         	IORWF	r0x0a, W
003608   e007     bz	0x3618                	BZ	_00332_DS_
                                           ;	.line	310; main.c	(current_preset[current_bus_num].outputs ^ int_bit_ormask[value]):
00360a   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
00360c   1815     xorwf	0x15, 0, 0         	XORWF	r0x05, W
00360e   6e19     movwf	0x19, 0            	MOVWF	r0x09
003610   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003612   1816     xorwf	0x16, 0, 0         	XORWF	r0x06, W
003614   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003616   d006     bra	0x3624               	BRA	_00333_DS_
                                           _00332_DS_:
                                           ;	.line	311; main.c	(current_preset[current_bus_num].outputs | int_bit_ormask[value]);
003618   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
00361a   1015     iorwf	0x15, 0, 0         	IORWF	r0x05, W
00361c   6e19     movwf	0x19, 0            	MOVWF	r0x09
00361e   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003620   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
003622   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
                                           _00333_DS_:
003624   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003626   ffe1
003628   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00362a   ffe2
00362c   c019     movff	0x19, 0xfe6        	MOVFF	r0x09, POSTINC0
00362e   ffe6
003630   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
003632   ffe7
003634   d042     bra	0x36ba               	BRA	_00311_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00310_DS_:
003636   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	314; main.c	current_preset[current_bus_num].outputs = 
003638   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
00363a   0d04     mullw	0x4                	MULLW	0x04
00363c   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x03
00363e   f013
003640   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003642   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003644   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003646   6a14     clrf	0x14, 0             	CLRF	r0x04
003648   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00364a   0e02     movlw	0x2                	MOVLW	0x02
00364c   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
00364e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003650   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
                                           ;	.line	315; main.c	(current_preset[current_bus_num].outputs==int_bit_ormask[value]) ? 
003652   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003654   ffe1
003656   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003658   ffe2
00365a   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
00365c   f015
00365e   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
003660   f016
                                           ; ;multiply lit val:0x02 by variable r0x02 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003662   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003664   3612     rlcf	0x12, 0x1, 0        	RLCF	r0x02, F
003666   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003668   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
00366a   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
00366c   6a17     clrf	0x17, 0             	CLRF	r0x07
00366e   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003670   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003672   6a18     clrf	0x18, 0             	CLRF	r0x08
003674   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003676   c012     movff	0x12, 0xff6        	MOVFF	r0x02, TBLPTRL
003678   fff6
00367a   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
00367c   fff7
00367e   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
003680   fff8
003682   0009     tblrd	*+                 	TBLRD*+	
003684   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
003686   f012
003688   0009     tblrd	*+                 	TBLRD*+	
00368a   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
00368c   f017
00368e   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003690   1812     xorwf	0x12, 0, 0         	XORWF	r0x02, W
003692   e103     bnz	0x369a               	BNZ	_00362_DS_
003694   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003696   1817     xorwf	0x17, 0, 0         	XORWF	r0x07, W
003698   e001     bz	0x369c                	BZ	_00363_DS_
                                           _00362_DS_:
00369a   d003     bra	0x36a2               	BRA	_00334_DS_
                                           _00363_DS_:
                                           ;	.line	316; main.c	0x0000 :int_bit_ormask[value];
00369c   6a15     clrf	0x15, 0             	CLRF	r0x05
00369e   6a16     clrf	0x16, 0             	CLRF	r0x06
0036a0   d004     bra	0x36aa               	BRA	_00335_DS_
                                           _00334_DS_:
0036a2   c012     movff	0x12, 0x15         	MOVFF	r0x02, r0x05
0036a4   f015
0036a6   c017     movff	0x17, 0x16         	MOVFF	r0x07, r0x06
0036a8   f016
                                           _00335_DS_:
0036aa   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
0036ac   ffe1
0036ae   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
0036b0   ffe2
0036b2   c015     movff	0x15, 0xfe6        	MOVFF	r0x05, POSTINC0
0036b4   ffe6
0036b6   c016     movff	0x16, 0xfe7        	MOVFF	r0x06, INDF0
0036b8   ffe7
                                           _00311_DS_:
                                           ;	.line	318; main.c	inout_map_build();
0036ba   ecc9     call	0x3792, 0           	CALL	_inout_map_build
0036bc   f01b
                                           ;	.line	320; main.c	}
0036be   d04e     bra	0x375c               	BRA	_00324_DS_
                                           _00323_DS_:
                                           ;	.line	322; main.c	else if(pin < 4){
0036c0   0e04     movlw	0x4                	MOVLW	0x04
0036c2   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
0036c4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0036c6   d04a     bra	0x375c               	BRA	_00324_DS_
                                           ;	.line	323; main.c	if(pin_value)
0036c8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0036ca   e01c     bz	0x3704                	BZ	_00318_DS_
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	324; main.c	current_shift_state &= ~int_bit_ormask[pin];//remove shift flag
0036cc   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0036ce   3410     rlcf	0x10, 0, 0          	RLCF	r0x00, W
0036d0   6e11     movwf	0x11, 0            	MOVWF	r0x01
0036d2   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
0036d4   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0036d6   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
0036d8   6a12     clrf	0x12, 0             	CLRF	r0x02
0036da   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
0036dc   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0036de   6a13     clrf	0x13, 0             	CLRF	r0x03
0036e0   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0036e2   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
0036e4   fff6
0036e6   c012     movff	0x12, 0xff7        	MOVFF	r0x02, TBLPTRH
0036e8   fff7
0036ea   c013     movff	0x13, 0xff8        	MOVFF	r0x03, TBLPTRU
0036ec   fff8
0036ee   0009     tblrd	*+                 	TBLRD*+	
0036f0   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
0036f2   f011
0036f4   0009     tblrd	*+                 	TBLRD*+	
0036f6   cff5     movff	0xff5, 0x12        	MOVFF	TABLAT, r0x02
0036f8   f012
0036fa   1e11     comf	0x11, 0x1, 0        	COMF	r0x01, F
0036fc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0036fe   0100     movlb	0                  	BANKSEL	_current_shift_state
003700   17e3     andwf	0xe3, 0x1, 0x1     	ANDWF	_current_shift_state, F, B
003702   d02c     bra	0x375c               	BRA	_00324_DS_
                                           _00318_DS_:
003704   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	326; main.c	if(!current_shift_state){
003706   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003708   e109     bnz	0x371c               	BNZ	_00316_DS_
                                           ;	.line	327; main.c	current_screen_set(pin);
00370a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00370c   ec0e     call	0x441c, 0           	CALL	_current_screen_set
00370e   f022
                                           ;	.line	328; main.c	if(pin < 2)//start init request countdown
003710   0e02     movlw	0x2                	MOVLW	0x02
003712   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003714   e203     bc	0x371c                	BC	_00316_DS_
                                           ;	.line	329; main.c	timed_function_start(1);
003716   0e01     movlw	0x1                	MOVLW	0x01
003718   ecd5     call	0x43aa, 0           	CALL	_timed_function_start
00371a   f021
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00316_DS_:
                                           ;	.line	331; main.c	current_shift_state |= int_bit_ormask[pin];//add shift flag
00371c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00371e   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x00, F
003720   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003722   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003724   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
003726   6a11     clrf	0x11, 0             	CLRF	r0x01
003728   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
00372a   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
00372c   6a12     clrf	0x12, 0             	CLRF	r0x02
00372e   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x02, F
003730   c010     movff	0x10, 0xff6        	MOVFF	r0x00, TBLPTRL
003732   fff6
003734   c011     movff	0x11, 0xff7        	MOVFF	r0x01, TBLPTRH
003736   fff7
003738   c012     movff	0x12, 0xff8        	MOVFF	r0x02, TBLPTRU
00373a   fff8
00373c   0009     tblrd	*+                 	TBLRD*+	
00373e   cff5     movff	0xff5, 0x10        	MOVFF	TABLAT, r0x00
003740   f010
003742   0009     tblrd	*+                 	TBLRD*+	
003744   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
003746   f011
003748   c0e3     movff	0xe3, 0x12         	MOVFF	_current_shift_state, r0x02
00374a   f012
00374c   6a13     clrf	0x13, 0             	CLRF	r0x03
00374e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003750   1210     iorwf	0x10, 0x1, 0       	IORWF	r0x00, F
003752   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003754   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
003756   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003758   0100     movlb	0                  	BANKSEL	_current_shift_state
00375a   6fe3     movwf	0xe3, 0x1          	MOVWF	_current_shift_state, B
                                           _00324_DS_:
                                           ;	.line	334; main.c	screen_print();
00375c   ec0b     call	0x3a16, 0           	CALL	_screen_print
00375e   f01d
                                           _00326_DS_:
003760   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
003762   f01a
003764   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003766   f019
003768   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
00376a   f018
00376c   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
00376e   f017
003770   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003772   f016
003774   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003776   f015
003778   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
00377a   f014
00377c   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00377e   f013
003780   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003782   f012
003784   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003786   f011
003788   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00378a   f010
00378c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00378e   ffd9
003790   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Tick	code
                                           _Tick:
                                           ;	.line	235; main.c	void Tick(void) __wparam{
003e9c   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003e9e   ffed
003ea0   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003ea2   ffed
003ea4   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	237; main.c	if(!timed_function)
003ea6   51e4     movf	0xe4, 0, 0x1        	MOVF	_timed_function, W, B
003ea8   e101     bnz	0x3eac               	BNZ	_00252_DS_
                                           ;	.line	238; main.c	return;
003eaa   d068     bra	0x3f7c               	BRA	_00270_DS_
                                           _00252_DS_:
003eac   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	239; main.c	if(timed_function==1 && (timer_ticks_count >= init_request_ticks)){
003eae   51e4     movf	0xe4, 0, 0x1        	MOVF	_timed_function, W, B
003eb0   0a01     xorlw	0x1                	XORLW	0x01
003eb2   e001     bz	0x3eb6                	BZ	_00283_DS_
003eb4   d041     bra	0x3f38               	BRA	_00263_DS_
                                           _00283_DS_:
003eb6   0e01     movlw	0x1                	MOVLW	0x01
003eb8   0100     movlb	0                  	BANKSEL	(_timer_ticks_count + 1)
003eba   5de6     subwf	0xe6, 0, 0x1       	SUBWF	(_timer_ticks_count + 1), W, B
003ebc   e102     bnz	0x3ec2               	BNZ	_00284_DS_
003ebe   0e2c     movlw	0x2c               	MOVLW	0x2c
                                           ; removed redundant BANKSEL
003ec0   5de5     subwf	0xe5, 0, 0x1       	SUBWF	_timer_ticks_count, W, B
                                           _00284_DS_:
003ec2   e33a     bnc	0x3f38               	BNC	_00263_DS_
                                           ;	.line	240; main.c	timed_function_stop();
003ec4   ecd1     call	0x45a2, 0           	CALL	_timed_function_stop
003ec6   f022
003ec8   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	241; main.c	if(!current_screen_num){//screen is preset
003eca   51e0     movf	0xe0, 0, 0x1        	MOVF	_current_screen_num, W, B
003ecc   e125     bnz	0x3f18               	BNZ	_00254_DS_
                                           ;	.line	242; main.c	preset_init(0);
003ece   0e00     movlw	0                  	MOVLW	0x00
003ed0   ec07     call	0x3c0e, 0           	CALL	_preset_init
003ed2   f01e
                                           ;	.line	243; main.c	preset_store(0);
003ed4   0e00     movlw	0                  	MOVLW	0x00
003ed6   ec91     call	0x4122, 0           	CALL	_preset_store
003ed8   f020
                                           ;	.line	244; main.c	preset_init(1);
003eda   0e01     movlw	0x1                	MOVLW	0x01
003edc   ec07     call	0x3c0e, 0           	CALL	_preset_init
003ede   f01e
                                           ;	.line	245; main.c	for(i=1;i<16;i++)
003ee0   0e01     movlw	0x1                	MOVLW	0x01
003ee2   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           _00266_DS_:
003ee4   0e10     movlw	0x10               	MOVLW	0x10
003ee6   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003ee8   e205     bc	0x3ef4                	BC	_00269_DS_
                                           ;	.line	246; main.c	preset_store(i);
003eea   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003eec   ec91     call	0x4122, 0           	CALL	_preset_store
003eee   f020
                                           ;	.line	245; main.c	for(i=1;i<16;i++)
003ef0   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003ef2   d7f8     bra	0x3ee4               	BRA	_00266_DS_
                                           _00269_DS_:
                                           ;	.line	247; main.c	current_preset_set(0);
003ef4   0e00     movlw	0                  	MOVLW	0x00
003ef6   ecbc     call	0x4378, 0           	CALL	_current_preset_set
003ef8   f021
                                           ;	.line	248; main.c	current_bus_set(0);
003efa   0e00     movlw	0                  	MOVLW	0x00
003efc   ecea     call	0x43d4, 0           	CALL	_current_bus_set
003efe   f021
                                           ;	.line	249; main.c	inout_map_build();
003f00   ecc9     call	0x3792, 0           	CALL	_inout_map_build
003f02   f01b
                                           ;	.line	250; main.c	led_flash_start(0xff,5,10);//flash 5 times
003f04   0e0a     movlw	0xa                	MOVLW	0x0a
003f06   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f08   0e05     movlw	0x5                	MOVLW	0x05
003f0a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f0c   0eff     movlw	0xff               	MOVLW	0xff
003f0e   ec35     call	0x426a, 0           	CALL	_led_flash_start
003f10   f021
003f12   0e02     movlw	0x2                	MOVLW	0x02
003f14   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003f16   d032     bra	0x3f7c               	BRA	_00270_DS_
                                           _00254_DS_:
                                           ;	.line	253; main.c	preset_init(1);//empty current preset
003f18   0e01     movlw	0x1                	MOVLW	0x01
003f1a   ec07     call	0x3c0e, 0           	CALL	_preset_init
003f1c   f01e
                                           ;	.line	254; main.c	current_bus_set(0);
003f1e   0e00     movlw	0                  	MOVLW	0x00
003f20   ecea     call	0x43d4, 0           	CALL	_current_bus_set
003f22   f021
                                           ;	.line	255; main.c	led_flash_start(0xff,2,10);//flash 2 times
003f24   0e0a     movlw	0xa                	MOVLW	0x0a
003f26   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f28   0e02     movlw	0x2                	MOVLW	0x02
003f2a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f2c   0eff     movlw	0xff               	MOVLW	0xff
003f2e   ec35     call	0x426a, 0           	CALL	_led_flash_start
003f30   f021
003f32   0e02     movlw	0x2                	MOVLW	0x02
003f34   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
003f36   d022     bra	0x3f7c               	BRA	_00270_DS_
                                           _00263_DS_:
003f38   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	258; main.c	else if(timed_function==2 && (timer_ticks_count >= led_flash_ticks)){
003f3a   51e4     movf	0xe4, 0, 0x1        	MOVF	_timed_function, W, B
003f3c   0a02     xorlw	0x2                	XORLW	0x02
003f3e   e11e     bnz	0x3f7c               	BNZ	_00270_DS_
003f40   c0e9     movff	0xe9, 0x10         	MOVFF	_led_flash_ticks, r0x00
003f42   f010
003f44   6a11     clrf	0x11, 0             	CLRF	r0x01
003f46   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003f48   0100     movlb	0                  	BANKSEL	(_timer_ticks_count + 1)
003f4a   5de6     subwf	0xe6, 0, 0x1       	SUBWF	(_timer_ticks_count + 1), W, B
003f4c   e102     bnz	0x3f52               	BNZ	_00288_DS_
003f4e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
003f50   5de5     subwf	0xe5, 0, 0x1       	SUBWF	_timer_ticks_count, W, B
                                           _00288_DS_:
003f52   e314     bnc	0x3f7c               	BNC	_00270_DS_
                                           ;	.line	259; main.c	if(led_flash_count > 1){
003f54   0e02     movlw	0x2                	MOVLW	0x02
003f56   0100     movlb	0                  	BANKSEL	_led_flash_count
003f58   5de8     subwf	0xe8, 0, 0x1       	SUBWF	_led_flash_count, W, B
003f5a   e30c     bnc	0x3f74               	BNC	_00257_DS_
                                           ;	.line	260; main.c	led_flash_set(led_flash_count-- & 0x01);
003f5c   c0e8     movff	0xe8, 0x10         	MOVFF	_led_flash_count, r0x00
003f5e   f010
003f60   07e8     decf	0xe8, 0x1, 0x1      	DECF	_led_flash_count, F, B
003f62   0e01     movlw	0x1                	MOVLW	0x01
003f64   1610     andwf	0x10, 0x1, 0       	ANDWF	r0x00, F
003f66   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003f68   ec05     call	0x420a, 0           	CALL	_led_flash_set
003f6a   f021
003f6c   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	261; main.c	timer_ticks_count = 0;
003f6e   6be5     clrf	0xe5, 0x1           	CLRF	_timer_ticks_count, B
                                           ; removed redundant BANKSEL
003f70   6be6     clrf	0xe6, 0x1           	CLRF	(_timer_ticks_count + 1), B
003f72   d004     bra	0x3f7c               	BRA	_00270_DS_
                                           _00257_DS_:
                                           ;	.line	264; main.c	timed_function_stop();
003f74   ecd1     call	0x45a2, 0           	CALL	_timed_function_stop
003f76   f022
                                           ;	.line	265; main.c	screen_print();
003f78   ec0b     call	0x3a16, 0           	CALL	_screen_print
003f7a   f01d
                                           _00270_DS_:
003f7c   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003f7e   f011
003f80   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003f82   f010
003f84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__led_flash_set	code
                                           _led_flash_set:
                                           ;	.line	224; main.c	void led_flash_set(unsigned char state) __wparam{
00420a   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00420c   ffed
00420e   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004210   ffd9
004212   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004214   ffed
004216   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004218   ffed
00421a   6e10     movwf	0x10, 0            	MOVWF	r0x00
00421c   0100     movlb	0                  	BANKSEL	_led_flash_led
                                           ;	.line	225; main.c	if(led_flash_led == 0xff){
00421e   51e7     movf	0xe7, 0, 0x1        	MOVF	_led_flash_led, W, B
004220   0aff     xorlw	0xff               	XORLW	0xff
004222   e115     bnz	0x424e               	BNZ	_00237_DS_
                                           ;	.line	226; main.c	state = (state ? 0xff : 0x00);
004224   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004226   e003     bz	0x422e                	BZ	_00241_DS_
004228   0eff     movlw	0xff               	MOVLW	0xff
00422a   6e11     movwf	0x11, 0            	MOVWF	r0x01
00422c   d001     bra	0x4230               	BRA	_00242_DS_
                                           _00241_DS_:
00422e   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00242_DS_:
004230   c011     movff	0x11, 0x10         	MOVFF	r0x01, r0x00
004232   f010
                                           ;	.line	227; main.c	MIOS_DOUT_SRSet(0x01,state);
004234   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004236   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004238   0e01     movlw	0x1                	MOVLW	0x01
00423a   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
00423c   f023
00423e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	228; main.c	MIOS_DOUT_SRSet(0x02,state);
004240   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004242   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004244   0e02     movlw	0x2                	MOVLW	0x02
004246   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
004248   f023
00424a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00424c   d007     bra	0x425c               	BRA	_00239_DS_
                                           _00237_DS_:
                                           ;	.line	231; main.c	MIOS_DOUT_PinSet(led_flash_led,state);
00424e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004250   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004252   0100     movlb	0                  	BANKSEL	_led_flash_led
004254   51e7     movf	0xe7, 0, 0x1        	MOVF	_led_flash_led, W, B
004256   ec03     call	0x4606, 0           	CALL	_MIOS_DOUT_PinSet
004258   f023
00425a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00239_DS_:
00425c   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00425e   f011
004260   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004262   f010
004264   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004266   ffd9
004268   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__led_flash_start	code
                                           _led_flash_start:
                                           ;	.line	216; main.c	void led_flash_start(unsigned char led,unsigned char times,unsigned char ticks) __wparam{
00426a   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00426c   ffed
00426e   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004270   ffd9
004272   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004274   ffed
004276   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004278   ffed
00427a   0100     movlb	0                  	BANKSEL	_led_flash_led
00427c   6fe7     movwf	0xe7, 0x1          	MOVWF	_led_flash_led, B
00427e   0e02     movlw	0x2                	MOVLW	0x02
004280   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
004282   f010
004284   0e03     movlw	0x3                	MOVLW	0x03
004286   cfdb     movff	0xfdb, 0xe9        	MOVFF	PLUSW2, _led_flash_ticks
004288   f0e9
                                           ;	.line	219; main.c	led_flash_count = (times<<1) + 1;
00428a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00428c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00428e   6e11     movwf	0x11, 0            	MOVWF	r0x01
004290   2811     incf	0x11, 0, 0          	INCF	r0x01, W
004292   0100     movlb	0                  	BANKSEL	_led_flash_count
004294   6fe8     movwf	0xe8, 0x1          	MOVWF	_led_flash_count, B
                                           ;	.line	220; main.c	led_flash_set(0);
004296   0e00     movlw	0                  	MOVLW	0x00
004298   ec05     call	0x420a, 0           	CALL	_led_flash_set
00429a   f021
                                           ;	.line	221; main.c	timed_function_start(2);
00429c   0e02     movlw	0x2                	MOVLW	0x02
00429e   ecd5     call	0x43aa, 0           	CALL	_timed_function_start
0042a0   f021
0042a2   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0042a4   f011
0042a6   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0042a8   f010
0042aa   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0042ac   ffd9
0042ae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__timed_function_stop	code
                                           _timed_function_stop:
                                           ;	.line	211; main.c	MIOS_TIMER_Stop();
0045a2   ecc0     call	0x2d80, 0           	CALL	_MIOS_TIMER_Stop
0045a4   f016
0045a6   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	212; main.c	timed_function = 0;
0045a8   6be4     clrf	0xe4, 0x1           	CLRF	_timed_function, B
0045aa   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	213; main.c	timer_ticks_count = 0;
0045ac   6be5     clrf	0xe5, 0x1           	CLRF	_timer_ticks_count, B
                                           ; removed redundant BANKSEL
0045ae   6be6     clrf	0xe6, 0x1           	CLRF	(_timer_ticks_count + 1), B
0045b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__timed_function_start	code
                                           _timed_function_start:
                                           ;	.line	204; main.c	void timed_function_start(unsigned char func) __wparam{
0043aa   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0043ac   ffed
0043ae   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0043b0   ffd9
0043b2   0100     movlb	0                  	BANKSEL	_timed_function
0043b4   6fe4     movwf	0xe4, 0x1          	MOVWF	_timed_function, B
0043b6   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	205; main.c	timer_ticks_count=0;
0043b8   6be5     clrf	0xe5, 0x1           	CLRF	_timer_ticks_count, B
                                           ; removed redundant BANKSEL
0043ba   6be6     clrf	0xe6, 0x1           	CLRF	(_timer_ticks_count + 1), B
                                           ;	.line	207; main.c	MIOS_TIMER_Init(0x01,50000);
0043bc   0ec3     movlw	0xc3               	MOVLW	0xc3
0043be   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043c0   0e50     movlw	0x50               	MOVLW	0x50
0043c2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043c4   0e01     movlw	0x1                	MOVLW	0x01
0043c6   ecc1     call	0x4582, 0           	CALL	_MIOS_TIMER_Init
0043c8   f022
0043ca   0e02     movlw	0x2                	MOVLW	0x02
0043cc   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0043ce   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0043d0   ffd9
0043d2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Timer	code
                                           _Timer:
004694   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	200; main.c	timer_ticks_count++;
004696   2be5     incf	0xe5, 0x1, 0x1      	INCF	_timer_ticks_count, F, B
004698   e301     bnc	0x469c               	BNC	_10456_DS_
                                           ; removed redundant BANKSEL
00469a   2be6     incf	0xe6, 0x1, 0x1      	INCF	(_timer_ticks_count + 1), F, B
                                           _10456_DS_:
00469c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__current_preset_set	code
                                           _current_preset_set:
                                           ;	.line	189; main.c	void current_preset_set(unsigned char value) __wparam{
004378   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00437a   ffed
00437c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00437e   ffd9
004380   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004382   ffed
004384   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	190; main.c	current_preset_num = value;
004386   c010     movff	0x10, 0xe1         	MOVFF	r0x00, _current_preset_num
004388   f0e1
                                           ;	.line	191; main.c	preset_load(value);
00438a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00438c   eccb     call	0x4196, 0           	CALL	_preset_load
00438e   f020
                                           ;	.line	192; main.c	inout_map_build();
004390   ecc9     call	0x3792, 0           	CALL	_inout_map_build
004392   f01b
                                           ;	.line	193; main.c	MIOS_EEPROM_Write(0x01,value);
004394   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004396   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004398   0e01     movlw	0x1                	MOVLW	0x01
00439a   ec33     call	0x4666, 0           	CALL	_MIOS_EEPROM_Write
00439c   f023
00439e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0043a0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0043a2   f010
0043a4   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0043a6   ffd9
0043a8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__current_bus_set	code
                                           _current_bus_set:
                                           ;	.line	184; main.c	void current_bus_set(unsigned char value) __wparam{
0043d4   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0043d6   ffed
0043d8   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0043da   ffd9
0043dc   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0043de   ffed
0043e0   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	185; main.c	current_bus_num = value;
0043e2   c010     movff	0x10, 0xe2         	MOVFF	r0x00, _current_bus_num
0043e4   f0e2
                                           ;	.line	186; main.c	MIOS_EEPROM_Write(0x02,value);
0043e6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0043e8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043ea   0e02     movlw	0x2                	MOVLW	0x02
0043ec   ec33     call	0x4666, 0           	CALL	_MIOS_EEPROM_Write
0043ee   f023
0043f0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0043f2   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0043f4   f010
0043f6   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0043f8   ffd9
0043fa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__current_screen_set	code
                                           _current_screen_set:
                                           ;	.line	179; main.c	void current_screen_set(unsigned char value) __wparam{
00441c   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00441e   ffed
004420   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004422   ffd9
004424   0100     movlb	0                  	BANKSEL	_current_screen_num
004426   6fe0     movwf	0xe0, 0x1          	MOVWF	_current_screen_num, B
                                           ;	.line	181; main.c	MIOS_EEPROM_Write(0x00, current_screen_num);		
004428   51e0     movf	0xe0, 0, 0x1        	MOVF	_current_screen_num, W, B
00442a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00442c   0e00     movlw	0                  	MOVLW	0x00
00442e   ec33     call	0x4666, 0           	CALL	_MIOS_EEPROM_Write
004430   f023
004432   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004434   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004436   ffd9
004438   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__screen_print	code
                                           _screen_print:
                                           ;	.line	148; main.c	void screen_print(void) __wparam{
003a16   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003a18   ffed
003a1a   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003a1c   ffed
003a1e   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	149; main.c	if(timed_function==2)
003a20   51e4     movf	0xe4, 0, 0x1        	MOVF	_timed_function, W, B
003a22   0a02     xorlw	0x2                	XORLW	0x02
003a24   e101     bnz	0x3a28               	BNZ	_00182_DS_
                                           ;	.line	150; main.c	return;//no screen print on LED flash
003a26   d0ee     bra	0x3c04               	BRA	_00194_DS_
                                           _00182_DS_:
003a28   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	152; main.c	MIOS_DOUT_SRSet(0x00,MIOS_HLP_GetBitORMask(current_screen_num));
003a2a   51e0     movf	0xe0, 0, 0x1        	MOVF	_current_screen_num, W, B
003a2c   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003a2e   f016
003a30   6e10     movwf	0x10, 0            	MOVWF	r0x00
003a32   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003a34   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a36   0e00     movlw	0                  	MOVLW	0x00
003a38   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003a3a   f023
003a3c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	154; main.c	MIOS_DOUT_SRSet(0x01,0x00);
003a3e   0e00     movlw	0                  	MOVLW	0x00
003a40   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a42   0e01     movlw	0x1                	MOVLW	0x01
003a44   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003a46   f023
003a48   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	155; main.c	MIOS_DOUT_SRSet(0x02,0x00);
003a4a   0e00     movlw	0                  	MOVLW	0x00
003a4c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003a4e   0e02     movlw	0x2                	MOVLW	0x02
003a50   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003a52   f023
003a54   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	156; main.c	switch(current_screen_num){
003a56   0e04     movlw	0x4                	MOVLW	0x04
003a58   0100     movlb	0                  	BANKSEL	_current_screen_num
003a5a   5de0     subwf	0xe0, 0, 0x1       	SUBWF	_current_screen_num, W, B
003a5c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003a5e   d0d2     bra	0x3c04               	BRA	_00194_DS_
003a60   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003a62   ffed
003a64   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003a66   ffed
003a68   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           ; removed redundant BANKSEL
003a6a   35e0     rlcf	0xe0, 0, 0x1        	RLCF	_current_screen_num, W, B
003a6c   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
003a6e   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003a70   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
003a72   0bfc     andlw	0xfc               	ANDLW	0xfc
003a74   6e12     movwf	0x12, 0            	MOVWF	r0x02
003a76   0e00     movlw	0                  	MOVLW	UPPER(_00203_DS_)
003a78   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003a7a   0e3a     movlw	0x3a               	MOVLW	HIGH(_00203_DS_)
003a7c   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003a7e   0e96     movlw	0x96               	MOVLW	LOW(_00203_DS_)
003a80   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003a82   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003a84   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003a86   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003a88   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003a8a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003a8c   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003a8e   f013
003a90   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003a92   f012
003a94   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00203_DS_:
003a96   ef53     goto	0x3aa6              	GOTO	_00183_DS_
003a98   f01d
003a9a   ef71     goto	0x3ae2              	GOTO	_00187_DS_
003a9c   f01d
003a9e   ef8f     goto	0x3b1e              	GOTO	_00191_DS_
003aa0   f01d
003aa2   efc5     goto	0x3b8a              	GOTO	_00192_DS_
003aa4   f01d
                                           _00183_DS_:
                                           ;	.line	158; main.c	if(current_preset_num < 8)			
003aa6   0e08     movlw	0x8                	MOVLW	0x08
003aa8   0100     movlb	0                  	BANKSEL	_current_preset_num
003aaa   5de1     subwf	0xe1, 0, 0x1       	SUBWF	_current_preset_num, W, B
003aac   e20b     bc	0x3ac4                	BC	_00185_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	159; main.c	MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_preset_num));
003aae   51e1     movf	0xe1, 0, 0x1        	MOVF	_current_preset_num, W, B
003ab0   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003ab2   f016
003ab4   6e10     movwf	0x10, 0            	MOVWF	r0x00
003ab6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ab8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003aba   0e01     movlw	0x1                	MOVLW	0x01
003abc   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003abe   f023
003ac0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003ac2   d0a0     bra	0x3c04               	BRA	_00194_DS_
                                           _00185_DS_:
                                           ;	.line	161; main.c	MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_preset_num-8));				
003ac4   0ef8     movlw	0xf8               	MOVLW	0xf8
003ac6   0100     movlb	0                  	BANKSEL	_current_preset_num
003ac8   25e1     addwf	0xe1, 0, 0x1       	ADDWF	_current_preset_num, W, B
003aca   6e10     movwf	0x10, 0            	MOVWF	r0x00
003acc   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ace   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003ad0   f016
003ad2   6e10     movwf	0x10, 0            	MOVWF	r0x00
003ad4   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ad6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ad8   0e02     movlw	0x2                	MOVLW	0x02
003ada   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003adc   f023
003ade   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	162; main.c	break;
003ae0   d091     bra	0x3c04               	BRA	_00194_DS_
                                           _00187_DS_:
                                           ;	.line	164; main.c	if(current_bus_num < 8)			
003ae2   0e08     movlw	0x8                	MOVLW	0x08
003ae4   0100     movlb	0                  	BANKSEL	_current_bus_num
003ae6   5de2     subwf	0xe2, 0, 0x1       	SUBWF	_current_bus_num, W, B
003ae8   e20b     bc	0x3b00                	BC	_00189_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	165; main.c	MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_bus_num));
003aea   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003aec   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003aee   f016
003af0   6e10     movwf	0x10, 0            	MOVWF	r0x00
003af2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003af4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003af6   0e01     movlw	0x1                	MOVLW	0x01
003af8   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003afa   f023
003afc   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003afe   d082     bra	0x3c04               	BRA	_00194_DS_
                                           _00189_DS_:
                                           ;	.line	167; main.c	MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_bus_num-8));							
003b00   0ef8     movlw	0xf8               	MOVLW	0xf8
003b02   0100     movlb	0                  	BANKSEL	_current_bus_num
003b04   25e2     addwf	0xe2, 0, 0x1       	ADDWF	_current_bus_num, W, B
003b06   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b08   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b0a   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003b0c   f016
003b0e   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b10   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b12   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003b14   0e02     movlw	0x2                	MOVLW	0x02
003b16   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003b18   f023
003b1a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	168; main.c	break;
003b1c   d073     bra	0x3c04               	BRA	_00194_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00191_DS_:
003b1e   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	170; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].inputs & 0x00ff));
003b20   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003b22   0d04     mullw	0x4                	MULLW	0x04
003b24   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003b26   f010
003b28   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003b2a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003b2c   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003b2e   6a11     clrf	0x11, 0             	CLRF	r0x01
003b30   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003b32   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003b34   ffe1
003b36   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003b38   ffe2
003b3a   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003b3c   f010
003b3e   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003b40   f011
003b42   6a11     clrf	0x11, 0             	CLRF	r0x01
003b44   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b46   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003b48   0e01     movlw	0x1                	MOVLW	0x01
003b4a   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003b4c   f023
003b4e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003b50   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	171; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)((current_preset[current_bus_num].inputs >>8) & 0x00ff));
003b52   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003b54   0d04     mullw	0x4                	MULLW	0x04
003b56   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003b58   f010
003b5a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003b5c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003b5e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003b60   6a11     clrf	0x11, 0             	CLRF	r0x01
003b62   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003b64   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003b66   ffe1
003b68   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003b6a   ffe2
003b6c   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003b6e   f010
003b70   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003b72   f011
003b74   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003b76   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b78   6a11     clrf	0x11, 0             	CLRF	r0x01
003b7a   6a11     clrf	0x11, 0             	CLRF	r0x01
003b7c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b7e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003b80   0e02     movlw	0x2                	MOVLW	0x02
003b82   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003b84   f023
003b86   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	172; main.c	break;
003b88   d03d     bra	0x3c04               	BRA	_00194_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00192_DS_:
003b8a   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	174; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].outputs & 0x00ff));
003b8c   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003b8e   0d04     mullw	0x4                	MULLW	0x04
003b90   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003b92   f010
003b94   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003b96   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003b98   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003b9a   6a11     clrf	0x11, 0             	CLRF	r0x01
003b9c   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003b9e   0e02     movlw	0x2                	MOVLW	0x02
003ba0   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003ba2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ba4   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003ba6   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003ba8   ffe1
003baa   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003bac   ffe2
003bae   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003bb0   f010
003bb2   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003bb4   f011
003bb6   6a11     clrf	0x11, 0             	CLRF	r0x01
003bb8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003bba   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003bbc   0e01     movlw	0x1                	MOVLW	0x01
003bbe   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003bc0   f023
003bc2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003bc4   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	175; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)((current_preset[current_bus_num].outputs >>8) & 0x00ff));
003bc6   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003bc8   0d04     mullw	0x4                	MULLW	0x04
003bca   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003bcc   f010
003bce   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003bd0   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003bd2   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003bd4   6a11     clrf	0x11, 0             	CLRF	r0x01
003bd6   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003bd8   0e02     movlw	0x2                	MOVLW	0x02
003bda   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003bdc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003bde   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003be0   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003be2   ffe1
003be4   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003be6   ffe2
003be8   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003bea   f010
003bec   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003bee   f011
003bf0   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003bf2   6e10     movwf	0x10, 0            	MOVWF	r0x00
003bf4   6a11     clrf	0x11, 0             	CLRF	r0x01
003bf6   6a11     clrf	0x11, 0             	CLRF	r0x01
003bf8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003bfa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003bfc   0e02     movlw	0x2                	MOVLW	0x02
003bfe   ec09     call	0x4612, 0           	CALL	_MIOS_DOUT_SRSet
003c00   f023
003c02   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00194_DS_:
                                           ;	.line	176; main.c	}
003c04   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003c06   f011
003c08   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003c0a   f010
003c0c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__inout_map_build	code
                                           _inout_map_build:
                                           ;	.line	124; main.c	void inout_map_build(void) __wparam{
003792   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003794   ffed
003796   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003798   ffed
00379a   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00379c   ffed
00379e   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0037a0   ffed
0037a2   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0037a4   ffed
0037a6   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
0037a8   ffed
0037aa   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
0037ac   ffed
0037ae   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
0037b0   ffed
0037b2   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
0037b4   ffed
0037b6   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
0037b8   ffed
0037ba   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
0037bc   ffed
0037be   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
0037c0   ffed
0037c2   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
0037c4   ffed
0037c6   c01d     movff	0x1d, 0xfed        	MOVFF	r0x0d, POSTDEC1
0037c8   ffed
0037ca   c01e     movff	0x1e, 0xfed        	MOVFF	r0x0e, POSTDEC1
0037cc   ffed
0037ce   c01f     movff	0x1f, 0xfed        	MOVFF	r0x0f, POSTDEC1
0037d0   ffed
0037d2   c020     movff	0x20, 0xfed        	MOVFF	r0x10, POSTDEC1
0037d4   ffed
0037d6   c021     movff	0x21, 0xfed        	MOVFF	r0x11, POSTDEC1
0037d8   ffed
                                           ;	.line	127; main.c	for(input=0;input<16;input++)
0037da   6a10     clrf	0x10, 0             	CLRF	r0x00
0037dc   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00135_DS_:
0037de   0e10     movlw	0x10               	MOVLW	0x10
0037e0   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
0037e2   e212     bc	0x3808                	BC	_00138_DS_
                                           ;	.line	128; main.c	outputs[input] = 0;
0037e4   0ec0     movlw	0xc0               	MOVLW	LOW(_inout_map_build_outputs_1_1)
0037e6   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
0037e8   6e12     movwf	0x12, 0            	MOVWF	r0x02
0037ea   6a13     clrf	0x13, 0             	CLRF	r0x03
0037ec   0e00     movlw	0                  	MOVLW	HIGH(_inout_map_build_outputs_1_1)
0037ee   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0037f0   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0037f2   ffe1
0037f4   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0037f6   ffe2
0037f8   0e00     movlw	0                  	MOVLW	0x00
0037fa   6ee6     movwf	0xe6, 0            	MOVWF	POSTINC0
0037fc   0e00     movlw	0                  	MOVLW	0x00
0037fe   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	127; main.c	for(input=0;input<16;input++)
003800   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003802   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003804   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003806   d7eb     bra	0x37de               	BRA	_00135_DS_
                                           _00138_DS_:
                                           ;	.line	129; main.c	for(input=0;input<16;input++){
003808   6a10     clrf	0x10, 0             	CLRF	r0x00
                                           _00147_DS_:
00380a   0e10     movlw	0x10               	MOVLW	0x10
00380c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00380e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003810   d06e     bra	0x38ee               	BRA	_00174_DS_
                                           ;	.line	130; main.c	for(bus=0;bus<16;bus++){
003812   6a11     clrf	0x11, 0             	CLRF	r0x01
003814   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           _00143_DS_:
003816   0e10     movlw	0x10               	MOVLW	0x10
003818   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
00381a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00381c   d066     bra	0x38ea               	BRA	_00149_DS_
                                           ;	.line	131; main.c	for(input=0;input<16;input++){
00381e   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003820   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003822   6e13     movwf	0x13, 0            	MOVWF	r0x03
003824   6a14     clrf	0x14, 0             	CLRF	r0x04
003826   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003828   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
00382a   6a15     clrf	0x15, 0             	CLRF	r0x05
00382c   6a16     clrf	0x16, 0             	CLRF	r0x06
                                           _00139_DS_:
00382e   0e10     movlw	0x10               	MOVLW	0x10
003830   5c15     subwf	0x15, 0, 0         	SUBWF	r0x05, W
003832   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003834   d054     bra	0x38de               	BRA	_00176_DS_
                                           ;	.line	132; main.c	if(current_preset[bus].inputs & int_bit_ormask[input])
003836   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003838   ffe1
00383a   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
00383c   ffe2
00383e   cfe6     movff	0xfe6, 0x17        	MOVFF	POSTINC0, r0x07
003840   f017
003842   cfe7     movff	0xfe7, 0x18        	MOVFF	INDF0, r0x08
003844   f018
003846   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003848   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
00384a   6e19     movwf	0x19, 0            	MOVWF	r0x09
00384c   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
00384e   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
003850   221a     addwfc	0x1a, 0x1, 0      	ADDWFC	r0x0a, F
003852   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003854   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003856   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
003858   c019     movff	0x19, 0xff6        	MOVFF	r0x09, TBLPTRL
00385a   fff6
00385c   c01a     movff	0x1a, 0xff7        	MOVFF	r0x0a, TBLPTRH
00385e   fff7
003860   c01b     movff	0x1b, 0xff8        	MOVFF	r0x0b, TBLPTRU
003862   fff8
003864   0009     tblrd	*+                 	TBLRD*+	
003866   cff5     movff	0xff5, 0x19        	MOVFF	TABLAT, r0x09
003868   f019
00386a   0009     tblrd	*+                 	TBLRD*+	
00386c   cff5     movff	0xff5, 0x1a        	MOVFF	TABLAT, r0x0a
00386e   f01a
003870   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
003872   1617     andwf	0x17, 0x1, 0       	ANDWF	r0x07, F
003874   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
003876   1618     andwf	0x18, 0x1, 0       	ANDWF	r0x08, F
003878   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
00387a   1018     iorwf	0x18, 0, 0         	IORWF	r0x08, W
00387c   e02c     bz	0x38d6                	BZ	_00141_DS_
                                           ;	.line	133; main.c	outputs[input] |= current_preset[bus].outputs;
00387e   0ec0     movlw	0xc0               	MOVLW	LOW(_inout_map_build_outputs_1_1)
003880   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
003882   6e17     movwf	0x17, 0            	MOVWF	r0x07
003884   6a18     clrf	0x18, 0             	CLRF	r0x08
003886   0e00     movlw	0                  	MOVLW	HIGH(_inout_map_build_outputs_1_1)
003888   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
00388a   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
00388c   ffe1
00388e   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
003890   ffe2
003892   cfe6     movff	0xfe6, 0x19        	MOVFF	POSTINC0, r0x09
003894   f019
003896   cfe7     movff	0xfe7, 0x1a        	MOVFF	INDF0, r0x0a
003898   f01a
00389a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00389c   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
00389e   6e1b     movwf	0x1b, 0            	MOVWF	r0x0b
0038a0   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
0038a2   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0038a4   221c     addwfc	0x1c, 0x1, 0      	ADDWFC	r0x0c, F
0038a6   0e02     movlw	0x2                	MOVLW	0x02
0038a8   261b     addwf	0x1b, 0x1, 0       	ADDWF	r0x0b, F
0038aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0038ac   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
0038ae   c01b     movff	0x1b, 0xfe1        	MOVFF	r0x0b, FSR0L
0038b0   ffe1
0038b2   c01c     movff	0x1c, 0xfe2        	MOVFF	r0x0c, FSR0H
0038b4   ffe2
0038b6   cfe6     movff	0xfe6, 0x1b        	MOVFF	POSTINC0, r0x0b
0038b8   f01b
0038ba   cfe7     movff	0xfe7, 0x1c        	MOVFF	INDF0, r0x0c
0038bc   f01c
0038be   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
0038c0   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x09, F
0038c2   501c     movf	0x1c, 0, 0          	MOVF	r0x0c, W
0038c4   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x0a, F
0038c6   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
0038c8   ffe1
0038ca   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
0038cc   ffe2
0038ce   c019     movff	0x19, 0xfe6        	MOVFF	r0x09, POSTINC0
0038d0   ffe6
0038d2   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
0038d4   ffe7
                                           _00141_DS_:
                                           ;	.line	131; main.c	for(input=0;input<16;input++){
0038d6   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
0038d8   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
0038da   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
0038dc   d7a8     bra	0x382e               	BRA	_00139_DS_
                                           _00176_DS_:
0038de   c015     movff	0x15, 0x10         	MOVFF	r0x05, r0x00
0038e0   f010
                                           ;	.line	130; main.c	for(bus=0;bus<16;bus++){
0038e2   0e04     movlw	0x4                	MOVLW	0x04
0038e4   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0038e6   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
0038e8   d796     bra	0x3816               	BRA	_00143_DS_
                                           _00149_DS_:
                                           ;	.line	129; main.c	for(input=0;input<16;input++){
0038ea   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
0038ec   d78e     bra	0x380a               	BRA	_00147_DS_
                                           _00174_DS_:
                                           ;	.line	137; main.c	for(input=0;input<16;input++){
0038ee   6a10     clrf	0x10, 0             	CLRF	r0x00
0038f0   6a11     clrf	0x11, 0             	CLRF	r0x01
0038f2   6a12     clrf	0x12, 0             	CLRF	r0x02
0038f4   6a13     clrf	0x13, 0             	CLRF	r0x03
0038f6   6a14     clrf	0x14, 0             	CLRF	r0x04
0038f8   6a15     clrf	0x15, 0             	CLRF	r0x05
                                           _00155_DS_:
0038fa   0e10     movlw	0x10               	MOVLW	0x10
0038fc   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
0038fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003900   d065     bra	0x39cc               	BRA	_00159_DS_
                                           ;	.line	139; main.c	for(output=0;output<16;output++)
003902   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003904   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003906   6e16     movwf	0x16, 0            	MOVWF	r0x06
003908   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
00390a   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x02, W
00390c   6e17     movwf	0x17, 0            	MOVWF	r0x07
00390e   0ec0     movlw	0xc0               	MOVLW	LOW(_inout_map_build_outputs_1_1)
003910   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003912   6e18     movwf	0x18, 0            	MOVWF	r0x08
003914   6a19     clrf	0x19, 0             	CLRF	r0x09
003916   0e00     movlw	0                  	MOVLW	HIGH(_inout_map_build_outputs_1_1)
003918   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
00391a   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
00391c   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
00391e   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
                                           _00151_DS_:
003920   0e10     movlw	0x10               	MOVLW	0x10
003922   5c1b     subwf	0x1b, 0, 0         	SUBWF	r0x0b, W
003924   e236     bc	0x3992                	BC	_00154_DS_
                                           ;	.line	140; main.c	if(outputs[input]&int_bit_ormask[output])
003926   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
003928   ffe1
00392a   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
00392c   ffe2
00392e   cfe6     movff	0xfe6, 0x1d        	MOVFF	POSTINC0, r0x0d
003930   f01d
003932   cfe7     movff	0xfe7, 0x1e        	MOVFF	INDF0, r0x0e
003934   f01e
003936   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003938   241c     addwf	0x1c, 0, 0         	ADDWF	r0x0c, W
00393a   6e1f     movwf	0x1f, 0            	MOVWF	r0x0f
00393c   6a20     clrf	0x20, 0             	CLRF	r0x10
00393e   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
003940   2220     addwfc	0x20, 0x1, 0      	ADDWFC	r0x10, F
003942   6a21     clrf	0x21, 0             	CLRF	r0x11
003944   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003946   2221     addwfc	0x21, 0x1, 0      	ADDWFC	r0x11, F
003948   c01f     movff	0x1f, 0xff6        	MOVFF	r0x0f, TBLPTRL
00394a   fff6
00394c   c020     movff	0x20, 0xff7        	MOVFF	r0x10, TBLPTRH
00394e   fff7
003950   c021     movff	0x21, 0xff8        	MOVFF	r0x11, TBLPTRU
003952   fff8
003954   0009     tblrd	*+                 	TBLRD*+	
003956   cff5     movff	0xff5, 0x1f        	MOVFF	TABLAT, r0x0f
003958   f01f
00395a   0009     tblrd	*+                 	TBLRD*+	
00395c   cff5     movff	0xff5, 0x20        	MOVFF	TABLAT, r0x10
00395e   f020
003960   501f     movf	0x1f, 0, 0          	MOVF	r0x0f, W
003962   161d     andwf	0x1d, 0x1, 0       	ANDWF	r0x0d, F
003964   5020     movf	0x20, 0, 0          	MOVF	r0x10, W
003966   161e     andwf	0x1e, 0x1, 0       	ANDWF	r0x0e, F
003968   501d     movf	0x1d, 0, 0          	MOVF	r0x0d, W
00396a   101e     iorwf	0x1e, 0, 0         	IORWF	r0x0e, W
00396c   e00e     bz	0x398a                	BZ	_00153_DS_
                                           ;	.line	141; main.c	midi_inout_map[input][i++]=output;
00396e   c01a     movff	0x1a, 0x1d         	MOVFF	r0x0a, r0x0d
003970   f01d
003972   2a1a     incf	0x1a, 0x1, 0        	INCF	r0x0a, F
003974   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003976   261d     addwf	0x1d, 0x1, 0       	ADDWF	r0x0d, F
003978   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
00397a   6a1e     clrf	0x1e, 0             	CLRF	r0x0e
00397c   221e     addwfc	0x1e, 0x1, 0      	ADDWFC	r0x0e, F
00397e   c01d     movff	0x1d, 0xfe1        	MOVFF	r0x0d, FSR0L
003980   ffe1
003982   c01e     movff	0x1e, 0xfe2        	MOVFF	r0x0e, FSR0H
003984   ffe2
003986   c01b     movff	0x1b, 0xfe7        	MOVFF	r0x0b, INDF0
003988   ffe7
                                           _00153_DS_:
                                           ;	.line	139; main.c	for(output=0;output<16;output++)
00398a   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
00398c   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
00398e   2a1b     incf	0x1b, 0x1, 0        	INCF	r0x0b, F
003990   d7c7     bra	0x3920               	BRA	_00151_DS_
                                           _00154_DS_:
                                           ;	.line	142; main.c	midi_inout_map[input][i] = 0xff;
003992   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003994   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
003996   6e16     movwf	0x16, 0            	MOVWF	r0x06
003998   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
00399a   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
00399c   6e17     movwf	0x17, 0            	MOVWF	r0x07
00399e   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0039a0   261a     addwf	0x1a, 0x1, 0       	ADDWF	r0x0a, F
0039a2   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0039a4   6a18     clrf	0x18, 0             	CLRF	r0x08
0039a6   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0039a8   c01a     movff	0x1a, 0xfe1        	MOVFF	r0x0a, FSR0L
0039aa   ffe1
0039ac   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
0039ae   ffe2
0039b0   0eff     movlw	0xff               	MOVLW	0xff
0039b2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	137; main.c	for(input=0;input<16;input++){
0039b4   0e10     movlw	0x10               	MOVLW	0x10
0039b6   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0039b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0039ba   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
0039bc   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0039be   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0039c0   0e10     movlw	0x10               	MOVLW	0x10
0039c2   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
0039c4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0039c6   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
0039c8   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
0039ca   d797     bra	0x38fa               	BRA	_00155_DS_
                                           _00159_DS_:
0039cc   cfec     movff	0xfec, 0x21        	MOVFF	PREINC1, r0x11
0039ce   f021
0039d0   cfec     movff	0xfec, 0x20        	MOVFF	PREINC1, r0x10
0039d2   f020
0039d4   cfec     movff	0xfec, 0x1f        	MOVFF	PREINC1, r0x0f
0039d6   f01f
0039d8   cfec     movff	0xfec, 0x1e        	MOVFF	PREINC1, r0x0e
0039da   f01e
0039dc   cfec     movff	0xfec, 0x1d        	MOVFF	PREINC1, r0x0d
0039de   f01d
0039e0   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
0039e2   f01c
0039e4   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
0039e6   f01b
0039e8   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
0039ea   f01a
0039ec   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
0039ee   f019
0039f0   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
0039f2   f018
0039f4   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0039f6   f017
0039f8   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0039fa   f016
0039fc   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
0039fe   f015
003a00   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003a02   f014
003a04   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003a06   f013
003a08   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003a0a   f012
003a0c   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003a0e   f011
003a10   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003a12   f010
003a14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_init	code
                                           _preset_init:
                                           ;	.line	115; main.c	void preset_init(unsigned char empty) __wparam{
003c0e   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003c10   ffed
003c12   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003c14   ffd9
003c16   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003c18   ffed
003c1a   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003c1c   ffed
003c1e   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003c20   ffed
003c22   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003c24   ffed
003c26   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003c28   ffed
003c2a   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003c2c   ffed
003c2e   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003c30   ffed
003c32   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003c34   ffed
003c36   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
003c38   ffed
003c3a   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
003c3c   ffed
003c3e   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003c40   ffed
003c42   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003c44   ffed
003c46   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
003c48   ffed
003c4a   c01d     movff	0x1d, 0xfed        	MOVFF	r0x0d, POSTDEC1
003c4c   ffed
003c4e   c01e     movff	0x1e, 0xfed        	MOVFF	r0x0e, POSTDEC1
003c50   ffed
003c52   c01f     movff	0x1f, 0xfed        	MOVFF	r0x0f, POSTDEC1
003c54   ffed
003c56   c020     movff	0x20, 0xfed        	MOVFF	r0x10, POSTDEC1
003c58   ffed
003c5a   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	117; main.c	for(i=0;i<16;i++){
003c5c   6a11     clrf	0x11, 0             	CLRF	r0x01
003c5e   6a12     clrf	0x12, 0             	CLRF	r0x02
003c60   6a13     clrf	0x13, 0             	CLRF	r0x03
003c62   6a14     clrf	0x14, 0             	CLRF	r0x04
003c64   6a15     clrf	0x15, 0             	CLRF	r0x05
003c66   6a16     clrf	0x16, 0             	CLRF	r0x06
003c68   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           _00117_DS_:
003c6a   0e10     movlw	0x10               	MOVLW	0x10
003c6c   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
003c6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c70   d06a     bra	0x3d46               	BRA	_00121_DS_
                                           ;	.line	118; main.c	current_preset[i].inputs = current_preset[i].outputs = (empty ? 0 : int_bit_ormask[i]);
003c72   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003c74   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003c76   6e18     movwf	0x18, 0            	MOVWF	r0x08
003c78   6a19     clrf	0x19, 0             	CLRF	r0x09
003c7a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003c7c   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
003c7e   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003c80   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003c82   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003c84   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003c86   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003c88   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
003c8a   0e02     movlw	0x2                	MOVLW	0x02
003c8c   261a     addwf	0x1a, 0x1, 0       	ADDWF	r0x0a, F
003c8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c90   2a1b     incf	0x1b, 0x1, 0        	INCF	r0x0b, F
003c92   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c94   e003     bz	0x3c9c                	BZ	_00123_DS_
003c96   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
003c98   6a1d     clrf	0x1d, 0             	CLRF	r0x0d
003c9a   d015     bra	0x3cc6               	BRA	_00124_DS_
                                           _00123_DS_:
003c9c   0efc     movlw	0xfc               	MOVLW	LOW(_int_bit_ormask)
003c9e   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003ca0   6e1e     movwf	0x1e, 0            	MOVWF	r0x0e
003ca2   6a1f     clrf	0x1f, 0             	CLRF	r0x0f
003ca4   0e43     movlw	0x43               	MOVLW	HIGH(_int_bit_ormask)
003ca6   221f     addwfc	0x1f, 0x1, 0      	ADDWFC	r0x0f, F
003ca8   6a20     clrf	0x20, 0             	CLRF	r0x10
003caa   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003cac   2220     addwfc	0x20, 0x1, 0      	ADDWFC	r0x10, F
003cae   c01e     movff	0x1e, 0xff6        	MOVFF	r0x0e, TBLPTRL
003cb0   fff6
003cb2   c01f     movff	0x1f, 0xff7        	MOVFF	r0x0f, TBLPTRH
003cb4   fff7
003cb6   c020     movff	0x20, 0xff8        	MOVFF	r0x10, TBLPTRU
003cb8   fff8
003cba   0009     tblrd	*+                 	TBLRD*+	
003cbc   cff5     movff	0xff5, 0x1c        	MOVFF	TABLAT, r0x0c
003cbe   f01c
003cc0   0009     tblrd	*+                 	TBLRD*+	
003cc2   cff5     movff	0xff5, 0x1d        	MOVFF	TABLAT, r0x0d
003cc4   f01d
                                           _00124_DS_:
003cc6   c01a     movff	0x1a, 0xfe1        	MOVFF	r0x0a, FSR0L
003cc8   ffe1
003cca   c01b     movff	0x1b, 0xfe2        	MOVFF	r0x0b, FSR0H
003ccc   ffe2
003cce   c01c     movff	0x1c, 0xfe6        	MOVFF	r0x0c, POSTINC0
003cd0   ffe6
003cd2   c01d     movff	0x1d, 0xfe7        	MOVFF	r0x0d, INDF0
003cd4   ffe7
003cd6   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
003cd8   ffe1
003cda   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
003cdc   ffe2
003cde   c01c     movff	0x1c, 0xfe6        	MOVFF	r0x0c, POSTINC0
003ce0   ffe6
003ce2   c01d     movff	0x1d, 0xfe7        	MOVFF	r0x0d, INDF0
003ce4   ffe7
                                           ;	.line	119; main.c	midi_inout_map[i][0]= (empty ? 0xff : i);
003ce6   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003ce8   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
003cea   6e18     movwf	0x18, 0            	MOVWF	r0x08
003cec   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003cee   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
003cf0   6e19     movwf	0x19, 0            	MOVWF	r0x09
003cf2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003cf4   e003     bz	0x3cfc                	BZ	_00125_DS_
003cf6   0eff     movlw	0xff               	MOVLW	0xff
003cf8   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003cfa   d002     bra	0x3d00               	BRA	_00126_DS_
                                           _00125_DS_:
003cfc   c011     movff	0x11, 0x1a         	MOVFF	r0x01, r0x0a
003cfe   f01a
                                           _00126_DS_:
003d00   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
003d02   ffe1
003d04   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
003d06   ffe2
003d08   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
003d0a   ffe7
                                           ;	.line	120; main.c	midi_inout_map[i][1]=0xff;//terminate		
003d0c   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003d0e   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
003d10   6e18     movwf	0x18, 0            	MOVWF	r0x08
003d12   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003d14   2017     addwfc	0x17, 0, 0        	ADDWFC	r0x07, W
003d16   6e19     movwf	0x19, 0            	MOVWF	r0x09
003d18   2a18     incf	0x18, 0x1, 0        	INCF	r0x08, F
003d1a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d1c   2a19     incf	0x19, 0x1, 0        	INCF	r0x09, F
003d1e   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
003d20   ffe1
003d22   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
003d24   ffe2
003d26   0eff     movlw	0xff               	MOVLW	0xff
003d28   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	117; main.c	for(i=0;i<16;i++){
003d2a   0e04     movlw	0x4                	MOVLW	0x04
003d2c   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003d2e   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
003d30   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
003d32   0e10     movlw	0x10               	MOVLW	0x10
003d34   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
003d36   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d38   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
003d3a   0e10     movlw	0x10               	MOVLW	0x10
003d3c   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003d3e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d40   2a17     incf	0x17, 0x1, 0        	INCF	r0x07, F
003d42   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003d44   d792     bra	0x3c6a               	BRA	_00117_DS_
                                           _00121_DS_:
003d46   cfec     movff	0xfec, 0x20        	MOVFF	PREINC1, r0x10
003d48   f020
003d4a   cfec     movff	0xfec, 0x1f        	MOVFF	PREINC1, r0x0f
003d4c   f01f
003d4e   cfec     movff	0xfec, 0x1e        	MOVFF	PREINC1, r0x0e
003d50   f01e
003d52   cfec     movff	0xfec, 0x1d        	MOVFF	PREINC1, r0x0d
003d54   f01d
003d56   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
003d58   f01c
003d5a   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
003d5c   f01b
003d5e   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
003d60   f01a
003d62   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003d64   f019
003d66   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
003d68   f018
003d6a   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003d6c   f017
003d6e   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003d70   f016
003d72   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003d74   f015
003d76   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003d78   f014
003d7a   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003d7c   f013
003d7e   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003d80   f012
003d82   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003d84   f011
003d86   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003d88   f010
003d8a   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
003d8c   ffd9
003d8e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_store	code
                                           _preset_store:
                                           ;	.line	109; main.c	void preset_store(unsigned char num) __wparam{
004122   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004124   ffed
004126   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004128   ffd9
00412a   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00412c   ffed
00412e   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004130   ffed
004132   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004134   ffed
004136   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004138   ffed
00413a   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
00413c   ffed
00413e   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	110; main.c	unsigned int addr=num;
004140   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           ;	.line	111; main.c	addr <<=6;
004142   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
004144   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
004146   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
004148   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
00414a   3011     rrcf	0x11, 0, 0          	RRCF	r0x01, W
00414c   0bc0     andlw	0xc0               	ANDLW	0xc0
00414e   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
004150   1a10     xorwf	0x10, 0x1, 0       	XORWF	r0x00, F
004152   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
004154   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	112; main.c	MIOS_BANKSTICK_WritePage(addr,current_preset);	
004156   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
004158   6e13     movwf	0x13, 0            	MOVWF	r0x03
00415a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00415c   6e12     movwf	0x12, 0            	MOVWF	r0x02
00415e   0e80     movlw	0x80               	MOVLW	0x80
004160   6e14     movwf	0x14, 0            	MOVWF	r0x04
004162   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004164   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004166   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004168   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00416a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00416c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00416e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004170   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004172   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004174   ec37     call	0x446e, 0           	CALL	_MIOS_BANKSTICK_WritePage
004176   f022
004178   0e04     movlw	0x4                	MOVLW	0x04
00417a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
00417c   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
00417e   f014
004180   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004182   f013
004184   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004186   f012
004188   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00418a   f011
00418c   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00418e   f010
004190   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004192   ffd9
004194   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_load	code
                                           _preset_load:
                                           ;	.line	102; main.c	void preset_load(unsigned char num) __wparam{
004196   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004198   ffed
00419a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00419c   ffd9
00419e   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0041a0   ffed
0041a2   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0041a4   ffed
0041a6   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0041a8   ffed
0041aa   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0041ac   ffed
0041ae   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0041b0   ffed
0041b2   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	103; main.c	unsigned int addr=num;
0041b4   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           ;	.line	104; main.c	addr <<=6;
0041b6   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
0041b8   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
0041ba   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
0041bc   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
0041be   3011     rrcf	0x11, 0, 0          	RRCF	r0x01, W
0041c0   0bc0     andlw	0xc0               	ANDLW	0xc0
0041c2   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0041c4   1a10     xorwf	0x10, 0x1, 0       	XORWF	r0x00, F
0041c6   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0041c8   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	105; main.c	MIOS_BANKSTICK_ReadPage(addr,current_preset);
0041ca   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0041cc   6e13     movwf	0x13, 0            	MOVWF	r0x03
0041ce   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0041d0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0041d2   0e80     movlw	0x80               	MOVLW	0x80
0041d4   6e14     movwf	0x14, 0            	MOVWF	r0x04
0041d6   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
0041d8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0041da   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0041dc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0041de   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0041e0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0041e2   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0041e4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0041e6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0041e8   ec42     call	0x4484, 0           	CALL	_MIOS_BANKSTICK_ReadPage
0041ea   f022
0041ec   0e04     movlw	0x4                	MOVLW	0x04
0041ee   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0041f0   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0041f2   f014
0041f4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0041f6   f013
0041f8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0041fa   f012
0041fc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0041fe   f011
004200   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004202   f010
004204   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004206   ffd9
004208   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Init	code
                                           _Init:
                                           ;	.line	86; main.c	MIOS_SRIO_UpdateFrqSet(3); // ms
0042f4   0e03     movlw	0x3                	MOVLW	0x03
0042f6   ec80     call	0x2d00, 0           	CALL	_MIOS_SRIO_UpdateFrqSet
0042f8   f016
                                           ;	.line	87; main.c	MIOS_SRIO_NumberSet(3);//need 20 inputs / outputs 
0042fa   0e03     movlw	0x3                	MOVLW	0x03
0042fc   ec78     call	0x2cf0, 0           	CALL	_MIOS_SRIO_NumberSet
0042fe   f016
                                           ;	.line	88; main.c	MIOS_SRIO_DebounceSet(20);
004300   0e14     movlw	0x14               	MOVLW	0x14
004302   ec12     call	0x2e24, 0           	CALL	_MIOS_SRIO_DebounceSet
004304   f017
                                           ;	.line	89; main.c	MIOS_BANKSTICK_CtrlSet(0x40);//stick 0, verify disabled
004306   0e40     movlw	0x40               	MOVLW	0x40
004308   ecee     call	0x2ddc, 0           	CALL	_MIOS_BANKSTICK_CtrlSet
00430a   f016
                                           ;	.line	91; main.c	current_screen_num = MIOS_EEPROM_Read(0x00);
00430c   0e00     movlw	0                  	MOVLW	0x00
00430e   ec4f     call	0x469e, 0           	CALL	_MIOS_EEPROM_Read
004310   f023
004312   0100     movlb	0                  	BANKSEL	_current_screen_num
004314   6fe0     movwf	0xe0, 0x1          	MOVWF	_current_screen_num, B
                                           ;	.line	92; main.c	current_preset_num = MIOS_EEPROM_Read(0x01);
004316   0e01     movlw	0x1                	MOVLW	0x01
004318   ec4f     call	0x469e, 0           	CALL	_MIOS_EEPROM_Read
00431a   f023
00431c   0100     movlb	0                  	BANKSEL	_current_preset_num
00431e   6fe1     movwf	0xe1, 0x1          	MOVWF	_current_preset_num, B
                                           ;	.line	93; main.c	current_bus_num = MIOS_EEPROM_Read(0x02);
004320   0e02     movlw	0x2                	MOVLW	0x02
004322   ec4f     call	0x469e, 0           	CALL	_MIOS_EEPROM_Read
004324   f023
004326   0100     movlb	0                  	BANKSEL	_current_bus_num
004328   6fe2     movwf	0xe2, 0x1          	MOVWF	_current_bus_num, B
00432a   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	94; main.c	preset_load(current_preset_num);
00432c   51e1     movf	0xe1, 0, 0x1        	MOVF	_current_preset_num, W, B
00432e   eccb     call	0x4196, 0           	CALL	_preset_load
004330   f020
                                           ;	.line	96; main.c	screen_print();
004332   ec0b     call	0x3a16, 0           	CALL	_screen_print
004334   f01d
004336   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _int_bit_ormask:
0043fc   0001     dw	0x1  ;unknown opcode  	DB	0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00
0043fe   0002     dw	0x2  ;unknown opcode  
004400   0004     clrwdt                   
004402   0008     tblrd	*                  
004404   0010     retfie	0                 
004406   0020     dw	0x20  ;unknown opcode 
004408   0040     dw	0x40  ;unknown opcode 	DB	0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08
00440a   0080     dw	0x80  ;unknown opcode 
00440c   0100     movlb	0                  
00440e   0200     mulwf	0, 0               
004410   0400     decf	0, 0, 0             
004412   0800     sublw	0                  
004414   1000     iorwf	0, 0, 0            	DB	0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80
004416   2000     addwfc	0, 0, 0           
004418   4000     rrncf	0, 0, 0            
00441a   8000     bsf	0, 0, 0              
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4064 (0x0fe0) bytes ( 3.10%)
                                           ;           	 2032 (0x07f0) words
                                           ; udata size:	  352 (0x0160) bytes (27.50%)
                                           ; access size:	   18 (0x0012) bytes
                                           
                                           
                                           	end
