HEADER 3 MIOS Functions Reference (C Version)

<P CLASS=DESC><B>Please note:</B> in difference to the <A HREF="cmios_fun.html">original page</A>, this translation is not automatically extracted from the source code, and therefore not always up-to-date!</P>

<a name="top">
</a><center><h1><a name="top">Referencia de Funciones MIOS (Version C)</a></h1></center>
<a name="top"><img src="images/1x1dot.gif" alt="" height="20"><br>
</a><p class="DESC"><a href="mios_fun.html">Click aqu&iacute; para versi&oacute;n ASM&nbsp;</a>
<img src="images/1x1dot.gif" alt="" height="20"><br>
</p><ul class="CL">
  <li>Clase: <b>MIOS_MIDI</b>
    <ul>
      <li><a name="back_MIOS_MIDI_BeginStream"></a><a href="#MIOS_MIDI_BeginStream">MIOS_MIDI_BeginStream</a></li>
      <li><a name="back_MIOS_MIDI_DeviceIDAutoSet"></a><a href="#MIOS_MIDI_DeviceIDAutoSet">MIOS_MIDI_DeviceIDAutoSet</a></li>
      <li><a name="back_MIOS_MIDI_DeviceIDGet"></a><a href="#MIOS_MIDI_DeviceIDGet">MIOS_MIDI_DeviceIDGet</a></li>
      <li><a name="back_MIOS_MIDI_DeviceIDSet"></a><a href="#MIOS_MIDI_DeviceIDSet">MIOS_MIDI_DeviceIDSet</a></li>
      <li><a name="back_MIOS_MIDI_EndStream"></a><a href="#MIOS_MIDI_EndStream">MIOS_MIDI_EndStream</a></li>
      <li><a name="back_MIOS_MIDI_Init"></a><a href="#MIOS_MIDI_Init">MIOS_MIDI_Init</a></li>
      <li><a name="back_MIOS_MIDI_InterfaceAutoSet"></a><a href="#MIOS_MIDI_InterfaceAutoSet">MIOS_MIDI_InterfaceAutoSet</a></li>
      <li><a name="back_MIOS_MIDI_InterfaceGet"></a><a href="#MIOS_MIDI_InterfaceGet">MIOS_MIDI_InterfaceGet</a></li>
      <li><a name="back_MIOS_MIDI_InterfaceSet"></a><a href="#MIOS_MIDI_InterfaceSet">MIOS_MIDI_InterfaceSet</a></li>
      <li><a name="back_MIOS_MIDI_MergerGet"></a><a href="#MIOS_MIDI_MergerGet">MIOS_MIDI_MergerGet</a></li>
      <li><a name="back_MIOS_MIDI_MergerSet"></a><a href="#MIOS_MIDI_MergerSet">MIOS_MIDI_MergerSet</a></li>
      <li><a name="back_MIOS_MIDI_RxBufferFree"></a><a href="#MIOS_MIDI_RxBufferFree">MIOS_MIDI_RxBufferFree</a></li>
      <li><a name="back_MIOS_MIDI_RxBufferGet"></a><a href="#MIOS_MIDI_RxBufferGet">MIOS_MIDI_RxBufferGet</a></li>
      <li><a name="back_MIOS_MIDI_RxBufferPut"></a><a href="#MIOS_MIDI_RxBufferPut">MIOS_MIDI_RxBufferPut</a></li>
      <li><a name="back_MIOS_MIDI_RxBufferUsed"></a><a href="#MIOS_MIDI_RxBufferUsed">MIOS_MIDI_RxBufferUsed</a></li>
      <li><a name="back_MIOS_MIDI_TxBufferFlush"></a><a href="#MIOS_MIDI_TxBufferFlush">MIOS_MIDI_TxBufferFlush</a></li>
      <li><a name="back_MIOS_MIDI_TxBufferFree"></a><a href="#MIOS_MIDI_TxBufferFree">MIOS_MIDI_TxBufferFree</a></li>
      <li><a name="back_MIOS_MIDI_TxBufferGet"></a><a href="#MIOS_MIDI_TxBufferGet">MIOS_MIDI_TxBufferGet</a></li>
      <li><a name="back_MIOS_MIDI_TxBufferPut"></a><a href="#MIOS_MIDI_TxBufferPut">MIOS_MIDI_TxBufferPut</a></li>
      <li><a name="back_MIOS_MIDI_TxBufferUsed"></a><a href="#MIOS_MIDI_TxBufferUsed">MIOS_MIDI_TxBufferUsed</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_MPROC</b>
    <ul>
      <li><a name="back_MIOS_MPROC_MergerDisable"></a><a href="#MIOS_MPROC_MergerDisable">MIOS_MPROC_MergerDisable</a></li>
      <li><a name="back_MIOS_MPROC_MergerEnable"></a><a href="#MIOS_MPROC_MergerEnable">MIOS_MPROC_MergerEnable</a></li>
      <li><a name="back_MIOS_MPROC_MergerGet"></a><a href="#MIOS_MPROC_MergerGet">MIOS_MPROC_MergerGet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_AIN</b>
    <ul>
      <li><a name="back_MIOS_AIN_DeadbandGet"></a><a href="#MIOS_AIN_DeadbandGet">MIOS_AIN_DeadbandGet</a></li>
      <li><a name="back_MIOS_AIN_DeadbandSet"></a><a href="#MIOS_AIN_DeadbandSet">MIOS_AIN_DeadbandSet</a></li>
      <li><a name="back_MIOS_AIN_DynamicPrioGet"></a><a href="#MIOS_AIN_DynamicPrioGet">MIOS_AIN_DynamicPrioGet</a></li>
      <li><a name="back_MIOS_AIN_DynamicPrioSet"></a><a href="#MIOS_AIN_DynamicPrioSet">MIOS_AIN_DynamicPrioSet</a></li>
      <li><a name="back_MIOS_AIN_LastPinsGet"></a><a href="#MIOS_AIN_LastPinsGet">MIOS_AIN_LastPinsGet</a></li>
      <li><a name="back_MIOS_AIN_Muxed"></a><a href="#MIOS_AIN_Muxed">MIOS_AIN_Muxed</a></li>
      <li><a name="back_MIOS_AIN_NumberGet"></a><a href="#MIOS_AIN_NumberGet">MIOS_AIN_NumberGet</a></li>
      <li><a name="back_MIOS_AIN_NumberSet"></a><a href="#MIOS_AIN_NumberSet">MIOS_AIN_NumberSet</a></li>
      <li><a name="back_MIOS_AIN_Pin7bitGet"></a><a href="#MIOS_AIN_Pin7bitGet">MIOS_AIN_Pin7bitGet</a></li>
      <li><a name="back_MIOS_AIN_PinGet"></a><a href="#MIOS_AIN_PinGet">MIOS_AIN_PinGet</a></li>
      <li><a name="back_MIOS_AIN_PinLSBGet"></a><a href="#MIOS_AIN_PinLSBGet">MIOS_AIN_PinLSBGet</a></li>
      <li><a name="back_MIOS_AIN_PinMSBGet"></a><a href="#MIOS_AIN_PinMSBGet">MIOS_AIN_PinMSBGet</a></li>
      <li><a name="back_MIOS_AIN_UnMuxed"></a><a href="#MIOS_AIN_UnMuxed">MIOS_AIN_UnMuxed</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_MF</b>
    <ul>
      <li><a name="back_MIOS_MF_DeadbandGet"></a><a href="#MIOS_MF_DeadbandGet">MIOS_MF_DeadbandGet</a></li>
      <li><a name="back_MIOS_MF_DeadbandSet"></a><a href="#MIOS_MF_DeadbandSet">MIOS_MF_DeadbandSet</a></li>
      <li><a name="back_MIOS_MF_Disable"></a><a href="#MIOS_MF_Disable">MIOS_MF_Disable</a></li>
      <li><a name="back_MIOS_MF_Enable"></a><a href="#MIOS_MF_Enable">MIOS_MF_Enable</a></li>
      <li><a name="back_MIOS_MF_FaderMove"></a><a href="#MIOS_MF_FaderMove">MIOS_MF_FaderMove</a></li>
      <li><a name="back_MIOS_MF_PWM_DutyCycleDownGet"></a><a href="#MIOS_MF_PWM_DutyCycleDownGet">MIOS_MF_PWM_DutyCycleDownGet</a></li>
      <li><a name="back_MIOS_MF_PWM_DutyCycleDownSet"></a><a href="#MIOS_MF_PWM_DutyCycleDownSet">MIOS_MF_PWM_DutyCycleDownSet</a></li>
      <li><a name="back_MIOS_MF_PWM_DutyCycleUpGet"></a><a href="#MIOS_MF_PWM_DutyCycleUpGet">MIOS_MF_PWM_DutyCycleUpGet</a></li>
      <li><a name="back_MIOS_MF_PWM_DutyCycleUpSet"></a><a href="#MIOS_MF_PWM_DutyCycleUpSet">MIOS_MF_PWM_DutyCycleUpSet</a></li>
      <li><a name="back_MIOS_MF_PWM_PeriodGet"></a><a href="#MIOS_MF_PWM_PeriodGet">MIOS_MF_PWM_PeriodGet</a></li>
      <li><a name="back_MIOS_MF_PWM_PeriodSet"></a><a href="#MIOS_MF_PWM_PeriodSet">MIOS_MF_PWM_PeriodSet</a></li>
      <li><a name="back_MIOS_MF_SuspendDisable"></a><a href="#MIOS_MF_SuspendDisable">MIOS_MF_SuspendDisable</a></li>
      <li><a name="back_MIOS_MF_SuspendEnable"></a><a href="#MIOS_MF_SuspendEnable">MIOS_MF_SuspendEnable</a></li>
      <li><a name="back_MIOS_MF_SuspendGet"></a><a href="#MIOS_MF_SuspendGet">MIOS_MF_SuspendGet</a></li>
      <li><a name="back_MIOS_MF_TouchDetectionReset"></a><a href="#MIOS_MF_TouchDetectionReset">MIOS_MF_TouchDetectionReset</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_DIN</b>
    <ul>
      <li><a name="back_MIOS_DIN_PinAutoRepeatDisable"></a><a href="#MIOS_DIN_PinAutoRepeatDisable">MIOS_DIN_PinAutoRepeatDisable</a></li>
      <li><a name="back_MIOS_DIN_PinAutoRepeatEnable"></a><a href="#MIOS_DIN_PinAutoRepeatEnable">MIOS_DIN_PinAutoRepeatEnable</a></li>
      <li><a name="back_MIOS_DIN_PinAutoRepeatGet"></a><a href="#MIOS_DIN_PinAutoRepeatGet">MIOS_DIN_PinAutoRepeatGet</a></li>
      <li><a name="back_MIOS_DIN_PinGet"></a><a href="#MIOS_DIN_PinGet">MIOS_DIN_PinGet</a></li>
      <li><a name="back_MIOS_DIN_SRGet"></a><a href="#MIOS_DIN_SRGet">MIOS_DIN_SRGet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_DOUT</b>
    <ul>
      <li><a name="back_MIOS_DOUT_PinGet"></a><a href="#MIOS_DOUT_PinGet">MIOS_DOUT_PinGet</a></li>
      <li><a name="back_MIOS_DOUT_PinSet"></a><a href="#MIOS_DOUT_PinSet">MIOS_DOUT_PinSet</a></li>
      <li><a name="back_MIOS_DOUT_PinSet0"></a><a href="#MIOS_DOUT_PinSet0">MIOS_DOUT_PinSet0</a></li>
      <li><a name="back_MIOS_DOUT_PinSet1"></a><a href="#MIOS_DOUT_PinSet1">MIOS_DOUT_PinSet1</a></li>
      <li><a name="back_MIOS_DOUT_SRGet"></a><a href="#MIOS_DOUT_SRGet">MIOS_DOUT_SRGet</a></li>
      <li><a name="back_MIOS_DOUT_SRSet"></a><a href="#MIOS_DOUT_SRSet">MIOS_DOUT_SRSet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_ENC</b>
    <ul>
      <li><a name="back_MIOS_ENC_Abs7bitAdd"></a><a href="#MIOS_ENC_Abs7bitAdd">MIOS_ENC_Abs7bitAdd</a></li>
      <li><a name="back_MIOS_ENC_Abs7bitGet"></a><a href="#MIOS_ENC_Abs7bitGet">MIOS_ENC_Abs7bitGet</a></li>
      <li><a name="back_MIOS_ENC_Abs7bitSet"></a><a href="#MIOS_ENC_Abs7bitSet">MIOS_ENC_Abs7bitSet</a></li>
      <li><a name="back_MIOS_ENC_NumberGet"></a><a href="#MIOS_ENC_NumberGet">MIOS_ENC_NumberGet</a></li>
      <li><a name="back_MIOS_ENC_SpeedGet"></a><a href="#MIOS_ENC_SpeedGet">MIOS_ENC_SpeedGet</a></li>
      <li><a name="back_MIOS_ENC_SpeedSet"></a><a href="#MIOS_ENC_SpeedSet">MIOS_ENC_SpeedSet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_SRIO</b>
    <ul>
      <li><a name="back_MIOS_SRIO_DebounceGet"></a><a href="#MIOS_SRIO_DebounceGet">MIOS_SRIO_DebounceGet</a></li>
      <li><a name="back_MIOS_SRIO_DebounceSet"></a><a href="#MIOS_SRIO_DebounceSet">MIOS_SRIO_DebounceSet</a></li>
      <li><a name="back_MIOS_SRIO_NumberGet"></a><a href="#MIOS_SRIO_NumberGet">MIOS_SRIO_NumberGet</a></li>
      <li><a name="back_MIOS_SRIO_NumberSet"></a><a href="#MIOS_SRIO_NumberSet">MIOS_SRIO_NumberSet</a></li>
      <li><a name="back_MIOS_SRIO_TS_SensitivityGet"></a><a href="#MIOS_SRIO_TS_SensitivityGet">MIOS_SRIO_TS_SensitivityGet</a></li>
      <li><a name="back_MIOS_SRIO_TS_SensitivitySet"></a><a href="#MIOS_SRIO_TS_SensitivitySet">MIOS_SRIO_TS_SensitivitySet</a></li>
      <li><a name="back_MIOS_SRIO_UpdateFrqGet"></a><a href="#MIOS_SRIO_UpdateFrqGet">MIOS_SRIO_UpdateFrqGet</a></li>
      <li><a name="back_MIOS_SRIO_UpdateFrqSet"></a><a href="#MIOS_SRIO_UpdateFrqSet">MIOS_SRIO_UpdateFrqSet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_LCD</b>
    <ul>
      <li><a name="back_MIOS_LCD_Clear"></a><a href="#MIOS_LCD_Clear">MIOS_LCD_Clear</a></li>
      <li><a name="back_MIOS_LCD_Cmd"></a><a href="#MIOS_LCD_Cmd">MIOS_LCD_Cmd</a></li>
      <li><a name="back_MIOS_LCD_CursorGet"></a><a href="#MIOS_LCD_CursorGet">MIOS_LCD_CursorGet</a></li>
      <li><a name="back_MIOS_LCD_CursorSet"></a><a href="#MIOS_LCD_CursorSet">MIOS_LCD_CursorSet</a></li>
      <li><a name="back_MIOS_LCD_Data"></a><a href="#MIOS_LCD_Data">MIOS_LCD_Data</a></li>
      <li><a name="back_MIOS_LCD_Init"></a><a href="#MIOS_LCD_Init">MIOS_LCD_Init</a></li>
      <li><a name="back_MIOS_LCD_MessageStart"></a><a href="#MIOS_LCD_MessageStart">MIOS_LCD_MessageStart</a></li>
      <li><a name="back_MIOS_LCD_MessageStop"></a><a href="#MIOS_LCD_MessageStop">MIOS_LCD_MessageStop</a></li>
      <li><a name="back_MIOS_LCD_PrintBCD1"></a><a href="#MIOS_LCD_PrintBCD1">MIOS_LCD_PrintBCD1</a></li>
      <li><a name="back_MIOS_LCD_PrintBCD2"></a><a href="#MIOS_LCD_PrintBCD2">MIOS_LCD_PrintBCD2</a></li>
      <li><a name="back_MIOS_LCD_PrintBCD3"></a><a href="#MIOS_LCD_PrintBCD3">MIOS_LCD_PrintBCD3</a></li>
      <li><a name="back_MIOS_LCD_PrintBCD4"></a><a href="#MIOS_LCD_PrintBCD4">MIOS_LCD_PrintBCD4</a></li>
      <li><a name="back_MIOS_LCD_PrintBCD5"></a><a href="#MIOS_LCD_PrintBCD5">MIOS_LCD_PrintBCD5</a></li>
      <li><a name="back_MIOS_LCD_PrintCString"></a><a href="#MIOS_LCD_PrintCString">MIOS_LCD_PrintCString</a></li>
      <li><a name="back_MIOS_LCD_PrintChar"></a><a href="#MIOS_LCD_PrintChar">MIOS_LCD_PrintChar</a></li>
      <li><a name="back_MIOS_LCD_PrintHex1"></a><a href="#MIOS_LCD_PrintHex1">MIOS_LCD_PrintHex1</a></li>
      <li><a name="back_MIOS_LCD_PrintHex2"></a><a href="#MIOS_LCD_PrintHex2">MIOS_LCD_PrintHex2</a></li>
      <li><a name="back_MIOS_LCD_PrintMessage"></a><a href="#MIOS_LCD_PrintMessage">MIOS_LCD_PrintMessage</a></li>
      <li><a name="back_MIOS_LCD_PrintPreconfString"></a><a href="#MIOS_LCD_PrintPreconfString">MIOS_LCD_PrintPreconfString</a></li>
      <li><a name="back_MIOS_LCD_PrintString"></a><a href="#MIOS_LCD_PrintString">MIOS_LCD_PrintString</a></li>
      <li><a name="back_MIOS_LCD_TypeAutoSet"></a><a href="#MIOS_LCD_TypeAutoSet">MIOS_LCD_TypeAutoSet</a></li>
      <li><a name="back_MIOS_LCD_TypeGet"></a><a href="#MIOS_LCD_TypeGet">MIOS_LCD_TypeGet</a></li>
      <li><a name="back_MIOS_LCD_TypeSet"></a><a href="#MIOS_LCD_TypeSet">MIOS_LCD_TypeSet</a></li>
      <li><a name="back_MIOS_LCD_YAddressGet"></a><a href="#MIOS_LCD_YAddressGet">MIOS_LCD_YAddressGet</a></li>
      <li><a name="back_MIOS_LCD_YAddressSet"></a><a href="#MIOS_LCD_YAddressSet">MIOS_LCD_YAddressSet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_CLCD</b>
    <ul>
      <li><a name="back_MIOS_CLCD_SpecialCharInit"></a><a href="#MIOS_CLCD_SpecialCharInit">MIOS_CLCD_SpecialCharInit</a></li>
      <li><a name="back_MIOS_CLCD_SpecialCharsInit"></a><a href="#MIOS_CLCD_SpecialCharsInit">MIOS_CLCD_SpecialCharsInit</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_GLCD</b>
    <ul>
      <li><a name="back_MIOS_GLCD_FontInit"></a><a href="#MIOS_GLCD_FontInit">MIOS_GLCD_FontInit</a></li>
      <li><a name="back_MIOS_GLCD_GCursorGet"></a><a href="#MIOS_GLCD_GCursorGet">MIOS_GLCD_GCursorGet</a></li>
      <li><a name="back_MIOS_GLCD_GCursorSet"></a><a href="#MIOS_GLCD_GCursorSet">MIOS_GLCD_GCursorSet</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_EEPROM</b>
    <ul>
      <li><a name="back_MIOS_EEPROM_Read"></a><a href="#MIOS_EEPROM_Read">MIOS_EEPROM_Read</a></li>
      <li><a name="back_MIOS_EEPROM_ReadPage"></a><a href="#MIOS_EEPROM_ReadPage">MIOS_EEPROM_ReadPage</a></li>
      <li><a name="back_MIOS_EEPROM_Write"></a><a href="#MIOS_EEPROM_Write">MIOS_EEPROM_Write</a></li>
      <li><a name="back_MIOS_EEPROM_WritePage"></a><a href="#MIOS_EEPROM_WritePage">MIOS_EEPROM_WritePage</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_FLASH</b>
    <ul>
      <li><a name="back_MIOS_FLASH_Read"></a><a href="#MIOS_FLASH_Read">MIOS_FLASH_Read</a></li>
      <li><a name="back_MIOS_FLASH_Write"></a><a href="#MIOS_FLASH_Write">MIOS_FLASH_Write</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_BANKSTICK</b>
    <ul>
      <li><a name="back_MIOS_BANKSTICK_CtrlGet"></a><a href="#MIOS_BANKSTICK_CtrlGet">MIOS_BANKSTICK_CtrlGet</a></li>
      <li><a name="back_MIOS_BANKSTICK_CtrlSet"></a><a href="#MIOS_BANKSTICK_CtrlSet">MIOS_BANKSTICK_CtrlSet</a></li>
      <li><a name="back_MIOS_BANKSTICK_Read"></a><a href="#MIOS_BANKSTICK_Read">MIOS_BANKSTICK_Read</a></li>
      <li><a name="back_MIOS_BANKSTICK_ReadPage"></a><a href="#MIOS_BANKSTICK_ReadPage">MIOS_BANKSTICK_ReadPage</a></li>
      <li><a name="back_MIOS_BANKSTICK_Write"></a><a href="#MIOS_BANKSTICK_Write">MIOS_BANKSTICK_Write</a></li>
      <li><a name="back_MIOS_BANKSTICK_WritePage"></a><a href="#MIOS_BANKSTICK_WritePage">MIOS_BANKSTICK_WritePage</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_IIC</b>
    <ul>
      <li><a name="back_MIOS_IIC_AckSend"></a><a href="#MIOS_IIC_AckSend">MIOS_IIC_AckSend</a></li>
      <li><a name="back_MIOS_IIC_ByteReceive"></a><a href="#MIOS_IIC_ByteReceive">MIOS_IIC_ByteReceive</a></li>
      <li><a name="back_MIOS_IIC_ByteSend"></a><a href="#MIOS_IIC_ByteSend">MIOS_IIC_ByteSend</a></li>
      <li><a name="back_MIOS_IIC_CtrlGet"></a><a href="#MIOS_IIC_CtrlGet">MIOS_IIC_CtrlGet</a></li>
      <li><a name="back_MIOS_IIC_CtrlSet"></a><a href="#MIOS_IIC_CtrlSet">MIOS_IIC_CtrlSet</a></li>
      <li><a name="back_MIOS_IIC_NakSend"></a><a href="#MIOS_IIC_NakSend">MIOS_IIC_NakSend</a></li>
      <li><a name="back_MIOS_IIC_Start"></a><a href="#MIOS_IIC_Start">MIOS_IIC_Start</a></li>
      <li><a name="back_MIOS_IIC_Stop"></a><a href="#MIOS_IIC_Stop">MIOS_IIC_Stop</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_TIMER</b>
    <ul>
      <li><a name="back_MIOS_TIMER_Init"></a><a href="#MIOS_TIMER_Init">MIOS_TIMER_Init</a></li>
      <li><a name="back_MIOS_TIMER_ReInit"></a><a href="#MIOS_TIMER_ReInit">MIOS_TIMER_ReInit</a></li>
      <li><a name="back_MIOS_TIMER_Start"></a><a href="#MIOS_TIMER_Start">MIOS_TIMER_Start</a></li>
      <li><a name="back_MIOS_TIMER_Stop"></a><a href="#MIOS_TIMER_Stop">MIOS_TIMER_Stop</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS_HLP</b>
    <ul>
      <li><a name="back_MIOS_HLP_16bitAddSaturate"></a><a href="#MIOS_HLP_16bitAddSaturate">MIOS_HLP_16bitAddSaturate</a></li>
      <li><a name="back_MIOS_HLP_AddressFromTable"></a><a href="#MIOS_HLP_AddressFromTable">MIOS_HLP_AddressFromTable</a></li>
      <li><a name="back_MIOS_HLP_Dec2BCD"></a><a href="#MIOS_HLP_Dec2BCD">MIOS_HLP_Dec2BCD</a></li>
      <li><a name="back_MIOS_HLP_GetBitANDMask"></a><a href="#MIOS_HLP_GetBitANDMask">MIOS_HLP_GetBitANDMask</a></li>
      <li><a name="back_MIOS_HLP_GetBitORMask"></a><a href="#MIOS_HLP_GetBitORMask">MIOS_HLP_GetBitORMask</a></li>
      <li><a name="back_MIOS_HLP_GetIndex_2bytes"></a><a href="#MIOS_HLP_GetIndex_2bytes">MIOS_HLP_GetIndex_2bytes</a></li>
      <li><a name="back_MIOS_HLP_GetIndex_4bytes"></a><a href="#MIOS_HLP_GetIndex_4bytes">MIOS_HLP_GetIndex_4bytes</a></li>
      <li><a name="back_MIOS_HLP_IndirectJump"></a><a href="#MIOS_HLP_IndirectJump">MIOS_HLP_IndirectJump</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>MIOS</b>
    <ul>
      <li><a name="back_MIOS_Delay"></a><a href="#MIOS_Delay">MIOS_Delay</a></li>
      <li><a name="back_MIOS_GPCounterGet"></a><a href="#MIOS_GPCounterGet">MIOS_GPCounterGet</a></li>
      <li><a name="back_MIOS_Reset"></a><a href="#MIOS_Reset">MIOS_Reset</a></li>
      <li><a name="back_MIOS_SystemResume"></a><a href="#MIOS_SystemResume">MIOS_SystemResume</a></li>
      <li><a name="back_MIOS_SystemSuspend"></a><a href="#MIOS_SystemSuspend">MIOS_SystemSuspend</a></li>
      <li><a name="back_MIOS_UserResume"></a><a href="#MIOS_UserResume">MIOS_UserResume</a></li>
      <li><a name="back_MIOS_UserSuspend"></a><a href="#MIOS_UserSuspend">MIOS_UserSuspend</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
  <li>Clase: <b>USER</b>
    <ul>
      <li><a name="back_USER_AIN_NotifyChange"></a><a href="#USER_AIN_NotifyChange">USER_AIN_NotifyChange</a></li>
      <li><a name="back_USER_DIN_NotifyToggle"></a><a href="#USER_DIN_NotifyToggle">USER_DIN_NotifyToggle</a></li>
      <li><a name="back_USER_DISPLAY_Init"></a><a href="#USER_DISPLAY_Init">USER_DISPLAY_Init</a></li>
      <li><a name="back_USER_DISPLAY_Tick"></a><a href="#USER_DISPLAY_Tick">USER_DISPLAY_Tick</a></li>
      <li><a name="back_USER_ENC_NotifyChange"></a><a href="#USER_ENC_NotifyChange">USER_ENC_NotifyChange</a></li>
      <li><a name="back_USER_Init"></a><a href="#USER_Init">USER_Init</a></li>
      <li><a name="back_USER_LCD_Clear"></a><a href="#USER_LCD_Clear">USER_LCD_Clear</a></li>
      <li><a name="back_USER_LCD_Cmd"></a><a href="#USER_LCD_Cmd">USER_LCD_Cmd</a></li>
      <li><a name="back_USER_LCD_CursorSet"></a><a href="#USER_LCD_CursorSet">USER_LCD_CursorSet</a></li>
      <li><a name="back_USER_LCD_Data"></a><a href="#USER_LCD_Data">USER_LCD_Data</a></li>
      <li><a name="back_USER_LCD_Init"></a><a href="#USER_LCD_Init">USER_LCD_Init</a></li>
      <li><a name="back_USER_LCD_PrintChar"></a><a href="#USER_LCD_PrintChar">USER_LCD_PrintChar</a></li>
      <li><a name="back_USER_LCD_SpecialCharInit"></a><a href="#USER_LCD_SpecialCharInit">USER_LCD_SpecialCharInit</a></li>
      <li><a name="back_USER_MIDI_NotifyRx"></a><a href="#USER_MIDI_NotifyRx">USER_MIDI_NotifyRx</a></li>
      <li><a name="back_USER_MIDI_NotifyTx"></a><a href="#USER_MIDI_NotifyTx">USER_MIDI_NotifyTx</a></li>
      <li><a name="back_USER_MPROC_DebugTrigger"></a><a href="#USER_MPROC_DebugTrigger">USER_MPROC_DebugTrigger</a></li>
      <li><a name="back_USER_MPROC_NotifyFoundEvent"></a><a href="#USER_MPROC_NotifyFoundEvent">USER_MPROC_NotifyFoundEvent</a></li>
      <li><a name="back_USER_MPROC_NotifyReceivedByte"></a><a href="#USER_MPROC_NotifyReceivedByte">USER_MPROC_NotifyReceivedByte</a></li>
      <li><a name="back_USER_MPROC_NotifyReceivedEvent"></a><a href="#USER_MPROC_NotifyReceivedEvent">USER_MPROC_NotifyReceivedEvent</a></li>
      <li><a name="back_USER_MPROC_NotifyTimeout"></a><a href="#USER_MPROC_NotifyTimeout">USER_MPROC_NotifyTimeout</a></li>
      <li><a name="back_USER_SR_Service_Finish"></a><a href="#USER_SR_Service_Finish">USER_SR_Service_Finish</a></li>
      <li><a name="back_USER_SR_Service_Prepare"></a><a href="#USER_SR_Service_Prepare">USER_SR_Service_Prepare</a></li>
      <li><a name="back_USER_Tick"></a><a href="#USER_Tick">USER_Tick</a></li>
      <li><a name="back_USER_Timer"></a><a href="#USER_Timer">USER_Timer</a></li>
    </ul>
  </li>
  <img src="images/1x1dot.gif" alt="" height="20"><br>
</ul>
<hr><a name="MIOS_MIDI_BeginStream"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_BeginStream</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACI&Oacute;N</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_BeginStream(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">usa esta funci&oacute;n antes de que se haya enviado ning&uacute;n dato o evento MIDI. <br>Necesario para el correcto funcionamiento de la funci&oacute;n de enlace de la MIDIbox.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // env&iacute;a el evento MIDI B0 07 7F<br>  MIOS_MIDI_BeginStream();<br>  MIOS_MIDI_TxBufferPut(0xb0);<br>  MIOS_MIDI_TxBufferPut(0x07);<br>  MIOS_MIDI_TxBufferPut(0x7f);<br>  MIOS_MIDI_EndStream();<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_BeginStream">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_DeviceIDAutoSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_DeviceIDAutoSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_DeviceIDAutoSet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">deriva la ID del dispositivo MIDI desde la cabecera de la ID del PIC</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // poner la ID de dispositivo como el valor especificado en la cabecera de ID del PIC<br>   &nbsp;MIOS_MIDI_DeviceIDAutoSet();<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><span style="text-decoration: underline;">Volver</span></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_DeviceIDGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_DeviceIDGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_DeviceIDGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve la ID del dispositivo MIDI</td></tr><tr><td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de dispositivo</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Imprime en pantalla la ID de dispositivo<br>  MIOS_LCD_PrintHex2(MIOS_MIDI_DeviceIDGet());<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_DeviceIDGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_DeviceIDSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_DeviceIDSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_DeviceIDSet(unsigned char device_id)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Establece la ID del dispositivo MIDI. Deber&iacute;a ser un &uacute;nico n&uacute;mero en una cadena MIDI.<br>&nbsp;Normalmente, esta ID deriva del encabezado de la ID del PIC con la funci&oacute;n MIOS_MIDI_DeviceIDAutoSet</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de dispositivo en &lt;device_id&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  ;; cambiar la ID de dispositivo<br>  MIOS_MIDI_DeviceIDSet(0x03);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_DeviceIDSet">Volver&nbsp;</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_EndStream"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_EndStream</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_EndStream(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Usa esta funci&oacute;n despu&eacute;s de que hayan sido enviados el evento MIDI o datos. <br>Esto es necesario para el correcto funcionamiento de la funci&oacute;n de enlace de MIDIbox!</td></tr><tr><td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Env&iacute;a el evento MIDI 90 36 7F<br>  MIOS_MIDI_BeginStream();<br>  MIOS_MIDI_TxBufferPut(0x90);<br>  MIOS_MIDI_TxBufferPut(0x36);<br>  MIOS_MIDI_TxBufferPut(0x7f);<br>  MIOS_MIDI_EndStream();<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_EndStream">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_Init"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_Init</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_Init(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Inicializa
la interfaz MIDI: La tasa de baudios ser&aacute; establecida
dependiendo de la opci&oacute;n To-Host/MIDI, Los&nbsp;buffers Rx y Tx
ser&aacute;n vaciados</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_Init">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_InterfaceAutoSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_InterfaceAutoSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_InterfaceAutoSet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Deriva el tipo de interfaz MIDI y la direcci&oacute;n del m&oacute;dulo MBHP_IIC_MIDI del encabezado de la ID del PIC.<br>   To-Host flag: ID Byte 6, Bit 0<br>   Direcci&oacute;n del m&oacute;dulo MBHP_IIC_MIDI&nbsp;: ID Byte 5<br>
Si la direcci&oacute;n esclava es&nbsp; != 0x00 y != 0xff, ser&aacute;
tomado por MIOS como valor por defecto para salida de MIDI (Out)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Dispone la interfaz MIDI como el tipo especificado en el encabezado de ID del PIC<br>  &nbsp;MIOS_MIDI_InterfaceAutoSet();<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_InterfaceAutoSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_InterfaceGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_InterfaceGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_InterfaceGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve el tipo actual de interfaz MIDI siguiendo los tipos de interfaces provistos.<br>      0x00: MIOS_MIDI_INTERFACE_COMMON (interfaz MIDI com&uacute;n, 31250 baud)<br>      0x01: MIOS_MIDI_INTERFACE_TO_HOST (interfaz MIDIbox-to-COM&nbsp;, RS232, 38400 baud)<br>      &gt;= 0x02: MBHP_IIC_MIDI direcci&oacute;n del m&oacute;dulo</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">tipo de interfaz</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Obtener el tipo de interfaz y su rama dependiendo de la configuraci&oacute;n.<br>  switch( MIOS_MIDI_InterfaceGet() ) {<br>    case MIOS_MIDI_INTERFACE_COMMON:<br>      // haz esto...<br>      break;<br>    case MIOS_MIDI_INTERFACE_TO_HOST:<br>      // haz esto otro...<br>      break;<br>    default:<br>      // IIC esclavo seleccionado...<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_InterfaceGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_InterfaceSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_InterfaceSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_InterfaceSet(unsigned char interface)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Esta funci&oacute;n tiene dos prop&oacute;sitos:<br>Si
el n&uacute;mero de interfaz es 0x00 o 0x01, la USART interna
ser&aacute; seleccionada, y se configurar&aacute; una tasa de baudios
(baudrate) de 31250 o 38400&nbsp;:<br>      0x00: MIOS_MIDI_INTERFACE_COMMON (interfaz MIDI com&uacute;n, 31250 baudios)<br>      0x01: MIOS_MIDI_INTERFACE_TO_HOST (MIDIbox-to-COM interfaz, RS232, 38400 baudios)<br>   <br>   Con valores&nbsp; &gt;= 0x02 se seleccionar&aacute; un m&oacute;dulo MBHP_IIC_MIDI para los mensajes MIDI <b>salientes</b> (que son enviados con&nbsp;MIOS_MIDI_TxBufferPut)<br>   Los mensajes entrantes seguir&aacute;n gestion&aacute;ndpse con el USART interno!<br>
Si los datos deben ser recibidos por un m&oacute;dulo
MBHP_IIC_MIDI&nbsp;, por favor, usa las funciones apropiadas del
paquete de software que se distribuye en el paquete que lleva el
m&oacute;dulo inclu&iacute;do.<br>&nbsp;Date cuenta de que la
funci&oacute;n MIOS_MIDI_InterfaceAutoSet te permite derivar el tipo de
interfaz MIDI y la direcci&oacute;n&nbsp;IIC esclava de la cabecera de
ID del PIC!<br></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Tipo de interfaz en &lt;interface&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre><br>  // Env&iacute;a el reloj MIDI a trav&eacute;s del MIDI Out con tasa de baudios normal<br>  MIOS_MIDI_InterfaceSet(MIOS_MIDI_INTERFACE_COMMON);<br>  MIOS_MIDI_TxBufferPut(0xf8);<br><br>  // Env&iacute;a el reloj MIDI a trav&eacute;s del MBHP_IIC_MIDI con direcci&oacute;n 0x10<br>  MIOS_MIDI_InterfaceSet(0x10);<br>  MIOS_MIDI_TxBufferPut(0xf8);<br><br>  // Volver a la interfaz por defecto  <br>   MIOS_MIDI_InterfaceAutoSet();<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_InterfaceSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_MergerGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_MergerGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_MergerGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">devuelve
la configuraci&oacute;n de la fusi&oacute;n integrada MIDI: 0x00:
MIOS_MIDI_MERGER_DISABLED (fusi&oacute;n deshabilitada)<br>      0x01: MIOS_MIDI_MERGER_ENABLED (fusi&oacute;n habilitada)<br>      0x02: MIOS_MIDI_MERGER_MBLINK_EP (MIDIbox Link End Point)<br>      0x03: MIOS_MIDI_MERGER_MBLINK_FP (MIDIbox Link Forwarding Point)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">merger function ID</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Obtener configuraci&oacute;n de fusi&oacute;n y rama dependiendo de la configuraci&oacute;n<br>  switch( MIOS_MIDI_MergerGet() ) {<br>    case MIOS_MIDI_MERGER_ENABLED:<br>      // hacer esto...<br>      break;<br>    case MIOS_MIDI_MERGER_MBLINK_EP:<br>      // hacer esto...<br>      break;<br>    case MIOS_MIDI_MERGER_MBLINK_FP:<br>      // hacer esto...<br>      break;<br>    default: // MIOS_MIDI_MERGER_DISABLED:<br>      // hacer esto...<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_MergerGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_MergerSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_MergerSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_MergerSet(unsigned char mode)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">configura la fusi&oacute;n integrada MIDI se proveen las siguientes IDs de Fusor MIDI&nbsp;:<br>      0x00: MIOS_MIDI_MERGER_DISABLED  (fusi&oacute;n deshabilitada)<br>      0x01: MIOS_MIDI_MERGER_ENABLED   (fusi&oacute;n habilitada)<br>      0x02: MIOS_MIDI_MERGER_MBLINK_EP (MIDIbox Link End Point)<br>      0x03: MIOS_MIDI_MERGER_MBLINK_FP (MIDIbox Link Forwarding Point)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">merger function ID in &lt;mode&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // configurar la MIDIbox como MIDIbox Link End Point<br>  // (significa: fusi&oacute;n habilitada solo para eventos que hayan sido<br>  // generados por otra MIDIbox que est&eacute; configurada como<br>  //  MIDIbox Link Forwarding Point)<br>  MIOS_MIDI_MergerSet(MIOS_MIDI_MERGER_MBLINK_EP);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_MergerSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_RxBufferFree"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_RxBufferFree</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_RxBufferFree(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve un n&uacute;mero de bytes libres en el buffer de recepci&oacute;n</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de bytes libres&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es SOLO para uso interno de MIOS!<br>Los bytes recibidos ser&aacute;n notificados por los atajos de MPROC!</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Introduce un byte MIDI en el Buffer Rx si &eacute;ste no est&aacute; lleno<br>&nbsp;if( MIOS_MIDI_RxBufferFree() ) {<br>    MIOS_MIDI_RxBufferPut(0xf8); // Reloj MIDI <br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_RxBufferFree">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_RxBufferGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_RxBufferGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_RxBufferGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Obtiene un byte del buffer de recepci&oacute;n.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">byte recibido</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es solo para uso inteno de MIOS!<br>   Los bytes recibidos ser&aacute;n notificados por los atajos MPROC !</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char b;<br><br>  // obtiene un byte MIDI del Buffer Rx si se ha recibido algo.<br>&nbsp;if( MIOS_MIDI_RxBufferUsed() ) {<br>    b = MIOS_MIDI_RxBufferGet();<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_RxBufferGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_RxBufferPut"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_RxBufferPut</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_RxBufferPut(unsigned char b)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">pone un byte en el buffer de recepci&oacute;n</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">byte in &lt;b&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es solo para uso inteno de MIOS!<br>   Los bytes recibidos ser&aacute;n notificados por los atajos MPROC !</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // pone un byte MIDI en el Buffer Rx si &eacute;ste no est&aacute; lleno.<br>  if( MIOS_MIDI_RxBufferFree() ) {<br>    MIOS_MIDI_RxBufferPut(0xf8); // Reloj MIDI<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_RxBufferPut">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_RxBufferUsed"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_RxBufferUsed</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_RxBufferUsed(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve el n&uacute;mero de bytes usados en el buffer de recepci&oacute;n.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de bytes usados</td></tr><tr><td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es solo para uso inteno de MIOS!<br>   Los bytes recibidos ser&aacute;n notificados por los atajos MPROC !</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // detecta si se ha recibido algo v&iacute;a MIDI<br>  if( MIOS_MIDI_RxBufferUsed() ) {<br>    // hacer algo...<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_RxBufferUsed">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_TxBufferFlush"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_TxBufferFlush</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_TxBufferFlush(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Espera hasta que se hayan transmitido todos los bytes MIDI del Buffer Tx</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // espera hasta que el buffer est&eacute; vac&iacute;o, entonces manda una descarga de nuevos bytes<br>  MIOS_MIDI_TxBufferFlush();<br>  MIOS_MIDI_TxBufferPut(0xf0);<br>  //  ...<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_TxBufferFlush">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_TxBufferFree"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_TxBufferFree</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_TxBufferFree(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve el n&uacute;mero de bytes libres en el buffer de transmisi&oacute;n.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de bytes libresnumber of free bytes</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es solo para uso inteno de MIOS!<br></i><i>La funci&oacute;n MIOS_MIDI_TxBufferPut()esperar&aacute; hasta que el buffer est&eacute; lleno.</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // Pone un byte MIDI en el Buffer Tx si &eacute;ste no est&aacute; lleno<br>  if( MIOS_MIDI_TxBufferFree() ) {<br>    MIOS_MIDI_TxBufferPut(0xf8);<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_TxBufferFree">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_TxBufferGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_TxBufferGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_TxBufferGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Obtiene un byte libre del buffer de transmisi&oacute;n.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">byte para transmitir</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es solo para uso inteno de MIOS!</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char b;<br><br>  // obtiene un byte libre del Buffer Tx si hay un nuevo byte disponible<br>  if( MIOS_MIDI_TxBufferUsed() ) {<br>    b = MIOS_MIDI_TxBufferGet();<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_TxBufferGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_TxBufferPut"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_TxBufferPut</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MIDI_TxBufferPut(unsigned char b)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">mete un byte en el buffer de transmisi&oacute;n.<br>
Si el Buffer Tx est&aacute; lleno, la funci&oacute;n ser&aacute;
suspendida hasta que se haya transmitido un byte v&iacute;a MIDI.<br>
Esta funci&oacute;n redirige los bytes salientes hacia el
m&oacute;dulo&nbsp;MBHP_IIC_MIDI module si ha sido seleccionado con la
funci&oacute;n MIOS_MIDI_InterfaceSet o MIOS_MIDI_InterfaceAutoSet
function</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">byte para transmitir &lt;b&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // pone un byte MIDI en el Buffer Tx<br>&nbsp;MIOS_MIDI_TxBufferPut(0xf8); // MIDI Clock<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_TxBufferPut">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MIDI_TxBufferUsed"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MIDI_TxBufferUsed</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MIDI_TxBufferUsed(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve el n&uacute;mero de bytes usados en el buffer</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de bytes usados</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2"><i>Esta funci&oacute;n es solo para uso inteno de MIOS!<br></i><i>La funci&oacute;n MIOS_MIDI_TxBufferPut() esperar&aacute; hasta que el buffer est&eacute; lleno</i></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // monitoriza si se ha introducido algo en el Buffer Tx<br>&nbsp;if( MIOS_MIDI_TxBufferUsed() ) {<br>    // tiene algo<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MIDI_TxBufferUsed">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MPROC_MergerDisable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MPROC_MergerDisable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MPROC_MergerDisable(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Esta
funci&oacute;n te permite deshabilitar temporalmente el proceso de
fusi&oacute;n de MIDI durante la recepci&oacute;n de un nuevo evento.Es
usado por los parseadores SysEx para prevenir la expedici&oacute;n de
las secuencias (strings) SysEx, pero tambi&eacute;n puede ser usado por
el atajo USER_MPROC_NotifyReceivedByte para filtrar otros eventos. La
fusi&oacute;n se habilitar&aacute; nuevamente una vez se haya recibido
un evento MIDI completo!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MPROC_MergerDisable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MPROC_MergerEnable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MPROC_MergerEnable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MPROC_MergerEnable(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Habilita el procesamiento de fusi&oacute;n MIDI como se especifica con MIOS_MIDI_MergerSet</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MPROC_MergerEnable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MPROC_MergerGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MPROC_MergerGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MPROC_MergerGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve 1 si el proceso de fusi&oacute;n est&aacute; habilitado, 0 si est&aacute; deshabilitado</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">status</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MPROC_MergerGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_DeadbandGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_DeadbandGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_DeadbandGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve
la diferencia entre el &uacute;ltimo y el actual valor de pote que debe
ser archivado&nbsp;para disparar la funci&oacute;n&nbsp;"NotifyChange"
(notificar cambio)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">diff value</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_DeadbandGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_DeadbandSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_DeadbandSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_AIN_DeadbandSet(unsigned char deadband)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Marca
la diferencia entre el &uacute;ltimo y el actual valor de pote que debe
ser archivado para disparar la funci&oacute;n "NotifyChange" (notificar
cambio)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Valor de deadband en &lt;deadband&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_DeadbandSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_DynamicPrioGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_DynamicPrioGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_DynamicPrioGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">devuelve
el status de la caracter&iacute;stica de sampleado de prioridad
din&aacute;mica&nbsp;. La bandera solo se tomar&aacute; en cuenta en
modo multiplexado (m&aacute;s de 8potes conectados al core v&iacute;a
AINX4).Si est&aacute; activo, la frecuencia de sampleado de los dos
&uacute;ltimos potes girados ser&aacute; din&aacute;micamente
incrementada para mayor exactitud.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">0x00: sampleado de prioridad din&aacute;mica deshabilitado o modo activo no multiplexado.<br>        0x01: sampleado de prioridad din&aacute;mica habilitado(por defecto)</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_DynamicPrioGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_DynamicPrioSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_DynamicPrioSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_AIN_DynamicPrioSet(unsigned char enable)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">habilita
o deshabilita la caracter&iacute;stica de sampleado de prioridad
din&aacute;mica.enables or disables the dynamic priority sampling
feature. La bandera s&oacute;o se tendr&aacute; en cuenta en el modo
multiplexado(m&aacute;s de 8 potes conectados al m&oacute;dulo core
v&iacute;a AINX4). Si est&aacute; activo, la frecuencia de sampleado de
los dos &uacute;ltimos potes activados ser&aacute; din&aacute;micamente
incrementada para mayor exactitud.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">0x00: sampleado de prioridad din&aacute;mica desactivado<br>        0x01:&nbsp;sampleado de prioridad din&aacute;mica habilitado(por defecto)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_DynamicPrioSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_LastPinsGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_LastPinsGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_LastPinsGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">devuelve el &iacute;ndice de los dos pines que han sido sampleados con un valor diferente al final.&nbsp;<br>   En palablas menos abstractas: devuelve el n&uacute;mero de los dos &uacute;ltimos potes activados.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Valor devuelto y MIOS_PARAMETER1: &uacute;ltimo pin<br>        MIOS_PARAMETER2: pen&uacute;ltimo pin</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_LastPinsGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_Muxed"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_Muxed</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_AIN_Muxed(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">activa el modo MUX( se pueden conectar hasta 64 potes v&iacute;a multiplexadores AIN)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_Muxed">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_NumberGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_NumberGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_NumberGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">devuelve el n&uacute;mero de pines an&aacute;logos disponibles.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pins an&aacute;logos</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_NumberGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_NumberSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_NumberSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_AIN_NumberSet(unsigned char pots)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">establece el n&uacute;mero de pines AIN disponibles<br>Si el n&uacute;mero es&nbsp; &gt; 64, el val&oacute;r ser&aacute; forzado a 64&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de pins an&aacute;logos en&lt;pots&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_Pin7bitGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_Pin7bitGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_Pin7bitGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">rdevuelve un valor de 7-bit de la entrada AIN (input)</td></tr><tr><td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pins an&aacute;logos de entrada en&lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor de 7-bit&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_Pin7bitGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_PinGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_PinGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned int MIOS_AIN_PinGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve el valor de la entrada AIN (input)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor de 10 bit&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_PinGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_PinLSBGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_PinLSBGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_PinLSBGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve el valor LSB de una entrada AIN (input)&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Valor LSB</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_PinLSBGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_PinMSBGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_PinMSBGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_AIN_PinMSBGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Devuelve un valor MSB de entrada AIN (input)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Valor MSB</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_PinMSBGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_AIN_UnMuxed"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_AIN_UnMuxed</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_AIN_UnMuxed(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">desactiva el modo MUX&nbsp; (se pueden conectar 8 potes directamente a los pins anal&oacute;gicos&nbsp;de entrada(input) del PIC</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_AIN_UnMuxed">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_DeadbandGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_DeadbandGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MF_DeadbandGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">&gt;Devuelve el valor de deadband para el controlador&nbsp;MF&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor deadband</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_DeadbandGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_DeadbandSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_DeadbandSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARATION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_DeadbandSet(unsigned char deadband)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPTION</b></td>
    <td class="TABCOLOR2">Establece el valor de deadband para el controlador MF</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor deadband en &lt;deadband&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">Solo se puede usar esta funcion cuando el controlador motor ha sido activado.</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_DeadbandSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_Disable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_Disable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_Disable(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Desactiva el m&oacute;dulo MF</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_Disable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_Enable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_Enable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_Enable(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Activa
el m&oacute;dulo MF module - en este modo los multiplexadores
est&aacute;n desactivados. Se pueden controlar hasta 8 motorfaders a
trav&eacute;s del puerto MUX. Esta funci&oacute;n solo se puede usar
con el controlador motor ha sido habilitado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  ;; inicializar el controlador MF para faders Alps RSAON11M9 <br>  MIOS_MF_Enable();<br>  MIOS_MF_DeadbandSet(3);<br>  MIOS_MF_PWM_DutyCycleUpSet(1);<br>  MIOS_MF_PWM_DutyCycleDownSet(1);<br>  MIOS_MF_PWM_PeriodSet(3);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_Enable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_FaderMove"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_FaderMove</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_FaderMove(unsigned char fader, unsigned int pos)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establecer posici&oacute;n objetivo y mover fader&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de fader &lt;fader&gt;, posici&oacute;n de fader&nbsp; &lt;pos&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">esta funci&oacute;n solo se puede usar con el controlador motor habilitado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // Mover fader #7 a la posici&oacute;n m&aacute;s alta(0x3ff)<br>  MIOS_MF_FaderMove(0x07, 0x3ff);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_FaderMove">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_PWM_DutyCycleDownGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_PWM_DutyCycleDownGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MF_PWM_DutyCycleDownGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve
el Duty Cycle para movimientos descendentes - ver&nbsp;
http://www.ucapps.de/mbhp_mf.html para informaci&oacute;n detallada
acerca de este valor.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Duty Cycle</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_PWM_DutyCycleDownGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_PWM_DutyCycleDownSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_PWM_DutyCycleDownSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_PWM_DutyCycleDownSet(unsigned char cali_down)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Establece
el Duty Cycle para movimientos descendentes - ver
http://www.ucapps.de/mbhp_mf.html para informaci&oacute;n detallada
sobre este valor.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Duty Cycle in &lt;cali_down&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_PWM_DutyCycleDownSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_PWM_DutyCycleUpGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_PWM_DutyCycleUpGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MF_PWM_DutyCycleUpGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve
el Duty Cycle para movimientos ascendentes - ver
http://www.ucapps.de/mbhp_mf.html para informaci&oacute;n detallada
sobre este valor.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Duty Cycle</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_PWM_DutyCycleUpGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_PWM_DutyCycleUpSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_PWM_DutyCycleUpSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_PWM_DutyCycleUpSet(unsigned char cali_up)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Establece
el Duty Cycle para movimientos ascendentes - ver
http://www.ucapps.de/mbhp_mf.html para informaci&oacute;n detallada
sobre este valor,</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Duty Cycle in &lt;cali_up&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_PWM_DutyCycleUpSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_PWM_PeriodGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_PWM_PeriodGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MF_PWM_PeriodGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve el per&iacute;odo PWM - ver http://www.ucapps.de/mbhp_mf.html   para informaci&oacute;n detallada acerca de este valor.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">per&iacute;odo PWM</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_PWM_PeriodGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_PWM_PeriodSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_PWM_PeriodSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_PWM_PeriodSet(unsigned char speed)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Establece
el per&iacute;odo PWM -&nbsp; ver http://www.ucapps.de/mbhp_mf.html
para informaci&oacute;n detallada acerca de este valor.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">PWM period in &lt;speed&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_PWM_PeriodSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_SuspendDisable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_SuspendDisable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_SuspendDisable(unsigned char fader)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">desactiva el modo suspenso del motor&nbsp;<br>   (funci&oacute;n usada por detecci&oacute;n de sensores t&aacute;ctiles)<br>esta funci&oacute;n solo puede ser usada con el controlador motor habilitado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">number of motor in &lt;fader&gt; (0-7)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_SuspendDisable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_SuspendEnable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_SuspendEnable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_SuspendEnable(unsigned char fader)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Suspende el motor<br>(funci&oacute;n usada por la detecci&oacute;n de sensores t&aacute;ctiles)<br>esta funci&oacute;n solo puede ser usada con el controlador motor habilitado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">number of motor in &lt;fader&gt; (0-7)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_SuspendEnable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_SuspendGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_SuspendGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_MF_SuspendGet(unsigned char fader)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el estado de suspensi&oacute;n del motor,</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">number of motor in &lt;fader&gt; (0-7)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">1 si el motor est&aacute; suspendido, si no 0</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_SuspendGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_MF_TouchDetectionReset"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_MF_TouchDetectionReset</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_MF_TouchDetectionReset(unsigned char fader)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Esta
funci&oacute;n resetea la detecci&oacute;n t&aacute;ctil implementada
por software para que el fader sea reposicionado, no importando si est&aacute; siendo movido manualmente o
no</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de motor en &lt;fader&gt; (0-7)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_MF_TouchDetectionReset">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DIN_PinAutoRepeatDisable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DIN_PinAutoRepeatDisable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_DIN_PinAutoRepeatDisable(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">deshabilita la auto-repetici&oacute;n para el pin apropiado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DIN_PinAutoRepeatDisable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DIN_PinAutoRepeatEnable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DIN_PinAutoRepeatEnable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_DIN_PinAutoRepeatEnable(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">habilita la caracter&iacute;stica de auto-repetici&oacute;n para el pin apropiado</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DIN_PinAutoRepeatEnable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DIN_PinAutoRepeatGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DIN_PinAutoRepeatGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_DIN_PinAutoRepeatGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve != 0 si la auto-repetici&oacute;n ha sido activada para el pin apropiado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">!= 0 si la auto-repetici&oacute;n ha sido activada para este pin<br>        0 si auto-repetici&oacute;n ha sido desactivada para este pin</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DIN_PinAutoRepeatGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DIN_PinGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DIN_PinGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_DIN_PinGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve el valor de&nbsp; Pin DIN</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">1 si un pin es +5V, 0 si el pin es de 0V</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DIN_PinGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DIN_SRGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DIN_SRGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_DIN_SRGet(unsigned char sr)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve el valor de registro de cambio de DIN</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de registro de cambios en &lt;sr&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Valor de registro de cambios</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DIN_SRGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DOUT_PinGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DOUT_PinGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_DOUT_PinGet(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el valor de un Pin DOUT&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de Pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">1 si el pin es de +5V,&nbsp; 0 si el pin es de 0V</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DOUT_PinGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DOUT_PinSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DOUT_PinSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_DOUT_PinSet(unsigned char pin, unsigned char value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">configura el pin como de&nbsp;0 o 5V</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de pin en&nbsp; &lt;pin&gt;, valor en &lt;value&gt;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DOUT_PinSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DOUT_PinSet0"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DOUT_PinSet0</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_DOUT_PinSet0(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Configura el Pin a&nbsp; 0V</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de pin en WREG</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DOUT_PinSet0">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DOUT_PinSet1"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DOUT_PinSet1</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_DOUT_PinSet1(unsigned char pin)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Configura el pin a&nbsp; 5V</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de pin en &lt;pin&gt;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DOUT_PinSet1">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DOUT_SRGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DOUT_SRGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_DOUT_SRGet(unsigned char sr)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el valor de DOUT del shift register</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de&nbsp;shift register in &lt;sr&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor del shift register</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DOUT_SRGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_DOUT_SRSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_DOUT_SRSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_DOUT_SRSet(unsigned char sr, unsigned char sr_value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece sl valor DOUT del shift register</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de shift register in &lt;sr&gt;<br>        valor in &lt;sr_value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_DOUT_SRSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_ENC_Abs7bitAdd"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_ENC_Abs7bitAdd</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_ENC_Abs7bitAdd(unsigned char enc, unsigned char value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">A&ntilde;ade el incrementer(incrementador) al valor absoluto de&nbsp;7-bit del encoder<br>
Esta funci&oacute;n satura el valor. Esto significa que si el valor
resultante es mayor de 127 ser&aacute; saturado a 127. Se har&aacute;
lo mismo con valores inferiores a 0.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de encoder in &lt;enc&gt;<br>valor de incrementer&nbsp; in &lt;value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">devuelve un nuevo valor absoluto en MIOS_PARAMETER1<br>        MIOS_PARAMETER2[0] es 1, si el valor ha sido cambiado, es 0 si es igual al antiguo valor.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">Esta
funci&oacute;n usa un registro de repuesto que s&oacute;lo est&aacute;
disponible cuando la velocidad del encoder est&aacute; establecida como
MIOS_ENC_SPEED_NORMAL. En el resto de modos de velocidad
(MIOS_ENC_SPEED_SLOW y MIOS_ENC_SPEED_FAST) esta funci&oacute;n NO DEBE
USARSE, en su lugar habr&aacute; que escribir un handler dedicado para
valores absolutos&nbsp; (ver aplicaciones en enc_example*&nbsp;)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // resta -5 del valor de 7-bit del encoder #0<br>  MIOS_ENC_Abs7bitAdd(0, -5);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_ENC_Abs7bitAdd">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_ENC_Abs7bitGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_ENC_Abs7bitGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_ENC_Abs7bitGet(unsigned char enc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve un valor absoluto de 7 bits del encoder</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de encoder in &lt;enc&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor absoluto</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">Esta funci&oacute;n usa un registro de repuesto que s&oacute;lo est&aacute; disponible
cuando la velocidad del encoder est&aacute; establecida como
MIOS_ENC_SPEED_NORMAL. En el resto de modos de velocidad
(MIOS_ENC_SPEED_SLOW y MIOS_ENC_SPEED_FAST) esta funci&oacute;n NO DEBE
USARSE, en su lugar habr&aacute; que escribir un handler dedicado para valores
absolutos&nbsp; (ver aplicaciones en enc_example*&nbsp;)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // obtener el valor de 7 bits actual del encoder #0<br>  value = MIOS_ENC_Abs7bitGet(0);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_ENC_Abs7bitGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_ENC_Abs7bitSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_ENC_Abs7bitSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_ENC_Abs7bitSet(unsigned char enc, unsigned char value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece el valor absoluto de 7 bits del encoder</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de encoder in &lt;enc&gt;, valor absoluto in &lt;value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">Esta funci&oacute;n usa un registro de repuesto que s&oacute;lo est&aacute; disponible
cuando la velocidad del encoder est&aacute; establecida como
MIOS_ENC_SPEED_NORMAL. En el resto de modos de velocidad
(MIOS_ENC_SPEED_SLOW y MIOS_ENC_SPEED_FAST) esta funci&oacute;n NO DEBE
USARSE, en su lugar habr&aacute; que escribir un handler dedicado para valores
absolutos&nbsp; (ver aplicaciones en enc_example*&nbsp;)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // establece el valor de 7-bit value del encoder #0 to 0x40<br>  MIOS_ENC_Abs7bitSet(0, 0x40);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_ENC_Abs7bitSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_ENC_NumberGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_ENC_NumberGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_ENC_NumberGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el n&uacute;mero de encoders que han sido definidos en la tabla de encoder</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de encoders</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_ENC_NumberGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_ENC_SpeedGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_ENC_SpeedGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_ENC_SpeedGet(unsigned char enc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve el ajuste de velocidad para un encoder<br>   Est&aacute;n disponibles los siguientes ajustes:<br>MIOS_ENC_SPEED_SLOW    0x00<br>      MIOS_ENC_SPEED_NORMAL  0x01<br>      MIOS_ENC_SPEED_FAST    0x02<br></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de encoder in &lt;enc&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">devuelve el modo de velocidad&nbsp;<br>        par&aacute;metro de velocidad&nbsp;en&nbsp; MIOS_PARAMETER2</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // devuelve el ajuste de velocidad de  encoder #0<br>  speed = MIOS_ENC_SpeedGet(0);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_ENC_SpeedGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_ENC_SpeedSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_ENC_SpeedSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_ENC_SpeedSet(unsigned char enc, unsigned char mode, unsigned char parameter)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece la velocidad de un encoder<br>est&aacute;n disponibles los siguientes modos:<br>      MIOS_ENC_SPEED_SLOW    0x00   (requiere par&aacute;metro adicional)<br>      MIOS_ENC_SPEED_NORMAL  0x01   (sin par&aacute;metro adicional)<br>      MIOS_ENC_SPEED_FAST    0x02   (requiere par&aacute;metro adicional)<br></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de encoder in &lt;enc&gt;<br>        modo de velocidad en &lt;mode&gt;<br>        par&aacute;metro de velocidad &lt;parameter&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">Cuando
se usa MIOS_ENC_SPEED_SLOW o MIOS_ENC_SPEED_FAST, Las funciones
MIOS_ENC_Abs* no estar&aacute;n disponibles dado que estos modos de
velocidad sit&uacute;an un registro de repuesto que es normalmente
usado para almacenar e l valor absoluto. As&iacute; que, en este caso,
deber&iacute;a escribirse un handler para valores absolutos.(ver
aplicaciones enc_example*&nbsp;)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  MIOS_ENC_SPEED_NORMAL<br>  ~~~~~~~~~~~~~~~~~~~~~<br>  // este modo de velocidad no requiere ning&uacute;n par&aacute;metro adicional (deber&iacute;a ser cero)<br><br>  // ajustar la velocidad del encoder #0 a "normal"<br>  MIOS_ENC_SpeedSet(0, MIOS_ENC_SPEED_NORMAL, 0);<br><br>  MIOS_ENC_SPEED_SLOW<br>  ~~~~~~~~~~~~~~~~~~~<br>  // esta velocidad permite definir un valor pre-divisor this speed mode <br>  // de 0 a 7<br><br>  // ajustar la velocidad del encoder #0 a "slow", usar un pre-divisor <br>  // de 3 para que el encoder incremente cada 4&ordm; paso<br>  // step (predivider value (- 1))<br>  MIOS_ENC_SpeedSet(0, MIOS_ENC_SPEED_SLOW, 3);<br><br>  MIOS_ENC_SPEED_FAST<br>  ~~~~~~~~~~~~~~~~~~~<br>  // en este modo de velocidad el valor de incremento depende de <br>  //  la velocidad rotacional bas&aacute;ndose en la siguiente f&oacute;rmula :<br><br>  //    speed_ctr: decrecido con cada ciclo de actualizaci&oacute;n<br>  //    (-&gt; MIOS_SRIO_UpdateFrqSet)<br>  //     (normalmente 1 ms) para medir el tiempo entre <br> &nbsp;//     dos pasos del encoder  <br>  //     Init value: 0x7f<br>  //     alcanza 0x00 despu&eacute;s de 127 ciclos de actualizaci&oacute;n<br>  //    (normalmente despu&eacute;s de 127 ms)<br>  //    &lt;parameter&gt;: especificado con el  MIOS_ENC_SpeedSet<br>  //<br>  //           funci&oacute;n, valores permitidos:<br>  //        0 (r&aacute;pido)     -&gt; divisor = 2^(7-0) = 128<br>  //        1 (m&aacute;s r&aacute;pido)   -&gt; divisor = 2^(7-1) =  64<br>  //        ...<br>  //        7 (el m&aacute;s r&aacute;pido)  -&gt; divisor = 2^(7-7) =  1<br>  // -&gt;<br>  //    incrementer = speed_ctr / (2^(7-par&aacute;metro))<br><br>  // establecer la velocidad para el encoder #0 a "fast", el valor de exponente de velocidad es 2<br>  MIOS_ENC_SpeedSet(0, MIOS_ENC_SPEED_FAST, 2);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_ENC_SpeedSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_DebounceGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_DebounceGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_SRIO_DebounceGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el &nbsp;valor de recarga antirrebote(debounce) de los registros&nbsp;DIN SR</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor de recarga antirrebote de contador</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_SRIO_DebounceGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_DebounceSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_DebounceSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_SRIO_DebounceSet(unsigned char debounce_value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece
el valor de recarga antirrebote (debounce) del contador para los
registros&nbsp;DIN SR que no hayan sido asignados a encoders de
rotaci&oacute;n para efecto antirrebote de botones de mala calidad.<br><br>El
efecto antirrebote se hace de la siguiente manera: en cada movimiento
de bot&oacute;n el valor de precarga se cargar&aacute; en el registro
antirrebote del contador. El contador decrecer&aacute; en cada ciclo de
actualizaci&oacute;n SRIO. hasta que el contador sea cero, los cambios
del bot&oacute;n ser&aacute;n grabados, pero no disparar&aacute;n la
funci&oacute;n USER_DIN_NotifyToggle.<br><br>
Ning&uacute;n movimiento de bot&oacute;n (previsto) se perder&aacute;,
pero la latencia ser&aacute; incrementada. Ejemplo: Si la frecuencia de
actualizaci&oacute;n est&aacute; establecida en 1 mS, y el valor
antirrebote en 32, el primer movimiento de bot&oacute;n se
reconocer&aacute; con latencia de 1 mS en el peor de los casos. Cada
movimiento de bot&oacute;n adicional que tenga lugar en los siguientes
32 mS ser&aacute; reconocido con una latencia de
32 mS en el peor de los casos. Cuando haya pasado el tiempo de
antirrebote, la peor latencia posible es de nuevo 1
mS.<br><br> Recuerda que en las versiones de MIOS anteriores a la
v1.9c, el contador antirrebote tambi&eacute;n afect&oacute; a los
rotary encoders y registros DOUT&nbsp;(no fueron soportados).<br>Con
MIOS V1.9c &nbsp;y superiores, este problema ya no esiste y la
funci&oacute;n antirrebote puede usarse en casi todas las aplicaciones.<br>
&Uacute;nica excepci&oacute;n: si la aplicaci&oacute;n deber&iacute;a
grabar los cambios de pin de sensores digitales que se est&aacute;n
activando muy r&aacute;pido, el antirrebote debe ser omitido. </td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">debounce counter reload value in &lt;debounce_value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_SRIO_DebounceSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_NumberGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_NumberGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_SRIO_NumberGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el n&uacute;mero de registros SR disponibles</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">n&uacute;mero de SRs</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_SRIO_NumberGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_NumberSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_NumberSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_SRIO_NumberSet(unsigned char number_sr)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Establece el n&uacute;mero de registros SR disponibles, si el n&uacute;mero es&nbsp;&gt; 16, el valor se forzar&aacute; a 16.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de&nbsp;SRs in &lt;number_sr&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_TS_SensitivityGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_TS_SensitivityGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_SRIO_TS_SensitivityGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve la sensibilidad del touchsensor (sensor t&aacute;ctil)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor de sensibilidad</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_TS_SensitivitySet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_TS_SensitivitySet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_SRIO_TS_SensitivitySet(unsigned char sensitivity)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece la sensibilidad del sensor t&aacute;ctil.<br>
sensibilidad == 0x00 deshabilita el TS para que el RD.4 (J14 del
m&oacute;dulo core) no sea manejado por MIOS &nbsp;y est&eacute; libre
para otros prop&oacute;sitos</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor de sensibilidad en &lt;sensitivity&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_UpdateFrqGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_UpdateFrqGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_SRIO_UpdateFrqGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve la frecuencia de actualizaci&oacute;n de los registros SR</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">frecuencia de actualizaci&oacute;n (unit: milliseconds)</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SRIO_UpdateFrqSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SRIO_UpdateFrqSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_SRIO_UpdateFrqSet(unsigned char update_frq)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece la frecuencia de actualizaci&oacute;n de los registros SR</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">frecuencia de actualizaci&oacute;n (unit: milliseconds) en &lt;update_frq&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_Clear"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_Clear</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_Clear(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">limpia la pantalla LCD&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // limpiar  LCD e imprimir un caracter<br>  MIOS_LCD_Clear();<br>  MIOS_LCD_PrintChar('A');<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_Cmd"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_Cmd</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_Cmd(unsigned char cmd)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un comando a la pantalla LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">el comando debe enviarse en &lt;cmd&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_CursorGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_CursorGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_LCD_CursorGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve la posici&oacute;n del cursor de texto<br>      0x00-0x3f: primera l&iacute;nea<br>      0x40-0x7f: segunda linea<br>      0x80-0xbf: tercera l&iacute;nea o segunda LCD(si est&aacute; disponible)<br>      0xc0-0xff: cuarta l&iacute;nea o segunda LCD&nbsp;(si est&aacute; disponible)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">posici&oacute;n de cursor de texto</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_CursorSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_CursorSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_CursorSet(unsigned char pos)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">ajusta el cursor de texto en la pantalla LCD<br>      0x00-0x3f: primera l&iacute;nea<br>      0x40-0x7f: segunda l&iacute;nea<br>      0x80-0xbf: tercera l&iacute;nea o segunda LCD (ver MIOS_LCD_YAddressSet)<br>      0xc0-0xff: cuarta l&iacute;nea o segunda LCD (ver MIOS_LCD_YAddressSet)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  //imprime un caracter en la primera l&iacute;nea, primera columna<br>  MIOS_LCD_CursorSet(0x00 + 0);<br>  MIOS_LCD_PrintChar('A');<br><br>  // imprime un caracter en la segunda l&iacute;nea, &uacute;ltima columna (LCD de 2x16)<br>  MIOS_LCD_CursorSet(0x40 + 15);<br>  MIOS_LCD_PrintChar('B');<br><br>  // imprime caracteres en la segunda LCD<br>  // (o 3&ordf; y 4&ordf; l&iacute;nea, ver MIOS_LCD_YAddressSet)<br>  MIOS_LCD_CursorSet(0x80 + 0);<br>  MIOS_LCD_PrintChar('C');<br>  MIOS_LCD_CursorSet(0xc0 + 15);<br>  MIOS_LCD_PrintChar('D');<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_Data"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_Data</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_Data(unsigned char data)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un valor de dato a la pantalla LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">los datos deben ser enviados en &lt;data&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_Init"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_Init</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_Init(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">inicializa la pantalla LCD. Esta funci&oacute;n se llama autom&aacute;ticamente despu&eacute;s del inicio.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_MessageStart"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_MessageStart</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_MessageStart(unsigned char delay)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">un repuesto para MIOS_LCD_PrintMessage que permite iniciar un mensaje sin llamar a "MIOS_LCD_PrintString"</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">retraso del mensaje en &lt;delay&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // imprime mensaje en pantalla durante 2 segundos<br>  MIOS_LCD_CursorSet(0x00 + 0);<br>  MIOS_LCD_PrintCString("Pot value: ");<br>  MIOS_LCD_PrintHex2(MIOS_AIN_Pin7bitGet(0));<br>  MIOS_LCD_MessageStart(255);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_MessageStop"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_MessageStop</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_MessageStop(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta funci&oacute;n permite parar el mensaie inmediatamente para que se llame de nuevo MIOS_LCD_Tick&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  //detiene el mensaje inmediatamente e invoca de nuevo DISPLAY_Tick<br>  MIOS_LCD_MessageStop();<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintBCD1"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintBCD1</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintBCD1(unsigned char v)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un 8-bit como BCD (valor decimal) -- solo un d&iacute;gito</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  valor de caracter sin firmar;<br><br>  // imprimir en pantalla el d&iacute;gito de &acute;valor&acute; de la izquierda<br>  MIOS_LCD_PrintBCD1(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintBCD2"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintBCD2</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintBCD2(unsigned char v)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un 8-bit como BCD (valor decimal) -- solo dos d&iacute;gitos</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Valor en &lt;v&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">dos d&iacute;gitos en LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre> valor char sin firmar;<br><br>  // imprimir en pantalla los dos d&iacute;gitos de 'valor' de la izquierda <br>  MIOS_LCD_PrintBCD2(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_SRIO_NumberSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintBCD3"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintBCD3</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintBCD3(unsigned char v)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un 8-bit como BCD (valor decimal) -- los tres d&iacute;gitos&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Valor en &lt;v&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">tres d&iacute;gitos en LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  valor char sin firmar;<br><br>  // imprime en pantalla los tres d&iacute;gitos de 'valor' <br>  MIOS_LCD_PrintBCD3(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_PrintBCD3">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintBCD4"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintBCD4</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintBCD4(unsigned int v)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un 16-bit como BCD (valor decimal) -- cuatro d&iacute;gitos</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor 16bit en &lt;v&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  valor int sin firmar;<br><br>  // imprime en pantalla los 4 d&iacute;gitos de valor de la izquierda<br>  MIOS_LCD_PrintBCD4(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_PrintBCD4">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintBCD5"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintBCD5</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintBCD5(unsigned int v)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un 16-bit como BCD (valor decimal) -- cinco d&iacute;gitos</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor 16bit en &lt;v&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  valor int sin firmar;<br><br>  // imprime en pantalla todos los 5 d&iacute;gitos de 'valor'<br>  MIOS_LCD_PrintBCD5(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_PrintBCD5">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintCString"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintCString</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintCString(code char *str)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime una secuencia acabada en 0--- solo provista por el MIOS C Wrapper!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Indicaador para secuencias acabadas en 0 en &lt;str&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // imprime secuencia en LCD- primera l&iacute;nea, primera columna<br>  MIOS_LCD_CursorSet(0x00 + 0);<br>  MIOS_LCD_PrintCString("Hello World!");<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_PrintCString">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintChar"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintChar</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintChar(unsigned char c)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un solo caracter ASCII</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">el caracter debe imprimirse en&nbsp; &lt;c&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">el caracter en LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  ;;imprime en pantalla cuatro caracteres<br>  MIOS_LCD_PrintChar('M');<br>  MIOS_LCD_PrintChar('I');<br>  MIOS_LCD_PrintChar('O');<br>  MIOS_LCD_PrintChar('S');<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintHex1"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintHex1</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintHex1(unsigned char h)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un valor hex de 4-bit</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Valor en &lt;h&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">un d&iacute;gito en LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  valor char sin firmar;<br><br>  // imprime en pantalla la mitad de un byte de 'valor'<br>  MIOS_LCD_PrintHex1(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintHex2"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintHex2</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintHex2(unsigned char h)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime un valor hex de 8-bit</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Valor en &lt;h&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  valor char sin firmar;<br><br>  // imprimir en pantalla el contenido de 'valor' <br>  MIOS_LCD_PrintHex2(value);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintMessage"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintMessage</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintMessage(code char *str)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime
un mensaje durante 2 segundos. El flujo normal del programa no
ser&aacute; parado en este tiempo, s&oacute;lo que la rutina
"DISPLAY_Tick" no ser&aacute; llamada. Tras el mensaje, se
invocar&aacute; &nbsp;"DISPLAY_Init" antes del siguiente "DISPLAY_Tick"</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Indicador de secuencia en &lt;str&gt;<br>        La primera palabra de la secuencia debe contener la longitud y posici&oacute;n de LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">algunos caracteres en LCD durante 2 segundos</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EXAMPLE</b></td>
    <td class="TABCOLOR2"><pre>  // considera el uso de  MIOS_LCD_PrintMessageStart<br>        // ver tambi&eacute;n el ejemplo appr. <br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintPreconfString"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintPreconfString</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintPreconfString(unsigned char len, code char *str)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime una secuencia pre-configurada</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Indicador de Secuencia en&nbsp; &lt;str&gt;<br>        Longitud de frecuencia en &lt;len&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // definido alg&uacute;n sitio  *fuera* de la funci&oacute;n!<br>  const unsigned char text_welcome_0[] = { "Hello World!" };<br><br>  // dentro de la funci&oacute;n: imprimir secuencia<br>  MIOS_LCD_CursorSet(0x00 + 0);<br>  MIOS_LCD_PrintPreconfString(12, text_welcome_0);<br><br>  // por favor, vea tambi&eacute;n la funci&oacute;n MIOS_LCD_PrintCString!<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_PrintString"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_PrintString</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_PrintString(code char *str)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">imprime una secuencia</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Indicador de Secuencia en &lt;str&gt;<br>        La primera palabra de la secuencia debe contener la longitud y posici&oacute;n del LCD.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  //&iexcl; definido alg&uacute;n sitio  *fuera* de la funci&oacute;n!<br>  const unsigned char text_welcome_0[] = { 12, 0x00, "Hello World!" };<br><br> // dentro de la funci&oacute;n: imprimir secuencia<br>&nbsp;MIOS_LCD_PrintString(text_welcome_0);<br><br>  // por favor, vea tambi&eacute;n la funci&oacute;n  MIOS_LCD_PrintCString!<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_TypeAutoSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_TypeAutoSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_LCD_TypeAutoSet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">deriva el tipo de LCDdel cabecero de ID del PIC</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">tipo en WREG,<br>        par&aacute;metros adicionales de LCD en MIOS_PARAMETER1 y MIOS_PARAMETER2</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // establece el tipo de LCD al especificado en el PIC ID header<br>  MIOS_LCD_TypeAutoSet();<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_TypeGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_TypeGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_LCD_TypeGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el tipo de LCD. Se proporcionan los siguientes LCDs:<br>      0x00:	MIOS_LCD_TYPE_CLCD      (character dotmatrix LCD)<br>      0x01:	MIOS_LCD_TYPE_GLCD0	( LCD gr&aacute;fica, KS0108 o HD61202 compatible)<br>      0x06:	MIOS_LCD_TYPE_MLCD	(MIDI display, ver implementaci&oacute;n SysEx)<br>      0x07:	MIOS_LCD_TYPE_CUSTOM_LCD (controlador de LCD personalizado)<br></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">tipo de LCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // ramificaci&oacute;n dependiendo del tipo de LCD<br>  if( MIOS_LCD_TypeGet() == MIOS_LCD_TYPE_CLCD ) {<br>    // hacer algo especial si est&aacute; conectado CLCD <br>  }<br><br><br>  // !!! Mejor para ramificiones dependiendo del tipo de pantalla CLCD/GLCD !!!<br>  // !!! (tambi&eacute;n funciona con controlador LCD personalizado                       !!!<br>  if( !MIOS_BOX_CFG0.USE_GLCD ) {<br>    // hacer algo especial si est&aacute; conectado CLCD<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_TypeSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_TypeSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_TypeSet(unsigned char type, unsigned char par1, unsigned char par2)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Ajusta el tipo de LCD. Se proporcionan los siguientes LCDs:<br>      0x00:	MIOS_LCD_TYPE_CLCD      (character dotmatrix LCD)<br>      0x01:	MIOS_LCD_TYPE_GLCD0	(LCD gr&aacute;fica, KS0108 o HD61202 compatible)<br>      0x06:	MIOS_LCD_TYPE_MLCD	(MIDI display, ver implementaci&oacute;n SysEx)<br>      0x07:	MIOS_LCD_TYPE_CUSTOM_LCD (controlador de LCD propio)<br>
Recuerda que la funci&oacute;n&nbsp;MIOS_LCD_TypeAutoSet te permite
derivar el tipo de LCD desde el encabezado de ID PIC!! Usa esta
funci&oacute;n si quieres forzar un tipo especial de LCD sin cambiar el
encabezado ID de tu PIC o si quieres configurar opciones adicionales de
LCD que sean distintas a los valores por defecto.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">tipo de LCD en &lt;type&gt;<br>        LCD Opci&oacute;n #1 &lt;par1&gt;<br>        LCD Opci&oacute;n #2 &lt;par2&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  Las opciones LCD disponibles difieren de los tipos LCD usados, aqu&iacute; va una ista<br>  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br><br>  Tipo 0, CLCD:<br>     con &lt;par1&gt; y &lt;par2&gt; se especifican los pins de activaci&oacute;n (E)<br>    &nbsp;de las pantallas de caracteres. Por defecto, el input E de la primera <br>     CLCD debe ir conectada al pin  D.7, el input E de la segunda (si la hay) al pin C.4<br>     Son necesarias las siguientes l&iacute;neas de c&oacute;dico para conseguir esto:<br><br>  // usa un CLCD, E input del primerCLCD en D.7, E del segundo CLCD @C.4<br>  MIOS_LCD_TypeSet(MIOS_LCD_TYPE_CLCD, 0x37, 0x24);<br><br>     Nota: el primer d&iacute;gito del valor de par&aacute;metro establece el n&uacute;mero de puerto<br>             (A=0, B=1, C=2, D=3, E=4)<br>             el segundo d&iacute;gito establece el n&uacute;mero de pin (0-7)<br>             bit #7 establece la interfaz (0=8bit, 0=7bit)<br><br>     Ejemplo para  CLCD on interfaz de 4bit :<br>  ;; usa una CLCD, E input de la primera CLCD en D.7, E de la segunda CLCD @C.4<br>  ;; usando la interfaz de 4-bit :<br>  ;; -&gt; conecta MBHP_CORE:J15:D7-D4 del m&oacute;dulo core a D7-D4 de la LCD<br>        ;; -&gt; left MBHP_CORE:J15:D3-D0 of the core module open!<br>  ;; -&gt; tie D3-D0 del LCD abajo<br>  MIOS_LCD_TypeSet(MIOS_LCD_TYPE_CLCD, 0x80 | 0x37, 0x80 | 0x24);<br><br>     Tip: cambiando estos par&aacute;metros din&aacute;micamente tambi&eacute;n podr&aacute;s <br>           manejar m&aacute;s de 2 lCDs con un solo m&oacute;dulo core. El n&uacute;mero<br>           de CLCDs que pueden manejarse s&oacute;lo est&aacute; limitado por el  <br>            n&uacute;mero de pines libres!!<br>            No olvides cambiar los pines apropiados al output antes de usarlos,<br>            y llamar a MIOS_LCD_Init por cada par de pantalla en tu  USER_Init<br><br>  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br><br> Tipo 1, KS0108 o basadas en HD61202 <br>     Con &lt;par1&gt; se tiene que especificar si las l&iacute;neas de selecci&oacute;n del chip est&aacute;n invertidas <br><br>  // usa una LCD gr&aacute;fica compatible  KS0108 o HD61202 con<br>  // selecciones de chip no invertidas<br>  MIOS_LCD_TypeSet(MIOS_LCD_TYPE_GLCD0, 0x00, 0x00); // (par2 unusued)<br><br>   O:<br>  // usa una LCD gr&aacute;fica compatible  KS0108 o HD61202 con<br>  // selecciones de chip invertidas<br>  MIOS_LCD_TypeSet(MIOS_LCD_TYPE_GLCD0, 0x01, 0x00); // (par2 unusued)<br><br>  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br><br> Tipo 2, basadas en T6963C <br>     Ya no son soportadas, en su lugar usa el controlador personalizado <br>      que est&aacute; disponible en la secci&oacute;n de descargas MIOS <br><br>  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br><br> Tipo 6, MIDI display<br>     ver implementaci&oacute;n MIOS SysEx disponible en la secci&oacute;n de descargas de MIOS<br><br>     MIOS_PARAMETER1 define la ID de dispositivo del target core:<br><br>  ;; env&iacute;a mensajes MIDI al n&uacute;cleo con la ID de dispositivo 0x42<br>  MIOS_LCD_TypeSet(MIOS_LCD_TYPE_MLCD, 0x42, 0x00); // (par2 unusued)<br><br>  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br><br> Tipo 7, controlador LCD personalizado<br>&nbsp;    Las opciones son redirigidas al controlador LCD personal,<br>     &nbsp;siguiendo atajos que han sido preparados para una &oacute;ptima <br>       integraci&oacute;n con MIOS:<br>          USER_LCD_Init<br>          USER_LCD_Clear<br>          USER_LCD_CursorSet<br>          USER_LCD_PrintChar<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_TypeSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_YAddressGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_YAddressGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_LCD_YAddressGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve los offsets Y&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Linea Y0 direcci&oacute;n en MIOS_PARAMETER1 (variable global definida en cmios.h),<br>        Linea Y1 direcci&oacute;n en MIOS_PARAMETER2 (variable global definida en cmios.h),<br>        Linea Y2 direcci&oacute;n en MIOS_PARAMETER3 (variable global definida en cmios.h),<br>        Linea Y3 direcci&oacute;n devuelta directamente</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="cmios_fun_es.html#back_MIOS_LCD_TypeSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_LCD_YAddressSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_LCD_YAddressSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_LCD_YAddressSet(unsigned char line0, unsigned char line1, unsigned char line2, unsigned char line3);</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">mapea la posici&oacute;n Y del cursor hacia la direcci&oacute;n apropiada de las pantallas de caracteres y gr&aacute;ficas.<br>   Las posiciones configuradas por defecto para pantallas de 2x16, 2x20, 4x20 y 2x40&nbsp;:<br>      Line0 -&gt; MIOS cursor offset: 0x00 -&gt; direcci&oacute;n cursor 0x00<br>      Line1 -&gt; MIOS cursor offset: 0x40 -&gt;&nbsp;direcci&oacute;n cursor 0x40<br>      Line2 -&gt; MIOS cursor offset: 0x80 -&gt;&nbsp;direcci&oacute;n cursor 0x14 (4x20 only)<br>      Line3 -&gt; MIOS cursor offset: 0xc0 -&gt;&nbsp;direcci&oacute;n cursor 0x54 (4x20 only)<br>Para pantallas de 4x16&nbsp;, hay que cambiar la configuraci&oacute;n.:<br>      Line0 -&gt; MIOS cursor offset: 0x00 -&gt;&nbsp;direcci&oacute;n cursor 0x00<br>      Line1 -&gt; MIOS cursor offset: 0x40 -&gt; direcci&oacute;n cursor 0x40<br>      Line2 -&gt; MIOS cursor offset: 0x80 -&gt;&nbsp;direcci&oacute;n cursor 0x10 (solo 4x16)<br>      Line3 -&gt; MIOS cursor offset: 0xc0 -&gt;&nbsp;direcci&oacute;n cursor 0x50 (solo 4x16)<br>Para pantallas de 2 caracteres conectadas a un core usa:<br>Line0 -&gt; MIOS cursor offset: 0x00 -&gt;&nbsp;direcci&oacute;n cursor 0x00<br>      Line1 -&gt; MIOS cursor offset: 0x40 -&gt;&nbsp;direcci&oacute;n cursor 0x40<br>      Line2 -&gt; MIOS cursor offset: 0x80 -&gt;&nbsp;direcci&oacute;n cursor 0x80<br>      Line3 -&gt; MIOS cursor offset: 0xc0 -&gt;&nbsp;direcci&oacute;n cursor 0xc0<br>   (la primera LCD est&aacute; direccionada por 0x00-0x7f, la segunda LCD est&aacute; direccionada por 0x80-0xff)<br>   <br>
Esta funci&oacute;n permite centrar la pantalla si quieres usar
aplicaciones escritas para pantallas de 2x16 &nbsp;en una pantalla
m&aacute;s grande. Ejemplo para una pantalla de&nbsp;2x20:<br>      Line0 -&gt; MIOS cursor offset: 0x00 -&gt;&nbsp;direcci&oacute;n cursor 0x04<br>      Line1 -&gt; MIOS cursor offset: 0x40 -&gt;&nbsp;direcci&oacute;n cursor 0x44<br>      Line2 -&gt; no importa<br>      Line3 -&gt; no importa<br></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Linea Y0 direcci&oacute;n en &lt;line0&gt;<br>        Linea Y1 direcci&oacute;n en &lt;line1&gt;<br>        Linea Y2 direcci&oacute;n en&nbsp; &lt;line2&gt;<br>        Linea Y3 direcci&oacute;n en &lt;line3&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // configura offsets para una LCD de 4x16 LCD:<br>  MIOS_LCD_YAddressSet(0x00, 0x40, 0x10, 0x50);<br><br>  // configura MIOS para LCDs de 2 caracteres:<br>        // (ver tambi&eacute;n http://www.ucapps.de/mbhp_lcd.html )<br>  MIOS_LCD_YAddressSet(0x00, 0x40, 0x80, 0xc0);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_LCD_YAddressSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_CLCD_SpecialCharInit"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_CLCD_SpecialCharInit</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_CLCD_SpecialCharInit(unsigned char num, code char *c_table)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">inicializa uno de 8 caracteres especiales provistos&nbsp;por LCD &nbsp;HD44780 de caracteres compatible&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de caracter especial&nbsp; (0-7) en &lt;num&gt;<br>
indicador al&nbsp;char pattern especial en&lt;c_table&gt; (debe
consistir en 8 entradas para cada l&iacute;nea de caracteres)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>    ver http://www.ucapps.de/mios_c_lcd_schars.html<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_CLCD_SpecialCharInit">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_CLCD_SpecialCharsInit"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_CLCD_SpecialCharsInit</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_CLCD_SpecialCharsInit(const char *c_table)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">inicializa los caracteres especiales provistos por LCD de caracteres compatible &nbsp;HD44780 <br>Ver tambi&eacute;n: MIOS_CLCD_SpecialCharInit</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador a char patterns especiales en &lt;c_table&gt; (debe consistir en 8*8 entradas para cada caracter y l&iacute;nea)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>    ver http://www.ucapps.de/mios_c_lcd_schars.html<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_CLCD_SpecialCharsInit">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_GLCD_FontInit"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_GLCD_FontInit</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_GLCD_FontInit(code char *font)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">inicializa una fuente ( icono animado) o mapa de bits. esta funci&oacute;n s&oacute;lo funciona en LCDs gr&aacute;ficas.!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador al cabecero de la fuente en &lt;font&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // establecer fuente por defecto:<br>  MIOS_GLCD_FontInit(MIOS_GLCD_FONT)<br>  // poner el  cursor a 0<br>  MIOS_LCD_CursorSet(0x00);<br>  // imprimir caracter 'A'<br>  MIOS_LCD_PrintChar('A');<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_GLCD_FontInit">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_GLCD_GCursorGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_GLCD_GCursorGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_GLCD_GCursorGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve la posici&oacute;n del cursor gr&aacute;fico&nbsp;<br>Esta funci&oacute;n solo funciona con LCDs gr&aacute;ficas</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">posici&oacute;n X directamente devuelta<br>       posici&oacute;n Yen MIOS_PARAMETER1 (variable global definida en cmios.h)</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_GLCD_GCursorGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_GLCD_GCursorSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_GLCD_GCursorSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_GLCD_GCursorSet(unsigned char x, unsigned char y)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece el cursor gr&aacute;fico en una pantalla LCD<br>Esta funci&oacute;n solo funciona con LCDs gr&aacute;ficas</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">posici&oacute;n X en &lt;x&gt; (0-239)<br>posici&oacute;n Y en &lt;y&gt; (0-7)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // ajustar el cursor gr&aacute;fico en160/7:<br>  MIOS_GLCD_GCursorSet(160, 7);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_GLCD_GCursorSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_EEPROM_Read"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_EEPROM_Read</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_EEPROM_Read(unsigned char addr)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">lee un byte de la EEPROM.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">direcci&oacute;n en: &lt;addr&gt; (0x00-0xff) y EEADRH (0-3, PIC18F4620 unicamente)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">devuelve el contenido EEPROM</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // carga un byte de la direcci&oacute;n 0x80<br>  value = MIOS_EEPROM_Read(0x80);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_EEPROM_Read">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_EEPROM_ReadPage"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_EEPROM_ReadPage</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_EEPROM_ReadPage(unsigned char addr, unsigned char *buffer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">lee una p&aacute;gina de 64 bytesde la EEPROM<br>La
EEPROM interna del PIC18F452 no provee una lectura de p&aacute;gina por
s&iacute; misma, en su lugar esta funci&oacute;n llama 64 veces a
MIOS_EEPROM_Read.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">pointer to read buffer (64 bytes) in &lt;buffer&gt;<br>        address in &lt;addr&gt; (0x00-0xc0) and EEADRH (0-3, PIC18F4620 only)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">contenido de EEPROM en lectura&lt;buffer&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char buffer[64];<br><br>  // leer una p&aacute;gina de 64 bytes de la EEPROM en la direcci&oacute;n  0x40<br>  MIOS_EEPROM_ReadPage(0x40, buffer);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_EEPROM_ReadPage">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_EEPROM_Write"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_EEPROM_Write</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_EEPROM_Write(unsigned char addr, unsigned char value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Escribe un byte en la EEPROM. <br>El acceso de escritura se omitir&aacute; so el contenido es igual al del byte que debe ser escrito.<br>   Returned Error Status:<br>      0x00: no hay error<br>      0x01: byte desparejado (fall&oacute; la escritura)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">byte en &lt;value&gt;, direcci&oacute;n en &lt;addr&gt; (0x00-0xff), high byte en EEADRH (0-3, PIC18F4620 &uacute;nicamente)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Estado de error&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char error = 0;<br><br>  // writeescribe  0x47 0x11 en la EEPROM en direcci&oacute;n 0x80/0x81<br>  error |= MIOS_EEPROM_Write(0x80, 0x47);<br>  error |= MIOS_EEPROM_Write(0x81, 0x11);<br><br>  if( error ) {<br>    // aqu&iacute; puedes hacer alg&uacute;n manejo de errores  }<br><br><br><br>  // nota: es muy improbable que ocurra un error al escribir <br>  // en la EEPROM interna, a&uacute;n as&iacute;, puedes usar el atajo siguiente:<br><br>  // escribe 0x47 0x11 en la  EEPROM en direcci&oacute;n0x80/0x81<br>  MIOS_EEPROM_Write(0x80, 0x47);<br>  MIOS_EEPROM_Write(0x81, 0x11);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_EEPROM_Write">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_EEPROM_WritePage"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_EEPROM_WritePage</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_EEPROM_WritePage(unsigned char addr, unsigned char *buffer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">escribe una p&aacute;gina de 64 bytes en la EEPROM.<br>
La EEPROM interna del&nbsp;PIC18F452 no provee una p&aacute;gina
escrita en s&iacute; misma, sino que esta funci&oacute;n llama a
MIOS_EEPROM_Write 64 veces.<br>   Devuelto Estado de Error:<br>      0x00: no hay error<br>      0x01: byte desparejado (una o m&aacute;s escrituras han fallado)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador para escribir el buffer (64 bytes) en &lt;buffer&gt;<br>        direcci&oacute;n en &lt;addr&gt; (0x00-0xc0) y EEADRH (0-3, PIC18F4620 &uacute;nicamente)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Estado de error</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char buffer[64];<br>  unsigned char i;<br><br>  // llena el buffer con algunos bytes<br>  for(i=0; i&lt;64; ++i)<br>    buffer[i] = i;<br><br>  // escribe una p&aacute;gina de 64 bytes en la memoria EEPROM en direcci&oacute;n 0x80<br>  MIOS_EEPROM_WritePage(0x80, buffer);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_EEPROM_WritePage">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_FLASH_Read"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_FLASH_Read</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_FLASH_Read(code char *addr, char *buffer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">copia 64 bytes de la memoria FLASH al buffer</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador para lectura de buffer (64 bytes) en &lt;buffer&gt;<br>        direcci&oacute;n flash en &lt;addr&gt; (0x0000-0x7fc0, debe estar alineado con la p&aacute;gina de 64 byte)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">volcado de memoria en&nbsp; &lt;buffer&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char buffer[64];<br><br>  // leer una p&aacute;gina de 64 bytes desde la memoria flash en direcci&oacute;n 0x7000<br>  MIOS_FLASH_Read(0x7000, buffer);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_FLASH_Read">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_FLASH_Write"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_FLASH_Write</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_FLASH_Write(code char *addr, char *buffer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">escribe 64 bytes en la memoria FLASH&nbsp;<br>
El acceso a la escritura ser&aacute; omitido si el contenido es igual a
los bytes del buffer. Se previene &nbsp;la escritura en espacio del
programa MIOS.<br>PIC18F452:  0x0000-0x2fff no escribible   PIC18F4620:	0x0000-0x2fff no escribible <br>Devuelto Estado de Error:<br>      0x00: no hay error<br>      0x01: byte desparejados (escritura fallida)<br>      0x02:&nbsp;error de acceso (memoria protegida)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador para escritura de buffer(64 bytes) en &lt;buffer&gt;<br>        direcci&oacute;n flash en &lt;addr&gt; (debe estar alineado con p&aacute;gina de 64 byte)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Devuelve estado de error</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char buffer[64];<br>  unsigned char i;<br><br>  // llenar buffer con algunos bytes<br>  for(i=0; i&lt;64; ++i)<br>    buffer[i] = i;<br><br>  // escribir una p&aacute;gina de 64 bytes en la memoria flash en direcci&oacute;n 0x7000<br>  if( MIOS_FLASH_Write(0x7000, buffer) ) {<br>    // error handler<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_FLASH_Write">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_BANKSTICK_CtrlGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_BANKSTICK_CtrlGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_BANKSTICK_CtrlGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Devuelve el estado de control del BankStick</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">bit [2..0]: A2-A0<br>        bit [7]: Verificaci&oacute;n deshabilitada</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_BANKSTICK_CtrlGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_BANKSTICK_CtrlSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_BANKSTICK_CtrlSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_BANKSTICK_CtrlSet(unsigned char ctrl)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">establece el registro de control del&nbsp;BankStick&nbsp;<br>      bit 2-0: selecciona el BankStick (1de 8, direcci&oacute;n definida con pin A0-A2 de la EEPROM)<br>      bit 7:   si est&aacute; seleccionado, la verificaci&oacute;n durante la escritura ser&aacute; deshabilitada</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">contenido de registro de control en &lt;ctrl&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char error = 0;<br><br>  // escribe 0x47 0x11 en direcci&oacute;n 0x3000-0x3001 del BankStick n&uacute;mero 7<br>  MIOS_BANKSTICK_CtrlSet(0x07); // select 8th BankStick<br>  error |= MIOS_BANKSTICK_Write(0x3000, 0x47);<br>  error |= MIOS_BANKSTICK_Write(0x3001, 0x11);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_BANKSTICK_CtrlSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_BANKSTICK_Read"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_BANKSTICK_Read</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_BANKSTICK_Read(unsigned int addr)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">lee un byte del BankStick.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">direcci&oacute;n en &lt;addr&gt; (0x0000-0xffff)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">contenido de BankStick<br>        MIOS_BOX_STAT.BS_AVAILABLE cleared if read failed</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // carga un byte desde la direcci&oacute;n address 0x7fff (la &uacute;ltima en un BankStick de 32 k)<br>  value = MIOS_BANKSTICK_Read(0x7fff);<br><br>  if( !MIOS_BOX_STAT.BS_AVAILABLE ) {<br>    // Aqu&iacute; puedes hacer alguna correcci&oacute;n de errores<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_BANKSTICK_Read">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_BANKSTICK_ReadPage"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_BANKSTICK_ReadPage</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_BANKSTICK_ReadPage(unsigned int addr, unsigned char *buffer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">lee una p&aacute;gina de 64 bytes del BankStick.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador para buffer de lectura(64 bytes) en &lt;buffer&gt;&lt;BR&gt;<br>        direcci&oacute;n en &lt;addr&gt; (0x0000-0xffc0)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">Contenido de BankStick en buffer de lectura<br>        MIOS_BOX_STAT.BS_AVAILABLE tambi&eacute;n es 0 si la lectura fall&oacute;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char buffer[64];<br><br>  // leer una p&aacute;gina de 64 bytes dela memoria del BankStick en direcci&oacute;n 0x1240<br>  MIOS_BANKSTICK_ReadPage(0x1240, buffer);<br><br>  if( !MIOS_BOX_STAT.BS_AVAILABLE ) {<br>    // Aqui puedes hacer alguna correcci&oacute;n de errores<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_BANKSTICK_ReadPage">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_BANKSTICK_Write"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_BANKSTICK_Write</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_BANKSTICK_Write(unsigned int addr, unsigned char value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">escribe un byte en el BankStick. <br>
Si el modo de verificaci&oacute;n ha sido habilitado con
MIOS_BANKSTICK_CtrlSet, el acceso a la escritura ser&aacute; omitido si
el contenido es igual al byte que debe ser escrito.<br>   Devuelto Estado de Error:<br>      0x00: no hay error<br>      0x01: byte desparejados (la escritura fall&oacute;) -- Ajusta solo con verificaci&oacute;n habilitada<br>      0x02: BankStick no disponible</td></tr><tr><td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">byte en &lt;value&gt;, direcci&oacute;n en &lt;addr&gt; (0x0000-0xffff)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">estado de error<br>        MIOS_BOX_STAT.BS_AVAILABLE limpiado si la escritura fall&oacute;.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char error = 0;<br><br>  //escribe 0x47 0x11 en direcci&oacute;n  0x3000-0x3001 del BankStick<br>  error |= MIOS_BANKSTICK_Write(0x3000, 0x47);<br>  error |= MIOS_BANKSTICK_Write(0x3001, 0x11);<br><br>  if( error ) {<br>    // aqu&iacute; puedes hacer alguna correcci&oacute;n de errores<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_BANKSTICK_Write">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_BANKSTICK_WritePage"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_BANKSTICK_WritePage</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_BANKSTICK_WritePage(unsigned int addr, unsigned char *buffer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">escribe una p&aacute;&acute;gina de 64 bytes en el BankStick. Si el modo de verificaci&oacute;n ha sido activado con with
MIOS_BANKSTICK_CtrlSet, el acceso a escritura se omitir&aacute; si el contenido es igual al del byte que debe escribirse<br>Estado de error devuelto:<br>0x00:
no hay error 0x01: byte desparejados (escritura fallida) -- seleccionar
solo si la verificaci&oacute;n est&aacute; activada &nbsp;0x02:
BankStick no disponible</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">indicador para buffer de escritura (64 bytes) en &lt;buffer&gt;<br>        direcci&oacute;n en &lt;addr&gt; (0x0000-0xffc0)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">estado de error en WREG<br>        MIOS_BOX_STAT.BS_AVAILABLE es limpiado si la escritura fall&oacute;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  unsigned char buffer[64];<br>  unsigned char i;<br><br>  // llena el buffer con algunos bytes<br>  for(i=0; i&lt;64; ++i)<br>    buffer[i] = i;<br><br>  // escribe una p&aacute;gina de 64 bytes enla memoria del BankStick en direcci&oacute;n 0x3000<br>  if( MIOS_BANKSTICK_WritePage(0x3000, buffer) ) {<br>    // aqu&iacute; puedes hacer alguna correcci&oacute;n de errores<br>  }<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_BANKSTICK_WritePage">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_AckSend"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_AckSend</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_IIC_AckSend</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un ACK (Acuse de Recibo)al/los esclavo(s)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>        ver MIOS_IIC_ByteSend y MIOS_IIC_ByteReceive<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_AckSend">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_ByteReceive"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_ByteReceive</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_IIC_ByteReceive(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">recibe un byte de un esclavo IIC.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">byte recibido en WREG</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // recibir 3 bytes del esclavo IIC conID 0x12<br><br>  MIOS_IIC_Start();    // start IIC<br>  MIOS_IIC_ByteSend(0x12 | 1);  <br>   // env&iacute;a direcci&oacute;nd e dispositivo -<br>   //   establecer bit #0 para notificar una lectura!!!<br>  // no continuar si el dispositivo IIC no est&aacute; disponible<br>  if( MIOS_BOX_STAT.BS_AVAILABLE ) {<br>    b0 = MIOS_IIC_ByteReceive;  // leer primer byte<br>    MIOS_IIC_AckSend();    // manda ACK<br>    b1 = MIOS_IIC_ByteReceive;  // leer segundo byte<br>    MIOS_IIC_AckSend();    // manda ACK<br>    b2 = MIOS_IIC_ByteReceive;  // leer tercer byte<br>  }<br>  MIOS_IIC_NakSend();    // manda NAK!!!<br>  MIOS_IIC_Stop();    // parar IIC<br><br>  Para m&aacute;s detalles sobre el protocolo IIC  (oficialmente llamado I2C), ver<br>     http://www.semiconductors.philips.com/buses/i2c/<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_ByteReceive">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_ByteSend"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_ByteSend</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_IIC_ByteSend(unsigned char b)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un byte a trav&eacute;s del bus IIC y comprueba el acuse de recibo/comprobaci&oacute;n.<br>   Si el esclavo no envi&oacute; un acuse de recibo, el flag (MIOS_BOX_STAT_)BS_AVAILABLE en MIOS_BOX_STAT ser&aacute; limpiado.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">byte que debe ser enviado en&lt;b&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">devuelve 0x00 si &nbsp;ha recibido NAK (NO acuse de recibo), si no != 0x00<br>        debido a razones de compatibilidad,&nbsp;mios_box_stat.BS_AVAILABLE es ajustado en cuanto se recibe ACK&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // env&iacute;a 0x34, 0x56, 0x78 al esclavo IIC con ID 0x12<br><br>  MIOS_IIC_Start();    // start IIC<br>  MIOS_IIC_ByteSend(0x12);  // env&iacute;a la direcci&oacute;n del dispositivo<br>                                // bit #0 limpiado para notificar una escritura!!!<br>  MIOS_IIC_ByteSend(0x34);  // enviar primer byte de datos<br>  MIOS_IIC_ByteSend(0x56);  // enviar segundo byte de datos<br>  MIOS_IIC_ByteSend(0x78);  // enviar tercer byte de datos<br>  MIOS_IIC_Stop();    // parar IIC<br><br>  Para m&aacute;s detalles sobre el protocolo IIC  (oficialmente llamado I2C), ver<br> http://www.semiconductors.philips.com/buses/i2c/<br><br> Puedes encontrar un ejemplo realzado con reintento de NAK en la p&aacute;gina MBHP_IIC_MIDI<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_ByteSend">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_CtrlGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_CtrlGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_IIC_CtrlGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">devuelve el estado de control IIC</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">bit 0 si devuelve valor: estrechamiento de reloj activado</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_CtrlGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_CtrlSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_CtrlSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_IIC_CtrlSet(unsigned char ctrl)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">habilita
el "estrechamiento de reloj" como se especifica en las caracteristicas
IIC&nbsp;
http://www.semiconductors.philips.com/buses/i2c/ &nbsp;que es necesario
para algunos esclavos que no pueden servir el bus inmediatamente en una
petici&oacute;n.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">&lt;ctrl&gt; = 0x00: estrechamiento de reloj desactivado<br>&lt;ctrl&gt; = 0x01: estrechamiento de reloj activado</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2">Si est&aacute; activado, tienes que a&ntilde;adir una resistencia pull-up de 1k a la l&iacute;nea SCL (Pin #22 del PIC)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // habilitar estrechamiento de reloj<br>  MIOS_IIC_CtrlSet(0x01);<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_CtrlSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_NakSend"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_NakSend</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_IIC_NakSend(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un NAK (no acuse de recibo) al esclavo (s)</td></tr><tr><td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>        ver MIOS_IIC_ByteSend y MIOS_IIC_ByteReceive<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_NakSend">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_Start"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_Start</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_IIC_Start(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Env&iacute;a la condici&oacute;n de arranque de IIC (SCL=1, SDA 1-&gt;0)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>        ver  MIOS_IIC_ByteSend y MIOS_IIC_ByteReceive<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_Start">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_IIC_Stop"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_IIC_Stop</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_IIC_Stop(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a la condici&oacute;n de parada de IIC(SCL=0-&gt;1, SDA 0-&gt;1)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>        ver MIOS_IIC_ByteSend y MIOS_IIC_ByteReceive<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_IIC_Stop">Volverp</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_TIMER_Init"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_TIMER_Init</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_TIMER_Init(unsigned char mode, unsigned int period)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">inicializa
el timer que llama peri&oacute;dicamente a USER_Timer y lo inicia. La
resoluci&oacute;n del timer es de100nS con Prescaler 1:1, 200nS con
1:2,
400nS con 1:4, 800nS con 1:8. El per&iacute;odo (n&uacute;mero de
relojes) se especifica como un valor de 16 bits</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor prescaler&nbsp;en &lt;mode&gt;:<br>           0x00: 1:1<br>           0x01: 1:2<br>           0x02: 1:4<br>           0x03: 1:8<br>n&uacute;mero de tics (0..65535) en &lt;period&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // queremos configurar el prescaler con una frecuencia de  500 Hz = 2 mS<br>  // debe usarse  prescaler 1:1 <br>  // calcula el n&uacute;mero de relojes requeridos para este per&iacute;odo:<br>  // relojes = periodo / 100 nS = 2 mS / 100 nS = 20000<br>  // por consiguiente:<br>  MIOS_TIMER_Init(0x00, 20000);<br><br>  // Ahora la funci&oacute;n Timer() se llama cada 2 mS!<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_TIMER_Init">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_TIMER_ReInit"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_TIMER_ReInit</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_TIMER_ReInit(unsigned char mode, unsigned int period)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">igual que MIOS_TIMER_Init, pero el&nbsp;timer no se resetear&aacute; para permitir un reinicio suave</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor prescaler en &lt;mode&gt;:<br>           0x00: 1:1<br>           0x01: 1:2<br>           0x02: 1:4<br>           0x03: 1:8<br>        n&uacute;mero de&nbsp;tics (0..65535) en &lt;period&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_TIMER_ReInit">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_TIMER_Start"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_TIMER_Start</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_TIMER_Start(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">(re) inicia el timer si ha sido parado anteriormente</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_TIMER_Start">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_TIMER_Stop"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_TIMER_Stop</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_TIMER_Stop(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">para el timer</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_TIMER_Stop">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_16bitAddSaturate"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_16bitAddSaturate</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_HLP_16bitAddSaturate(unsigned char add_value, unsigned int *ptr, unsigned int max_value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">a&ntilde;ade un valor firmado de 8-bit a un valor de 16 bit y satura<br>
Esto significa: si el valor resultante es mayor que el valor
m&aacute;ximo dado, el resultado ser&aacute; saturado hasta el valor
m&aacute;ximo. Si el valor resultante es menor que 0, el resultado se
saturar&aacute; a 0.<br> Importante: el valor de 16-bit debe ser alineado con una direcci&oacute;n uniforme de palabra (0x10, 0x12, 0x14,
...). La primera direcci&oacute;n contiene el low-byte y la segunda direcci&oacute;n contiene el high-byte</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor de 8-bit firmado en&nbsp;&lt;add_value&gt;<br>indicador de variable que debe ser modificado en &lt;ptr&gt;<br>valor m&aacute;ximo en &lt;max_value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">escribe un valor absoluto nuevo en *ptr<br>        devuelve 1 si el valor ha sido cambiado, 0 si es igual al anterior valor</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // resta -5 del valor de 16-bit (unsigned int)<br>  MIOS_HLP_16bitAddSaturate(-5, &amp;value, 0x0fff);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_16bitAddSaturate">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_AddressFromTable"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_AddressFromTable</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta
funci&oacute;n de ayuda lee un indicador de una tabla y lo mueve a
TBLPTR. De esta manera, las listas enlazadas se pueden realizar.</td></tr><tr><td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">TBLPTRU no le&iacute;do ni cambiado . La tabla debe ser localizada en un segmento de 64k&nbsp;!</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_AddressFromTable">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_Dec2BCD"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_Dec2BCD</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_HLP_Dec2BCD(unsigned int value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">convierte un valor decimal de16-bit en BCD</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">valor16bit en &lt;value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">d&iacute;gitos de m&aacute;s a la derecha (n1*10^1 and n0*10^0) en MIOS_PARAMETER1<br>        d&iacute;gitos centrales (n3*10^3 and n2*10^2) en MIOS_PARAMETER2<br>        d&iacute;gito de la izquierda (n5*10^4) en MIOS_PARAMETER3</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // adquirir el c&oacute;digo BCD de 12345<br>  MIOS_HLP_Dec2BCD(12345);<br>  // ahora:<br>  //    MIOS_PARAMETER3 contiene el valor hex 0x01<br>  //    MIOS_PARAMETER2 contiene el valor hex 0x23<br>  //    MIOS_PARAMETER1 contiene el valor hex 0x45<br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_Dec2BCD">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_GetBitANDMask"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_GetBitANDMask</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_HLP_GetBitANDMask(unsigned char value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta funci&oacute;n de ayuda es &uacute;til para manipulaciones de bits</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">ver mapa debajo</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">0x00 -&gt; 0b11111110<br>       0x01 -&gt; 0b11111101<br>       0x02 -&gt; 0b11111011<br>       0x03 -&gt; 0b11110111<br>       0x04 -&gt; 0b11101111<br>       0x05 -&gt; 0b11011111<br>       0x06 -&gt; 0b10111111<br>       0x07 -&gt; 0b01111111</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_GetBitANDMask">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_GetBitORMask"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_GetBitORMask</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_HLP_GetBitORMask(unsigned char value);</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta funci&oacute;n de ayuda es &uacute;til para manipulaciones de bits</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">ver mapa debajo</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">0x00 -&gt; 0b00000001<br>       0x01 -&gt; 0b00000010<br>       0x02 -&gt; 0b00000100<br>       0x03 -&gt; 0b00001000<br>       0x04 -&gt; 0b00010000<br>       0x05 -&gt; 0b00100000<br>       0x06 -&gt; 0b01000000<br>       0x07 -&gt; 0b10000000</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_GetBitORMask">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_GetIndex_2bytes"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_GetIndex_2bytes</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta
funci&oacute;n de ayuda puede utilizarse para jumptables(tablas de
salto) que contengan instrucciones de&nbsp;2 bytes
(-&gt; rgoto). Recuerda que las macro JUMPTABLE_2BYTESpermiten usar
esta funci&oacute;n de forma segura sin el peligro de que el
c&oacute;digo de detr&aacute;s de la tabla sea ejecutado si el
n&uacute;mero &iacute;ndice en WREG es mayor que el n&uacute;mero de
entradas</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_GetIndex_2bytes">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_GetIndex_4bytes"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_GetIndex_4bytes</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta
funci&oacute;n de ayuda puede utilizarse para&nbsp;jumptables que
contengan instrucciones de 4 bytes
(-&gt;goto). Recuerda que las macro JUMPTABLE_4BYTES permiten el uso de
esta funci&oacute;n de manera segura, sin peligro de que el
c&oacute;digo tras la tabla sea ejecutado si el n&uacute;mero
&iacute;ndice en WREG es mayor al n&uacute;mero de entradas</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_GetIndex_4bytes">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_HLP_IndirectJump"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_HLP_IndirectJump</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">esta funci&oacute;n de ayuda lee un indicador de una tabla y salta hasta este indicador</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2">TBLPTRU
no le&iacute;do ni cambiado. La tabla y la direcci&oacute;n objetivo
deben estar localizadas en un segmento de 64k&nbsp;!</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_HLP_IndirectJump">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_Delay"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_Delay</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_Delay(unsigned char delay)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">espera un tiempo exacto <br>recuerda que esta funci&oacute;n no &nbsp;funcionar&aacute; en una rutina de interrupci&oacute;n de servicio!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">tiempo en ms (0-255)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_EJEMPLO</b></td>
    <td class="TABCOLOR2"><pre>  // esperar exactamente 250 ms<br>  MIOS_Delay(250);<br><br></pre></td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_Delay">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_GPCounterGet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_GPCounterGet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">unsigned char MIOS_GPCounterGet(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">toma el valor del contador de prop&oacute;sito general, que es incrementado cada milisegundo</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">valor de contador de prop&oacute;sito general</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_GPCounterGet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_Reset"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_Reset</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_Reset(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">espera hasta que el buffer Tx MIDI est&aacute; vac&iacute;o, entonces resetea el SO</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_Reset">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SystemResume"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SystemResume</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_SystemResume(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">resume todas las tareas de sistema</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_SystemResume">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_SystemSuspend"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_SystemSuspend</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_SystemSuspend(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">suspende todas las tareas de sistema y usuario excepto las del handler IO MIDI handler</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_SystemSuspend">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_UserResume"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_UserResume</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_UserResume(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">resume todas las tareas de usuario</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_UserResume">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="MIOS_UserSuspend"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>MIOS_UserSuspend</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MIOS_UserSuspend(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">suspende todas las tareas de usuario</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_MIOS_UserSuspend">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_AIN_NotifyChange"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_AIN_NotifyChange</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void AIN_NotifyChange(unsigned char pin, unsigned int pin_value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Esta funci&oacute;n es llamada por MIOS cuando se ha movido un pote</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de Pote en &lt;pin&gt;<br>      valor de10 bit en &lt;pin_value&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_AIN_NotifyChange">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_DIN_NotifyToggle"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_DIN_NotifyToggle</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Esta funci&oacute;n es llamada por MIOS cuando ha sido accionado un bot&oacute;n.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">N&uacute;mero de Bot&oacute;n en &lt;pin&gt;<br>      Valor de Bot&oacute;n &lt;pin_value&gt;:<br>        - 1 si el bot&oacute;n ha sido desactivado(=5V)<br>        - 0 si el bot&oacute;n ha sido presionado (=0V)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_DIN_NotifyToggle">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_DISPLAY_Init"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_DISPLAY_Init</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void DISPLAY_Init(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Esta
funci&oacute;n es llamada por MIOS cuando el contenido de la pantalla
debe ser inicializado. &nbsp;Este es el caso durante el arranque
despu&eacute;s de que se haya mostrado en la pantalla un mensaje
temporal</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_DISPLAY_Init">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_DISPLAY_Tick"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_DISPLAY_Tick</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void DISPLAY_Tick(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">Esta
funci&oacute;n es llamada por MIOS en el mainloop(loop principal)
cuando no se muestra en la pantalla ning&uacute;n mensaje temporal.</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_DISPLAY_Tick">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_ENC_NotifyChange"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_ENC_NotifyChange</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void ENC_NotifyChange(unsigned char encoder, char incrementer)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando se ha movido un encoder</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">n&uacute;mero de en &lt;encoder&gt;<br>      incrementer firmado en &lt;incrementer&gt;<br>       - es positivo cuando el encoder se ha girado en el sentido de las agujas del reloj<br>       - es negativocuando el encoder se ha girado en sentido contrario a las agujas del reloj</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_ENC_NotifyChange">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_Init"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_Init</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void Init(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n despu&eacute;s del encendido para inicializar la aplicaci&oacute;n</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_Init">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_Clear"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_Clear</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD (app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando la LCD personal debe ser limpiada</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_Clear">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_Cmd"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_Cmd</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD &nbsp;(app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un comando a la pantalla LCD<br>   En CLCDs: usa esta funci&oacute;n para decodificar los comandos HD44780 si es necesario<br>   On GLCDs: ignora esta funci&oacute;n!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_Cmd">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_CursorSet"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_CursorSet</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD &nbsp;(app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama esta funci&oacute;n cuando debe camabiarse el cursor</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_CursorSet">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_Data"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_Data</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD &nbsp;(app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">env&iacute;a un valor de datos a la pantalla LCD<br>   En CLCDs: enrama directamente a USER_LCD_PrintChar<br>   En GLCDs: ignora esta funcion!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_Data">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_Init"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_Init</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD &nbsp;(app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando debe ser inicializada la LCD personal&nbsp;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_Init">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_PrintChar"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_PrintChar</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD &nbsp;(app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando debe imprimirse un caracter</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTA</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_PrintChar">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_LCD_SpecialCharInit"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_LCD_SpecialCharInit</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo es parte del controlador LCD &nbsp;(app_lcd.inc)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">ver MIOS_CLCD_SpecialCharInit</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>NOTE</b></td>
    <td class="TABCOLOR2">ver custom_lcd_example para m&aacute;s detalles</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_LCD_SpecialCharInit">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MIDI_NotifyRx"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MIDI_NotifyRx</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo debe ser a&ntilde;adido a mios_wrapper</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando se ha recibido un byte MIDI. &nbsp;Puede
usarse para monitorizar la actividad Rx o para lleva a cabo alguna
acci&oacute;n- por ej. reaccionar a eventos en tiempo real como un
reloj MIDI (0xf8) con latencia m&iacute;nima. Recuerda que esta es una
rutina de interrupci&oacute;n de servicio! Usa FSR2 en vez de FSR0 y
IRQ_TMPx en lugar de TMPx -- y haz la rutina lo m&aacute;s
r&aacute;pido posible!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">s&iacute;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MIDI_NotifyRx">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MIDI_NotifyTx"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MIDI_NotifyTx</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo debe ser a&ntilde;adido a mios_wrapper</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS
llama a esta funci&oacute;n antes de la transferencia de un byte MIDI.
Esto se puede usar para monitorizar la actividad Tx o hacer cualquier
otra acci&oacute;n antes de que se env&iacute;e el byte. (por ej.
activar un pin para salidas MIDI multiplexadas) <br>Recuerda que esta
es una rutina de interrupci&oacute;n de servicio! Usa FSR2 en lugar
de&nbsp;FSR0 y IRQ_TMPx en lugar de&nbsp;TMPx -- y haz la rutina lo
m&aacute;s r&aacute;pido posible!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">s&iacute;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MIDI_NotifyTx">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MPROC_DebugTrigger"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MPROC_DebugTrigger</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">no disponible en C - el c&oacute;digo debe ser a&ntilde;adido a mios_wrapper</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS
llama a esta funci&oacute;n cuando se ha recibido un comando de
depuraci&oacute;n de errores (debug) se ha recibido v&iacute;a SysEx</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MPROC_DebugTrigger">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MPROC_NotifyFoundEvent"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MPROC_NotifyFoundEvent</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MPROC_NotifyFoundEvent(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando&nbsp;ha sido recibido un evento MIDI que ha sido especificado en la tabla CONFIG_MIDI_IN</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">Primer byte de evento&nbsp; MIDI en &lt;evnt0&gt;<br>Segundo&nbsp;byte de evento MIDI in &lt;evnt1&gt;<br>      Tercer&nbsp;byte de evento MIDI&nbsp; in &lt;evnt2&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MPROC_NotifyFoundEvent">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MPROC_NotifyReceivedByte"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MPROC_NotifyReceivedByte</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MPROC_NotifyReceivedByte(unsigned char byte)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando se ha recibido un byte MIDI</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">byte MIDI recibido en &lt;byte&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MPROC_NotifyReceivedByte">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MPROC_NotifyReceivedEvent"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MPROC_NotifyReceivedEvent</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MPROC_NotifyReceivedEvent(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando se ha recibido un evento MIDI completo-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">primer byte de evento MIDI en &lt;evnt0&gt;<br>segundo byte de evento&nbsp;MIDI&nbsp; in &lt;evnt1&gt;<br>tercer byte de evento MIDI&nbsp; in &lt;evnt2&gt;</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MPROC_NotifyReceivedEvent">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_MPROC_NotifyTimeout"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_MPROC_NotifyTimeout</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void MPROC_NotifyTimeout(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n cuando un evento MIDI no ha sido completamente recibido en 2 segundos</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_MPROC_NotifyTimeout">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_SR_Service_Finish"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_SR_Service_Finish</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void SR_Service_Finish(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n despu&eacute;s de que se hayan cargado&nbsp;los registros shift.<br>Recuerda
que esta es una rutina de interrupci&oacute;n de servicio! Usa FSR2 en
lugar de FSR0 y IRQ_TMPx en lugar de&nbsp; TMPx -- y haz la rutina lo
m&aacute;s r&aacute;pido posible!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">s&iacute;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_SR_Service_Finish">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_SR_Service_Prepare"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_SR_Service_Prepare</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void SR_Service_Prepare(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n antes de que se hayan cargado los registros shift.<br>Recuerda que esta es una rutina de interrupci&oacute;n de servicio! Usa FSR2
en lugar de FSR0 y IRQ_TMPx en lugar de&nbsp; TMPx -- y haz la rutina lo m&aacute;s
r&aacute;pido posible!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">s&iacute;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_SR_Service_Prepare">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_Tick"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_Tick</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void Tick(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama a esta funci&oacute;n en el loop principal (mainloop) cuando no hay otra cosa que hacer</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">no</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_Tick">Volver</a></td>
  </tr>
</tbody></table>
<hr><a name="USER_Timer"></a>
<table border="0" cellpadding="0" cellspacing="5" width="100%">
  <tbody><tr>
    <td colspan="2" class="TABCOLOR1"><font size="3"><strong>USER_Timer</strong></font></td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_DECLARACION</b></td>
    <td class="TABCOLOR2">void Timer(void)</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>DESCRIPCION</b></td>
    <td class="TABCOLOR2">MIOS llama peri&oacute;dicamente a esta funci&oacute;n. La frecuencia debe ser inicializada con MIOS_Timer_Set<br>Recuerda que esta es una rutina de interrupci&oacute;n de servicio! Usa FSR2
en logar de FSR0 y IRQ_TMPx en lugar de&nbsp; TMPx --y haz la rutina lo m&aacute;s
r&aacute;pido posible!</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_IN</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>C_OUT</b></td>
    <td class="TABCOLOR2">-</td>
  </tr>
  <tr>
    <td class="TABCOLOR2" width="150"><b>ISR</b></td>
    <td class="TABCOLOR2">s&iacute;</td>
  </tr>
  <tr>
    <td colspan="2" class="TABCOLOR2" width="150"><a href="#back_USER_Timer">Volver</a></td>
  </tr>
</tbody></table>
FOOTER
