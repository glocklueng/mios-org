HEADER 3 MIOS Bootstrap Loader

<H1>MIOS Bootstrap Loader</H1>

<P CLASS=INFO>The MIOS bootstrap loader allows you to write applications, but also the operating system itself into the flash memory of a PIC18F452 over the MIDI interface without the use of a special programming device like the <A HREF="mbhp_burner.html">MBHP_BURNER module</A>. It is possible to exchange application code on-the-fly. The development of new code can be handled much more efficiently, since it isn't necessary anymore to switch off the MIDIbox, to plug the programming adapter into the ICP socket and to wait two minutes until the flash content has been updated - with the MIOS loader this formerly tiresome procedure takes not more than 3 seconds anymore for a common application.<P>

<H2>Take two</H2>

<P CLASS=DESC>In fact two bootstrap loaders are provided by MIOS: the primary and the secondary loader:
<UL CLASS=CL>
   <LI>The primary loader gets active immediately after power-on for about two seconds. During this time the loader waits for a SysEx command which initiates a flash write. If this command is not received, the loader deactivates itself and MIOS will be started.</LI>
   <LI>The secondary loader gets active after MIOS has been booted and the application is running. In difference to the primary loader, the secondary doesn't allow to overwrite the memory allocated by the operating system. This kind of protection saves you from destroying MIOS if your application overlaps the system area by mistake.</LI>
</UL></P>

<P CLASS=DESC>After the upload and for the case of an application failure ("blue screen"), the PIC will be reset and the primary loader will be started again for 2 seconds. If your application crashes very early, so that you are not able to correct the error by exchanging the code during runtime, the primary loader will save your day. :)</P>

<P CLASS=DESC><I>However, such features don't mean that the bootstrap loader is only a tool for code developers - the common user gets the advantage that he don't need to build a MBHP_BURNER module by himself, but can ask others for doing this job. Once the primary loader has been burned into the PIC, you are able to update the operating system and applications without a PIC burner.</I></P>

<P CLASS=DESC><I>And here another hint to make it clear: it is not possible to use any MIOS application without the bootstrap loader and without uploading MIOS before! The upload procedure is described at the bottom of this page.</I></P>

<H2>Boot options</H2>

<P CLASS=DESC>The bootstrap loader has to know about two important parameters: the MIDI device ID, which should be unique number in a chain of multiple MIDIboxes, and the baudrate. Currently it can be chosen between the common MIDI baudrate (31250) and the rate used by the <A HREF="midibox_to_com.html">MIDIbox-to-COM</A> interface (38400).<BR>A third parameter allows to define the connected LCD type, so that MIOS is able to select the appropriate driver before printing a message on screen. Currently character displays (1x8, 1x16, 2x16, 2x20, 2x40, 4x16, 4x40) and KS0108-based graphical LCDs are supported, other GLCD types require a special driver which is embedded into the application.</P>
<P CLASS=DESC><I>Info for code developers: MIOS uses the following functions during the boot phase: <A HREF="mios_fun/MIOS_MIDI_DeviceIDAutoSet.html">MIOS_MIDI_DeviceIDAutoSet</A>, <A HREF="mios_fun/MIOS_MIDI_InterfaceAutoSet.html">MIOS_MIDI_InterfaceAutoSet</A>, <A HREF="mios_fun/MIOS_LCD_TypeAutoSet.html">MIOS_LCD_TypeAutoSet</A>, so that you don't have to take care about these settings. Never overwrite these modes if it doesn't make sense in order to ensure the compatibility with different hardware setups.</I></P>

<P CLASS=DESC>With Bootloader V1.2 and higher, it's possible to use a <A HREF="mbhp_iic_midi.html">MBHP_IIC_MIDI</A> module as alternative default MIDI Out port. This is intended as workaround for the <A HREF="http://www.midibox.org/dokuwiki/eusart_bug">EUSART bug</A> (only PIC18F4620 A3 and A4 affected).</P>

<P CLASS=DESC>The boot options are located in the PIC ID header, which can be modified by using IC-Prog or the change_id application. The SysEx device ID is located in bitfield ID[57-63], the UART mode in ID[55], the LCD type in ID[48..51], the MBHP_IIC_MIDI address for MIDI Out redirection in ID[40..47].  Here are some setup examples:</P>
<TABLE CLASS=BOX WIDTH="100%" ALIGN=CENTER BORDER CELLSPACING=2 CELLPADDING=10>
  <TR>
     <TD><SPAN CLASS=NORM> ID = 0000000000000000<BR><B>USE THIS ID IF YOU ARE UNSURE!</B> </SPAN></TD>
     <TD><SPAN CLASS=NORM> Device ID = 0x00<BR>common MIDI interface<BR>character LCD </SPAN></TD>
     <TD ROWSPAN=4 WIDTH=140><A HREF="mios/bootstrap_id_header.gif"><IMG SRC="mios/bootstrap_id_header.gif" WIDTH=135 HEIGHT=85 ALT="The configurable ID header"></A><BR><SPAN CLASS=NORM>A snapshot of IC-Prog which shows the location of the ID section<BR><B>Note:</B>If you are using a single core, it's highly recommended to select Device ID = 0x00 - the examples at the left side are using different IDs to indicate the position.</SPAN></TD>
  </TR>
  <TR>
     <TD><SPAN CLASS=NORM> ID = 0000000000000012 </SPAN></TD>
     <TD><SPAN CLASS=NORM> Device ID = 0x12<BR>common MIDI interface<BR>character LCD </SPAN></TD>
  </TR>
  <TR>
     <TD><SPAN CLASS=NORM> ID = 0000000000000142 </SPAN></TD>
     <TD><SPAN CLASS=NORM> Device ID = 0x42<BR>MIDIbox-to-COM interface<BR>character LCD </SPAN></TD>
  </TR>
  <TR>
     <TD><SPAN CLASS=NORM> ID = 0000000000001000 </SPAN></TD>
     <TD><SPAN CLASS=NORM> Device ID = 0x00<BR>common MIDI interface<BR>graphical LCD (KS0108) </SPAN></TD>
  </TR>
  <TR>
     <TD><SPAN CLASS=NORM> ID = 0000000000120000 </SPAN></TD>
     <TD><SPAN CLASS=NORM> Device ID = 0x00<BR>common MIDI interface<BR>Redirect MIDI Out stream to MBHP_IIC_MIDI with address 0x12</SPAN></TD>
  </TR>
</TABLE>

<P CLASS=DESC>SmashTV wrote a nice online user interface to select the <A HREF="http://www.avishowtech.com/mbhp/idgen.html" TARGET="_blank">PIC ID values</A>!</P>


<H2>Restrictions</H2>

<P CLASS=DESC>In order to improve the upload speed, the dump is stored in a 1k RAM buffer first before it will be written into the flash memory. Therefore blocks larger than 1k cannot be uploaded at once. However, MIOS Studio takes care for this restriction and split the program into several SysEx strings.<BR>Once a 1k block has been uploaded (this takes about 330 mS), the loader will go into programming state for ca. 400 mS. During this time, incoming MIDI events are ignored! The SysEx tool has to insert delays between the SysEx strings in order to prevent data-loss, suggested tools which can do this pretty well are <A HREF="http://www.midiox.com" TARGET="_blank">MIDI-Ox</A> for Windows, and <A HREF="http://www.snoize.com/SysExLibrarian/">SysEx Librarian</A> for MacOSX</P>

<P CLASS=DESC>Sidenote: MIOS Studio splits the code into 256 byte chunks in order to overcome WinXP/Java specific issues with some MIDI interfaces, the required delay between these blocks is ca. 300 uS.</P>


<H2>MIOS Studio</H2>

<P CLASS=INFO><A HREF="mios_studio.html">MIOS Studio</A> simplifies the upload of code, provides a debug environment for code development, and much more. Don't miss this nice Juce based and OS independent tool!</P>

<H2>SysEx protocol specifics</H2>

<P CLASS=INFO>If it should be for interest, the SysEx commands and error codes are described in <A HREF="mios/mios_sysex_implementation.txt">this document</A>.

<H2>Performance</H2>
<UL CLASS=CL>
   <LI>upload of MIOS (12k): 9 seconds</LI>
   <LI>upload of a typical application (4k): 3 seconds</LI>
</UL>

<H2>Download</H2>
<P CLASS=DESC><A HREF="mios_download.html">this way</A></P>
FOOTER
