HEADER 3 MBHP_CORE_STM32 Module

<H1>MIDIbox Hardware Platform, CORE_STM32 Module</H1>

<P><CENTER><IMG SRC="mbhp/mbhp_core_stm32_v2.jpg" width=550 height=413></CENTER></P>


<P><B>This page is under construction!</B></P>


<P CLASS=INFO>After 10 years of using the <A HREF="mbhp_core.html">PIC</A> as microcontroller for the MIDIbox Hardware Platform, and living with all the limitations, I decided to switch to a modern 32bit controller in order to develop more powerful applications, and to give other programmers the possibility to realize their own ideas without the need for learning assembly language once performance or memory utilisation does matter.</P>

<P CLASS=DESC>After some evaluation it turned out, that <A HREF="http://www.st.com/stm32" TARGET="_blank">STM32 by ST Microelectronics</A> is the ideal candidate for the MBHP due to following reasons:
<UL CLASS=CL>
<LI> 512k Flash and 64k RAM gives enough freedom for future applications
<LI> Almost the same price as for a PIC (ca. 10..15 EUR); it doesn't cost much money to upgrade multiple MIDIboxes
<LI> Easily available for private persons in small quantities, e.g. at Mouser and Digikey
<LI> ARM Cortex-M3 CPU is widely supported by the GNU toolchain, accordingly source code can be compiled under Windows/Linux/MacOS w/o spending money for an expensive ARM compiler
<LI> Much better performance - compared to PIC or ATMega, the STM32 really plays in a different league because of the higher frequency (72 MHz), higher data width (32bit), hardware multiplier and division unit, etc.
<LI> Very useful integrated peripherals for MIDI and Synthesizer applications, such as UART, SPI, I2C, USB, CAN, Timers, ADC, DAC
<LI> It's easy to interface external components like SD Card, I2S Audio DACs, Ethernet Controller, etc.
<LI> STM32 is supplied by 3.3V, but 5V tolerant inputs allow to access all existing MBHP modules without additional hardware. Even for output functions no level shifters are required when pins are used in Open Drain mode with external Pull-Up to 5V
<LI> Performance boost by using the DMA for background operations, such as scanning DIN/DOUT modules, analog inputs but also I2S transfers (Audio Output) w/o loading the CPU
<LI> Very helpful peripheral driver library provided by STM
<LI> Supported by a free available Realtime Operating System: <A HREF="http://www.freertos.org" TARGET="_blank">FreeRTOS</A>
<LI> Supported by <A HREF="http://openocd.berlios.de/web/" TARGET="_blank">OpenOCD</A> for flashing a virgin device and debugging via JTAG
<LI> Fast upload of application code via USB MIDI (ca. 14..17kb/s) - thanks to the <A HREF="mios32_bootstrap_newbies.html">MIOS32 Bootloader</A> no JTAG or COM programmer required for common users
<LI> Due to improved performance, it allowed me to program MIOS32 and some first applications completely in C. This finally makes MIDIbox applications portable, e.g. it is possible to emulate a MIDIbox on a PC/Mac.
</UL>

<P CLASS=DESC>Ok, enough praises for this nice toy. Here a list of issues/imperfections I don't really like, but which have to be accepted so long there are no better alternative solutions on the market:
<UL CLASS=CL>
<LI> Chip is only available in fine pitch SMD package, which is hard to solder, especially for Newbies (therefore STM32 presoldered boards will be provided)
<LI> Embedded flash has to be accessed with two wait cycles, which slows down the CPU whenever code isn't already available in the prefetch buffer. This can lead to different timing behaviour of a routine depending on the address the linker located the code.
<LI> USB and CAN interface cannot be used in parallel, since they share the same memory
<LI> no ROM based USB Bootloader, so that the MIOS32 Bootloader can only be flashed via JTAG or RS232
<LI> Pin mapping suboptimal in some cases. E.g., the two DAC outputs overlay SPI1 pins, which are used to access a SD card. SRIO chain has to use SPI1 instead of SPI2 if I2S based DAC should be connected, or JTAG pins have to be used for I2S, which limits the debugging capabilities
<LI> DMA doesn't support decrement address function, so that SRIO (serial shift register input and output) streams have to be reversed by software.
<LI> I2C peripheral has conceptional flaws which requires the usage of high priority interrupts to prevent corrupted transfers
</UL>



<DL>
   <DT><H2> <IMG SRC="images/bullet.gif" ALT=""> Download </H2></DT>
   <DD>
   <DD><TABLE WIDTH="100%" BORDER=0 CELLSPACING=5 CELLPADDING=0>
    <TR>
      <TD COLSPAN=4 CLASS=TABCOLOR1><FONT SIZE=3>PCB data, can be viewed, modified and converted with <A HREF="http://www.cadsoft.de/download.htm" TARGET="_blank">Eagle Light</A></FONT></TD>
    </TR>
    <TR>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Module</STRONG></FONT></td>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Schematic</STRONG></FONT></td>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Layout Data</STRONG></FONT></td>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Quick-view</STRONG></FONT></TD>
    </TR>
    <TR>
      <TD CLASS=TABCOLOR2><I>MBHP_CORE_STM32_V2</I></TD>
      <TD CLASS=TABCOLOR2><A HREF="mbhp/mbhp_core_stm32_v2.pdf">mbhp_core_stm32_v2.pdf</A></TD>
      <TD CLASS=TABCOLOR2><A HREF="mbhp/mbhp_core_stm32_v2a.brd">mbhp_core_stm32_v2a.brd</A></TD>
      <TD CLASS=TABCOLOR2><A HREF="mbhp/mbhp_core_stm32_v2.gif">mbhp_core_stm32_v2.gif</A></TD>
    </TR>
  </TABLE></DD>

  <DD><TABLE WIDTH="100%" BORDER=0 CELLSPACING=5 CELLPADDING=0>
    <TR>
      <TD COLSPAN=4 CLASS=TABCOLOR1><FONT SIZE=3>Additional informations</FONT></TD>
    </TR>
    <TR>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>File</STRONG></FONT></td>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Size</STRONG></FONT></td>
      <TD NOWRAP CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Description</STRONG></FONT></TD>
    </TR>
    <TR>
      <TD CLASS=TABCOLOR2><A HREF="mbhp/mbhp_core_stm32_orderlist.txt">mbhp_core_stm32_orderlist.txt</A></TD>
      <TD CLASS=TABCOLOR2>1k</TD>
      <TD CLASS=TABCOLOR2><A HREF="http://www.reichelt.de/" TARGET="_blank">Reichelt</A> orderlist</TD>
    </TR>
  </TABLE></DD>
  </DD>
</DL>

<DL>
   <DT><H2> <IMG SRC="images/bullet.gif" ALT=""> Available Ports </H2></DT>
   <DD>
<P CLASS=DESC>Following interfaces are provided by the core module:
  <DD><TABLE CLASS=BOX WIDTH="100%" BORDER=1 CELLSPACING=5 CELLPADDING=0>

    <TR>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Name</STRONG></FONT></td>
      <TD CLASS=TABCOLOR1><FONT SIZE=2><STRONG>No. of pins</STRONG></FONT></td>
      <TD NOWRAP CLASS=TABCOLOR1><FONT SIZE=2><STRONG>Description</STRONG></FONT></TD>
    </TR>
    <TR>
      <TD CLASS=TABCOLOR2>J1</TD>
      <TD CLASS=TABCOLOR2>2</TD>
      <TD CLASS=TABCOLOR2>Connection to a powersupply unit (PSU). A 7V-10V transformer, or a wall adapter could be used. At least 500 mA is recommented, especially if a backlit display is connected. AC or DC doesn't matter, since the rectifier behind J1 converts to DC anyhow. Also the polarity has not to be taken into account. </TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J22</TD>
      <TD CLASS=TABCOLOR2>4</TD>
      <TD CLASS=TABCOLOR2>Alternatively the core module can be supplied via USB.<BR>
In addition, this port gives you a "MIDI USB" and/or "Virtual COM" interface. Also protocols like "Mass Storage Device" to access a SD Card directly from a computer are possible, but unfortunately Windows XP and Vista don't allow to use the appr. drivers in parallel, Windows could even crash when the USB cable is connected, therefore only one protocol is activated by default.<BR>However, parallel usage of multiple protocols works fine under MacOS and Linux when explicitely enabled in the MIOS32 configuration.<BR>
Applications can be updated via USB port, it's the <A HREF="mios32_bootstrap_newbies.html">fastest option</A>.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J17</TD>
      <TD CLASS=TABCOLOR2>2</TD>
      <TD CLASS=TABCOLOR2>This jumper enables power supply via USB. Before closing the jumper, ensure that any other supply sources (e.g. at J1 or J2) are removed to avoid shorts or backcurrents to your PC!</TD>
    </TR>


    <TR>
      <TD CLASS=TABCOLOR2>J2</TD>
      <TD CLASS=TABCOLOR2>2</TD>
      <TD CLASS=TABCOLOR2><B>When used as +5V output:</B> to supply modules which are not connected to a Jxx port which already provides a 5V output. Note that the 7805 gets very hot when it delivers currents above 500 mA. Maximum current drain is 1A!<BR>
      <B>When used as +5V input: </B> for supplying the core from an external stabilized Power Supply Unit (PSU). The voltage regulator (IC3) doesn't need to be connected, also the rest of the voltage stabilization circuit between J1 and J2 (X1, C8, C9) can be left out. If the core module (and all connected modules to this branch) drains more than 100 mA, it's recommented to mount C8 directly to J2 (a small cable between the outer soldering pads of the left-out 7805 will do this).</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J3</TD>
      <TD CLASS=TABCOLOR2>20</TD>
      <TD CLASS=TABCOLOR2>Standard 20 pin interface to JTAG Wiggler, see <A HREF="mios32_bootstrap_experts.html">this page</A> for details.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J4</TD>
      <TD CLASS=TABCOLOR2>4</TD>
      <TD CLASS=TABCOLOR2>IIC port. Interface to <A HREF="mbhp_bankstick.html">BankSticks</A> or to MBHP_IIC_* modules like <A HREF="mbhp_iic_midi.html">MBHP_IIC_MIDI</A>.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J5a/b/c</TD>
      <TD CLASS=TABCOLOR2>3*10</TD>
      <TD CLASS=TABCOLOR2>Analog sources (like pots) can be connected to this port (12 pots maximum). If multiplexed via <A HREF="mbhp_ain.html">AIN module</A>, up to 96 pots can be scanned. There are also some application which use this pin as digital in- or output (mostly described in README.txt file).</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J8/J9</TD>
      <TD CLASS=TABCOLOR2>10</TD>
      <TD CLASS=TABCOLOR2>SPI port <B>TODO</B>. J8 is the interface to the <A HREF="mbhp_dout.html">DOUT module</A> chain, whereas J9 is the interface to the <A HREF="mbhp_din.html">DIN module</A> chain.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J11</TD>
      <TD CLASS=TABCOLOR2>10</TD>
      <TD CLASS=TABCOLOR2>This port provides two MIDI IOs at TTL level, interface to the <A HREF="mbhp_ltc.html">LED/Thru/COM module</A>. Can also be used to cascade multiple core modules in a MIDI chain (see <A HREF="midibox_link.html">MIDIbox Link</A>). <B>Note:</B> It's possible to distribute the Tx (MIDI Out) signal to multiple cores, but it isn't allowed to connect more than one Tx output to a Rx input. Instead, a <A HREF="midimerger.html">MIDImerger</A> is necessary to combine multiple MIDI IN sources.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J12/J20</TD>
      <TD CLASS=TABCOLOR2>3</TD>
      <TD CLASS=TABCOLOR2>MIDI OUT port 1 and 2. See the schematic, how to connect a MIDI socket to this port.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J13/J21</TD>
      <TD CLASS=TABCOLOR2>3</TD>
      <TD CLASS=TABCOLOR2>MIDI IN port 1 and 2. See the schematic, how to connect a MIDI socket to this port.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J15a/b</TD>
      <TD CLASS=TABCOLOR2>16</TD>
      <TD CLASS=TABCOLOR2>Interface to one or two <A HREF="mbhp_lcd.html">LC display module(s)</A>.<BR>
Please note that the pinout is different compared to the <A HREF="mbhp_core.html">MBHP_CORE</A> module!
<B>TODO</B></TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J16</TD>
      <TD CLASS=TABCOLOR2>10</TD>
      <TD CLASS=TABCOLOR2>SPI Interface to SD Card and SPI based Ethernet Interface like EN28J60. <B>TODO</B>.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J18</TD>
      <TD CLASS=TABCOLOR2>2</TD>
      <TD CLASS=TABCOLOR2>CAN interface at TTL level as used by <A HREF="midibox_network.html">MBNet</A>.<BR>
Please note, that STM32 doesn't allow to use CAN and USB at the same time, since these peripherals share the same memory.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J19</TD>
      <TD CLASS=TABCOLOR2>8</TD>
      <TD CLASS=TABCOLOR2>Interface to application specific module extensions like the <A HREF="mbhp_sid.html">SID module</A> and/or <A HREF="mbhp_aout.html">AOUT module</A>. Prepared for serial interfaces (although not driven by an integrated SPI), two chip select lines are available, additional select lines can be taken from free pins.</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J23/J27</TD>
      <TD CLASS=TABCOLOR2>2</TD>
      <TD CLASS=TABCOLOR2>Boot mode jumpers. See schematic for the 4 available options.<BR>
The application is started when these jumpers are <B>NOT</B> connected!</TD>
    </TR>

    <TR>
      <TD CLASS=TABCOLOR2>J24/J25/J26</TD>
      <TD CLASS=TABCOLOR2>3</TD>
      <TD CLASS=TABCOLOR2>5V/3.3V supply options for serial ports <B>TODO</B></TD>
    </TR>
  </TABLE></DD>
  </DD>
</DL>


<DL>
  <DT><H2> <IMG SRC="images/bullet.gif" ALT=""> Soldering Guide </H2></DT>
  <DD>
  <DD><TABLE CELLSPACING=0 CELLPADDING=0>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_2.jpg" WIDTH=280 HEIGHT=246 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>This is the minimum number of components to get a sign of life from a preburned STM32 chip which already contains the <A HREF="mios32_bootstrap_newbies.html">MIOS32 bootloader</A>:
<UL CLASS=CL>
<LI>the USB socket (to supply 5V from a USB port)
<LI>Jumper J17 to connect USB power lines to the 5V rail
<LI>3.3V voltage regulator IC7
<LI>100nF/100uF bypass caps C12 and C13
<LI>10k Resistor Array R2a-d
<LI>Status LED and 470 ohm resistor R15
</UL>
Note that J3 socket is only required if you burn the bootloader via JTAG by yourself.
      </TD>
    </TR>
    <TR>
      <TD  CLASS=TABCOLOR2 COLSPAN=2>Once you plug the USB cable into the socket, the LED will flash two times with a slow PWM modulation. This is because the chip is clocked by the internal HSI oscillator at 8 MHz only.<BR>
USB transfers are not possible at this low frequency!
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_3.jpg" WIDTH=280 HEIGHT=206 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Disconnect the USB cable, and add the 12 MHz crystal and the two 33 nF caps C1/C2.<BR>
Once the chip is powered again, the LED will flash much faster with a period of 1 second.<BR>
It will only flash two times, thereafter the (default test) application is started. It's up to the application how the on-board LED is used thereafter.
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_4.jpg" WIDTH=280 HEIGHT=237 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Disconnect the USB cable, and add 
<UL CLASS=CL>
<LI>the two 27 Ohm resistors R9 and R10
<LI>the 1k pull-up resistor R14
</UL>
Connect the USB cable again.<BR>
After two seconds (LED stopped flashing) your OS should report a new MIDI port.
      </TD>
    </TR>
    <TR>
      <TD  CLASS=TABCOLOR2 COLSPAN=2>Open MIOS Studio, enable the MIOS32 option, push the Query button as described in the <A HREF="mios32_bootstrap_newbies.html">Bootloader page</A> - you should get some informations about the chip and the running application.
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_5.jpg" WIDTH=280 HEIGHT=189 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Disconnect the USB cable, and add
<UL CLASS=CL>
<LI>the 100 nF bypass caps C3, C4, C5, C6, C7, C16
<LI>the 10 uF cap C17
<LI>the 100k resistor R1
<LI>4*1k resistor array R33
<LI>Jumper J27
</UL>
      </TD>
    </TR>
    <TR>
      <TD CLASS=TABCOLOR2 COLSPAN=2>Close Jumper J27 to test the Bootloader Hold function. The application won't be started, instead the USB port will be available immediately so that you can upload code for the case that the application crashed and doesn't enable USB anymore.<BR>
The LED will flicker 5 times in this mode, and thereafter stays off. Whenever a new MIOS32 SysEx code block or query is received, the LED will flash 5 times again.<BR>
Remove the jumper to start the application.
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_6.jpg" WIDTH=280 HEIGHT=193 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Add 
<UL CLASS=CL>
  <LI>Jumper J23 (Boot0)
  <LI>and MIDI Link port J11 to the board.
</UL>
<B>You will never need to close J23 so long you don't use the ROM based RS232 bootloader.</B><BR>
Accordingly, following advice is only relevant for the case that you neither own a preprogrammed STM32, nor a JTAG programmer: you are not able to test the MIOS32 bootloader so long it hasn't been flashed into the chip. Now you have the minimal infrastructure to do this as described on the <A HREF="mios32_bootstrap_experts.html">Experts page</A>.
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_7.jpg" WIDTH=280 HEIGHT=189 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Let's stuff the MIDI interface circuit:
<UL CLASS=CL>
  <LI> 220 Ohm Resistors R20, R21, R22, R25, R26, R27
  <LI> 1k Resistors R18, R23
  <LI> 4k7 Resistors R19, R24
  <LI> 1N4148 Diodes D2, D3
  <LI> two 8 pin IC sockets and 6N138 Optocouplers IC4, IC5
  <LI> four PCB MIDI sockets, or optionally J12/J13/J20/J21 headers to external MIDI sockets (mounted on the rear side of your MIDIbox)
</UL>
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_io_test_query.gif" WIDTH=280 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Check each MIDI In/Out port by connecting it via a common MIDI interface to your computer, opening MIOS Studio, selecting the correct MIDI interface, and using the "Query" button. If the core responds with some informative messages, the bidirectional communication is working.
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_8.jpg" WIDTH=280 HEIGHT=210 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>The LCD interface:
<UL CLASS=CL>
  <LI> 16 pin socket and 74HC595 (IC2)
  <LI> BC337 Transistor T1
  <LI> 100 nF cap C14
  <LI> two 10k Trimmpots P1, P2
  <LI> 10k Resistor R12 and 1k Resistor R13
  <LI> two 2x8 DIL headers
</UL>
Note that the second LCD (connected to J15B) is only supported by a small number of applications - like MIDIbox SEQ V4. It won't be initialized by default!
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_9.jpg" WIDTH=280 HEIGHT=210 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Serial ports consist of:
<UL CLASS=CL>
  <LI> 2x5 DIL headers J8/9, J16 and J19
  <LI> Pull-Up resistors arrays R30, R31, R32 - note that they only have to be stuffed in special cases (see below)
  <LI> 3.3V/5V selection jumpers J24, J25, J26
</UL>
Pull-Up resistors are only required if a 5V supplied module is connected to a serial port. This is mostly the case for J8/J9, where the SRIO chain is connected by default. It's not required for a SD Card, which is supplied at 3.3V and usually connected to J16.<BR>
TODO: provide table with all the options
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_10.jpg" WIDTH=280 HEIGHT=222 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>If you are planning to use the core module for different applications, you can use SIP socket strips for the 3 resistor arrays, so that you are able to remove/replace them whenever required. The 5 pins of the arrays can be extended with cutted resistor legs (yeah - here we need them again)
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_11.jpg" WIDTH=280 HEIGHT=210 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Add the components for the remaining ports:
<UL CLASS=CL>
  <LI>2x5 DIL headers for J5A/B/C
  <LI>2 pin header J18, 1k resistor R11, 1N4148 diode for CAN
  <LI>4 pin header J4 and two 2k2 resistors for IIC
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_12.jpg" WIDTH=280 HEIGHT=228 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2>Finally add the 7805 based voltage regulation unit if the core shouldn't be supplied via USB, but by an external PSU or transformer:
<UL CLASS=CL>
  <LI>2200 uF cap C8, 330 nF cap C9
  <LI>47 uF cap C10, 100 nF cap C11
  <LI>7805 voltage regulator IC6
  <LI>AC or DC input J1
  <LI>5V input or output J2
</UL>
Note that USB Power Jumper J17 <B>has to be removed</B> when the core is supplied externally!
      </TD>
    </TR>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_v2.jpg" WIDTH=280 HEIGHT=210 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>DONE! :-)</B>
      </TD>
    </TR>
  </TABLE></DD>
  </DD>
</DL>


<DL>
  <DT><H2> <IMG SRC="images/bullet.gif" ALT=""> Special Soldering Guide: SMD</H2></DT>
  <DD>
  <P CLASS=INFO>This part is directed to people who want to solder the STM32 chip by themself.<BR>
You shouldn't try this if you haven't soldered SMD parts before. I recommented to start with a smaller project like <A HREF="mbhp_usb_gm5.html">MBHP_USB_GM5</A> to gain your soldering experiences! Especially to ensure that you won't burn 10..20 EUR just because you thought that you could master this job immediately to save money.<BR>
In fact, the required equipment is more expensive than buying a board with preasoldered STM32.</P>
<P CLASS=DESC>Presoldered and bootstrapped chips will be available in <A HREF="http://www.avishowtech.com/mbhp" TARGET="_blank">SmashTV's shop</A> soon!</P>
  <DD><TABLE CELLSPACING=0 CELLPADDING=0>
    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_1.jpg" WIDTH=280 HEIGHT=243 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_2.jpg" WIDTH=280 HEIGHT=233 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_3.jpg" WIDTH=280 HEIGHT=210 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_4.jpg" WIDTH=280 HEIGHT=201 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_5.jpg" WIDTH=280 HEIGHT=229 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_6.jpg" WIDTH=280 HEIGHT=242 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_7.jpg" WIDTH=280 HEIGHT=210 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

    <TR>
      <TD><IMG SRC="mbhp/mbhp_core_stm32_1_8.jpg" WIDTH=280 HEIGHT=213 BORDER=0 ALT=""></TD>
      <TD CLASS=TABCOLOR2><B>TODO</B>
      </TD>
    </TR>

  </TABLE></DD>
  </DD>
</DL>

<DL>
  <DT><H2> <IMG SRC="images/bullet.gif" ALT=""> Credits </H2></DT>
  <DD><P CLASS=DESC>A big thank-you goes to NILs for creating the layout, Bugfight and especially StrydOne for MIOS32 beta testing, Seppoman for providing the first STM32 presoldered prototype boards to programmers, SmashTV for providing STM32 presoldered PCBs to users, and to everybody else who gave me helpful proposals and mental support.<P>
  </DD>
</DL>

FOOTER
