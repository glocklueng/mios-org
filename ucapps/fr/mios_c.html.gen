HEADER 3 MIOS C Interface

            <h1>MIOS : L'Interface C</h1>


            <p class="INFO">La
programmation des applications&nbsp;<a href="mios.html">MIOS</a>&nbsp;en C sera dans l'avenir une bonne
alternative au language assembleur, ce language de haut-niveau
&eacute;tant facile &agrave; comprendre, moins enclin
&agrave; l'erreur
et plus facilement r&eacute;-utilisable. Les points faibles du C
sont
de moins bonnes performances et un code plus volumineux, ce qui
implique que les applications comme la <a href="midibox_sid.html">MIDIbox SID</a> ou <a href="midibox_seq.html">MIDIbox SEQ</a>&nbsp;ne pourront
&ecirc;tre programm&eacute;es int&eacute;gralement en C,
notament
&agrave; cause de la taille r&eacute;duite des
m&eacute;moires flash et
RAM du PIC18F452 (dans la plupart des cas n&eacute;anmoins
suffisantes
- mais pas pour de telles fonctionnalit&eacute;s...). Ce
probl&egrave;me sera probablement r&eacute;solu au fur et
&agrave;
mesure de la sortie de nouveaux chips &agrave; la connectique
compatible et disposants de plus de m&eacute;moire, mais cela
prendra
plusieurs ann&eacute;es.</p>

            
            <p class="INFO"></p>

            <p class="DESC">Malgr&eacute;s ces contraintes, la combinaison du MIOS et du C
est
une bonne solution. Pourquoi ? Parce que le MIOS (le syst&egrave;me
d'exploitation) est programm&eacute; en language assembleur et
sp&eacute;cialement optimis&eacute; pour la rapidit&eacute;
d'&eacute;xecution. Il traite un grand nombre de t&acirc;ches
de
performance critiques , desquelles l'utilisateur n'a plus &agrave;
se
soucier. Le MIOS contient un grand nombre de fonctions - vous dispensant d'avoir &agrave;
r&eacute;inventer la roue - et permet au programmateur de
r&eacute;aliser son projet MIDI avec succ&eacute;s sans
&ecirc;tre
oblig&eacute; de ma&icirc;triser les connaissances de fond sur
les
traitements IO haute performance et la gestion du MIDI
appropri&eacute;e.</p>


            <p class="DESC">Du
coup, l'utilisateur peut simplement commencer &agrave; programmer
dans la couche "application" , o&ugrave; l'optimisation du code dans
la plupart des cas n'a pas trop d'importance, avec l'assurance que les
fonctions seront trait&eacute;es avec la m&ecirc;me
rapidit&eacute;, qu'elles aient &eacute;t&eacute;
programm&eacute;es en C ou en assembleur . Bien s&ucirc;r, le
r&eacute;sultat d&eacute;pend aussi et en grande partie de
l'application et du compileur utilis&eacute;, mais il est d'ores et
d&eacute;j&agrave; possible de programmer de pas mal de choses sans
trop d'effort. Et plus d'utilisateurs se lanceront dans la
programmation en C, plus d'exemples de codes pourront &ecirc;tre
partag&eacute;s par la communaut&eacute;, et plus vite
apparaitront de nouvelles applications...</p>


            <p class="DESC">Pour
l'instant, je ne suis pas en mesure de bien d&eacute;finir ce qui
avec raison doit &ecirc;tre programm&eacute; en C ou ce qui
doit &ecirc;tre programm&eacute; en assembleur - c'est une base
de connaissance &agrave; &eacute;tablir dans les mois
&agrave; venir - vos opinions sont les bienvenues! Gardez
&agrave; l'esprit que le m&eacute;lange du language C et de
l'assembleur est toujours possible dans la couche "application". Mon
opinion pour le moment : l'interface utilisateur (boutons, gestion des
LED, des &eacute;crans, MIDI IO) peut &ecirc;tre
impl&eacute;ment&eacute;e en C sans grands
d&eacute;savantages, mais les routines qui doivent interagir
rapidement (comme les pilotes de p&eacute;riph&eacute;riques,
ou encore les algorythmes destin&eacute;s &agrave; traiter un
grand nombre de donn&eacute;es) doivent &ecirc;tre
programm&eacute;es dans des modules en assembleur distincts puis
appel&eacute;es depuis le C.</p>


            <h2>R&eacute;alisation Technique</h2>


            <p class="DESC">Pour
le MIOS , cela ne fait aucune diff&eacute;rence qu'une routine
attach&eacute;e aux routines d'appel&nbsp; USER_*&nbsp;
soit en C ou en assembleur, car cette &eacute;ventualit&eacute;
a &eacute;t&eacute; prise en compte d&egrave;s les
premi&egrave;res phases de la conception. Le MIOS est toujours
branch&eacute; sur les entr&eacute;es USER_* en
pr&eacute;sence d'&eacute;v&egrave;nements,
entr&eacute;es qui font partie de l'application. De l&agrave;,
l'application peut appeler la fonction en C si n&eacute;cessaire.</p>


            <p class="DESC">Les
fonctions MIOS (MIOS_*) peuvent le plus souvent &ecirc;tre
appel&eacute;e depuis un programme en C sans perte de performance,
du moment qu'il n'y a qu'un param&egrave;tre en entr&eacute;e
et en sortie. Une fonction impliquant plus de param&egrave;tres
requiert du code suppl&eacute;mentaire afin de copier les
param&egrave;tres en C (ceux qui sont mis dans la pile)
dans&nbsp; MIOS_PARAMETER[123].</p>


            <p class="DESC">Si
tout cela est nouveau pour vous, ne vous en inqui&eacute;tez pas trop - vous n'avez pas vraiment &agrave; vous soucier de ces
consid&eacute;rations sur les traitements "bas-niveau" .</p>


            <p class="DESC">Servez-vous
simplement du "Wrapper" contenant tous les codes requis afin de
"linker" les fonctions en C au
MIOS. Ce "wrapper" est inclu dans l'archive "MIOS baser" .</p>


            <h2>Exemples de Programmations</h2>
            <table class="BOX" align="center" border="1" cellpadding="3" cellspacing="2" width="100%">


  <tbody>
                <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_ain.html">CODE</a></span></td>

    <td><span class="NORM">Envoi d'&eacute;v&egrave;nements MIDI &agrave; partir de mouvements de potentiom&egrave;tres</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_mapped.html">CODE</a></span></td>

    <td><span class="NORM">Envoi d'&eacute;v&egrave;nements MIDI mapp&eacute;s &agrave; partir de mouvements de potentiom&egrave;tres</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_range.html">CODE</a></span></td>

    <td><span class="NORM">Etalonnage de valeurs de potentiom&egrave;tres</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_ain_takeover.html">CODE</a></span></td>

    <td><span class="NORM">Realisation d'une fonction "Soft-Takeover" pout potentiom&egrave;tres</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_din.html">CODE</a></span></td>

    <td><span class="NORM">Envoi d'&eacute;v&egrave;nements MIDI &agrave; partir de mouvements de boutons</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_set_dout.html">CODE</a></span></td>

    <td><span class="NORM">Contr&ocirc;le de 128 LEDs via MIDI</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_enc_rel.html">CODE</a></span></td>

    <td><span class="NORM">Envoi d'&eacute;v&egrave;nements MIDI relatifs &agrave; partir de mouvements d'encodeurs</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_enc_abs7.html">CODE</a></span></td>

    <td><span class="NORM">Envoi d'&eacute;v&egrave;nements MIDI</span><span class="NORM">&nbsp;7bit&nbsp;</span><span class="NORM">&agrave; partir de mouvements d'encodeurs</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_send_enc_abs14.html">CODE</a></span></td>

    <td><span class="NORM">Envoi d'&eacute;v&egrave;nements</span><span class="NORM">&nbsp;NRPN</span><span class="NORM"> 14bit&nbsp;</span><span class="NORM"></span><span class="NORM">&agrave; partir de mouvements d'encodeurs</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_handle_mf.html">CODE</a></span></td>

    <td><span class="NORM">Un gestionnaire de Faders Motoris&eacute;s simple</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_filter_cc.html">CODE</a></span></td>

    <td><span class="NORM">Filtrage de tous les &eacute;v&egrave;nements MIDI Event &agrave; l'exception des messages Bn 07 xx (Contr&ocirc;leurs Volumes)</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_forward_chn1.html">CODE</a></span></td>

    <td><span class="NORM">Renvoi des &eacute;v&egrave;nements uniquement du Canal #1</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_cc_to_nrpn.html">CODE</a></span></td>

    <td><span class="NORM">Convertion CC vers NRPN</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_nrpn_to_cc.html">CODE</a></span></td>

    <td><span class="NORM">Convertion NRPN vers CC</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_pic_pin.html">CODE</a></span></td>

    <td><span class="NORM">Pilotage des pins du PIC via MIDI</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_lcd_out.html">CODE</a></span></td>

    <td><span class="NORM">Affichage de valeurs sur un &eacute;cran LCD</span></td>

  </tr>


  <tr>

    <td width="30"><span class="BIG"><a href="mios_c_lcd_schars.html">CODE</a></span></td>

    <td><span class="NORM">Utilisation de caract&egrave;res sp&eacute;ciaux sur un &eacute;cran LCD</span></td>

  </tr>


              </tbody>
            </table>
            <p class="INFO"></p>


FOOTER