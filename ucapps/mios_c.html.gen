HEADER 3 MIOS C Interface

<H1>MIOS C Interface</H1>

<P CLASS=INFO>Programming <A HREF="mios.html">MIOS</A> applications in C will become an alternative solution to assembler in the future, since this highlevel language is easier to understand, less error-prone and better re-usable. Disadvantage of C is worse performance and larger code size, which means that it won't be possible to program so complex applications like <A HREF="midibox_sid.html">MIDIbox SID</A> or <A HREF="midibox_seq.html">MIDIbox SEQ</A> completely in C, especially due to reduced flash and RAM of the PIC18F452 (which is mostly sufficient - but not high enough for so much features...). Maybe this will be solved step by step with upcoming pin-compatible derivatives which will contain more memory, but this could be a process of some years.<P>

<P CLASS=DESC>However, regardless of this fact, MIOS and C is a good combination. Why? Because MIOS (the operating system) is programmed in assembly language and has been hand-optimized for speed. It handles a lot of performance critical tasks for which the user doesn't need to take care about. MIOS contains a lot of ready made functions that saves people from reinventing the wheel - it enables the interested programmer to implement a MIDI project successfully without the background knowledge about high performance IO handling and proper MIDI processing.</P>

<P CLASS=DESC>So, the user can just start at the application layer where code optimization mostly doesn't matter. And he can expect that many functions will be processed with the same speed, regardless if they have been programmed in C or assembler - ok, the result heavily depends on the application and the compiler which is used, but it's already possible to realize a lot of nice stuff without much effort, and then more users are starting with the C approach, then more coding examples can be shared in the community which should boost up the development cycle of new applications.</P>

<P CLASS=DESC>Currently I'm not able to estimate when it makes sense to program something in assembler or in C - this is some kind of knowledge which has to be built up in the next months - your feedback is welcome! Keep in mind that mixing C and assembler at application layer is still possible. My current suggestion: especially the user interface (button/LED handling, display output, MIDI IO) can be implemented in C without disadvantages, but routines which have to interact fast (like a peripheral driver, or algorithms which has processes a huge amount of data) should be programmed in separate assembler modules and called from C.</P>

<H2>Technical Realization</H2>

<P CLASS=DESC>For MIOS itself it doesn't make a difference if a C or assembler routine is hooked to the USER_* callback routines, because this possibility has been taken into account from the beginning of the design phase. MIOS will always branch to the USER_* vectors on events, which are part of the application. And from there the application can branch to the C function if desired.</P>

<P CLASS=DESC>MIOS functions (MIOS_*) can mostly be called from a C program without performance loss, so long it has only one input and/our output parameter. Functions with more parameters require some extra code which copies the C parameters (which are pushed into the stack) to MIOS_PARAMETER[123].</P>

<P CLASS=DESC>If this sounds new to you, then please don't feel confused - you don't have to take care about this low-level handling!</P>

<P CLASS=DESC>Instead just use the so called "Wrapper" which contains all the code which is required to link C functions to MIOS. This wrapper is part of the MIOS C Wrapper package.</P>

<P CLASS=DESC>The wrapper code heavily depends on the compiler which is used. Currently only <A HREF="http://sdcc.sourceforge.net" TARGET="_blank">SDCC</A> is supported, since this is the only compiler for the PIC18F architecture which is freely available. Also the compiler version is important, since the parameter passing method is not stable yet. Therefore please only use official releases (no snapshots) which have been tested with the wrapper. The current <B>working</B> release is 2.7.0<BR>
Btw.: the appr. module is called "PIC16", which doesn't mean that it is intended for PIC16Fxxx processors, but for the PIC18F family with 16-bit code word size. The module is under development and therefore not well documented - but it already works fine and will be improved from time to time.<P>

<P CLASS=DESC>Also part of the Wrapper package are following files:
<UL CLASS=CL>
   <LI>main.c: a skeleton which contains the user hooks - add your code here!</LI>
   <LI>cmios.h: a header file which is included from main.c and which contains the C declarations of the <A HREF="cmios_fun.html">MIOS functions</A>.</LI>
   <LI>pic18f452.c and pic18f452.h: contains SFR definitions for the PIC18F452</LI>
   <LI>make.bat: a batch file which sets some variables and calls make_sub.bat</LI>
   <LI>project.lkr: the MPLKR linker script which defines the available memory regions (and which masks out the regions which are already allocated by MIOS)</LI>
   <LI>tools\make_sub.bat: a batch file that contains all steps which are required to build the project
   <LI>tools\fixasm.pl: a perl script which inserts workarounds into the generated assembler code of SDCC. The purpose of the workarounds are documented in the perl file and can change from time to time, depending on the SDCC release. Most of them won't be required in the next weeks anymore (I'm in contact with the author of the pic16 module)</LI></LI>
   <LI>tools\hex2syx.pl: converts the application binary (located in project.hex) to a MIDI loadable project.syx file</LI>
</UL>
</P>

<P CLASS=DESC><I>Note for advanced users: there is a separate user and IRQ stack defined in the header of mios_wrapper/mios_wrapper.asm which can be increased (or decreased) if required for large programs in the make.bat file. Please also have a look into the larger SDCC based applications like MIDIbox MM and MIDIbox LC which demonstrate how to handle with complex MIOS interactions.</I></P>

<H2>Preparation</H2>

<P>These steps are required to setup the development environment:<P>

<TABLE ALIGN=CENTER CELLSPACING=20 CELLPADDING=0>

  <TR>
    <TD><A HREF="http://gputils.sourceforge.net" TARGET="_blank"><IMG SRC="howto_tools/gputils.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> Download the <A HREF="https://sourceforge.net/project/showfiles.php?group_id=41924" TARGET="_blank">GPUTILS-WIN32 package from sourceforge.net</A> which contains the assembler and linker. Note that the code which is generated by SDCC mostly cannot be completely compiled with MPASMWIN of the MPLAB IDE (e.g. due to long label names which exceed the 32 character limitation), therefore this alternative assembler/linker is required.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="http://www.perl.com" TARGET="_blank"><IMG SRC="images/lcamel.gif" WIDTH=72 HEIGHT=81 ALT="Link to the perl.com"></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> Download perl if it isn't installed on your computer.<BR>Unix users: it comes mostly with your distribution.<BR>Windows users: take <A HREF="http://www.activestate.com/Products/Download/Register.plex?id=ActivePerl" TARGET="_blank">Active Perl</A>.</TD>
  </TR>

  <TR>
    <TD><A HREF="http://sdcc.sourceforge.net" TARGET="_blank"><IMG SRC="howto_tools/sdcc.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> Finally download the <A HREF="http://sourceforge.net/project/showfiles.php?group_id=599" TARGET="_blank">2.7.0 release of SDCC</A>.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="howto_tools/sdcc2_en.gif"><IMG SRC="howto_tools/sdcc2_en.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> Add the path to GPUTILS, perl and the SDCC compiler to your PATH environment variable if this hasn't been done yet. Normaly these variables should be added automatically by the installation programs!) If not, it can be done from the system preferences menu of Windows NT/2000/XP (german version <A HREF="howto_tools/sdcc2.gif">here</A>)<BR>Windows95/98/ME users have to define the variable in C:\AUTOEXEC.BAT</SPAN> (and possibly have to reboot their computer)</TD>
  </TR>

  <TR>
    <TD><A HREF="howto_tools/sdcc3.gif"><IMG SRC="howto_tools/sdcc3.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Example: my path settings are "C:\Programme\sdcc\bin;C:\Programme\Perl\bin;C:\Programme\gputils\bin\" (paths are separated with a semicolon)</TD>
  </TR>

</TABLE>


<H2>Compiling your first C program</H2>

<TABLE ALIGN=CENTER CELLSPACING=20 CELLPADDING=0>

  <TR>
    <TD><A HREF="howto_tools/sdcc1.gif"><IMG SRC="howto_tools/sdcc1.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> Open a shell and change to the directory where you've extracted the MIOS SDCC Wrapper package.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="howto_tools/sdcc4.gif"><IMG SRC="howto_tools/sdcc4.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Open main.c with your favourite text editor. This is a snapshot of Emacs, my prefered editor under Windows and Unix. However, not everybody finds it userfriendly - it's one of the most powerful editors (with integrated programming language and endless extensions like HTML browser, mail, newsreader, games ;-), but requires a lot of practice before it can be used efficiently. The windows version can be downloaded from here: <A HREF="http://www.gnu.org/software/emacs/windows/ntemacs.html" TARGET="_blank">emacs@Win</A>.<BR>A good alternative editor for Windows (only) is <A HREF="http://www.ultraedit.com/" TARGET="_blank">Ultraedit</A> or <A HREF="http://www.textpad.com/news/index.html" TARGET="_blank">TextPad</A> or <A HREF="http://notepad-plus.sourceforge.net" TARGET="_blank">Notepad++</A>.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="howto_tools/sdcc5.gif"><IMG SRC="howto_tools/sdcc5.gif" WIDTH=160></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> After changes have been made in the source code, you have to invoke the "make" file (a batch file which is named make.bat). It executes all commands which are necessary to build the application from your main.c file to the project.syx file which is ready for the upload via MIDI.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="mios/mios_studio7.gif"><IMG SRC="mios/mios_studio7_small.gif" WIDTH=160 HEIGHT=128 ALT=""></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Now load the project.hex file with <A HREF="http://miosstudio.midibox.org" TARGET="_blank">MIOS Studio</A>, like described at the <A HREF="mios_bootstrap_newbies.html">MIOS Bootstrap Loader</A> page.<BR>Note that this tool also provides some powerful debugging capabilities.</SPAN></TD>
  </TR>

</TABLE>

<P><B>Note:</B> The SDCC wrapper is part of the "sdcc_skeleton" package, which is located at the <A HREF="mios_download.html">MIOS Download</A> page. The core module must run with MIOS V1.8 (or higher).</P>

<P CLASS=DESC><B>Addendum 01/2006:</B> if multiplications, divisions, pointer operations, etc. are used in the .c code, the linker may fail due to missing functions, which are part of the "libsdcc.lib" library. The common library for pic16 derivatives is not compatible to MIOS, therefore I've created a special one which can be downloaded <A HREF="mios/mios_libsdcc_v2_7_0.zip">from here</A>. Read the README.txt file for further details.</P>

<H2>Programming Examples</H2>

<UL CLASS=CL>
 
<TABLE CLASS=BOX WIDTH="100%" ALIGN=CENTER BORDER CELLSPACING=2 CELLPADDING=3 >

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_ain.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Sending MIDI events on pot movements</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_mapped.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Sending mapped MIDI events on pot movements</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_range.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Scaling pot values</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_ain_takeover.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Realising a Soft-Takeover function for pots</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_din.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Sending MIDI events on button movements</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_set_dout.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Controlling 128 LEDs via MIDI</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_enc_rel.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Sending relative MIDI events on rotary encoder movements</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_enc_abs7.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Sending 7bit MIDI events on rotary encoder movements</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_send_enc_abs14.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Sending 14bit NRPN events on rotary encoder movements</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_handle_mf.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>A simple handler for motorfaders</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_filter_cc.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Filtering every MIDI Event except Bn 07 xx (Volume Controllers)</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_forward_chn1.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Only forward events of Channel #1</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_cc_to_nrpn.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Converting CC to NRPN</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_nrpn_to_cc.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Converting NRPN to CC</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_pic_pin.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Driving PIC pins via MIDI</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_lcd_out.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Printing values on a LCD</SPAN></TD>
  </TR>

  <TR>
    <TD WIDTH=30><SPAN CLASS=BIG><A HREF="mios_c_lcd_schars.html">CODE</A></SPAN></TD>
    <TD><SPAN CLASS=NORM>Using special characters on a LCD</SPAN></TD>
  </TR>

</TABLE>

FOOTER

