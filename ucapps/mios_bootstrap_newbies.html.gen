HEADER 3 MIOS Bootstrap Loader for Newbies

<H1>MIOS Bootstrap Loader for Newbies</H1>

<P CLASS=INFO>The MIOS Bootstrap Loader is a special firmware for the PIC18F which allows you to upload <A HREF="mios.html">MIOS</A> (the operating system) and a MIOS application (the program) into the PIC flash memory via the MIDI interface.</P>

<P CLASS=DESC>The big advantage of the bootstrap method is, that you don't need a programming device like the <A HREF="mbhp_burner.html">MBHP_BURNER</A> to install the software on your MIDIbox, instead you can buy a preprogrammed PIC18F452 from <A HREF="http://mbhp.avishowtech.com/buy.html" TARGET="_blank">SmashTV</A> or <A HREF="http://www.mikes-elektronikseite.com/midiseite.htm" TARGET="_blank">Mike</A>, or you can ask a friend or a member of the <A HREF="http://forum.midibox.org" TARGET="_blank">MIDIbox Forum</A> who already owns a PIC programmer for burning the firmware into the PIC (the memory image can be downloaded from <A HREF="mios_download.html">this page</A>).</P>

<P CLASS=DESC>Even for people who own a flash programmer, the bootstrap loader brings benefit, because the usage is more comfortable; it's possible to upload new code on-the-fly without unplugging the PIC from the <A HREF="mbhp_core.html">MBHP_CORE</A> module within a few number of seconds!</P>

<P CLASS=DESC><B>Note:</B> please never try to upload the .hex file of Bootloader V1.2 via MIDI, there are cases which can lead to a permanent failure, so that the PIC needs to be reprogrammed. The README.TXT in the upload package describes several update pathes for Bootloader V1.2, please read it carefully!</P>

<H2>Take two</H2>

<P CLASS=DESC>In fact two bootstrap loaders do exist, one with a very basic functionality, which gets active for ca. 2 seconds after a power-on, and a secondary loader, which is part of MIOS itself. The communication protocol of both loaders is identical, accordingly the same tools can be used.</P>

<P CLASS=DESC>It's important to know, that MIOS itself can only be uploaded with the primary loader. Applications can always be uploaded - if not, there is an error in the application which prevents this, but in this case you could just use the primary loader in order to refresh the code under safe conditions (just power-off/power-on the core or trigger the external reset by tipping ground to pin #1 of the PIC).</P>

<H2>Uploading MIOS</H2>

<P CLASS=DESC>After the bootstrap firmware has been programmed into the PIC, the core won't do that much. For example, the LCD will stay blank, and even if you would try to upload an application via MIDI, nothing would change. This is because MIOS is missing which provides all the basic services (e.g. MIDI protocol handling, Pot/Button/Encoder scanning, LED and LCD output, etc), so let's upload this nice piece of software first!</P>

<TABLE ALIGN=CENTER CELLSPACING=20 CELLPADDING=0>

  <TR>
    <TD><A HREF="mios_download.html" TARGET="_blank"><IMG SRC="images/midibox_logo.gif" WIDTH=160 ALT="Link to MIOS Studio"></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> <A HREF="mios_download.html" TARGET="_blank">Download MIOS Studio</A> - this is a Java based environment with MIOS specific tools which runs on PCs and Macs.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="http://java.sun.com" TARGET="_blank"><IMG SRC="mios/mios_download_java.gif" WIDTH=163 HEIGHT=84 ALT="Link to java.sun.com"></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM> Download the <A HREF="http://java.sun.com" TARGET="_blank">Java Runtime Environment</A> for your computer if it isn't installed yet.<BR>
     MacOS users need to install a com.apple.audio.midi replacement like mmj, Plumstone or Mandolane as described in the <A HREF="http://www.midibox.org/dokuwiki/doku.php?id=mios_studio" TARGET="_blank">Wiki</A></SPAN></TD>
  </TR>

  <TR>
    <TD>&nbsp;</TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Crossconnected the MIDI ports of the core module with the MIDI ports of your computer:
<UL CLASS=CL>
  <LI>MIDI In Core -> MIDI Out PC/Mac</LI>
  <LI>MIDI Out Core -> MIDI In PC/Mac</LI>
</UL></SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="mios/mios_studio1.gif"><IMG SRC="mios/mios_studio1_small.gif" WIDTH=160 HEIGHT=128 ALT=""></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Open the MIDI Device Routing window of MIOS Studio, Right-click on the MIDI In Port of your MIDI device, and route it to "MIOS Studio In Port"</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="mios/mios_studio2.gif"><IMG SRC="mios/mios_studio2_small.gif" WIDTH=160 HEIGHT=128 ALT=""></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Right-click on the MIDI Out Port of the MIDI device, and route it to "MIOS Studio Out port". Now the tools of MIOS Studio can communicate with the core.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="mios/mios_studio3.gif"><IMG SRC="mios/mios_studio3_small.gif" WIDTH=160 HEIGHT=128 ALT=""></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM></SPAN>Open the MIDI In Monitor - it will propably display periodically repeating SysEx messages, which are received each 2 seconds. This is an "upload request" from the primary bootstrap loader. The loader sends this request each time after power-on to say "I'm up and running". Once you've uploaded MIOS, only a single request will sent after power-on. This identicates, that the operating system is installed properly.</SPAN></TD>
  </TR>

  <TR>
    <TD>&nbsp;</TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>If you don't see the upload request, then please read the <A HREF="howto_debug_midi.html">MIDI troubleshooting guide</A>, which is a collection of typical problems.</SPAN></TD>
  </TR>

  <TR>
    <TD><A HREF="mios/mios_studio4.gif"><IMG SRC="mios/mios_studio4_small.gif" WIDTH=160 HEIGHT=128 ALT=""></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>Presumed, that you can see the request message, open the upload window and select the memory image (.hex file) of the most recent MIOS release. Although this snapshot shows mios_v1_8.hex, a new version could be available in the meantime. Please always use the latest release!<BR>MIOS as well as the applications can be downloaded from <A HREF="mios_download.html">this page</A>.</SPAN></TD>
  </TR>

</TABLE>

<P CLASS=DESC>If no error has been reported by the upload tool (to ensure this, scroll up the log window and check all status messages), it can be assumed that MIOS is installed. After the reboot, you should only see one upload request. If a LCD is connected to the core, a copyright message, and short time later a READY. should appear on the screen.</P>

<H2>Uploading an application</H2>

<P CLASS=DESC>Now you can upload an application, just while MIOS is running. You can exchange the application whenever you want, the system will always reboot after the upload (thats not an error), so that the application can be initialized properly. Note that it is not possible to run multiple applications in parallel - a new application will always overwrite the old one.</P>

<TABLE ALIGN=CENTER CELLSPACING=20 CELLPADDING=0>

  <TR>
    <TD><A HREF="mios/mios_studio6.gif"><IMG SRC="mios/mios_studio6_small.gif" WIDTH=160 HEIGHT=128 ALT=""></A></TD>
    <TD><IMG SRC="images/1x1dot.gif" width=10 ALT=""></TD>
    <TD><SPAN CLASS=NORM>In this example, the main.hex file of <A HREF="midimon.html">MIDImon</A> is uploaded. The LCD will display all incoming MIDI events - it's nice for debugging MIDI instruments without a computer.</SPAN></TD>
  </TR>

</TABLE>

<P CLASS=DESC>With the <A HREF="midimon.html">MIDImon</A> application you will face a new issue - hardware configuration! The application cannot determine, which LCD is connected to the core. By default it is configured for big 4x20 LCDs, if only a 2x16 LCD is connected, some parts of the trace messages won't be visible. However, the programmer of this application was kind enough to integrate some hardware options into the program. Such options can mostly be found in the main.asm file of assembly based apps, and in the main.h file of C based applications (sometimes there is also a README.txt which gives a basic overview). <A HREF="howto_tools_gpasm.html">This HowTo</A> describes the required procedure to edit the code and to build a new .hex file.</P>

<H2>Additional Hints</H2>

<P CLASS=DESC>
<UL CLASS=CL>
  <LI>If you upload an application which reacts on the analog input lines of the PIC or an AIN module (e.g. <A HREF="midibox64.html">MIDIbox64</A> or <A HREF="midibox_lc.html">MIDIbox LC</A>), the core will propably send a lot of random MIDI events so long no pots/faders or other voltage sources are connected to the analog inputs - therefore all unusued analog inputs should always be clamped to ground.<BR>
Please refer to <A HREF="mbhp/auaimbctg.pdf">this wiring diagram</A> for a better understanding.</LI>
  <LI>if multiple cores are connected to a single MIDI port in parallel or in a chain, each core should get it's unique device ID, so that the upload tool can address the code to the right receiver. The device ID is part of the ID header, which can only be modified during the flash programming of the bootstrap loader, or with the <A HREF="mios_download.html">change_id</A> application.<BR>
The device ID selected in the upload window must match with the device ID of the core which should response to the transfer.<BR>
This means in other words: after the MIOS device ID has been modified by the change_id application, the ID in the MIOS Studio Upload Window has to be changed as well, so that it matches with the new ID value.<BR>
So long only one MIDIbox is connected to the MIDI port, it's safe to use device ID 00. A project where different device IDs are required is the MIDIbox SID (the master gets the ID 00, the slaves the IDs 01, 02 and 03)</LI>
  <LI>Especially MIDIbox SID users will notice the problem, that the MIDI Outs of the slaves are not connected to the PC (only the MIDI Out of the master core). Accordingly, the upload tool of MIOS studio won't continue after the first code block has been transfered, since it doesn't get a response.<BR>
There are two adequate solutions to overcome this:
  <UL CLASS=CL>
    <LI><B>the Newbie method:</B> plug the slave PIC into the master core socket and program it in the same way like you did for the master PIC. Only differences: you have to pick another .hex file, and you need to change the device ID. This has the advantage, that you can also ensure that the software is installed properly with the master core/SID as a "reference".</LI>
    <LI><B>the Expert method:</B> select the "Don't use feedback from core" option in the upload window of MIOS Studio, ensure that you've loaded the right .hex file and you've selected the right device ID. Enable the MIDI merger of the master by pressing the Link button on the control surface (if you haven't built it yet, you should prefer the newbie method), and press the start button - MIOS Studio will send all code blocks without waiting for a response. This method is easy to handle, but also dangerous if a block hasn't been received completely (e.g. on an unstable MIDI connection), because you won't get a notification. Therefore please select "Use feedback from core" so long a bidirectional connection is possible.</LI>
  </UL></LI>
  <LI>If MIOS Studio doesn't work on your computer for some reasons, then you could use the hex2syx script in order to upload code with a common MIDI monitor. More infos <A HREF="howto_tools_hex2syx.html">at this page</A>.
</UL>
</P>

FOOTER
