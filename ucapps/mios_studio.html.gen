HEADER 3 MIOS Studio 2

<H1>MIOS Studio 2</H1>

<CENTER><IMG SRC="mios_studio/mios_studio.png" width=803 height=676></CENTER></P>

<P CLASS=INFO>MIOS Studio 2 is a <A HREF="http://www.rawmaterialsoftware.com/juce.php" TARGET="_blank">Juce</A> based, platform-independent MIDI processing environment which allows to upload an application binary to a <A HREF="mbhp_core.html">MIOS8</A>, <A HREF="mbhp_core_stm32.html">STM32</A> and <A HREF="mbhp_core_lpc17.html">LPC17</A> core. It also provides MIDI monitors, a virtual MIDI keyboard, a terminal to communicate with MIOS32 applications (partly also used by MIOS8 applications), a SysEx transfer tool and configuration tools for <A HREF="midio128.html">MIDIO128</A> and <A HREF="midibox_cv.html">MIDIbox CV</A>, a SysEx Librarian and a Filebrowser.</P>


<H2>Four simple steps to upload a MIOS application</H2>
<P CLASS=INFO>Start MIOS Studio and select the IN (1) and OUT (2) port of the MIDI interface to which you core module is connected:
<CENTER><IMG SRC="mios_studio/mios_studio_4steps.png" width=802 height=386></CENTER></P>

<P CLASS=INFO>MIOS Studio will automatically try to contact the core whenever a new MIDI port has been selected, and determine the run state. The detected application will be displayed in the query window.</P>

<P CLASS=INFO>You can repeat this check by pressing the Query button.</P>

<P CLASS=INFO>Select the .hex file you want to upload by pressing the browser button (3).</P>

<P CLASS=INFO>Thereafter press the start button to upload the binary (4).</P>

<P CLASS=INFO><B>DONE!</B> - if the upload should fail, please continue at the <A HREF="howto_debug_midi.html">MIDI troubleshooting guide</A>.


<H2>MIOS Terminal</H2>

<P CLASS=INFO>The MIOS Terminal is a very helpful debugging tool for MIOS32 applications. It displays strings which are sent with the <A HREF="http://midibox.org/mios32/manual/group___m_i_o_s32___m_i_d_i.html#gf5287553167123159564141481c02146" TARGET="_blank">MIOS32_MIDI_SendDebugMessage</A> or <A HREF="http://midibox.org/mios32/manual/group___m_i_o_s32___m_i_d_i.html#g29d708043a134724a68a9dad3c8e897b" TARGET="_blank">MIOS32_MIDI_SendDebugHexDump</A> function.</P>

<P CLASS=INFO>Some MIOS32 applications even provide an interactive command interface:</P>

<CENTER><IMG SRC="mios_studio/mios_studio_terminal32.png" width=802 height=218></CENTER></P>

<P CLASS=INFO>A small number of MIOS8 applications are sending messages to the terminal as well, e.g. to give you instructions for testing pin connections:</P>

<CENTER><IMG SRC="mios_studio/mios_studio_terminal8.png" width=801 height=331></CENTER></P>

<P CLASS=INFO>Note: MIOS8 won't respond to a command string sent to the PIC microcontroller. This feature is provided by MIOS32 only!</P>


<H2>SysEx Tool</H2>

<P CLASS=INFO>A simple SysEx upload/download/load/save/edit tool which should be self-explaining:
<CENTER><IMG SRC="mios_studio/mios_studio_sysex.png" width=863 height=529></CENTER></P>


<H2>SysEx Librarian</H2>

<P CLASS=INFO>The SysEx Librarian allows to upload/download/load/save/organize banks of various MIDIboxes (and other MIDI devices):
<CENTER><IMG SRC="mios_studio/mios_studio_sysex_lib2.png" width=727 height=550></CENTER></P>

<P CLASS=INFO>Beside of the classic send/receive/load/save functions for banks/patches/buffers (current patch), it provides a "Transaction" and "Assembly" bank. The Assembly bank is a temporal storage which allows to compose a new bank from different .syx files or received dumps. Once it's ready, the Transaction bank can be completely cleared, the Assembly bank can be moved into the Transaction bank, and then stored into a new .syx file, and/or transfered to the MIDIbox</P>

<P CLASS=INFO><B>IMPORTANT:</B>
<UL CLASS=CL>
  <LI>for handling MIDIbox SID patches correctly, you need firmware version v2.041 or higher!</LI>
  <LI>for handling MIDIbox 808/Dr patches correctly, you need firmware version v1.3 or higher!</LI>
</UL>

<H2>OSC Tool</H2>

<P CLASS=INFO>This tool allows you to send and receive OSC datagrams:
<CENTER><IMG SRC="mios_studio/mios_studio_osc.png" width=853 height=553></CENTER></P>

<P CLASS=INFO>Similar to the SysEx window, there is one frame to enter data that should be sent, and another frame which displays received messages.</P>

<P CLASS=INFO>Enter the remote host and port over which datagrams should be sent. You can either enter the IP address or the host name of the host that should receive outgoing data (such as "localhost" to send data internally on your PC/Mac).</P>

<P CLASS=INFO>The local port is the one which receives OSC datagrams from any IP. It's allowed to set the local port to the same number as the remote port if your application requires this.</P>

<P CLASS=INFO>E.g., by setting remote host to "localhost", and both ports (remote and local) to "10000", outgoing datagrams will be received like on a loopback.</P>

<P CLASS=INFO>The send window supports multiple OSC messages sent in a bundle. The syntax for entering datagrams is the same as displayed by the receive window.</P>

<P CLASS=INFO>Here some examples. To improve the readability, we always take /foo/bar as the free definable path, and we leave out the timestamp (which can optionally be specified by writing @&lt;seconds&gt;.&lt;fraction&gt; before the path.
<UL CLASS=CL>
  <LI><B>/foo/bar i1234</B> sends the integer value 1234 (int32)
  <LI><B>/foo/bar f0.42</B> sends the floating value 0.42 (float32)
  <LI><B>/foo/bar sHello!</B> sends the string "Hello!"
  <LI><B>/foo/bar SHello!</B> sends the alternate string "Hello!"
  <LI><B>/foo/bar b4:12345678</B> sends a "blob" with length of 4 bytes, values 0x12, 0x34, 0x56, 0x78
  <LI><B>/foo/bar h123456789012345678</B> sends an integer value with double resolution (int64)
  <LI><B>/foo/bar d3.1415927</B> sends the floaing value with double resolution (float64)
  <LI><B>/foo/bar t100.2</B> sends the timetag 100 (seconds) 2 (fraction)
  <LI><B>/foo/bar cX</B> sends the ASCII character X
  <LI><B>/foo/bar r8899AAFF</B> sends the RGB value (numbers in hexadecimal format)
  <LI><B>/foo/bar m903C7F00</B> sends a MIDI events (numbers in hexadecimal format, 8 digits required!)
  <LI><B>/foo/bar T</B> sends "TRUE"
  <LI><B>/foo/bar F</B> sends "FALSE"
  <LI><B>/foo/bar N</B> sends "NIL"
  <LI><B>/foo/bar I</B> sends "Infinitum"
  <LI><B>/foo/bar [</B> sends "Beginning of Array"
  <LI><B>/foo/bar ]</B> sends "End of Array"
</UL>


<H2>MIDIO128 Tool</H2>

<P CLASS=INFO>Allows you to configure the (old, PIC based) <A HREF="midio128_v2.html">MIDIO128 V2</A> application:
<CENTER><IMG SRC="mios_studio/mios_studio_midio128.png" width=862 height=528></CENTER></P>


<H2>MIDIbox CV Tool</H2>

<P CLASS=INFO>Allows you to configure the <A HREF="midibox_cv.html">MIDIbox CV V1</A> application:
<CENTER><IMG SRC="mios_studio/mios_studio_mbcv.png" width=862 height=293></CENTER></P>


<H2>MIOS Filebrowser</H2>

<P CLASS=INFO>The Filebrowser allows to access a SD Card, which is connected to a MIOS32 based core, via USB MIDI:
<CENTER><IMG SRC="mios_studio/mios_studio_filebrowser.png" width=952 height=550></CENTER></P>

<P CLASS=INFO>It's for example supported by <A HREF="midibox_seq.html">MIDIbox SEQ</A>, <A HREF="midio128.html">MIDIO128</A>, <A HREF="midibox_ng.html">MIDIbox NG</A>, and by all future applications which get use of a SD Card to store informations.</P>

<P CLASS=INFO>The "Update" button retrieves the directory structure. Once it has been read, files and directories can be selected in the directory tree.<BR>
Existing files can be downloaded to your computer at a speed of ca. 40..50 kb/s.<BR>
New files can be uploaded from your computer at a speed of ca. 10..20 kb/s.<BR>
The edit functions allow to modify files in text or binary (hex) format, which is really helpful for quick changes on application specific configuration files without disconnecting the SD Card from the core, or enabling the MSD driver (which would deactivate USB MIDI).</P>


<H2>Download</H2>

<P CLASS=INFO>
<UL CLASS=CL>
  <LI><A HREF="mios_studio/MIOS_Studio_2_4_2.zip">MIOS_Studio_2_4_2 for WinXP/Vista/Win7/Win8</A>
  <LI><A HREF="mios_studio/MIOS_Studio_2_4_2.app.zip">MIOS_Studio_2_4_2.app for MacOS 10.6 (Snow Leopard), 10.7 (Lion) and 10.8 (Mountain Lion)</A>
  <LI><A HREF="mios_studio/MIOS_Studio_2_4_2.tar.gz">MIOS_Studio_2_4_2 for Linux (compiled under Ubuntu 10)</A>
</UL>

<H2>Source Code</H2>

<P CLASS=INFO>The source code is available in the <A HREF="http://svnmios.midibox.org/listing.php?repname=svn.mios32&path=%2Ftrunk%2Ftools%2Fmios_studio%2F" TARGET="_blank">SVN Repository</A>. It requires the Juce v1.52 release to compile.</P>

<H2>Known Issues</H2>

<P CLASS=INFO>Firstly it should be highlighted, that the Juce based MIOS Studio 2 solved all MIDI uploading issues of V1 which were mainly related to the MIDI API of Java implemented by Sun and Apple (or third party vendors)!</P>

<P CLASS=INFO>Currently there is only one known issue:
<UL CLASS=CL>
<LI><B>Windows7 64bit:</B> the SysEx communication gets stucked if a MIOS32 core opens more than one USB port (like MIDIbox SEQ V4).<BR>
<B>Workarounds</B> ensure that your are using MIOS32 Bootloader V1.010 or higher, and install the <A HREF="mios32_download.html">GM5 device driver</A>. Alternatively you could install the Korg USB driver as reported <A HREF="http://midibox.org/forums/topic/16072-alternative-usb-midi-driver-for-windows-7-64bit/" TARGET="_blank">here</A>, but the GM5 driver seems to be better.
</UL>


FOOTER
