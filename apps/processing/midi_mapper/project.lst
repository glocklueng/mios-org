gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-22-2008  19:59:42
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ; $Id: mios_wrapper.asm 63 2008-01-31 20:44:17Z tk $
                                           ;
                                           ; This is the MIOS wrapper for SDCC (qualified for v2.5.0 and v2.6.0)
                                           ;
                                           ; the upper boundary of the stacks are defined here 
                                           ; customize the values for your needs
                                           #ifndef STACK_HEAD
                                           #define STACK_HEAD 0x37f
                                           #endif
                                           
                                           #ifndef STACK_IRQ_HEAD
                                           #define STACK_IRQ_HEAD 0x33f
                                           #endif
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; ---[ MIOS header file ]---
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           
                                           ;; ---[ vectors to MIOS functions (never change!) ]---
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           
                                           ;; ---[ user hooks (never change!) ]---
                                           #include <user_vectors.inc>
                                           ; $Id: user_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; User vectortable - contains user hooks to MIOS
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           	;; never change the origin or the order of entries!
                                           	org	0x3000
                                           _User_Init
003000   ef05     goto	0x420a              	goto	USER_Init
003002   f021
                                           _USER_Tick
003004   ef0b     goto	0x4216              	goto	USER_Tick
003006   f021
                                           _USER_Timer
003008   ef11     goto	0x4222              	goto	USER_Timer
00300a   f021
                                           _USER_MPROC_DebugTrigger
00300c   ef20     goto	0x4240              	goto	USER_MPROC_DebugTrigger
00300e   f021
                                           _USER_DISPLAY_Init
003010   ef21     goto	0x4242              	goto	USER_DISPLAY_Init
003012   f021
                                           _USER_DISPLAY_Tick
003014   ef27     goto	0x424e              	goto	USER_DISPLAY_Tick
003016   f021
                                           _USER_SR_Service_Prepare
003018   ef63     goto	0x42c6              	goto	USER_SR_Service_Prepare
00301a   f021
                                           _USER_SR_Service_Finish
00301c   ef72     goto	0x42e4              	goto	USER_SR_Service_Finish
00301e   f021
                                           _USER_DIN_NotifyToggle
003020   ef53     goto	0x42a6              	goto	USER_DIN_NotifyToggle
003022   f021
                                           _USER_ENC_NotifyChange
003024   ef5b     goto	0x42b6              	goto	USER_ENC_NotifyChange
003026   f021
                                           _USER_AIN_NotifyChange
003028   ef81     goto	0x4302              	goto	USER_AIN_NotifyChange
00302a   f021
                                           _USER_MPROC_NotifyReceivedByte
00302c   ef4b     goto	0x4296              	goto	USER_MPROC_NotifyReceivedByte
00302e   f021
                                           _USER_MPROC_NotifyTimeout
003030   ef45     goto	0x428a              	goto	USER_MPROC_NotifyTimeout
003032   f021
                                           _USER_MPROC_NotifyReceivedEvent
003034   ef2d     goto	0x425a              	goto	USER_MPROC_NotifyReceivedEvent
003036   f021
                                           _USER_MPROC_NotifyFoundEvent
003038   ef38     goto	0x4270              	goto	USER_MPROC_NotifyFoundEvent
00303a   f021
                                           _USER_LCD_Init
00303c   ef1d     goto	0x4a3a              	goto	USER_LCD_Init
00303e   f025
                                           _USER_LCD_Clear
003040   ef1e     goto	0x4a3c              	goto	USER_LCD_Clear
003042   f025
                                           _USER_LCD_CursorSet
003044   ef1f     goto	0x4a3e              	goto	USER_LCD_CursorSet
003046   f025
                                           _USER_LCD_PrintChar
003048   ef20     goto	0x4a40              	goto	USER_LCD_PrintChar
00304a   f025
                                           _USER_MIDI_NotifyRx
00304c   ef52     goto	0x42a4              	goto	USER_MIDI_NotifyRx
00304e   f021
                                           _USER_MIDI_NotifyTx
003050   ef51     goto	0x42a2              	goto	USER_MIDI_NotifyTx
003052   f021
                                           _USER_LCD_Data
003054   ef21     goto	0x4a42              	goto	USER_LCD_Data
003056   f025
                                           _USER_LCD_Cmd
003058   ef22     goto	0x4a44              	goto	USER_LCD_Cmd
00305a   f025
                                           _USER_LCD_SpecialCharInit
00305c   ef23     goto	0x4a46              	goto	USER_LCD_SpecialCharInit
00305e   f025
                                           USER_RESERVED_25
003060   0012     return	0                 	return
003062   0000     nop                      	nop
                                           USER_RESERVED_26
003064   0012     return	0                 	return
003066   0000     nop                      	nop
                                           USER_RESERVED_27
003068   0012     return	0                 	return
00306a   0000     nop                      	nop
                                           USER_RESERVED_28
00306c   0012     return	0                 	return
00306e   0000     nop                      	nop
                                           USER_RESERVED_29
003070   0012     return	0                 	return
003072   0000     nop                      	nop
                                           USER_RESERVED_30
003074   0012     return	0                 	return
003076   0000     nop                      	nop
                                           USER_RESERVED_31
003078   0012     return	0                 	return
00307a   0000     nop                      	nop
                                           USER_RESERVED_32
00307c   0012     return	0                 	return
00307e   0000     nop                      	nop
                                           
                                           ;; ==========================================================================
                                           ;;  General Application Settings
                                           ;; ==========================================================================
                                           
                                           ;; ---[ configuration table for MIDI processor ]---
                                           #ifndef DONT_INCLUDE_MIOS_MT_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use MT entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_MT_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_MT_TABLE {
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x10), // CC#16
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x11), // CC#17
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x12), // CC#18
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x13), // CC#19
                                           ;;   MIOS_MT_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           ;; 
                                           ;; Note that due to the inflexibility of the MT Table concept, it isn't
                                           ;; recommented for new designs
                                           #include <mios_mt_table.inc>
                                           ; $Id: mios_mt_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" MIDI Trigger Configuaration Table
                                           ; 
                                           ; Should be included by the application, if the MIDI processor feature
                                           ; is not used in order to pre-initialize the table area with EOT's
                                           ;
                                           ; Note: due to the inflexible concept (e.g. handling of Note On/Off events),
                                           ; the usage of this function is not recommented for new designs - please parse 
                                           ; MIDI events locally within the application.
                                           ;
                                           ;
                                           	org	0x3080		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; The MIDI Trigger table maps incoming MIDI events to control elements
                                           ;; (pots/faders, encoders, buttons, LEDs, ...)
                                           ;; 
                                           ;; After the MIOS MIDI processor (MPROC) has received a complete event, it
                                           ;; searches in this table for a matching entry and calls USER_MPROC_NotifyFoundEvent
                                           ;; with the table index in WREG and the MIDI event in MIOS_PARAMETER[123]
                                           ;; 
                                           ;; Note also that the MIDI processor stops scanning the table after
                                           ;; the first MT_EOT entry
                                           ;; 
                                           ;; Note2: never change the origin (memory location) of this table!
                                           ;; 
                                           ;; Optionally this table can also be used to define events, which should be
                                           ;; transmitted (Example: see example_ain64_din128_dout128), so that incoming
                                           ;; and outgoing events are located at one place
                                           ;; 
                                           ;; The table *must* contain 256 entries. Unused entries should be filled with
                                           ;; MT_EOT.
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; MIDI Trigger entry structure
                                           MT_ENTRY MACRO event_0, event_1
                                           	dw	(event_1 << 8) | event_0
                                           	ENDM
                                           
                                           MT_EOT	MACRO
003080   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003082   ffff     dw	0xffff  ;unknown opcode 
003084   ffff     dw	0xffff  ;unknown opcode 
003086   ffff     dw	0xffff  ;unknown opcode 
003088   ffff     dw	0xffff  ;unknown opcode 
00308a   ffff     dw	0xffff  ;unknown opcode 
00308c   ffff     dw	0xffff  ;unknown opcode 
00308e   ffff     dw	0xffff  ;unknown opcode 
003090   ffff     dw	0xffff  ;unknown opcode 
003092   ffff     dw	0xffff  ;unknown opcode 
003094   ffff     dw	0xffff  ;unknown opcode 
003096   ffff     dw	0xffff  ;unknown opcode 
003098   ffff     dw	0xffff  ;unknown opcode 
00309a   ffff     dw	0xffff  ;unknown opcode 
00309c   ffff     dw	0xffff  ;unknown opcode 
00309e   ffff     dw	0xffff  ;unknown opcode 
0030a0   ffff     dw	0xffff  ;unknown opcode 
0030a2   ffff     dw	0xffff  ;unknown opcode 
0030a4   ffff     dw	0xffff  ;unknown opcode 
0030a6   ffff     dw	0xffff  ;unknown opcode 
0030a8   ffff     dw	0xffff  ;unknown opcode 
0030aa   ffff     dw	0xffff  ;unknown opcode 
0030ac   ffff     dw	0xffff  ;unknown opcode 
0030ae   ffff     dw	0xffff  ;unknown opcode 
0030b0   ffff     dw	0xffff  ;unknown opcode 
0030b2   ffff     dw	0xffff  ;unknown opcode 
0030b4   ffff     dw	0xffff  ;unknown opcode 
0030b6   ffff     dw	0xffff  ;unknown opcode 
0030b8   ffff     dw	0xffff  ;unknown opcode 
0030ba   ffff     dw	0xffff  ;unknown opcode 
0030bc   ffff     dw	0xffff  ;unknown opcode 
0030be   ffff     dw	0xffff  ;unknown opcode 
0030c0   ffff     dw	0xffff  ;unknown opcode 
0030c2   ffff     dw	0xffff  ;unknown opcode 
0030c4   ffff     dw	0xffff  ;unknown opcode 
0030c6   ffff     dw	0xffff  ;unknown opcode 
0030c8   ffff     dw	0xffff  ;unknown opcode 
0030ca   ffff     dw	0xffff  ;unknown opcode 
0030cc   ffff     dw	0xffff  ;unknown opcode 
0030ce   ffff     dw	0xffff  ;unknown opcode 
0030d0   ffff     dw	0xffff  ;unknown opcode 
0030d2   ffff     dw	0xffff  ;unknown opcode 
0030d4   ffff     dw	0xffff  ;unknown opcode 
0030d6   ffff     dw	0xffff  ;unknown opcode 
0030d8   ffff     dw	0xffff  ;unknown opcode 
0030da   ffff     dw	0xffff  ;unknown opcode 
0030dc   ffff     dw	0xffff  ;unknown opcode 
0030de   ffff     dw	0xffff  ;unknown opcode 
0030e0   ffff     dw	0xffff  ;unknown opcode 
0030e2   ffff     dw	0xffff  ;unknown opcode 
0030e4   ffff     dw	0xffff  ;unknown opcode 
0030e6   ffff     dw	0xffff  ;unknown opcode 
0030e8   ffff     dw	0xffff  ;unknown opcode 
0030ea   ffff     dw	0xffff  ;unknown opcode 
0030ec   ffff     dw	0xffff  ;unknown opcode 
0030ee   ffff     dw	0xffff  ;unknown opcode 
0030f0   ffff     dw	0xffff  ;unknown opcode 
0030f2   ffff     dw	0xffff  ;unknown opcode 
0030f4   ffff     dw	0xffff  ;unknown opcode 
0030f6   ffff     dw	0xffff  ;unknown opcode 
0030f8   ffff     dw	0xffff  ;unknown opcode 
0030fa   ffff     dw	0xffff  ;unknown opcode 
0030fc   ffff     dw	0xffff  ;unknown opcode 
0030fe   ffff     dw	0xffff  ;unknown opcode 
003100   ffff     dw	0xffff  ;unknown opcode 
003102   ffff     dw	0xffff  ;unknown opcode 
003104   ffff     dw	0xffff  ;unknown opcode 
003106   ffff     dw	0xffff  ;unknown opcode 
003108   ffff     dw	0xffff  ;unknown opcode 
00310a   ffff     dw	0xffff  ;unknown opcode 
00310c   ffff     dw	0xffff  ;unknown opcode 
00310e   ffff     dw	0xffff  ;unknown opcode 
003110   ffff     dw	0xffff  ;unknown opcode 
003112   ffff     dw	0xffff  ;unknown opcode 
003114   ffff     dw	0xffff  ;unknown opcode 
003116   ffff     dw	0xffff  ;unknown opcode 
003118   ffff     dw	0xffff  ;unknown opcode 
00311a   ffff     dw	0xffff  ;unknown opcode 
00311c   ffff     dw	0xffff  ;unknown opcode 
00311e   ffff     dw	0xffff  ;unknown opcode 
003120   ffff     dw	0xffff  ;unknown opcode 
003122   ffff     dw	0xffff  ;unknown opcode 
003124   ffff     dw	0xffff  ;unknown opcode 
003126   ffff     dw	0xffff  ;unknown opcode 
003128   ffff     dw	0xffff  ;unknown opcode 
00312a   ffff     dw	0xffff  ;unknown opcode 
00312c   ffff     dw	0xffff  ;unknown opcode 
00312e   ffff     dw	0xffff  ;unknown opcode 
003130   ffff     dw	0xffff  ;unknown opcode 
003132   ffff     dw	0xffff  ;unknown opcode 
003134   ffff     dw	0xffff  ;unknown opcode 
003136   ffff     dw	0xffff  ;unknown opcode 
003138   ffff     dw	0xffff  ;unknown opcode 
00313a   ffff     dw	0xffff  ;unknown opcode 
00313c   ffff     dw	0xffff  ;unknown opcode 
00313e   ffff     dw	0xffff  ;unknown opcode 
003140   ffff     dw	0xffff  ;unknown opcode 
003142   ffff     dw	0xffff  ;unknown opcode 
003144   ffff     dw	0xffff  ;unknown opcode 
003146   ffff     dw	0xffff  ;unknown opcode 
003148   ffff     dw	0xffff  ;unknown opcode 
00314a   ffff     dw	0xffff  ;unknown opcode 
00314c   ffff     dw	0xffff  ;unknown opcode 
00314e   ffff     dw	0xffff  ;unknown opcode 
003150   ffff     dw	0xffff  ;unknown opcode 
003152   ffff     dw	0xffff  ;unknown opcode 
003154   ffff     dw	0xffff  ;unknown opcode 
003156   ffff     dw	0xffff  ;unknown opcode 
003158   ffff     dw	0xffff  ;unknown opcode 
00315a   ffff     dw	0xffff  ;unknown opcode 
00315c   ffff     dw	0xffff  ;unknown opcode 
00315e   ffff     dw	0xffff  ;unknown opcode 
003160   ffff     dw	0xffff  ;unknown opcode 
003162   ffff     dw	0xffff  ;unknown opcode 
003164   ffff     dw	0xffff  ;unknown opcode 
003166   ffff     dw	0xffff  ;unknown opcode 
003168   ffff     dw	0xffff  ;unknown opcode 
00316a   ffff     dw	0xffff  ;unknown opcode 
00316c   ffff     dw	0xffff  ;unknown opcode 
00316e   ffff     dw	0xffff  ;unknown opcode 
003170   ffff     dw	0xffff  ;unknown opcode 
003172   ffff     dw	0xffff  ;unknown opcode 
003174   ffff     dw	0xffff  ;unknown opcode 
003176   ffff     dw	0xffff  ;unknown opcode 
003178   ffff     dw	0xffff  ;unknown opcode 
00317a   ffff     dw	0xffff  ;unknown opcode 
00317c   ffff     dw	0xffff  ;unknown opcode 
00317e   ffff     dw	0xffff  ;unknown opcode 
003180   ffff     dw	0xffff  ;unknown opcode 
003182   ffff     dw	0xffff  ;unknown opcode 
003184   ffff     dw	0xffff  ;unknown opcode 
003186   ffff     dw	0xffff  ;unknown opcode 
003188   ffff     dw	0xffff  ;unknown opcode 
00318a   ffff     dw	0xffff  ;unknown opcode 
00318c   ffff     dw	0xffff  ;unknown opcode 
00318e   ffff     dw	0xffff  ;unknown opcode 
003190   ffff     dw	0xffff  ;unknown opcode 
003192   ffff     dw	0xffff  ;unknown opcode 
003194   ffff     dw	0xffff  ;unknown opcode 
003196   ffff     dw	0xffff  ;unknown opcode 
003198   ffff     dw	0xffff  ;unknown opcode 
00319a   ffff     dw	0xffff  ;unknown opcode 
00319c   ffff     dw	0xffff  ;unknown opcode 
00319e   ffff     dw	0xffff  ;unknown opcode 
0031a0   ffff     dw	0xffff  ;unknown opcode 
0031a2   ffff     dw	0xffff  ;unknown opcode 
0031a4   ffff     dw	0xffff  ;unknown opcode 
0031a6   ffff     dw	0xffff  ;unknown opcode 
0031a8   ffff     dw	0xffff  ;unknown opcode 
0031aa   ffff     dw	0xffff  ;unknown opcode 
0031ac   ffff     dw	0xffff  ;unknown opcode 
0031ae   ffff     dw	0xffff  ;unknown opcode 
0031b0   ffff     dw	0xffff  ;unknown opcode 
0031b2   ffff     dw	0xffff  ;unknown opcode 
0031b4   ffff     dw	0xffff  ;unknown opcode 
0031b6   ffff     dw	0xffff  ;unknown opcode 
0031b8   ffff     dw	0xffff  ;unknown opcode 
0031ba   ffff     dw	0xffff  ;unknown opcode 
0031bc   ffff     dw	0xffff  ;unknown opcode 
0031be   ffff     dw	0xffff  ;unknown opcode 
0031c0   ffff     dw	0xffff  ;unknown opcode 
0031c2   ffff     dw	0xffff  ;unknown opcode 
0031c4   ffff     dw	0xffff  ;unknown opcode 
0031c6   ffff     dw	0xffff  ;unknown opcode 
0031c8   ffff     dw	0xffff  ;unknown opcode 
0031ca   ffff     dw	0xffff  ;unknown opcode 
0031cc   ffff     dw	0xffff  ;unknown opcode 
0031ce   ffff     dw	0xffff  ;unknown opcode 
0031d0   ffff     dw	0xffff  ;unknown opcode 
0031d2   ffff     dw	0xffff  ;unknown opcode 
0031d4   ffff     dw	0xffff  ;unknown opcode 
0031d6   ffff     dw	0xffff  ;unknown opcode 
0031d8   ffff     dw	0xffff  ;unknown opcode 
0031da   ffff     dw	0xffff  ;unknown opcode 
0031dc   ffff     dw	0xffff  ;unknown opcode 
0031de   ffff     dw	0xffff  ;unknown opcode 
0031e0   ffff     dw	0xffff  ;unknown opcode 
0031e2   ffff     dw	0xffff  ;unknown opcode 
0031e4   ffff     dw	0xffff  ;unknown opcode 
0031e6   ffff     dw	0xffff  ;unknown opcode 
0031e8   ffff     dw	0xffff  ;unknown opcode 
0031ea   ffff     dw	0xffff  ;unknown opcode 
0031ec   ffff     dw	0xffff  ;unknown opcode 
0031ee   ffff     dw	0xffff  ;unknown opcode 
0031f0   ffff     dw	0xffff  ;unknown opcode 
0031f2   ffff     dw	0xffff  ;unknown opcode 
0031f4   ffff     dw	0xffff  ;unknown opcode 
0031f6   ffff     dw	0xffff  ;unknown opcode 
0031f8   ffff     dw	0xffff  ;unknown opcode 
0031fa   ffff     dw	0xffff  ;unknown opcode 
0031fc   ffff     dw	0xffff  ;unknown opcode 
0031fe   ffff     dw	0xffff  ;unknown opcode 
003200   ffff     dw	0xffff  ;unknown opcode 
003202   ffff     dw	0xffff  ;unknown opcode 
003204   ffff     dw	0xffff  ;unknown opcode 
003206   ffff     dw	0xffff  ;unknown opcode 
003208   ffff     dw	0xffff  ;unknown opcode 
00320a   ffff     dw	0xffff  ;unknown opcode 
00320c   ffff     dw	0xffff  ;unknown opcode 
00320e   ffff     dw	0xffff  ;unknown opcode 
003210   ffff     dw	0xffff  ;unknown opcode 
003212   ffff     dw	0xffff  ;unknown opcode 
003214   ffff     dw	0xffff  ;unknown opcode 
003216   ffff     dw	0xffff  ;unknown opcode 
003218   ffff     dw	0xffff  ;unknown opcode 
00321a   ffff     dw	0xffff  ;unknown opcode 
00321c   ffff     dw	0xffff  ;unknown opcode 
00321e   ffff     dw	0xffff  ;unknown opcode 
003220   ffff     dw	0xffff  ;unknown opcode 
003222   ffff     dw	0xffff  ;unknown opcode 
003224   ffff     dw	0xffff  ;unknown opcode 
003226   ffff     dw	0xffff  ;unknown opcode 
003228   ffff     dw	0xffff  ;unknown opcode 
00322a   ffff     dw	0xffff  ;unknown opcode 
00322c   ffff     dw	0xffff  ;unknown opcode 
00322e   ffff     dw	0xffff  ;unknown opcode 
003230   ffff     dw	0xffff  ;unknown opcode 
003232   ffff     dw	0xffff  ;unknown opcode 
003234   ffff     dw	0xffff  ;unknown opcode 
003236   ffff     dw	0xffff  ;unknown opcode 
003238   ffff     dw	0xffff  ;unknown opcode 
00323a   ffff     dw	0xffff  ;unknown opcode 
00323c   ffff     dw	0xffff  ;unknown opcode 
00323e   ffff     dw	0xffff  ;unknown opcode 
003240   ffff     dw	0xffff  ;unknown opcode 
003242   ffff     dw	0xffff  ;unknown opcode 
003244   ffff     dw	0xffff  ;unknown opcode 
003246   ffff     dw	0xffff  ;unknown opcode 
003248   ffff     dw	0xffff  ;unknown opcode 
00324a   ffff     dw	0xffff  ;unknown opcode 
00324c   ffff     dw	0xffff  ;unknown opcode 
00324e   ffff     dw	0xffff  ;unknown opcode 
003250   ffff     dw	0xffff  ;unknown opcode 
003252   ffff     dw	0xffff  ;unknown opcode 
003254   ffff     dw	0xffff  ;unknown opcode 
003256   ffff     dw	0xffff  ;unknown opcode 
003258   ffff     dw	0xffff  ;unknown opcode 
00325a   ffff     dw	0xffff  ;unknown opcode 
00325c   ffff     dw	0xffff  ;unknown opcode 
00325e   ffff     dw	0xffff  ;unknown opcode 
003260   ffff     dw	0xffff  ;unknown opcode 
003262   ffff     dw	0xffff  ;unknown opcode 
003264   ffff     dw	0xffff  ;unknown opcode 
003266   ffff     dw	0xffff  ;unknown opcode 
003268   ffff     dw	0xffff  ;unknown opcode 
00326a   ffff     dw	0xffff  ;unknown opcode 
00326c   ffff     dw	0xffff  ;unknown opcode 
00326e   ffff     dw	0xffff  ;unknown opcode 
003270   ffff     dw	0xffff  ;unknown opcode 
003272   ffff     dw	0xffff  ;unknown opcode 
003274   ffff     dw	0xffff  ;unknown opcode 
003276   ffff     dw	0xffff  ;unknown opcode 
003278   ffff     dw	0xffff  ;unknown opcode 
00327a   ffff     dw	0xffff  ;unknown opcode 
00327c   ffff     dw	0xffff  ;unknown opcode 
00327e   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           
                                           _MIOS_MPROC_EVENT_TABLE
                                           MIOS_MPROC_EVENT_TABLE
                                           	;; entry 0x00-0x0f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x10-0x1f	
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x20-0x2f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x30-0x3f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x40-0x4f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x50-0x5f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           		
                                           	;; entry 0x60-0x6f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x70-0x7f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x80-0x8f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x90-0x9f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xa0-0xaf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xb1-0xbf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xc0-0xcf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xd0-0xdf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xe0-0xef
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xf0-0xff
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           #endif
                                           
                                           ;; ---[ configuration table for rotary encoders ]---
                                           #ifndef DONT_INCLUDE_MIOS_ENC_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use ENC entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_ENC_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_ENC_TABLE {
                                           ;;              // sr pin mode
                                           ;;   MIOS_ENC_ENTRY(1, 0, MIOS_ENC_MODE_DETENTED), // VPot #1
                                           ;;   MIOS_ENC_ENTRY(1, 2, MIOS_ENC_MODE_DETENTED), // VPot #2
                                           ;;   MIOS_ENC_ENTRY(1, 4, MIOS_ENC_MODE_DETENTED), // VPot #3
                                           ;;   MIOS_ENC_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           #include <mios_enc_table.inc>
                                           ; $Id: mios_enc_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" Configuration Table for Rotary Encoders
                                           ; 
                                           ; Should be included by the application, if no rotary encoders are connected
                                           ; in order to pre-initialize the table area with EOT's
                                           ; 
                                           ; ==========================================================================
                                           
                                           	org	0x3280		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; In this table DIN pins have to be assigned to rotary encoders for the
                                           ;; MIOS_ENC driver 
                                           ;; 
                                           ;; up to 64 entries are provided
                                           ;; 
                                           ;; The table must be terminated with an ENC_EOT entry. Unused entries should
                                           ;; be filled with ENC_EOT
                                           ;; 
                                           ;; ENC_ENTRY provides following parameters
                                           ;;    o first parameter: number of shift register - 1, 2, 3, ... 16
                                           ;;    o second parameter: number of pin; since two pins are necessary
                                           ;;      for each encoder, an even number is expected: 0, 2, 4 or 6
                                           ;;    o the third parameter contains the encoder mode:
                                           ;;      either MIOS_ENC_MODE_NON_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED2
                                           ;;          or MIOS_ENC_MODE_DETENTED3
                                           ;;
                                           ;; Configuration Examples:
                                           ;;    ENC_ENTRY  1,  0,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 0 and 1 of SR 1
                                           ;;    ENC_ENTRY  1,  2,  MIOS_ENC_MODE_DETENTED        ; detented encoder at pin 2 and 3 of SR 1
                                           ;;    ENC_ENTRY  9,  6,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 6 and 7 of SR 9
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; encoder entry structure
                                           ENC_ENTRY MACRO sr, din_0, mode
                                           	dw	(mode << 8) | (din_0 + 8*(sr-1))
                                           	ENDM	
                                           ENC_EOT	MACRO
003280   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003282   ffff     dw	0xffff  ;unknown opcode 
003284   ffff     dw	0xffff  ;unknown opcode 
003286   ffff     dw	0xffff  ;unknown opcode 
003288   ffff     dw	0xffff  ;unknown opcode 
00328a   ffff     dw	0xffff  ;unknown opcode 
00328c   ffff     dw	0xffff  ;unknown opcode 
00328e   ffff     dw	0xffff  ;unknown opcode 
003290   ffff     dw	0xffff  ;unknown opcode 
003292   ffff     dw	0xffff  ;unknown opcode 
003294   ffff     dw	0xffff  ;unknown opcode 
003296   ffff     dw	0xffff  ;unknown opcode 
003298   ffff     dw	0xffff  ;unknown opcode 
00329a   ffff     dw	0xffff  ;unknown opcode 
00329c   ffff     dw	0xffff  ;unknown opcode 
00329e   ffff     dw	0xffff  ;unknown opcode 
0032a0   ffff     dw	0xffff  ;unknown opcode 
0032a2   ffff     dw	0xffff  ;unknown opcode 
0032a4   ffff     dw	0xffff  ;unknown opcode 
0032a6   ffff     dw	0xffff  ;unknown opcode 
0032a8   ffff     dw	0xffff  ;unknown opcode 
0032aa   ffff     dw	0xffff  ;unknown opcode 
0032ac   ffff     dw	0xffff  ;unknown opcode 
0032ae   ffff     dw	0xffff  ;unknown opcode 
0032b0   ffff     dw	0xffff  ;unknown opcode 
0032b2   ffff     dw	0xffff  ;unknown opcode 
0032b4   ffff     dw	0xffff  ;unknown opcode 
0032b6   ffff     dw	0xffff  ;unknown opcode 
0032b8   ffff     dw	0xffff  ;unknown opcode 
0032ba   ffff     dw	0xffff  ;unknown opcode 
0032bc   ffff     dw	0xffff  ;unknown opcode 
0032be   ffff     dw	0xffff  ;unknown opcode 
0032c0   ffff     dw	0xffff  ;unknown opcode 
0032c2   ffff     dw	0xffff  ;unknown opcode 
0032c4   ffff     dw	0xffff  ;unknown opcode 
0032c6   ffff     dw	0xffff  ;unknown opcode 
0032c8   ffff     dw	0xffff  ;unknown opcode 
0032ca   ffff     dw	0xffff  ;unknown opcode 
0032cc   ffff     dw	0xffff  ;unknown opcode 
0032ce   ffff     dw	0xffff  ;unknown opcode 
0032d0   ffff     dw	0xffff  ;unknown opcode 
0032d2   ffff     dw	0xffff  ;unknown opcode 
0032d4   ffff     dw	0xffff  ;unknown opcode 
0032d6   ffff     dw	0xffff  ;unknown opcode 
0032d8   ffff     dw	0xffff  ;unknown opcode 
0032da   ffff     dw	0xffff  ;unknown opcode 
0032dc   ffff     dw	0xffff  ;unknown opcode 
0032de   ffff     dw	0xffff  ;unknown opcode 
0032e0   ffff     dw	0xffff  ;unknown opcode 
0032e2   ffff     dw	0xffff  ;unknown opcode 
0032e4   ffff     dw	0xffff  ;unknown opcode 
0032e6   ffff     dw	0xffff  ;unknown opcode 
0032e8   ffff     dw	0xffff  ;unknown opcode 
0032ea   ffff     dw	0xffff  ;unknown opcode 
0032ec   ffff     dw	0xffff  ;unknown opcode 
0032ee   ffff     dw	0xffff  ;unknown opcode 
0032f0   ffff     dw	0xffff  ;unknown opcode 
0032f2   ffff     dw	0xffff  ;unknown opcode 
0032f4   ffff     dw	0xffff  ;unknown opcode 
0032f6   ffff     dw	0xffff  ;unknown opcode 
0032f8   ffff     dw	0xffff  ;unknown opcode 
0032fa   ffff     dw	0xffff  ;unknown opcode 
0032fc   ffff     dw	0xffff  ;unknown opcode 
0032fe   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           _MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_PIN_TABLE
                                           	;; encoders 1-16
                                           	;;        SR  Pin  Mode
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 17-32
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 33-48
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 49-64
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           #endif
                                           
                                           	org	0x3300		; never change the origin!
                                           
                                           ; Don't enable this --- its only used by a special testcase which checks 
                                           ; parameter passing on functions which are difficult to verify with
                                           ; directed tests
                                           #ifndef PARAMETER_PASSING_TEST
                                           #define PARAMETER_PASSING_TEST 0
                                           #endif
                                           
                                           ;; ==========================================================================
                                           ;;  Export MIOS variables
                                           ;; ==========================================================================
                                           	global	_MIOS_BOX_CFG0
                                           	global	_MIOS_BOX_CFG1
                                           	global	_MIOS_BOX_STAT
                                           	global	_MIOS_PARAMETER1
                                           	global	_MIOS_PARAMETER2
                                           	global	_MIOS_PARAMETER3
                                           
                                           MIOS_VARIABLES		udata	0x0000
                                           _MIOS_BOX_CFG0		res	1
                                           _MIOS_BOX_CFG1		res	1
                                           _MIOS_BOX_STAT		res	1
                                           _MIOS_PARAMETER1	res	1
                                           _MIOS_PARAMETER2	res	1
                                           _MIOS_PARAMETER3	res	1
                                           _TMP1			res	1
                                           _TMP2			res	1
                                           _TMP3			res	1
                                           _TMP4			res	1
                                           _TMP5			res	1
                                           _IRQ_TMP1		res	1
                                           _IRQ_TMP2		res	1
                                           _IRQ_TMP3		res	1
                                           _IRQ_TMP4		res	1
                                           _IRQ_TMP5		res	1
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  USER_LCD_* vectors defined externally in $MIOS_PATH/modules/app_lcd/*/*.asm
                                           ;; ==========================================================================
                                           	extern	USER_LCD_Init
                                           	extern	USER_LCD_Data
                                           	extern	USER_LCD_Cmd
                                           	extern	USER_LCD_Clear
                                           	extern	USER_LCD_CursorSet
                                           	extern	USER_LCD_PrintChar
                                           	extern	USER_LCD_SpecialCharInit
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  All MIOS hooks in one file
                                           ;; ==========================================================================
                                           
                                           MIOS_WRAPPER_CODE	code
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after startup to initialize the 
                                           ;;  application
                                           ;; --------------------------------------------------------------------------
                                           USER_Init
                                           	extern	_Init
                                           
00420a   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00420c   f07f
00420e   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004210   f07f
004212   efb7     goto	0x476e              	goto	_Init	
004214   f023
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS in the mainloop when nothing else is to do
                                           ;; --------------------------------------------------------------------------
                                           USER_Tick
                                           	extern	_Tick
                                           
004216   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
004218   f07f
00421a   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00421c   f07f
00421e   ef8b     goto	0x4316              	goto	_Tick
004220   f021
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is periodically called by MIOS. The frequency has to be
                                           ;;  initialized with MIOS_Timer_Set
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;; --------------------------------------------------------------------------
                                           USER_Timer
                                           	extern	_Timer
                                           
004222   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
004224   f03f
004226   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
004228   ffdd
00422a   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
00422c   ffdd
00422e   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
004230   f03d
004232   ec87     call	0x4b0e, 0           	call	_Timer			; call C hook
004234   f025
004236   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
004238   ffe9
00423a   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
00423c   ffea
00423e   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a debug command has been received
                                           ;;  via SysEx
                                           ;;  Input:
                                           ;;     o WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3 like
                                           ;;       specified in the debug command
                                           ;;  Output:
                                           ;;     o return values WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_DebugTrigger
                                           	;; not really required for C programs
004240   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the display content should be 
                                           ;;  initialized. Thats the case during startup and after a temporary message
                                           ;;  has been printed on the screen
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Init
                                           	extern	_DISPLAY_Init
                                           
004242   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
004244   f07f
004246   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004248   f07f
00424a   ef95     goto	0x4b2a              	goto	_DISPLAY_Init
00424c   f025
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called in the mainloop when no temporary message is shown
                                           ;;  on screen. Print the realtime messages here
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Tick
                                           	extern	_DISPLAY_Tick
                                           
00424e   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
004250   f07f
004252   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004254   f07f
004256   ef94     goto	0x4b28              	goto	_DISPLAY_Tick
004258   f025
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a complete MIDI event has been received
                                           ;;  Input:
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedEvent
                                           	extern	_MPROC_NotifyReceivedEvnt
                                           
00425a   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00425c   f07f
00425e   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004260   f07f
                                           
004262   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
004264   ffed
004266   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
004268   ffed
00426a   5003     movf	0x3, 0, 0           	movf	MIOS_PARAMETER1, W
00426c   ef00     goto	0x4400              	goto	_MPROC_NotifyReceivedEvnt
00426e   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has been received
                                           ;;  which has been specified in the CONFIG_MIDI_IN table
                                           ;;  Input:
                                           ;;     o number of entry in WREG
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyFoundEvent
                                           	extern	_MPROC_NotifyFoundEvent
                                           
004270   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
004272   f07f
004274   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004276   f07f
                                           
004278   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
00427a   ffed
00427c   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
00427e   ffed
004280   c003     movff	0x3, 0xfed         	movff	MIOS_PARAMETER1, POSTDEC0
004282   ffed
004284   6eed     movwf	0xed, 0            	movwf	POSTDEC0		; TK: required for SDCC 2.5.0, don't know why...
                                           	;; entry number still in wreg
004286   ef32     goto	0x4a64              	goto	_MPROC_NotifyFoundEvent
004288   f025
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has not been completly
                                           ;;  received within 2 seconds
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyTimeout
                                           	extern	_MPROC_NotifyTimeout
                                           
00428a   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
00428c   f07f
00428e   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004290   f07f
004292   ef93     goto	0x4b26              	goto	_MPROC_NotifyTimeout
004294   f025
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received
                                           ;;  Input:
                                           ;;     o received MIDI byte in WREG and MIOS_PARAMETER1
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedByte
                                           	extern	_MPROC_NotifyReceivedByte
                                           
004296   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
004298   f07f
00429a   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
00429c   f07f
                                           
                                           	;; MIDI byte still in WREG
00429e   ef6d     goto	0x44da              	goto	_MPROC_NotifyReceivedByte
0042a0   f022
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the transfer of a MIDI byte. 
                                           ;;  It can be used to monitor the Tx activity or to do any other actions
                                           ;;  (e.g. to switch a pin for multiplexed MIDI Outs) before the byte will 
                                           ;;  be sent.
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o transmitted byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyTx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_TX
                                           	extern	_MIDI_NotifyTx
                                           	goto	_MIDI_NotifyTx
                                           #else
0042a2   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received.
                                           ;;  It can be used to monitor the Rx activity or to do any action - e.g.
                                           ;;  to react on realtime events like MIDI clock (0xf8) with a minimum latency
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o received byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyRx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_RX
                                           	extern	_MIDI_NotifyRx
                                           	goto	_MIDI_NotifyRx
                                           #else
0042a4   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an button has been toggled
                                           ;;  Input:
                                           ;;     o Button number in WREG and MIOS_PARAMETER1
                                           ;;     o Button value MIOS_PARAMETER2:
                                           ;;       - 1 if button has been released (=5V)
                                           ;;       - 0 if button has been pressed (=0V)
                                           ;; --------------------------------------------------------------------------
                                           USER_DIN_NotifyToggle
                                           	extern	_DIN_NotifyToggle
                                           
0042a6   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0042a8   f07f
0042aa   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0042ac   f07f
                                           
0042ae   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
0042b0   ffed
                                           	;; button number still in WREG
0042b2   efc7     goto	0x378e              	goto	_DIN_NotifyToggle
0042b4   f01b
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an encoder has been moved
                                           ;;  Input:
                                           ;;     o Encoder number in WREG and MIOS_PARAMETER1
                                           ;;     o signed incrementer value in MIOS_PARAMETER2:
                                           ;;       - is positive when encoder has been turned clockwise
                                           ;;       - is negative when encoder has been turned counter clockwise
                                           ;; --------------------------------------------------------------------------
                                           USER_ENC_NotifyChange
                                           	extern	_ENC_NotifyChange
                                           
0042b6   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
0042b8   f07f
0042ba   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
0042bc   f07f
                                           
0042be   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
0042c0   ffed
                                           	;; encoder number still in WREG
0042c2   ef2b     goto	0x4a56              	goto	_ENC_NotifyChange
0042c4   f025
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the shift register are loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Prepare
                                           	extern	_SR_Service_Prepare
                                           
0042c6   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
0042c8   f03f
0042ca   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
0042cc   ffdd
0042ce   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
0042d0   ffdd
0042d2   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
0042d4   f03d
0042d6   ec92     call	0x4b24, 0           	call	_SR_Service_Prepare	; call C hook
0042d8   f025
0042da   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
0042dc   ffe9
0042de   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
0042e0   ffea
0042e2   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after the shift register have been loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Finish
                                           	extern	_SR_Service_Finish
                                           
0042e4   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
0042e6   f03f
0042e8   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
0042ea   ffdd
0042ec   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
0042ee   ffdd
0042f0   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
0042f2   f03d
0042f4   ec91     call	0x4b22, 0           	call	_SR_Service_Finish	; call C hook
0042f6   f025
0042f8   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
0042fa   ffe9
0042fc   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
0042fe   ffea
004300   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a pot has been moved
                                           ;;  Input:
                                           ;;     o Pot number in WREG and MIOS_PARAMETER1
                                           ;;     o LSB value in MIOS_PARAMETER2
                                           ;;     o MSB value in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_AIN_NotifyChange
                                           	extern	_AIN_NotifyChange
                                           
004302   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
004304   f07f
004306   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
004308   f07f
                                           
00430a   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
00430c   ffed
00430e   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
004310   ffed
                                           	;; pot number still in WREG
004312   ef24     goto	0x4a48              	goto	_AIN_NotifyChange
004314   f025
                                           
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  LINKS TO THE MIOS FUNCTIONS
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           .MIOS_MIDI_BeginStream code MIOS_MIDI_BeginStream
                                           _MIOS_MIDI_BeginStream
                                           	global	_MIOS_MIDI_BeginStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDAutoSet code MIOS_MIDI_DeviceIDAutoSet
                                           _MIOS_MIDI_DeviceIDAutoSet
                                           	global	_MIOS_MIDI_DeviceIDAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDGet code MIOS_MIDI_DeviceIDGet
                                           _MIOS_MIDI_DeviceIDGet
                                           	global	_MIOS_MIDI_DeviceIDGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDSet code MIOS_MIDI_DeviceIDSet
                                           _MIOS_MIDI_DeviceIDSet
                                           	global	_MIOS_MIDI_DeviceIDSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_EndStream code MIOS_MIDI_EndStream
                                           _MIOS_MIDI_EndStream
                                           	global	_MIOS_MIDI_EndStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_Init code MIOS_MIDI_Init
                                           _MIOS_MIDI_Init
                                           	global	_MIOS_MIDI_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceAutoSet code MIOS_MIDI_InterfaceAutoSet
                                           _MIOS_MIDI_InterfaceAutoSet
                                           	global	_MIOS_MIDI_InterfaceAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceGet code MIOS_MIDI_InterfaceGet
                                           _MIOS_MIDI_InterfaceGet
                                           	global	_MIOS_MIDI_InterfaceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceSet code MIOS_MIDI_InterfaceSet
                                           _MIOS_MIDI_InterfaceSet
                                           	global	_MIOS_MIDI_InterfaceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerGet code MIOS_MIDI_MergerGet
                                           _MIOS_MIDI_MergerGet
                                           	global	_MIOS_MIDI_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerSet code MIOS_MIDI_MergerSet
                                           _MIOS_MIDI_MergerSet
                                           	global	_MIOS_MIDI_MergerSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferFree code MIOS_MIDI_RxBufferFree
                                           _MIOS_MIDI_RxBufferFree
                                           	global	_MIOS_MIDI_RxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferGet code MIOS_MIDI_RxBufferGet
                                           _MIOS_MIDI_RxBufferGet
                                           	global	_MIOS_MIDI_RxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferPut code MIOS_MIDI_RxBufferPut
                                           _MIOS_MIDI_RxBufferPut
                                           	global	_MIOS_MIDI_RxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferUsed code MIOS_MIDI_RxBufferUsed
                                           _MIOS_MIDI_RxBufferUsed
                                           	global	_MIOS_MIDI_RxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFlush code MIOS_MIDI_TxBufferFlush
                                           _MIOS_MIDI_TxBufferFlush
                                           	global	_MIOS_MIDI_TxBufferFlush
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFree code MIOS_MIDI_TxBufferFree
                                           _MIOS_MIDI_TxBufferFree
                                           	global	_MIOS_MIDI_TxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferGet code MIOS_MIDI_TxBufferGet
                                           _MIOS_MIDI_TxBufferGet
                                           	global	_MIOS_MIDI_TxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferPut code MIOS_MIDI_TxBufferPut
                                           _MIOS_MIDI_TxBufferPut
                                           	global	_MIOS_MIDI_TxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferUsed code MIOS_MIDI_TxBufferUsed
                                           _MIOS_MIDI_TxBufferUsed
                                           	global	_MIOS_MIDI_TxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerDisable code MIOS_MPROC_MergerDisable
                                           _MIOS_MPROC_MergerDisable
                                           	global	_MIOS_MPROC_MergerDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerEnable code MIOS_MPROC_MergerEnable
                                           _MIOS_MPROC_MergerEnable
                                           	global	_MIOS_MPROC_MergerEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerGet code MIOS_MPROC_MergerGet
                                           _MIOS_MPROC_MergerGet
                                           	global	_MIOS_MPROC_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandGet code MIOS_AIN_DeadbandGet
                                           _MIOS_AIN_DeadbandGet
                                           	global	_MIOS_AIN_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandSet code MIOS_AIN_DeadbandSet
                                           _MIOS_AIN_DeadbandSet
                                           	global	_MIOS_AIN_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Muxed code MIOS_AIN_Muxed
                                           _MIOS_AIN_Muxed
                                           	global	_MIOS_AIN_Muxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberGet code MIOS_AIN_NumberGet
                                           _MIOS_AIN_NumberGet
                                           	global	_MIOS_AIN_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberSet code MIOS_AIN_NumberSet
                                           _MIOS_AIN_NumberSet
                                           	global	_MIOS_AIN_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Pin7bitGet code MIOS_AIN_Pin7bitGet
                                           _MIOS_AIN_Pin7bitGet
                                           	global	_MIOS_AIN_Pin7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinGet code
                                           _MIOS_AIN_PinGet
                                           	global	_MIOS_AIN_PinGet
                                           
004b04   ec3a     call	0x2c74, 0           	call	MIOS_AIN_PinGet
004b06   f016
004b08   c004     movff	0x4, 0xff3         	movff	MIOS_PARAMETER2, PRODL	; high byte -> PRODL
004b0a   fff3
004b0c   0012     return	0                 	return				; low byte already in WREG
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinLSBGet code MIOS_AIN_PinLSBGet
                                           _MIOS_AIN_PinLSBGet
                                           	global	_MIOS_AIN_PinLSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinMSBGet code MIOS_AIN_PinMSBGet
                                           _MIOS_AIN_PinMSBGet
                                           	global	_MIOS_AIN_PinMSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_UnMuxed code MIOS_AIN_UnMuxed
                                           _MIOS_AIN_UnMuxed
                                           	global	_MIOS_AIN_UnMuxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownGet code MIOS_MF_PWM_DutyCycleDownGet
                                           _MIOS_MF_PWM_DutyCycleDownGet
                                           	global	_MIOS_MF_PWM_DutyCycleDownGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownSet code MIOS_MF_PWM_DutyCycleDownSet
                                           _MIOS_MF_PWM_DutyCycleDownSet
                                           	global	_MIOS_MF_PWM_DutyCycleDownSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpGet code MIOS_MF_PWM_DutyCycleUpGet
                                           _MIOS_MF_PWM_DutyCycleUpGet
                                           	global	_MIOS_MF_PWM_DutyCycleUpGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpSet code MIOS_MF_PWM_DutyCycleUpSet
                                           _MIOS_MF_PWM_DutyCycleUpSet
                                           	global	_MIOS_MF_PWM_DutyCycleUpSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandGet code MIOS_MF_DeadbandGet
                                           _MIOS_MF_DeadbandGet
                                           	global	_MIOS_MF_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandSet code MIOS_MF_DeadbandSet
                                           _MIOS_MF_DeadbandSet
                                           	global	_MIOS_MF_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Disable code MIOS_MF_Disable
                                           _MIOS_MF_Disable
                                           	global	_MIOS_MF_Disable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Enable code MIOS_MF_Enable
                                           _MIOS_MF_Enable
                                           	global	_MIOS_MF_Enable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_FaderMove code
                                           _MIOS_MF_FaderMove
                                           	global	_MIOS_MF_FaderMove
                                           
0049bc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0049be   ffd9
0049c0   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0049c2   f003
0049c4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0049c6   f004
0049c8   ef52     goto	0x2ca4              	goto	MIOS_MF_FaderMove
0049ca   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendDisable code MIOS_MF_SuspendDisable
                                           _MIOS_MF_SuspendDisable
                                           	global	_MIOS_MF_SuspendDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendEnable code MIOS_MF_SuspendEnable
                                           _MIOS_MF_SuspendEnable
                                           	global	_MIOS_MF_SuspendEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendGet code MIOS_MF_SuspendGet
                                           _MIOS_MF_SuspendGet
                                           	global	_MIOS_MF_SuspendGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodGet code MIOS_MF_PWM_PeriodGet
                                           _MIOS_MF_PWM_PeriodGet
                                           	global	_MIOS_MF_PWM_PeriodGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodSet code MIOS_MF_PWM_PeriodSet
                                           _MIOS_MF_PWM_PeriodSet
                                           	global	_MIOS_MF_PWM_PeriodSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_TouchDetectionReset code MIOS_MF_TouchDetectionReset
                                           _MIOS_MF_TouchDetectionReset
                                           	global	_MIOS_MF_TouchDetectionReset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinGet code MIOS_DIN_PinGet
                                           _MIOS_DIN_PinGet
                                           	global	_MIOS_DIN_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_SRGet code MIOS_DIN_SRGet
                                           _MIOS_DIN_SRGet
                                           	global	_MIOS_DIN_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinGet code MIOS_DOUT_PinGet
                                           _MIOS_DOUT_PinGet
                                           	global	_MIOS_DOUT_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet code
                                           _MIOS_DOUT_PinSet
                                           	global	_MIOS_DOUT_PinSet
                                           
004a80   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004a82   ffd9
004a84   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004a86   f003
004a88   ef60     goto	0x2cc0              	goto	MIOS_DOUT_PinSet
004a8a   f016
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet0 code MIOS_DOUT_PinSet0
                                           _MIOS_DOUT_PinSet0
                                           	global	_MIOS_DOUT_PinSet0
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet1 code MIOS_DOUT_PinSet1
                                           _MIOS_DOUT_PinSet1
                                           	global	_MIOS_DOUT_PinSet1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRGet code MIOS_DOUT_SRGet
                                           _MIOS_DOUT_SRGet
                                           	global	_MIOS_DOUT_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRSet code
                                           _MIOS_DOUT_SRSet
                                           	global	_MIOS_DOUT_SRSet
                                           	
004a8c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004a8e   ffd9
004a90   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004a92   f003
004a94   ef68     goto	0x2cd0              	goto	MIOS_DOUT_SRSet
004a96   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitAdd code
                                           _MIOS_ENC_Abs7bitAdd
                                           	global	_MIOS_ENC_Abs7bitAdd
                                           	
004a98   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004a9a   ffd9
004a9c   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004a9e   f003
004aa0   ef6a     goto	0x2cd4              	goto	MIOS_ENC_Abs7bitAdd
004aa2   f016
                                           	
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitGet code MIOS_ENC_Abs7bitGet
                                           _MIOS_ENC_Abs7bitGet
                                           	global	_MIOS_ENC_Abs7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitSet code
                                           _MIOS_ENC_Abs7bitSet
                                           	global	_MIOS_ENC_Abs7bitSet
                                           
004aa4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004aa6   ffd9
004aa8   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004aaa   f003
004aac   ef6e     goto	0x2cdc              	goto	MIOS_ENC_Abs7bitSet
004aae   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_NumberGet code MIOS_ENC_NumberGet
                                           _MIOS_ENC_NumberGet
                                           	global	_MIOS_ENC_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedGet code
                                           _MIOS_ENC_SpeedGet
                                           	global	_MIOS_ENC_SpeedGet
                                           
004ab0   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004ab2   ffd9
004ab4   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004ab6   f003
004ab8   ef72     goto	0x2ce4              	goto	MIOS_ENC_SpeedGet
004aba   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedSet code
                                           _MIOS_ENC_SpeedSet
                                           	global	_MIOS_ENC_SpeedSet
                                           
0049cc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0049ce   ffd9
0049d0   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0049d2   f003
0049d4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0049d6   f004
0049d8   ef74     goto	0x2ce8              	goto	MIOS_ENC_SpeedSet
0049da   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberGet code MIOS_SRIO_NumberGet
                                           _MIOS_SRIO_NumberGet
                                           	global	_MIOS_SRIO_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberSet code MIOS_SRIO_NumberSet
                                           _MIOS_SRIO_NumberSet
                                           	global	_MIOS_SRIO_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivityGet code MIOS_SRIO_TS_SensitivityGet
                                           _MIOS_SRIO_TS_SensitivityGet
                                           	global	_MIOS_SRIO_TS_SensitivityGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivitySet code MIOS_SRIO_TS_SensitivitySet
                                           _MIOS_SRIO_TS_SensitivitySet
                                           	global	_MIOS_SRIO_TS_SensitivitySet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqGet code MIOS_SRIO_UpdateFrqGet
                                           _MIOS_SRIO_UpdateFrqGet
                                           	global	_MIOS_SRIO_UpdateFrqGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqSet code MIOS_SRIO_UpdateFrqSet
                                           _MIOS_SRIO_UpdateFrqSet
                                           	global	_MIOS_SRIO_UpdateFrqSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceGet code MIOS_SRIO_DebounceGet
                                           _MIOS_SRIO_DebounceGet
                                           	global	_MIOS_SRIO_DebounceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceSet code MIOS_SRIO_DebounceSet
                                           _MIOS_SRIO_DebounceSet
                                           	global	_MIOS_SRIO_DebounceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Clear code MIOS_LCD_Clear
                                           _MIOS_LCD_Clear
                                           	global	_MIOS_LCD_Clear
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Cmd code MIOS_LCD_Cmd
                                           _MIOS_LCD_Cmd
                                           	global	_MIOS_LCD_Cmd
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorGet code MIOS_LCD_CursorGet
                                           _MIOS_LCD_CursorGet
                                           	global	_MIOS_LCD_CursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorSet code MIOS_LCD_CursorSet
                                           _MIOS_LCD_CursorSet
                                           	global	_MIOS_LCD_CursorSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Data code MIOS_LCD_Data
                                           _MIOS_LCD_Data
                                           	global	_MIOS_LCD_Data
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Init code MIOS_LCD_Init
                                           _MIOS_LCD_Init
                                           	global	_MIOS_LCD_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD1 code MIOS_LCD_PrintBCD1
                                           _MIOS_LCD_PrintBCD1
                                           	global	_MIOS_LCD_PrintBCD1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD2 code MIOS_LCD_PrintBCD2
                                           _MIOS_LCD_PrintBCD2
                                           	global	_MIOS_LCD_PrintBCD2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD3 code MIOS_LCD_PrintBCD3
                                           _MIOS_LCD_PrintBCD3
                                           	global	_MIOS_LCD_PrintBCD3
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD4 code
                                           _MIOS_LCD_PrintBCD4
                                           	global	_MIOS_LCD_PrintBCD4
                                           
004abc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004abe   ffd9
004ac0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004ac2   f003
004ac4   eff6     goto	0x2dec              	goto	MIOS_LCD_PrintBCD4
004ac6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD5 code
                                           _MIOS_LCD_PrintBCD5
                                           	global	_MIOS_LCD_PrintBCD5
                                           
004ac8   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004aca   ffd9
004acc   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004ace   f003
004ad0   eff8     goto	0x2df0              	goto	MIOS_LCD_PrintBCD5
004ad2   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintChar code MIOS_LCD_PrintChar
                                           _MIOS_LCD_PrintChar
                                           	global	_MIOS_LCD_PrintChar
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex1 code MIOS_LCD_PrintHex1
                                           _MIOS_LCD_PrintHex1
                                           	global	_MIOS_LCD_PrintHex1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex2 code MIOS_LCD_PrintHex2
                                           _MIOS_LCD_PrintHex2
                                           	global	_MIOS_LCD_PrintHex2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintMessage code
                                           _MIOS_LCD_PrintMessage
                                           	global	_MIOS_LCD_PrintMessage
                                           
004950   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004952   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004954   ffd9
004956   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004958   fff7
00495a   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00495c   fff8
00495e   ef9a     goto	0x2d34              	goto	MIOS_LCD_PrintMessage
004960   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintPreconfString code
                                           _MIOS_LCD_PrintPreconfString
                                           	global	_MIOS_LCD_PrintPreconfString
                                           
004914   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004916   ffd9
004918   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00491a   fff8
00491c   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00491e   fff7
004920   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
004922   fff6
004924   ef9c     goto	0x2d38              	goto	MIOS_LCD_PrintPreconfString
004926   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintString code
                                           _MIOS_LCD_PrintString
                                           	global	_MIOS_LCD_PrintString
                                           
004962   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004964   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004966   ffd9
004968   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00496a   fff7
00496c   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00496e   fff8
004970   ef9e     goto	0x2d3c              	goto	MIOS_LCD_PrintString
004972   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeAutoSet code MIOS_LCD_TypeAutoSet
                                           _MIOS_LCD_TypeAutoSet
                                           	global	_MIOS_LCD_TypeAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeGet code MIOS_LCD_TypeGet
                                           _MIOS_LCD_TypeGet
                                           	global	_MIOS_LCD_TypeGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeSet code
                                           _MIOS_LCD_TypeSet
                                           	global	_MIOS_LCD_TypeSet
                                           
0049dc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0049de   ffd9
0049e0   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0049e2   f003
0049e4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0049e6   f004
0049e8   efa4     goto	0x2d48              	goto	MIOS_LCD_TypeSet
0049ea   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressGet code
                                           _MIOS_LCD_YAddressGet
                                           	global	_MIOS_LCD_YAddressGet
004b1e   efa6     goto	0x2d4c              	goto	MIOS_LCD_YAddressGet
004b20   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressSet code
                                           _MIOS_LCD_YAddressSet
                                           	global	_MIOS_LCD_YAddressSet
                                           
004928   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00492a   ffd9
00492c   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
00492e   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
004930   f004
004932   cfdc     movff	0xfdc, 0x5          	movff	PREINC2, MIOS_PARAMETER3
004934   f005
004936   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
004938   efa8     goto	0x2d50              	goto	MIOS_LCD_YAddressSet
00493a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStart code MIOS_LCD_MessageStart
                                           _MIOS_LCD_MessageStart
                                           	global	_MIOS_LCD_MessageStart
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStop code MIOS_LCD_MessageStop
                                           _MIOS_LCD_MessageStop
                                           	global	_MIOS_LCD_MessageStop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharInit code
                                           _MIOS_CLCD_SpecialCharInit
                                           	global	_MIOS_CLCD_SpecialCharInit
                                           
00493c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00493e   ffd9
004940   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
004942   fff6
004944   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004946   fff7
004948   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00494a   fff8
00494c   efe4     goto	0x2dc8              	goto	MIOS_CLCD_SpecialCharInit
00494e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharsInit code
                                           _MIOS_CLCD_SpecialCharsInit
                                           	global	_MIOS_CLCD_SpecialCharsInit
                                           
004974   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004976   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004978   ffd9
00497a   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00497c   fff7
00497e   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004980   fff8
004982   efe6     goto	0x2dcc              	goto	MIOS_CLCD_SpecialCharsInit
004984   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_FontInit code
                                           _MIOS_GLCD_FontInit
                                           	global	_MIOS_GLCD_FontInit
                                           
004986   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004988   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00498a   ffd9
00498c   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00498e   fff7
004990   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004992   fff8
004994   efaa     goto	0x2d54              	goto	MIOS_GLCD_FontInit
004996   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorGet code MIOS_GLCD_GCursorGet
                                           _MIOS_GLCD_GCursorGet
                                           	global	_MIOS_GLCD_GCursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorSet code
                                           _MIOS_GLCD_GCursorSet
                                           	global	_MIOS_GLCD_GCursorSet
                                           
004ad4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004ad6   ffd9
004ad8   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004ada   f003
004adc   efae     goto	0x2d5c              	goto	MIOS_GLCD_GCursorSet
004ade   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Read code
                                           _MIOS_EEPROM_Read
                                           	global	_MIOS_EEPROM_Read
                                           
004b18   6ea9     movwf	0xa9, 0            	movwf	EEADR
004b1a   efb0     goto	0x2d60              	goto	MIOS_EEPROM_Read
004b1c   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Write code
                                           _MIOS_EEPROM_Write
                                           	global	_MIOS_EEPROM_Write
                                           
004ae0   6ea9     movwf	0xa9, 0            	movwf	EEADR
004ae2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004ae4   ffd9
004ae6   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
004ae8   efb2     goto	0x2d64              	goto	MIOS_EEPROM_Write
004aea   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_ReadPage code
                                           _MIOS_EEPROM_ReadPage
                                           	global	_MIOS_EEPROM_ReadPage
                                           
004998   6ea9     movwf	0xa9, 0            	movwf	EEADR
00499a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00499c   ffd9
00499e   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0049a0   ffe1
0049a2   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0049a4   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0049a6   ef1a     goto	0x2e34              	goto	MIOS_EEPROM_ReadPage
0049a8   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_WritePage code
                                           _MIOS_EEPROM_WritePage
                                           	global	_MIOS_EEPROM_WritePage
                                           
0049aa   6ea9     movwf	0xa9, 0            	movwf	EEADR
0049ac   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0049ae   ffd9
0049b0   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0049b2   ffe1
0049b4   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0049b6   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0049b8   ef1c     goto	0x2e38              	goto	MIOS_EEPROM_WritePage
0049ba   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Read code
                                           _MIOS_FLASH_Read
                                           	global	_MIOS_FLASH_Read
                                           
0048b4   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0048b6   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0048b8   ffd9
0048ba   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0048bc   fff7
0048be   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0048c0   fff8
0048c2   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0048c4   ffe1
0048c6   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0048c8   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0048ca   efb4     goto	0x2d68              	goto	MIOS_FLASH_Read
0048cc   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Write code
                                           _MIOS_FLASH_Write
                                           	global	_MIOS_FLASH_Write
                                           
0048ce   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0048d0   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0048d2   ffd9
0048d4   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0048d6   fff7
0048d8   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0048da   fff8
0048dc   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0048de   ffe1
0048e0   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0048e2   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0048e4   efb6     goto	0x2d6c              	goto	MIOS_FLASH_Write
0048e6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Read code
                                           _MIOS_BANKSTICK_Read
                                           	global	_MIOS_BANKSTICK_Read
                                           
004a2c   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
004a2e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004a30   ffd9
004a32   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
004a34   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
004a36   efb8     goto	0x2d70              	goto	MIOS_BANKSTICK_Read
004a38   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Write code
                                           _MIOS_BANKSTICK_Write
                                           	global	_MIOS_BANKSTICK_Write
                                           
0049ec   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0049ee   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0049f0   ffd9
0049f2   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0049f4   f004
0049f6   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0049f8   efba     goto	0x2d74              	goto	MIOS_BANKSTICK_Write
0049fa   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlSet code MIOS_BANKSTICK_CtrlSet
                                           _MIOS_BANKSTICK_CtrlSet
                                           	global	_MIOS_BANKSTICK_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlGet code MIOS_BANKSTICK_CtrlGet
                                           _MIOS_BANKSTICK_CtrlGet
                                           	global	_MIOS_BANKSTICK_CtrlGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_WritePage code
                                           _MIOS_BANKSTICK_WritePage
                                           	global	_MIOS_BANKSTICK_WritePage
                                           
0048e8   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0048ea   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0048ec   ffd9
0048ee   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0048f0   f004
0048f2   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0048f4   ffe1
0048f6   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0048f8   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0048fa   eff2     goto	0x2de4              	goto	MIOS_BANKSTICK_WritePage
0048fc   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_ReadPage code
                                           _MIOS_BANKSTICK_ReadPage
                                           	global	_MIOS_BANKSTICK_ReadPage
                                           	
0048fe   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
004900   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004902   ffd9
004904   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
004906   f004
004908   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
00490a   ffe1
00490c   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
00490e   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004910   ef18     goto	0x2e30              	goto	MIOS_BANKSTICK_ReadPage
004912   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Init code
                                           _MIOS_TIMER_Init
                                           	global	_MIOS_TIMER_Init
                                           
0049fc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0049fe   ffd9
004a00   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004a02   f003
004a04   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
004a06   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004a08   efbc     goto	0x2d78              	goto	MIOS_TIMER_Init
004a0a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Start code MIOS_TIMER_Start
                                           _MIOS_TIMER_Start
                                           	global	_MIOS_TIMER_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Stop code MIOS_TIMER_Stop
                                           _MIOS_TIMER_Stop
                                           	global	_MIOS_TIMER_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_ReInit code
                                           _MIOS_TIMER_ReInit
                                           	global	_MIOS_TIMER_ReInit
                                           
004a0c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004a0e   ffd9
004a10   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004a12   f003
004a14   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
004a16   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004a18   ef1e     goto	0x2e3c              	goto	MIOS_TIMER_ReInit
004a1a   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitANDMask code MIOS_HLP_GetBitANDMask
                                           _MIOS_HLP_GetBitANDMask
                                           	global	_MIOS_HLP_GetBitANDMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitORMask code MIOS_HLP_GetBitORMask
                                           _MIOS_HLP_GetBitORMask
                                           	global	_MIOS_HLP_GetBitORMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_16bitAddSaturate code
                                           _MIOS_HLP_16bitAddSaturate
                                           	global	_MIOS_HLP_16bitAddSaturate
                                           
0047b2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0047b4   ffd9
0047b6   6e0a     movwf	0xa, 0             	movwf	TMP5
                                           
0047b8   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0047ba   ffe1
0047bc   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0047be   ffe2
0047c0   52dc     movf	0xdc, 0x1, 0        	movf	PREINC2, F
0047c2   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
0047c4   f003
0047c6   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0047c8   f004
                                           
0047ca   cfe6     movff	0xfe6, 0x6         	movff	POSTINC1, TMP1	; due to requirement that FSR1 is aligned to 16bit address
0047cc   f006
0047ce   cfe6     movff	0xfe6, 0x7         	movff	POSTINC1, TMP2
0047d0   f007
0047d2   ee10     lfsr	0x1, 0x6            	lfsr	FSR1, TMP1
0047d4   f006
                                           
0047d6   500a     movf	0xa, 0, 0           	movf	TMP5, W
0047d8   ecdc     call	0x2db8, 0           	call	MIOS_HLP_16bitAddSaturate
0047da   f016
0047dc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0047de   ffd9
0047e0   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0047e2   ffe1
0047e4   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0047e6   ffe2
0047e8   c006     movff	0x6, 0xfe6         	movff	TMP1, POSTINC1
0047ea   ffe6
0047ec   c007     movff	0x7, 0xfe6         	movff	TMP2, POSTINC1
0047ee   ffe6
0047f0   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_Dec2BCD code
                                           _MIOS_HLP_Dec2BCD
                                           	global	_MIOS_HLP_Dec2BCD
                                           
004aec   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004aee   ffd9
004af0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004af2   f003
004af4   eff4     goto	0x2de8              	goto	MIOS_HLP_Dec2BCD
004af6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Delay code MIOS_Delay
                                           _MIOS_Delay
                                           	global	_MIOS_Delay
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GPCounterGet code MIOS_GPCounterGet
                                           _MIOS_GPCounterGet
                                           	global	_MIOS_GPCounterGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Reset code MIOS_Reset
                                           _MIOS_Reset
                                           	global	_MIOS_Reset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemResume code MIOS_SystemResume
                                           _MIOS_SystemResume
                                           	global	_MIOS_SystemResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemSuspend code MIOS_SystemSuspend
                                           _MIOS_SystemSuspend
                                           	global	_MIOS_SystemSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserResume code MIOS_UserResume
                                           _MIOS_UserResume
                                           	global	_MIOS_UserResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserSuspend code MIOS_UserSuspend
                                           _MIOS_UserSuspend
                                           	global	_MIOS_UserSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatEnable code MIOS_DIN_PinAutoRepeatEnable
                                           _MIOS_DIN_PinAutoRepeatEnable
                                           	global	_MIOS_DIN_PinAutoRepeatEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatDisable code MIOS_DIN_PinAutoRepeatDisable
                                           _MIOS_DIN_PinAutoRepeatDisable
                                           	global	_MIOS_DIN_PinAutoRepeatDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatGet code MIOS_DIN_PinAutoRepeatGet
                                           _MIOS_DIN_PinAutoRepeatGet
                                           	global	_MIOS_DIN_PinAutoRepeatGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioSet code MIOS_AIN_DynamicPrioSet
                                           _MIOS_AIN_DynamicPrioSet
                                           	global	_MIOS_AIN_DynamicPrioSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioGet code MIOS_AIN_DynamicPrioGet
                                           _MIOS_AIN_DynamicPrioGet
                                           	global	_MIOS_AIN_DynamicPrioGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_LastPinsGet code MIOS_AIN_LastPinsGet
                                           _MIOS_AIN_LastPinsGet
                                           	global	_MIOS_AIN_LastPinsGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Start code MIOS_IIC_Start
                                           _MIOS_IIC_Start
                                           	global	_MIOS_IIC_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Stop code MIOS_IIC_Stop
                                           _MIOS_IIC_Stop
                                           	global	_MIOS_IIC_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteSend code MIOS_IIC_ByteSend
                                           _MIOS_IIC_ByteSend
                                           	global	_MIOS_IIC_ByteSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteReceive code MIOS_IIC_ByteReceive
                                           _MIOS_IIC_ByteReceive
                                           	global	_MIOS_IIC_ByteReceive
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_AckSend code MIOS_IIC_AckSend
                                           _MIOS_IIC_AckSend
                                           	global	_MIOS_IIC_AckSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_NakSend code MIOS_IIC_NakSend
                                           _MIOS_IIC_NakSend
                                           	global	_MIOS_IIC_NakSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlSet code MIOS_IIC_CtrlSet
                                           _MIOS_IIC_CtrlSet
                                           	global	_MIOS_IIC_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlGet code MIOS_IIC_CtrlGet
                                           _MIOS_IIC_CtrlGet
                                           	global	_MIOS_IIC_CtrlGet
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  Special functions supported by the wrapper
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintCString code
                                           _MIOS_LCD_PrintCString
                                           	global	_MIOS_LCD_PrintCString
                                           
00472a   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
00472c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00472e   ffd9
004730   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004732   fff7
004734   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           	;; SDCC passes a 24bit pointer, the MSB (now in WREG) bit 6 and 7 tells us, where the data is located:
                                           	;; 00 -> code
                                           	;; 01 -> EEPROM (not supported by MIOS_LCD_PrintCString yet)
                                           	;; 10 -> data
                                           	;; 11 -> unimplemented
                                           
004736   bee8     btfsc	0xe8, 0x7, 0       	btfsc	WREG, 7
004738   d008     bra	0x474a               	bra	_MIOS_LCD_PrintCString_RAM
                                           _MIOS_LCD_PrintCString_Code
00473a   6ef8     movwf	0xf8, 0            	movwf	TBLPTRU
                                           _MIOS_LCD_PrintCStringLoop_Code
00473c   0009     tblrd	*+                 	tblrd*+
00473e   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
004740   e003     bz	0x4748                	bz	_MIOS_LCD_PrintCString_Code_End
004742   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
004744   f016
004746   d7fa     bra	0x473c               	bra	_MIOS_LCD_PrintCStringLoop_Code
                                           _MIOS_LCD_PrintCString_Code_End
004748   0012     return	0                 	return
                                           
                                           _MIOS_LCD_PrintCString_RAM
                                           	;; using FSR2 as temporary pointer - store current FSR2 into TMP[12]
00474a   cfd9     movff	0xfd9, 0x6         	movff	FSR2L, TMP1
00474c   f006
00474e   cfda     movff	0xfda, 0x7         	movff	FSR2H, TMP2
004750   f007
004752   cff6     movff	0xff6, 0xfd9       	movff	TBLPTRL, FSR2L
004754   ffd9
004756   cff7     movff	0xff7, 0xfda       	movff	TBLPTRH, FSR2H
004758   ffda
                                           _MIOS_LCD_PrintCStringLoop_RAM
00475a   50de     movf	0xde, 0, 0          	movf	POSTINC2, W
00475c   e003     bz	0x4764                	bz	_MIOS_LCD_PrintCString_RAM_End
00475e   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
004760   f016
004762   d7fb     bra	0x475a               	bra	_MIOS_LCD_PrintCStringLoop_RAM
                                           _MIOS_LCD_PrintCString_RAM_End
                                           	;; restore FSR2
004764   c006     movff	0x6, 0xfd9         	movff	TMP1, FSR2L
004766   ffd9
004768   c007     movff	0x7, 0xfda         	movff	TMP2, FSR2H
00476a   ffda
00476c   0012     return	0                 	return
                                           
                                           	END
                                           ; $Id: app_lcd.asm 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; Wrapper for app_lcd.inc
                                           ; To be used for relocatable programs
                                           ;
                                           ; ==========================================================================
                                           
                                           	radix	dec
                                           
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           #include <macros.h>
                                           ; $Id: macros.h 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; Macro Definitions
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           BRA_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           
                                           BRA_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           GOTO_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           
                                           GOTO_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           CALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           
                                           CALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           RCALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           
                                           RCALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           IRQ_DISABLE MACRO
                                                   bcf     INTCON, GIE
                                                   ENDM
                                           
                                           IRQ_ENABLE MACRO
                                                   bsf     INTCON, GIE
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TABLE_ADDR_FULL MACRO addr
                                           	movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   movlw   UPPER(addr)		; store upper Byte
                                                   movwf   TBLPTRU
                                                   ENDM
                                                   
                                           TABLE_ADDR MACRO addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                                   movlw   UPPER(addr)		; store Upper Byte
                                                   movwf   TBLPTRU
                                           #endif
                                                   ENDM
                                                   
                                           TABLE_H MACRO   addr
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   ENDM
                                           
                                           TABLE_L MACRO   addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   ENDM
                                           
                                           TABLE_ADD_W MACRO
                                           	addwf	TBLPTRL, F
                                           	movlw	0x00
                                           	addwfc	TBLPTRH, F
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	movlw	0x00
                                           	addwfc	TBLPTRU, F
                                           #endif
                                                   ENDM
                                           
                                           TABLE_ADDR_MUL_W MACRO addr, multiplicator
                                           	mullw	multiplicator
                                           	movlw	LOW(addr)
                                           	addwf	PRODL, W
                                           	movwf	TBLPTRL
                                           	movlw	HIGH(addr)
                                           	addwfc	PRODH, W
                                           	movwf	TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	clrf    TBLPTRU
                                                   movlw   UPPER(addr)
                                           	addwfc	TBLPTRU, F
                                           #endif
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           JUMPTABLE_2BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	movlw	-(max_value)
                                           	addlw	max_value
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_2BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	return
                                           	addlw	(max_value)
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TWOBYTE_ENTRY MACRO low_byte, high_byte
                                                   dw      (high_byte << 8) | (low_byte)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           #define skpnz	btfsc	STATUS, Z 
                                           #define skpz	btfss	STATUS, Z 
                                           #define skpndc	btfsc	STATUS, DC 
                                           #define skpdc	btfss	STATUS, DC
                                           #define skpnc	btfsc	STATUS, C
                                           #define skpc	btfss	STATUS, C
                                           #define clrc	bcf	STATUS, C
                                           #define setc	bsf	STATUS, C
                                           #define clrz	bcf	STATUS, Z
                                           #define setz	bsf	STATUS, Z
                                           #define rrf	rrcf	
                                           #define rlf	rlcf
                                           
                                           rgoto   MACRO   label
                                                   bra     label
                                                   ENDM
                                           
                                           SET_BSR MACRO   reg
                                                   movlb   HIGH(reg)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           FONT_ENTRY MACRO width, height, x0, char_offset
                                           	dw	((height) << 8) | (width), ((char_offset) << 8) | (x0)
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           STRING MACRO length, pos, str
                                           	da	((length) << 8) | (pos), str
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           ; ==========================================================================
                                           ; Import/Export Labels
                                           ; ==========================================================================
                                           	global	USER_LCD_Init
                                           	global	USER_LCD_Data
                                           	global	USER_LCD_Cmd
                                           	global	USER_LCD_Clear
                                           	global	USER_LCD_CursorSet
                                           	global	USER_LCD_PrintChar
                                           	global	USER_LCD_SpecialCharInit
                                           
                                           ; ==========================================================================
                                           ; Start code section and include driver code
                                           ; ==========================================================================
                                           APP_LCD CODE
                                           #include "app_lcd.inc"
                                           ; $Id: app_lcd.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; MIOS Custom LCD Driver Skeleton
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  Following system variables are given by MIOS and can be directly 
                                           ;;  accessed by the driver. The addresses are defined in mios.h and
                                           ;;  should not be changed
                                           ;; 
                                           ;;  MIOS_GLCD_BUFFER	     a 8 byte buffer for data transfers
                                           ;;  MIOS_LCD_OPTION1	     contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_OPTION2	     contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_CURSOR_POS	     the current cursor pos of characters (GLCD: multiplied by width)
                                           ;;  MIOS_GLCD_GCURSOR_X	     for GLCDs: the current X position of graphical cursor
                                           ;;  MIOS_GLCD_GCURSOR_Y	     for GLCDs: the current Y position of graphical cursor
                                           ;;  MIOS_GLCD_FONT_WIDTH     for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_HEIGHT    for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_X0        for GLCDs: the first byte within a char entry
                                           ;;  MIOS_GLCD_FONT_OFFSET    for GLCDs: the byte offset between the characters
                                           ;;  MIOS_GLCD_FONT_PTRL      for GLCDs: pointer to the character table, low-byte
                                           ;;  MIOS_GLCD_FONT_PTRH      for GLCDs: pointer to the character table, high-byte
                                           ;;  MIOS_LCD_TIMEOUT0        can be used for timeout loops
                                           ;;  MIOS_LCD_TIMEOUT1        can be used for timeout loops
                                           ;;  MIOS_GLCD_TMP1           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP2           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP3           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP4           can be used as temporary buffer
                                           ;;  MIOS_LCD_Y0_OFFSET       Y0 offset of LCD
                                           ;;  MIOS_LCD_Y1_OFFSET       Y1 offset of LCD
                                           ;;  MIOS_LCD_Y2_OFFSET       Y2 offset of LCD
                                           ;;  MIOS_LCD_Y3_OFFSET       Y3 offset of LCD
                                           ;;  MIOS_LCD_CURSOR_POS_REAL unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           ;; 
                                           ;;  Note: the addresses are located in an upper bank and therefore have to
                                           ;;        be accessed with the BANKED flag. Also the BSR has to be justified
                                           ;;        before using the registers
                                           ;;  Example:
                                           ;;	SET_BSR MIOS_LCD_OPTION1	; sets BSR to the bank where MIOS_LCD_*
                                           ;;					; has been located. You don't need to
                                           ;;					; change the BSR for the other LCD registers
                                           ;;      movf    MIOS_LCD_OPTION1, W, BANKED	; get LCD option #1
                                           ;; 
                                           ;;  Important: to allow a proper interaction with MIOS applications, you are
                                           ;;  only allowed to modify MIOS_PARAMETER[123], the mutliplication registers
                                           ;;  and FSR1. You are not allowed to change TMP[1-5] or FSR0
                                           ;;  if you need some temporary registers, use the given addresses above or
                                           ;;  locate them to addresses which are not used by the application
                                           ;; --------------------------------------------------------------------------
                                           	
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be initialized
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Init
004a3a   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be cleared
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Clear
004a3c   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the cursor should be changed
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_GLCD_CURSOR_X - horizontal cursor position (for GLCDs)
                                           ;;       MIOS_GLCD_CURSOR_X - vertical cursor position   (for GLCDs)
                                           ;;       MIOS_LCD_CURSOR    - character cursor position  (for CLCDs)
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_CursorSet
004a3e   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a character should be print
                                           ;;  In:  WREG - character
                                           ;;       all other MIOS_*LCD_* registers
                                           ;;  Out: GLCDs should justify the X/Y cursor position
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_PrintChar
004a40   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Data
                                           ;;  DESCRIPTION: sends a data value to the LCD display.<BR>
                                           ;;  On CLCDs: branch directly to USER_LCD_PrintChar<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  data which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Data
004a42   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Cmd
                                           ;;  DESCRIPTION: sends a command to the LCD display.<BR>
                                           ;;  On CLCDs: use this function to decode the HD44780 commands if required<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  command which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Cmd
004a44   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_SpecialCharInit
                                           ;;  DESCRIPTION: see MIOS_CLCD_SpecialCharInit
                                           ;;  IN:  number of special character (0-7) in WREG
                                           ;;       pointer to special char pattern in TBLPTR (consists of 8
                                           ;;          entries for every character-line)
                                           ;;  OUT: TBLPTR has to be set to next table entry (TBLPTR+=8)
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_SpecialCharInit
004a46   0012     return	0                 	return
                                           	END
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.8.0 #5117 (Mar 23 2008) (UNIX)
                                           ; This file was generated Sat Nov 22 19:59:41 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f452
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _preset_load
                                           	global _preset_store
                                           	global _inout_map_build
                                           	global _info_screen_print
                                           	global _screen_print
                                           	global _current_screen_set
                                           	global _current_bus_set
                                           	global _current_preset_set
                                           	global _timed_function_start
                                           	global _timed_function_stop
                                           	global _led_flash_start
                                           	global _led_flash_set
                                           	global _current_screen_num
                                           	global _current_preset_num
                                           	global _current_bus_num
                                           	global _current_shift_state
                                           	global _temp_value
                                           	global _timed_function
                                           	global _timer_ticks_count
                                           	global _led_flash_led
                                           	global _led_flash_count
                                           	global _led_flash_ticks
                                           	global _current_preset
                                           	global _midi_inout_map
                                           	global _Init
                                           	global _preset_init
                                           	global _Timer
                                           	global _Tick
                                           	global _DIN_NotifyToggle
                                           	global _MPROC_NotifyReceivedByte
                                           	global _MPROC_NotifyReceivedEvnt
                                           	global _DISPLAY_Init
                                           	global _DISPLAY_Tick
                                           	global _MPROC_NotifyFoundEvent
                                           	global _MPROC_NotifyTimeout
                                           	global _SR_Service_Prepare
                                           	global _SR_Service_Finish
                                           	global _ENC_NotifyChange
                                           	global _AIN_NotifyChange
                                           	global _int_bit_ormask
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _MIOS_BOX_CFG0
                                           	extern _MIOS_BOX_CFG1
                                           	extern _MIOS_BOX_STAT
                                           	extern _MIOS_PARAMETER1
                                           	extern _MIOS_PARAMETER2
                                           	extern _MIOS_PARAMETER3
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MIOS_MIDI_TxBufferPut
                                           	extern _MIOS_DOUT_PinSet
                                           	extern _MIOS_DOUT_SRSet
                                           	extern _MIOS_SRIO_NumberSet
                                           	extern _MIOS_SRIO_UpdateFrqSet
                                           	extern _MIOS_SRIO_DebounceSet
                                           	extern _MIOS_EEPROM_Read
                                           	extern _MIOS_EEPROM_Write
                                           	extern _MIOS_BANKSTICK_CtrlSet
                                           	extern _MIOS_BANKSTICK_WritePage
                                           	extern _MIOS_BANKSTICK_ReadPage
                                           	extern _MIOS_TIMER_Init
                                           	extern _MIOS_TIMER_Stop
                                           	extern _MIOS_HLP_GetBitORMask
                                           	extern _mios_enc_pin_table
                                           	extern _mios_mproc_event_table
                                           	extern _MIOS_MPROC_EVENT_TABLE
                                           	extern _MIOS_ENC_PIN_TABLE
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L equ 0xfe1 ;; normaly 0xfe9, changed by mios-gpasm
                                           FSR0H equ 0xfe2 ;; normaly 0xfea, changed by mios-gpasm
                                           FSR1L equ 0xfe9 ;; normaly 0xfe1, changed by mios-gpasm
                                           FSR2L	equ	0xfd9
                                           INDF0 equ 0xfe7 ;; normaly 0xfef, changed by mios-gpasm
                                           POSTINC0 equ 0xfe6 ;; normaly 0xfee, changed by mios-gpasm
                                           POSTDEC1 equ 0xfed ;; normaly 0xfe5, changed by mios-gpasm
                                           PREINC1 equ 0xfec ;; normaly 0xfe4, changed by mios-gpasm
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _current_screen_num	db	0x00
                                           _current_preset_num	db	0x00
                                           _current_bus_num	db	0x00
                                           _current_shift_state	db	0x00
                                           _temp_value	db	0xff
                                           _timed_function	db	0x00
                                           _timer_ticks_count	db	0x00, 0x00
                                           _led_flash_led	db	0x00
                                           _led_flash_count	db	0x00
                                           _led_flash_ticks	db	0x00
                                           _MPROC_NotifyReceivedByte_fx_status_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers udata_ovr 0x0010 ;; normaly 0x0000, changed by mios-gpasm
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           
                                           udata_main_0	udata
                                           _current_preset	res	64
                                           
                                           udata_main_1	udata
                                           _midi_inout_map	res	256
                                           
                                           udata_main_2	udata
                                           _inout_map_build_outputs_1_1	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__AIN_NotifyChange	code
                                           _AIN_NotifyChange:
                                           ;	.line	480; main.c	void AIN_NotifyChange(unsigned char pin, unsigned int pin_value) __wparam{
004a48   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004a4a   ffed
004a4c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004a4e   ffd9
                                           ;	.line	481; main.c	}
004a50   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004a52   ffd9
004a54   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ENC_NotifyChange	code
                                           _ENC_NotifyChange:
                                           ;	.line	477; main.c	void ENC_NotifyChange(unsigned char encoder, char incrementer) __wparam{
004a56   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004a58   ffed
004a5a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004a5c   ffd9
                                           ;	.line	478; main.c	}
004a5e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004a60   ffd9
004a62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Finish	code
                                           _SR_Service_Finish:
                                           ;	.line	475; main.c	}
004b22   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Prepare	code
                                           _SR_Service_Prepare:
                                           ;	.line	472; main.c	}
004b24   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyTimeout	code
                                           _MPROC_NotifyTimeout:
                                           ;	.line	469; main.c	}
004b26   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyFoundEvent	code
                                           _MPROC_NotifyFoundEvent:
                                           ;	.line	465; main.c	void MPROC_NotifyFoundEvent(unsigned entry, unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
004a64   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004a66   ffed
004a68   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004a6a   ffd9
                                           ;	.line	466; main.c	}
004a6c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004a6e   ffd9
004a70   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Tick	code
                                           _DISPLAY_Tick:
                                           ;	.line	463; main.c	}
004b28   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Init	code
                                           _DISPLAY_Init:
                                           ;	.line	460; main.c	}
004b2a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedEvnt	code
                                           _MPROC_NotifyReceivedEvnt:
                                           ;	.line	441; main.c	void MPROC_NotifyReceivedEvnt(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
004400   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004402   ffed
004404   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004406   ffd9
004408   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00440a   ffed
00440c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00440e   ffed
004410   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004412   ffed
004414   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004416   ffed
004418   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
00441a   ffed
00441c   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
00441e   ffed
004420   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
004422   ffed
004424   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
004426   ffed
004428   6e10     movwf	0x10, 0            	MOVWF	r0x00
00442a   0e02     movlw	0x2                	MOVLW	0x02
00442c   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
00442e   f011
004430   0e03     movlw	0x3                	MOVLW	0x03
004432   cfdb     movff	0xfdb, 0x12        	MOVFF	PLUSW2, r0x02
004434   f012
                                           ;	.line	443; main.c	unsigned char evnt_type = evnt0 & 0xf0;
004436   0ef0     movlw	0xf0               	MOVLW	0xf0
004438   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
00443a   6e13     movwf	0x13, 0            	MOVWF	r0x03
                                           ;	.line	444; main.c	unsigned char in_chn = evnt0 & 0x0f;
00443c   0e0f     movlw	0xf                	MOVLW	0x0f
00443e   1610     andwf	0x10, 0x1, 0       	ANDWF	r0x00, F
                                           ;	.line	445; main.c	unsigned char evnt2_send = !(evnt_type == 0xc0 || evnt_type == 0xd0);
004440   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004442   0ac0     xorlw	0xc0               	XORLW	0xc0
004444   e005     bz	0x4450                	BZ	_00570_DS_
004446   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004448   0ad0     xorlw	0xd0               	XORLW	0xd0
00444a   e002     bz	0x4450                	BZ	_00570_DS_
00444c   6a14     clrf	0x14, 0             	CLRF	r0x04
00444e   d002     bra	0x4454               	BRA	_00571_DS_
                                           _00570_DS_:
004450   0e01     movlw	0x1                	MOVLW	0x01
004452   6e14     movwf	0x14, 0            	MOVWF	r0x04
                                           _00571_DS_:
004454   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004456   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
004458   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00445a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00445c   6a14     clrf	0x14, 0             	CLRF	r0x04
00445e   3614     rlcf	0x14, 0x1, 0        	RLCF	r0x04, F
                                           ;	.line	446; main.c	for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
004460   6a15     clrf	0x15, 0             	CLRF	r0x05
                                           _00563_DS_:
004462   0e10     movlw	0x10               	MOVLW	0x10
004464   5c15     subwf	0x15, 0, 0         	SUBWF	r0x05, W
004466   e226     bc	0x44b4                	BC	_00567_DS_
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004468   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00446a   0d10     mullw	0x10               	MULLW	0x10
00446c   cff3     movff	0xff3, 0x16        	MOVFF	PRODL, r0x06
00446e   f016
004470   cff4     movff	0xff4, 0x17        	MOVFF	PRODH, r0x07
004472   f017
004474   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
004476   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
004478   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
00447a   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
00447c   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00447e   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
004480   6ae8     clrf	0xe8, 0             	CLRF	WREG
004482   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
004484   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
004486   ffe1
004488   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
00448a   ffe2
00448c   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
00448e   f016
004490   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
004492   0aff     xorlw	0xff               	XORLW	0xff
004494   e00f     bz	0x44b4                	BZ	_00567_DS_
                                           ;	.line	447; main.c	MIOS_MIDI_TxBufferPut(evnt_type+midi_inout_map[in_chn][i]);
004496   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004498   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
00449a   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
00449c   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
00449e   f016
                                           ;	.line	448; main.c	MIOS_MIDI_TxBufferPut(evnt1);
0044a0   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0044a2   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
0044a4   f016
                                           ;	.line	449; main.c	if(evnt2_send)
0044a6   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
0044a8   e003     bz	0x44b0                	BZ	_00565_DS_
                                           ;	.line	450; main.c	MIOS_MIDI_TxBufferPut(evnt2);
0044aa   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0044ac   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
0044ae   f016
                                           _00565_DS_:
                                           ;	.line	446; main.c	for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
0044b0   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
0044b2   d7d7     bra	0x4462               	BRA	_00563_DS_
                                           _00567_DS_:
0044b4   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0044b6   f017
0044b8   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0044ba   f016
0044bc   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
0044be   f015
0044c0   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0044c2   f014
0044c4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0044c6   f013
0044c8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0044ca   f012
0044cc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0044ce   f011
0044d0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0044d2   f010
0044d4   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0044d6   ffd9
0044d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedByte	code
                                           _MPROC_NotifyReceivedByte:
                                           ;	.line	413; main.c	void MPROC_NotifyReceivedByte(unsigned char byte) __wparam{
0044da   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0044dc   ffed
0044de   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0044e0   ffd9
0044e2   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0044e4   ffed
0044e6   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0044e8   ffed
0044ea   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	415; main.c	if(byte >= 0xf0){//system status byte
0044ec   0ef0     movlw	0xf0               	MOVLW	0xf0
0044ee   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
0044f0   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
0044f2   6a11     clrf	0x11, 0             	CLRF	r0x01
0044f4   3611     rlcf	0x11, 0x1, 0        	RLCF	r0x01, F
0044f6   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0044f8   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0044fa   d03d     bra	0x4576               	BRA	_00542_DS_
                                           ;	.line	416; main.c	MIOS_MIDI_TxBufferPut(byte);
0044fc   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0044fe   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004500   f016
                                           ;	.line	418; main.c	switch(byte){
004502   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004504   e135     bnz	0x4570               	BNZ	_00535_DS_
004506   0ef4     movlw	0xf4               	MOVLW	0xf4
004508   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00450a   e232     bc	0x4570                	BC	_00535_DS_
00450c   0e10     movlw	0x10               	MOVLW	0x10
00450e   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
004510   6e11     movwf	0x11, 0            	MOVWF	r0x01
004512   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004514   ffed
004516   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004518   ffed
00451a   6a13     clrf	0x13, 0             	CLRF	r0x03
00451c   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
00451e   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
004520   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
004522   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
004524   0bfc     andlw	0xfc               	ANDLW	0xfc
004526   6e12     movwf	0x12, 0            	MOVWF	r0x02
004528   0e00     movlw	0                  	MOVLW	UPPER(_00554_DS_)
00452a   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00452c   0e45     movlw	0x45               	MOVLW	HIGH(_00554_DS_)
00452e   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
004530   0e48     movlw	0x48               	MOVLW	LOW(_00554_DS_)
004532   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
004534   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004536   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
004538   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00453a   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00453c   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00453e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004540   f013
004542   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004544   f012
004546   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00554_DS_:
004548   efb4     goto	0x4568              	GOTO	_00534_DS_
00454a   f022
00454c   efac     goto	0x4558              	GOTO	_00532_DS_
00454e   f022
004550   efb0     goto	0x4560              	GOTO	_00533_DS_
004552   f022
004554   efac     goto	0x4558              	GOTO	_00532_DS_
004556   f022
                                           _00532_DS_:
                                           ;	.line	421; main.c	fx_status = 1;
004558   0e01     movlw	0x1                	MOVLW	0x01
00455a   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
00455c   6feb     movwf	0xeb, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	422; main.c	break; 	
00455e   d017     bra	0x458e               	BRA	_00544_DS_
                                           _00533_DS_:
                                           ;	.line	424; main.c	fx_status = 2;				
004560   0e02     movlw	0x2                	MOVLW	0x02
004562   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
004564   6feb     movwf	0xeb, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	425; main.c	break;
004566   d013     bra	0x458e               	BRA	_00544_DS_
                                           _00534_DS_:
                                           ;	.line	427; main.c	fx_status = 0xff;
004568   0eff     movlw	0xff               	MOVLW	0xff
00456a   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
00456c   6feb     movwf	0xeb, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	428; main.c	break;
00456e   d00f     bra	0x458e               	BRA	_00544_DS_
                                           _00535_DS_:
004570   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	430; main.c	fx_status = 0;
004572   6beb     clrf	0xeb, 0x1           	CLRF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	431; main.c	}   
004574   d00c     bra	0x458e               	BRA	_00544_DS_
                                           _00542_DS_:
004576   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	433; main.c	else if(fx_status){
004578   51eb     movf	0xeb, 0, 0x1        	MOVF	_MPROC_NotifyReceivedByte_fx_status_1_1, W, B
00457a   e009     bz	0x458e                	BZ	_00544_DS_
                                           ;	.line	434; main.c	MIOS_MIDI_TxBufferPut(byte);
00457c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00457e   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
004580   f016
004582   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	435; main.c	if(fx_status!=0xff)
004584   51eb     movf	0xeb, 0, 0x1        	MOVF	_MPROC_NotifyReceivedByte_fx_status_1_1, W, B
004586   0aff     xorlw	0xff               	XORLW	0xff
004588   e002     bz	0x458e                	BZ	_00544_DS_
                                           _00556_DS_:
00458a   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	436; main.c	fx_status--;
00458c   07eb     decf	0xeb, 0x1, 0x1      	DECF	_MPROC_NotifyReceivedByte_fx_status_1_1, F, B
                                           _00544_DS_:
00458e   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004590   f011
004592   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004594   f010
004596   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004598   ffd9
00459a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DIN_NotifyToggle	code
                                           _DIN_NotifyToggle:
                                           ;	.line	341; main.c	void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value) __wparam{
00378e   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003790   ffed
003792   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003794   ffd9
003796   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003798   ffed
00379a   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00379c   ffed
00379e   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0037a0   ffed
0037a2   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0037a4   ffed
0037a6   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0037a8   ffed
0037aa   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
0037ac   ffed
0037ae   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
0037b0   ffed
0037b2   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
0037b4   ffed
0037b6   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
0037b8   ffed
0037ba   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
0037bc   ffed
0037be   6e10     movwf	0x10, 0            	MOVWF	r0x00
0037c0   0e02     movlw	0x2                	MOVLW	0x02
0037c2   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
0037c4   f011
0037c6   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	343; main.c	if(timed_function==1)
0037c8   51e5     movf	0xe5, 0, 0x1        	MOVF	_timed_function, W, B
0037ca   0a01     xorlw	0x1                	XORLW	0x01
0037cc   e103     bnz	0x37d4               	BNZ	_00449_DS_
                                           ;	.line	344; main.c	timed_function_stop();//stop clear request on every button change
0037ce   ec0e     call	0x4a1c, 0           	CALL	_timed_function_stop
0037d0   f025
0037d2   d007     bra	0x37e2               	BRA	_00450_DS_
                                           _00449_DS_:
0037d4   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	345; main.c	else if(timed_function==2 && !pin_value)
0037d6   51e5     movf	0xe5, 0, 0x1        	MOVF	_timed_function, W, B
0037d8   0a02     xorlw	0x2                	XORLW	0x02
0037da   e103     bnz	0x37e2               	BNZ	_00450_DS_
0037dc   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0037de   e101     bnz	0x37e2               	BNZ	_00450_DS_
                                           ;	.line	346; main.c	return;//button push will only be processed when no LED's are flashing.
0037e0   d1ce     bra	0x3b7e               	BRA	_00480_DS_
                                           _00450_DS_:
                                           ;	.line	347; main.c	if(pin > 7 && !pin_value){//this is a temp_value button. only handle if button is pushed
0037e2   0e08     movlw	0x8                	MOVLW	0x08
0037e4   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
0037e6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0037e8   d1a4     bra	0x3b32               	BRA	_00477_DS_
0037ea   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0037ec   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0037ee   d1a1     bra	0x3b32               	BRA	_00477_DS_
                                           ;	.line	348; main.c	temp_value = pin - 8;
0037f0   0ef8     movlw	0xf8               	MOVLW	0xf8
0037f2   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
0037f4   0100     movlb	0                  	BANKSEL	_temp_value
0037f6   6fe4     movwf	0xe4, 0x1          	MOVWF	_temp_value, B
                                           ;	.line	349; main.c	if((current_shift_state & -current_shift_state) == current_shift_state){//max. one screen button pushed, one bit set
0037f8   c0e3     movff	0xe3, 0x12         	MOVFF	_current_shift_state, r0x02
0037fa   f012
0037fc   6a13     clrf	0x13, 0             	CLRF	r0x03
0037fe   1c13     comf	0x13, 0, 0          	COMF	r0x03, W
003800   6e15     movwf	0x15, 0            	MOVWF	r0x05
003802   1c12     comf	0x12, 0, 0          	COMF	r0x02, W
003804   6e14     movwf	0x14, 0            	MOVWF	r0x04
003806   4a14     infsnz	0x14, 0x1, 0      	INFSNZ	r0x04, F
003808   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
00380a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00380c   1614     andwf	0x14, 0x1, 0       	ANDWF	r0x04, F
00380e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003810   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x05, F
003812   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003814   1812     xorwf	0x12, 0, 0         	XORWF	r0x02, W
003816   e103     bnz	0x381e               	BNZ	_00515_DS_
003818   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00381a   1813     xorwf	0x13, 0, 0         	XORWF	r0x03, W
00381c   e001     bz	0x3820                	BZ	_00516_DS_
                                           _00515_DS_:
00381e   d1ad     bra	0x3b7a               	BRA	_00478_DS_
                                           _00516_DS_:
                                           ;	.line	350; main.c	switch(current_screen_num){
003820   0e04     movlw	0x4                	MOVLW	0x04
003822   0100     movlb	0                  	BANKSEL	_current_screen_num
003824   5de0     subwf	0xe0, 0, 0x1       	SUBWF	_current_screen_num, W, B
003826   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003828   d1a8     bra	0x3b7a               	BRA	_00478_DS_
00382a   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
00382c   ffed
00382e   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003830   ffed
003832   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
                                           ; removed redundant BANKSEL
003834   35e0     rlcf	0xe0, 0, 0x1        	RLCF	_current_screen_num, W, B
003836   361b     rlcf	0x1b, 0x1, 0        	RLCF	r0x0b, F
003838   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00383a   361b     rlcf	0x1b, 0x1, 0        	RLCF	r0x0b, F
00383c   0bfc     andlw	0xfc               	ANDLW	0xfc
00383e   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003840   0e00     movlw	0                  	MOVLW	UPPER(_00518_DS_)
003842   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003844   0e38     movlw	0x38               	MOVLW	HIGH(_00518_DS_)
003846   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003848   0e60     movlw	0x60               	MOVLW	LOW(_00518_DS_)
00384a   261a     addwf	0x1a, 0x1, 0       	ADDWF	r0x0a, F
00384c   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
00384e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003850   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003852   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003854   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
003856   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
003858   f01b
00385a   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
00385c   f01a
00385e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00518_DS_:
003860   ef38     goto	0x3870              	GOTO	_00451_DS_
003862   f01c
003864   ef58     goto	0x38b0              	GOTO	_00455_DS_
003866   f01c
003868   ef5d     goto	0x38ba              	GOTO	_00456_DS_
00386a   f01c
00386c   effb     goto	0x39f6              	GOTO	_00460_DS_
00386e   f01c
                                           _00451_DS_:
                                           ;	.line	352; main.c	if (current_shift_state & MIOS_HLP_GetBitORMask(0)){
003870   0e00     movlw	0                  	MOVLW	0x00
003872   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003874   f016
003876   6e12     movwf	0x12, 0            	MOVWF	r0x02
003878   0100     movlb	0                  	BANKSEL	_current_shift_state
00387a   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
00387c   1612     andwf	0x12, 0x1, 0       	ANDWF	r0x02, F
00387e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003880   e012     bz	0x38a6                	BZ	_00453_DS_
003882   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	353; main.c	preset_store(current_preset_num);
003884   51e1     movf	0xe1, 0, 0x1        	MOVF	_current_preset_num, W, B
003886   ecce     call	0x459c, 0           	CALL	_preset_store
003888   f022
                                           ;	.line	354; main.c	led_flash_start(current_preset_num+8,0,50);//LED off for half a second to indicate save
00388a   0e08     movlw	0x8                	MOVLW	0x08
00388c   0100     movlb	0                  	BANKSEL	_current_preset_num
00388e   25e1     addwf	0xe1, 0, 0x1       	ADDWF	_current_preset_num, W, B
003890   6e12     movwf	0x12, 0            	MOVWF	r0x02
003892   0e32     movlw	0x32               	MOVLW	0x32
003894   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003896   0e00     movlw	0                  	MOVLW	0x00
003898   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00389a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00389c   ec72     call	0x46e4, 0           	CALL	_led_flash_start
00389e   f023
0038a0   0e02     movlw	0x2                	MOVLW	0x02
0038a2   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0038a4   d16a     bra	0x3b7a               	BRA	_00478_DS_
                                           _00453_DS_:
0038a6   0100     movlb	0                  	BANKSEL	_temp_value
                                           ;	.line	357; main.c	current_preset_set(temp_value);
0038a8   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
0038aa   ecf9     call	0x47f2, 0           	CALL	_current_preset_set
0038ac   f023
                                           ;	.line	358; main.c	break;			
0038ae   d165     bra	0x3b7a               	BRA	_00478_DS_
                                           _00455_DS_:
0038b0   0100     movlb	0                  	BANKSEL	_temp_value
                                           ;	.line	360; main.c	current_bus_set(temp_value);
0038b2   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
0038b4   ec27     call	0x484e, 0           	CALL	_current_bus_set
0038b6   f024
                                           ;	.line	361; main.c	break;			
0038b8   d160     bra	0x3b7a               	BRA	_00478_DS_
                                           _00456_DS_:
                                           ;	.line	363; main.c	if (current_shift_state & MIOS_HLP_GetBitORMask(2)){//add/remove input chanel
0038ba   0e02     movlw	0x2                	MOVLW	0x02
0038bc   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
0038be   f016
0038c0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0038c2   0100     movlb	0                  	BANKSEL	_current_shift_state
0038c4   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
0038c6   1612     andwf	0x12, 0x1, 0       	ANDWF	r0x02, F
0038c8   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0038ca   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0038cc   d04d     bra	0x3968               	BRA	_00458_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0038ce   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	364; main.c	current_preset[current_bus_num].inputs = 
0038d0   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
0038d2   0d04     mullw	0x4                	MULLW	0x04
0038d4   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
0038d6   f012
0038d8   6a13     clrf	0x13, 0             	CLRF	r0x03
0038da   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0038dc   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0038de   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0038e0   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0038e2   c012     movff	0x12, 0x14         	MOVFF	r0x02, r0x04
0038e4   f014
0038e6   c013     movff	0x13, 0x15         	MOVFF	r0x03, r0x05
0038e8   f015
                                           ;	.line	365; main.c	(current_preset[current_bus_num].inputs & int_bit_ormask[temp_value])?
0038ea   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0038ec   ffe1
0038ee   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0038f0   ffe2
0038f2   cfe6     movff	0xfe6, 0x12        	MOVFF	POSTINC0, r0x02
0038f4   f012
0038f6   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0038f8   f013
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0038fa   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0038fc   0100     movlb	0                  	BANKSEL	_temp_value
0038fe   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
003900   6e16     movwf	0x16, 0            	MOVWF	r0x06
003902   6a17     clrf	0x17, 0             	CLRF	r0x07
003904   6a18     clrf	0x18, 0             	CLRF	r0x08
003906   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003908   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
00390a   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
00390c   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
00390e   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003910   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003912   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
003914   fff6
003916   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
003918   fff7
00391a   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
00391c   fff8
00391e   0009     tblrd	*+                 	TBLRD*+	
003920   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
003922   f016
003924   0009     tblrd	*+                 	TBLRD*+	
003926   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
003928   f017
00392a   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
00392c   1412     andwf	0x12, 0, 0         	ANDWF	r0x02, W
00392e   6e18     movwf	0x18, 0            	MOVWF	r0x08
003930   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003932   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
003934   6e19     movwf	0x19, 0            	MOVWF	r0x09
003936   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003938   1019     iorwf	0x19, 0, 0         	IORWF	r0x09, W
00393a   e007     bz	0x394a                	BZ	_00482_DS_
                                           ;	.line	366; main.c	(current_preset[current_bus_num].inputs ^ int_bit_ormask[temp_value]):
00393c   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
00393e   1812     xorwf	0x12, 0, 0         	XORWF	r0x02, W
003940   6e18     movwf	0x18, 0            	MOVWF	r0x08
003942   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003944   1813     xorwf	0x13, 0, 0         	XORWF	r0x03, W
003946   6e19     movwf	0x19, 0            	MOVWF	r0x09
003948   d006     bra	0x3956               	BRA	_00483_DS_
                                           _00482_DS_:
                                           ;	.line	367; main.c	(current_preset[current_bus_num].inputs | int_bit_ormask[temp_value]);
00394a   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
00394c   1012     iorwf	0x12, 0, 0         	IORWF	r0x02, W
00394e   6e18     movwf	0x18, 0            	MOVWF	r0x08
003950   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003952   1013     iorwf	0x13, 0, 0         	IORWF	r0x03, W
003954   6e19     movwf	0x19, 0            	MOVWF	r0x09
                                           _00483_DS_:
003956   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003958   ffe1
00395a   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
00395c   ffe2
00395e   c018     movff	0x18, 0xfe6        	MOVFF	r0x08, POSTINC0
003960   ffe6
003962   c019     movff	0x19, 0xfe7        	MOVFF	r0x09, INDF0
003964   ffe7
003966   d044     bra	0x39f0               	BRA	_00459_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00458_DS_:
003968   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	370; main.c	current_preset[current_bus_num].inputs = 
00396a   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
00396c   0d04     mullw	0x4                	MULLW	0x04
00396e   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003970   f012
003972   6a13     clrf	0x13, 0             	CLRF	r0x03
003974   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003976   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003978   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00397a   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00397c   c012     movff	0x12, 0x14         	MOVFF	r0x02, r0x04
00397e   f014
003980   c013     movff	0x13, 0x15         	MOVFF	r0x03, r0x05
003982   f015
                                           ;	.line	371; main.c	(current_preset[current_bus_num].inputs==int_bit_ormask[temp_value]) ? 0x0000 :int_bit_ormask[temp_value];
003984   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003986   ffe1
003988   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00398a   ffe2
00398c   cfe6     movff	0xfe6, 0x12        	MOVFF	POSTINC0, r0x02
00398e   f012
003990   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
003992   f013
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003994   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003996   0100     movlb	0                  	BANKSEL	_temp_value
003998   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
00399a   6e16     movwf	0x16, 0            	MOVWF	r0x06
00399c   6a17     clrf	0x17, 0             	CLRF	r0x07
00399e   6a18     clrf	0x18, 0             	CLRF	r0x08
0039a0   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
0039a2   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0039a4   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
0039a6   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0039a8   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0039aa   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0039ac   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
0039ae   fff6
0039b0   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
0039b2   fff7
0039b4   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
0039b6   fff8
0039b8   0009     tblrd	*+                 	TBLRD*+	
0039ba   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
0039bc   f016
0039be   0009     tblrd	*+                 	TBLRD*+	
0039c0   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0039c2   f017
0039c4   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0039c6   1816     xorwf	0x16, 0, 0         	XORWF	r0x06, W
0039c8   e103     bnz	0x39d0               	BNZ	_00521_DS_
0039ca   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0039cc   1817     xorwf	0x17, 0, 0         	XORWF	r0x07, W
0039ce   e001     bz	0x39d2                	BZ	_00522_DS_
                                           _00521_DS_:
0039d0   d003     bra	0x39d8               	BRA	_00484_DS_
                                           _00522_DS_:
0039d2   6a12     clrf	0x12, 0             	CLRF	r0x02
0039d4   6a13     clrf	0x13, 0             	CLRF	r0x03
0039d6   d004     bra	0x39e0               	BRA	_00485_DS_
                                           _00484_DS_:
0039d8   c016     movff	0x16, 0x12         	MOVFF	r0x06, r0x02
0039da   f012
0039dc   c017     movff	0x17, 0x13         	MOVFF	r0x07, r0x03
0039de   f013
                                           _00485_DS_:
0039e0   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
0039e2   ffe1
0039e4   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
0039e6   ffe2
0039e8   c012     movff	0x12, 0xfe6        	MOVFF	r0x02, POSTINC0
0039ea   ffe6
0039ec   c013     movff	0x13, 0xfe7        	MOVFF	r0x03, INDF0
0039ee   ffe7
                                           _00459_DS_:
                                           ;	.line	373; main.c	inout_map_build();
0039f0   ecd6     call	0x3bac, 0           	CALL	_inout_map_build
0039f2   f01d
                                           ;	.line	374; main.c	break;			
0039f4   d0c2     bra	0x3b7a               	BRA	_00478_DS_
                                           _00460_DS_:
                                           ;	.line	376; main.c	if (current_shift_state & MIOS_HLP_GetBitORMask(3)){//set/unset output chanel
0039f6   0e03     movlw	0x3                	MOVLW	0x03
0039f8   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
0039fa   f016
0039fc   6e12     movwf	0x12, 0            	MOVWF	r0x02
0039fe   0100     movlb	0                  	BANKSEL	_current_shift_state
003a00   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003a02   1612     andwf	0x12, 0x1, 0       	ANDWF	r0x02, F
003a04   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003a06   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003a08   d04d     bra	0x3aa4               	BRA	_00462_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003a0a   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	377; main.c	current_preset[current_bus_num].outputs = 
003a0c   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003a0e   0d04     mullw	0x4                	MULLW	0x04
003a10   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003a12   f012
003a14   6a13     clrf	0x13, 0             	CLRF	r0x03
003a16   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003a18   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003a1a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003a1c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003a1e   0e02     movlw	0x2                	MOVLW	0x02
003a20   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003a22   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003a24   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
                                           ;	.line	378; main.c	(current_preset[current_bus_num].outputs & int_bit_ormask[temp_value])?
003a26   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003a28   ffe1
003a2a   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003a2c   ffe2
003a2e   cfe6     movff	0xfe6, 0x14        	MOVFF	POSTINC0, r0x04
003a30   f014
003a32   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
003a34   f015
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003a36   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003a38   0100     movlb	0                  	BANKSEL	_temp_value
003a3a   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
003a3c   6e16     movwf	0x16, 0            	MOVWF	r0x06
003a3e   6a17     clrf	0x17, 0             	CLRF	r0x07
003a40   6a18     clrf	0x18, 0             	CLRF	r0x08
003a42   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003a44   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003a46   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
003a48   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003a4a   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003a4c   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003a4e   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
003a50   fff6
003a52   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
003a54   fff7
003a56   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
003a58   fff8
003a5a   0009     tblrd	*+                 	TBLRD*+	
003a5c   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
003a5e   f016
003a60   0009     tblrd	*+                 	TBLRD*+	
003a62   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
003a64   f017
003a66   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003a68   1414     andwf	0x14, 0, 0         	ANDWF	r0x04, W
003a6a   6e18     movwf	0x18, 0            	MOVWF	r0x08
003a6c   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003a6e   1415     andwf	0x15, 0, 0         	ANDWF	r0x05, W
003a70   6e19     movwf	0x19, 0            	MOVWF	r0x09
003a72   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003a74   1019     iorwf	0x19, 0, 0         	IORWF	r0x09, W
003a76   e007     bz	0x3a86                	BZ	_00486_DS_
                                           ;	.line	379; main.c	(current_preset[current_bus_num].outputs ^ int_bit_ormask[temp_value]):
003a78   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003a7a   1814     xorwf	0x14, 0, 0         	XORWF	r0x04, W
003a7c   6e18     movwf	0x18, 0            	MOVWF	r0x08
003a7e   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003a80   1815     xorwf	0x15, 0, 0         	XORWF	r0x05, W
003a82   6e19     movwf	0x19, 0            	MOVWF	r0x09
003a84   d006     bra	0x3a92               	BRA	_00487_DS_
                                           _00486_DS_:
                                           ;	.line	380; main.c	(current_preset[current_bus_num].outputs | int_bit_ormask[temp_value]);
003a86   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003a88   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
003a8a   6e18     movwf	0x18, 0            	MOVWF	r0x08
003a8c   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003a8e   1015     iorwf	0x15, 0, 0         	IORWF	r0x05, W
003a90   6e19     movwf	0x19, 0            	MOVWF	r0x09
                                           _00487_DS_:
003a92   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003a94   ffe1
003a96   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003a98   ffe2
003a9a   c018     movff	0x18, 0xfe6        	MOVFF	r0x08, POSTINC0
003a9c   ffe6
003a9e   c019     movff	0x19, 0xfe7        	MOVFF	r0x09, INDF0
003aa0   ffe7
003aa2   d044     bra	0x3b2c               	BRA	_00463_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00462_DS_:
003aa4   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	383; main.c	current_preset[current_bus_num].outputs = 
003aa6   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003aa8   0d04     mullw	0x4                	MULLW	0x04
003aaa   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003aac   f012
003aae   6a13     clrf	0x13, 0             	CLRF	r0x03
003ab0   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003ab2   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003ab4   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003ab6   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003ab8   0e02     movlw	0x2                	MOVLW	0x02
003aba   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003abc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003abe   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
                                           ;	.line	384; main.c	(current_preset[current_bus_num].outputs==int_bit_ormask[temp_value]) ? 
003ac0   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003ac2   ffe1
003ac4   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003ac6   ffe2
003ac8   cfe6     movff	0xfe6, 0x14        	MOVFF	POSTINC0, r0x04
003aca   f014
003acc   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
003ace   f015
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003ad0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003ad2   0100     movlb	0                  	BANKSEL	_temp_value
003ad4   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
003ad6   6e16     movwf	0x16, 0            	MOVWF	r0x06
003ad8   6a17     clrf	0x17, 0             	CLRF	r0x07
003ada   6a18     clrf	0x18, 0             	CLRF	r0x08
003adc   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003ade   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003ae0   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
003ae2   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003ae4   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003ae6   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003ae8   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
003aea   fff6
003aec   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
003aee   fff7
003af0   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
003af2   fff8
003af4   0009     tblrd	*+                 	TBLRD*+	
003af6   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
003af8   f016
003afa   0009     tblrd	*+                 	TBLRD*+	
003afc   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
003afe   f017
003b00   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003b02   1816     xorwf	0x16, 0, 0         	XORWF	r0x06, W
003b04   e103     bnz	0x3b0c               	BNZ	_00525_DS_
003b06   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003b08   1817     xorwf	0x17, 0, 0         	XORWF	r0x07, W
003b0a   e001     bz	0x3b0e                	BZ	_00526_DS_
                                           _00525_DS_:
003b0c   d003     bra	0x3b14               	BRA	_00488_DS_
                                           _00526_DS_:
                                           ;	.line	385; main.c	0x0000 :int_bit_ormask[temp_value];
003b0e   6a14     clrf	0x14, 0             	CLRF	r0x04
003b10   6a15     clrf	0x15, 0             	CLRF	r0x05
003b12   d004     bra	0x3b1c               	BRA	_00489_DS_
                                           _00488_DS_:
003b14   c016     movff	0x16, 0x14         	MOVFF	r0x06, r0x04
003b16   f014
003b18   c017     movff	0x17, 0x15         	MOVFF	r0x07, r0x05
003b1a   f015
                                           _00489_DS_:
003b1c   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003b1e   ffe1
003b20   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003b22   ffe2
003b24   c014     movff	0x14, 0xfe6        	MOVFF	r0x04, POSTINC0
003b26   ffe6
003b28   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
003b2a   ffe7
                                           _00463_DS_:
                                           ;	.line	387; main.c	inout_map_build();
003b2c   ecd6     call	0x3bac, 0           	CALL	_inout_map_build
003b2e   f01d
                                           ;	.line	389; main.c	}
003b30   d024     bra	0x3b7a               	BRA	_00478_DS_
                                           _00477_DS_:
                                           ;	.line	392; main.c	else if(pin < 4){
003b32   0e04     movlw	0x4                	MOVLW	0x04
003b34   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003b36   e221     bc	0x3b7a                	BC	_00478_DS_
                                           ;	.line	393; main.c	temp_value = 0xff;
003b38   0eff     movlw	0xff               	MOVLW	0xff
003b3a   0100     movlb	0                  	BANKSEL	_temp_value
003b3c   6fe4     movwf	0xe4, 0x1          	MOVWF	_temp_value, B
                                           ;	.line	394; main.c	if(pin_value)
003b3e   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003b40   e009     bz	0x3b54                	BZ	_00472_DS_
                                           ;	.line	395; main.c	current_shift_state &= ~MIOS_HLP_GetBitORMask(pin);//remove shift flag
003b42   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b44   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003b46   f016
003b48   6e11     movwf	0x11, 0            	MOVWF	r0x01
003b4a   1e11     comf	0x11, 0x1, 0        	COMF	r0x01, F
003b4c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003b4e   0100     movlb	0                  	BANKSEL	_current_shift_state
003b50   17e3     andwf	0xe3, 0x1, 0x1     	ANDWF	_current_shift_state, F, B
003b52   d013     bra	0x3b7a               	BRA	_00478_DS_
                                           _00472_DS_:
003b54   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	397; main.c	if(!current_shift_state){
003b56   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003b58   e109     bnz	0x3b6c               	BNZ	_00470_DS_
                                           ;	.line	398; main.c	current_screen_set(pin);
003b5a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b5c   ec4b     call	0x4896, 0           	CALL	_current_screen_set
003b5e   f024
                                           ;	.line	399; main.c	if(pin < 2)//start init request countdown
003b60   0e02     movlw	0x2                	MOVLW	0x02
003b62   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003b64   e203     bc	0x3b6c                	BC	_00470_DS_
                                           ;	.line	400; main.c	timed_function_start(1);
003b66   0e01     movlw	0x1                	MOVLW	0x01
003b68   ec12     call	0x4824, 0           	CALL	_timed_function_start
003b6a   f024
                                           _00470_DS_:
                                           ;	.line	402; main.c	current_shift_state |= MIOS_HLP_GetBitORMask(pin);//add shift flag
003b6c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b6e   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003b70   f016
003b72   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b74   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b76   0100     movlb	0                  	BANKSEL	_current_shift_state
003b78   13e3     iorwf	0xe3, 0x1, 0x1     	IORWF	_current_shift_state, F, B
                                           _00478_DS_:
                                           ;	.line	405; main.c	screen_print();
003b7a   ec18     call	0x3e30, 0           	CALL	_screen_print
003b7c   f01f
                                           _00480_DS_:
003b7e   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003b80   f019
003b82   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
003b84   f018
003b86   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003b88   f017
003b8a   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003b8c   f016
003b8e   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003b90   f015
003b92   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003b94   f014
003b96   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003b98   f013
003b9a   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003b9c   f012
003b9e   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003ba0   f011
003ba2   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003ba4   f010
003ba6   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
003ba8   ffd9
003baa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Tick	code
                                           _Tick:
                                           ;	.line	303; main.c	void Tick(void) __wparam{
004316   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004318   ffed
00431a   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00431c   ffed
00431e   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	305; main.c	if(!timed_function)
004320   51e5     movf	0xe5, 0, 0x1        	MOVF	_timed_function, W, B
004322   e101     bnz	0x4326               	BNZ	_00404_DS_
                                           ;	.line	306; main.c	return;
004324   d068     bra	0x43f6               	BRA	_00422_DS_
                                           _00404_DS_:
004326   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	307; main.c	if(timed_function==1 && (timer_ticks_count >= init_request_ticks)){
004328   51e5     movf	0xe5, 0, 0x1        	MOVF	_timed_function, W, B
00432a   0a01     xorlw	0x1                	XORLW	0x01
00432c   e001     bz	0x4330                	BZ	_00435_DS_
00432e   d041     bra	0x43b2               	BRA	_00415_DS_
                                           _00435_DS_:
004330   0e01     movlw	0x1                	MOVLW	0x01
004332   0100     movlb	0                  	BANKSEL	(_timer_ticks_count + 1)
004334   5de7     subwf	0xe7, 0, 0x1       	SUBWF	(_timer_ticks_count + 1), W, B
004336   e102     bnz	0x433c               	BNZ	_00436_DS_
004338   0e2c     movlw	0x2c               	MOVLW	0x2c
                                           ; removed redundant BANKSEL
00433a   5de6     subwf	0xe6, 0, 0x1       	SUBWF	_timer_ticks_count, W, B
                                           _00436_DS_:
00433c   e33a     bnc	0x43b2               	BNC	_00415_DS_
                                           ;	.line	308; main.c	timed_function_stop();
00433e   ec0e     call	0x4a1c, 0           	CALL	_timed_function_stop
004340   f025
004342   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	309; main.c	if(!current_screen_num){//screen is preset
004344   51e0     movf	0xe0, 0, 0x1        	MOVF	_current_screen_num, W, B
004346   e125     bnz	0x4392               	BNZ	_00406_DS_
                                           ;	.line	310; main.c	preset_init(0);
004348   0e00     movlw	0                  	MOVLW	0x00
00434a   ec44     call	0x4088, 0           	CALL	_preset_init
00434c   f020
                                           ;	.line	311; main.c	preset_store(0);
00434e   0e00     movlw	0                  	MOVLW	0x00
004350   ecce     call	0x459c, 0           	CALL	_preset_store
004352   f022
                                           ;	.line	312; main.c	preset_init(1);
004354   0e01     movlw	0x1                	MOVLW	0x01
004356   ec44     call	0x4088, 0           	CALL	_preset_init
004358   f020
                                           ;	.line	313; main.c	for(i=1;i<16;i++)
00435a   0e01     movlw	0x1                	MOVLW	0x01
00435c   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           _00418_DS_:
00435e   0e10     movlw	0x10               	MOVLW	0x10
004360   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
004362   e205     bc	0x436e                	BC	_00421_DS_
                                           ;	.line	314; main.c	preset_store(i);
004364   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004366   ecce     call	0x459c, 0           	CALL	_preset_store
004368   f022
                                           ;	.line	313; main.c	for(i=1;i<16;i++)
00436a   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
00436c   d7f8     bra	0x435e               	BRA	_00418_DS_
                                           _00421_DS_:
                                           ;	.line	315; main.c	current_preset_set(0);
00436e   0e00     movlw	0                  	MOVLW	0x00
004370   ecf9     call	0x47f2, 0           	CALL	_current_preset_set
004372   f023
                                           ;	.line	316; main.c	current_bus_set(0);
004374   0e00     movlw	0                  	MOVLW	0x00
004376   ec27     call	0x484e, 0           	CALL	_current_bus_set
004378   f024
                                           ;	.line	317; main.c	inout_map_build();
00437a   ecd6     call	0x3bac, 0           	CALL	_inout_map_build
00437c   f01d
                                           ;	.line	318; main.c	led_flash_start(0xff,5,10);//flash 5 times
00437e   0e0a     movlw	0xa                	MOVLW	0x0a
004380   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004382   0e05     movlw	0x5                	MOVLW	0x05
004384   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004386   0eff     movlw	0xff               	MOVLW	0xff
004388   ec72     call	0x46e4, 0           	CALL	_led_flash_start
00438a   f023
00438c   0e02     movlw	0x2                	MOVLW	0x02
00438e   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004390   d032     bra	0x43f6               	BRA	_00422_DS_
                                           _00406_DS_:
                                           ;	.line	321; main.c	preset_init(1);//empty current preset
004392   0e01     movlw	0x1                	MOVLW	0x01
004394   ec44     call	0x4088, 0           	CALL	_preset_init
004396   f020
                                           ;	.line	322; main.c	current_bus_set(0);
004398   0e00     movlw	0                  	MOVLW	0x00
00439a   ec27     call	0x484e, 0           	CALL	_current_bus_set
00439c   f024
                                           ;	.line	323; main.c	led_flash_start(0xff,2,10);//flash 2 times
00439e   0e0a     movlw	0xa                	MOVLW	0x0a
0043a0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043a2   0e02     movlw	0x2                	MOVLW	0x02
0043a4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0043a6   0eff     movlw	0xff               	MOVLW	0xff
0043a8   ec72     call	0x46e4, 0           	CALL	_led_flash_start
0043aa   f023
0043ac   0e02     movlw	0x2                	MOVLW	0x02
0043ae   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0043b0   d022     bra	0x43f6               	BRA	_00422_DS_
                                           _00415_DS_:
0043b2   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	326; main.c	else if(timed_function==2 && (timer_ticks_count >= led_flash_ticks)){
0043b4   51e5     movf	0xe5, 0, 0x1        	MOVF	_timed_function, W, B
0043b6   0a02     xorlw	0x2                	XORLW	0x02
0043b8   e11e     bnz	0x43f6               	BNZ	_00422_DS_
0043ba   c0ea     movff	0xea, 0x10         	MOVFF	_led_flash_ticks, r0x00
0043bc   f010
0043be   6a11     clrf	0x11, 0             	CLRF	r0x01
0043c0   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0043c2   0100     movlb	0                  	BANKSEL	(_timer_ticks_count + 1)
0043c4   5de7     subwf	0xe7, 0, 0x1       	SUBWF	(_timer_ticks_count + 1), W, B
0043c6   e102     bnz	0x43cc               	BNZ	_00440_DS_
0043c8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0043ca   5de6     subwf	0xe6, 0, 0x1       	SUBWF	_timer_ticks_count, W, B
                                           _00440_DS_:
0043cc   e314     bnc	0x43f6               	BNC	_00422_DS_
                                           ;	.line	327; main.c	if(led_flash_count > 1){
0043ce   0e02     movlw	0x2                	MOVLW	0x02
0043d0   0100     movlb	0                  	BANKSEL	_led_flash_count
0043d2   5de9     subwf	0xe9, 0, 0x1       	SUBWF	_led_flash_count, W, B
0043d4   e30c     bnc	0x43ee               	BNC	_00409_DS_
                                           ;	.line	328; main.c	led_flash_set(led_flash_count-- & 0x01);
0043d6   c0e9     movff	0xe9, 0x10         	MOVFF	_led_flash_count, r0x00
0043d8   f010
0043da   07e9     decf	0xe9, 0x1, 0x1      	DECF	_led_flash_count, F, B
0043dc   0e01     movlw	0x1                	MOVLW	0x01
0043de   1610     andwf	0x10, 0x1, 0       	ANDWF	r0x00, F
0043e0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0043e2   ec42     call	0x4684, 0           	CALL	_led_flash_set
0043e4   f023
0043e6   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	329; main.c	timer_ticks_count = 0;
0043e8   6be6     clrf	0xe6, 0x1           	CLRF	_timer_ticks_count, B
                                           ; removed redundant BANKSEL
0043ea   6be7     clrf	0xe7, 0x1           	CLRF	(_timer_ticks_count + 1), B
0043ec   d004     bra	0x43f6               	BRA	_00422_DS_
                                           _00409_DS_:
                                           ;	.line	332; main.c	timed_function_stop();
0043ee   ec0e     call	0x4a1c, 0           	CALL	_timed_function_stop
0043f0   f025
                                           ;	.line	333; main.c	screen_print();
0043f2   ec18     call	0x3e30, 0           	CALL	_screen_print
0043f4   f01f
                                           _00422_DS_:
0043f6   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0043f8   f011
0043fa   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0043fc   f010
0043fe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__led_flash_set	code
                                           _led_flash_set:
                                           ;	.line	292; main.c	void led_flash_set(unsigned char state) __wparam{
004684   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004686   ffed
004688   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00468a   ffd9
00468c   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00468e   ffed
004690   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004692   ffed
004694   6e10     movwf	0x10, 0            	MOVWF	r0x00
004696   0100     movlb	0                  	BANKSEL	_led_flash_led
                                           ;	.line	293; main.c	if(led_flash_led == 0xff){
004698   51e8     movf	0xe8, 0, 0x1        	MOVF	_led_flash_led, W, B
00469a   0aff     xorlw	0xff               	XORLW	0xff
00469c   e115     bnz	0x46c8               	BNZ	_00389_DS_
                                           ;	.line	294; main.c	state = (state ? 0xff : 0x00);
00469e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0046a0   e003     bz	0x46a8                	BZ	_00393_DS_
0046a2   0eff     movlw	0xff               	MOVLW	0xff
0046a4   6e11     movwf	0x11, 0            	MOVWF	r0x01
0046a6   d001     bra	0x46aa               	BRA	_00394_DS_
                                           _00393_DS_:
0046a8   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00394_DS_:
0046aa   c011     movff	0x11, 0x10         	MOVFF	r0x01, r0x00
0046ac   f010
                                           ;	.line	295; main.c	MIOS_DOUT_SRSet(0x01,state);
0046ae   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0046b0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0046b2   0e01     movlw	0x1                	MOVLW	0x01
0046b4   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
0046b6   f025
0046b8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	296; main.c	MIOS_DOUT_SRSet(0x02,state);
0046ba   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0046bc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0046be   0e02     movlw	0x2                	MOVLW	0x02
0046c0   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
0046c2   f025
0046c4   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0046c6   d007     bra	0x46d6               	BRA	_00391_DS_
                                           _00389_DS_:
                                           ;	.line	299; main.c	MIOS_DOUT_PinSet(led_flash_led,state);
0046c8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0046ca   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0046cc   0100     movlb	0                  	BANKSEL	_led_flash_led
0046ce   51e8     movf	0xe8, 0, 0x1        	MOVF	_led_flash_led, W, B
0046d0   ec40     call	0x4a80, 0           	CALL	_MIOS_DOUT_PinSet
0046d2   f025
0046d4   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00391_DS_:
0046d6   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0046d8   f011
0046da   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0046dc   f010
0046de   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0046e0   ffd9
0046e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__led_flash_start	code
                                           _led_flash_start:
                                           ;	.line	284; main.c	void led_flash_start(unsigned char led,unsigned char times,unsigned char ticks) __wparam{
0046e4   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0046e6   ffed
0046e8   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0046ea   ffd9
0046ec   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0046ee   ffed
0046f0   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0046f2   ffed
0046f4   0100     movlb	0                  	BANKSEL	_led_flash_led
0046f6   6fe8     movwf	0xe8, 0x1          	MOVWF	_led_flash_led, B
0046f8   0e02     movlw	0x2                	MOVLW	0x02
0046fa   cfdb     movff	0xfdb, 0x10        	MOVFF	PLUSW2, r0x00
0046fc   f010
0046fe   0e03     movlw	0x3                	MOVLW	0x03
004700   cfdb     movff	0xfdb, 0xea        	MOVFF	PLUSW2, _led_flash_ticks
004702   f0ea
                                           ;	.line	287; main.c	led_flash_count = (times<<1) + 1;
004704   4410     rlncf	0x10, 0, 0         	RLNCF	r0x00, W
004706   0bfe     andlw	0xfe               	ANDLW	0xfe
004708   6e11     movwf	0x11, 0            	MOVWF	r0x01
00470a   2811     incf	0x11, 0, 0          	INCF	r0x01, W
00470c   0100     movlb	0                  	BANKSEL	_led_flash_count
00470e   6fe9     movwf	0xe9, 0x1          	MOVWF	_led_flash_count, B
                                           ;	.line	288; main.c	led_flash_set(0);
004710   0e00     movlw	0                  	MOVLW	0x00
004712   ec42     call	0x4684, 0           	CALL	_led_flash_set
004714   f023
                                           ;	.line	289; main.c	timed_function_start(2);
004716   0e02     movlw	0x2                	MOVLW	0x02
004718   ec12     call	0x4824, 0           	CALL	_timed_function_start
00471a   f024
00471c   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00471e   f011
004720   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004722   f010
004724   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004726   ffd9
004728   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__timed_function_stop	code
                                           _timed_function_stop:
                                           ;	.line	279; main.c	MIOS_TIMER_Stop();
004a1c   ecc0     call	0x2d80, 0           	CALL	_MIOS_TIMER_Stop
004a1e   f016
004a20   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	280; main.c	timed_function = 0;
004a22   6be5     clrf	0xe5, 0x1           	CLRF	_timed_function, B
004a24   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	281; main.c	timer_ticks_count = 0;
004a26   6be6     clrf	0xe6, 0x1           	CLRF	_timer_ticks_count, B
                                           ; removed redundant BANKSEL
004a28   6be7     clrf	0xe7, 0x1           	CLRF	(_timer_ticks_count + 1), B
004a2a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__timed_function_start	code
                                           _timed_function_start:
                                           ;	.line	272; main.c	void timed_function_start(unsigned char func) __wparam{
004824   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004826   ffed
004828   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00482a   ffd9
00482c   0100     movlb	0                  	BANKSEL	_timed_function
00482e   6fe5     movwf	0xe5, 0x1          	MOVWF	_timed_function, B
004830   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	273; main.c	timer_ticks_count=0;
004832   6be6     clrf	0xe6, 0x1           	CLRF	_timer_ticks_count, B
                                           ; removed redundant BANKSEL
004834   6be7     clrf	0xe7, 0x1           	CLRF	(_timer_ticks_count + 1), B
                                           ;	.line	275; main.c	MIOS_TIMER_Init(0x01,50000);
004836   0ec3     movlw	0xc3               	MOVLW	0xc3
004838   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00483a   0e50     movlw	0x50               	MOVLW	0x50
00483c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00483e   0e01     movlw	0x1                	MOVLW	0x01
004840   ecfe     call	0x49fc, 0           	CALL	_MIOS_TIMER_Init
004842   f024
004844   0e02     movlw	0x2                	MOVLW	0x02
004846   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
004848   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00484a   ffd9
00484c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Timer	code
                                           _Timer:
004b0e   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	268; main.c	timer_ticks_count++;
004b10   2be6     incf	0xe6, 0x1, 0x1      	INCF	_timer_ticks_count, F, B
004b12   e301     bnc	0x4b16               	BNC	_10619_DS_
                                           ; removed redundant BANKSEL
004b14   2be7     incf	0xe7, 0x1, 0x1      	INCF	(_timer_ticks_count + 1), F, B
                                           _10619_DS_:
004b16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__current_preset_set	code
                                           _current_preset_set:
                                           ;	.line	257; main.c	void current_preset_set(unsigned char value) __wparam{
0047f2   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0047f4   ffed
0047f6   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0047f8   ffd9
0047fa   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0047fc   ffed
0047fe   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	258; main.c	current_preset_num = value;
004800   c010     movff	0x10, 0xe1         	MOVFF	r0x00, _current_preset_num
004802   f0e1
                                           ;	.line	259; main.c	preset_load(value);
004804   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004806   ec08     call	0x4610, 0           	CALL	_preset_load
004808   f023
                                           ;	.line	260; main.c	inout_map_build();
00480a   ecd6     call	0x3bac, 0           	CALL	_inout_map_build
00480c   f01d
                                           ;	.line	261; main.c	MIOS_EEPROM_Write(0x01,value);
00480e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004810   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004812   0e01     movlw	0x1                	MOVLW	0x01
004814   ec70     call	0x4ae0, 0           	CALL	_MIOS_EEPROM_Write
004816   f025
004818   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00481a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00481c   f010
00481e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004820   ffd9
004822   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__current_bus_set	code
                                           _current_bus_set:
                                           ;	.line	252; main.c	void current_bus_set(unsigned char value) __wparam{
00484e   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004850   ffed
004852   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004854   ffd9
004856   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004858   ffed
00485a   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	253; main.c	current_bus_num = value;
00485c   c010     movff	0x10, 0xe2         	MOVFF	r0x00, _current_bus_num
00485e   f0e2
                                           ;	.line	254; main.c	MIOS_EEPROM_Write(0x02,value);
004860   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004862   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004864   0e02     movlw	0x2                	MOVLW	0x02
004866   ec70     call	0x4ae0, 0           	CALL	_MIOS_EEPROM_Write
004868   f025
00486a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
00486c   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00486e   f010
004870   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004872   ffd9
004874   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__current_screen_set	code
                                           _current_screen_set:
                                           ;	.line	247; main.c	void current_screen_set(unsigned char value) __wparam{
004896   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004898   ffed
00489a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00489c   ffd9
00489e   0100     movlb	0                  	BANKSEL	_current_screen_num
0048a0   6fe0     movwf	0xe0, 0x1          	MOVWF	_current_screen_num, B
                                           ;	.line	249; main.c	MIOS_EEPROM_Write(0x00, current_screen_num);		
0048a2   51e0     movf	0xe0, 0, 0x1        	MOVF	_current_screen_num, W, B
0048a4   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0048a6   0e00     movlw	0                  	MOVLW	0x00
0048a8   ec70     call	0x4ae0, 0           	CALL	_MIOS_EEPROM_Write
0048aa   f025
0048ac   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
0048ae   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0048b0   ffd9
0048b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__screen_print	code
                                           _screen_print:
                                           ;	.line	198; main.c	void screen_print(void) __wparam{
003e30   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003e32   ffed
003e34   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003e36   ffed
003e38   0100     movlb	0                  	BANKSEL	_timed_function
                                           ;	.line	199; main.c	if(timed_function==2)
003e3a   51e5     movf	0xe5, 0, 0x1        	MOVF	_timed_function, W, B
003e3c   0a02     xorlw	0x2                	XORLW	0x02
003e3e   e101     bnz	0x3e42               	BNZ	_00294_DS_
                                           ;	.line	200; main.c	return;//no screen print on LED flash
003e40   d11e     bra	0x407e               	BRA	_00324_DS_
                                           _00294_DS_:
003e42   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	202; main.c	MIOS_DOUT_SRSet(0x00,MIOS_HLP_GetBitORMask(current_screen_num));
003e44   51e0     movf	0xe0, 0, 0x1        	MOVF	_current_screen_num, W, B
003e46   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003e48   f016
003e4a   6e10     movwf	0x10, 0            	MOVWF	r0x00
003e4c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003e4e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e50   0e00     movlw	0                  	MOVLW	0x00
003e52   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003e54   f025
003e56   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	204; main.c	MIOS_DOUT_SRSet(0x01,0x00);
003e58   0e00     movlw	0                  	MOVLW	0x00
003e5a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e5c   0e01     movlw	0x1                	MOVLW	0x01
003e5e   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003e60   f025
003e62   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	205; main.c	MIOS_DOUT_SRSet(0x02,0x00);
003e64   0e00     movlw	0                  	MOVLW	0x00
003e66   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003e68   0e02     movlw	0x2                	MOVLW	0x02
003e6a   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003e6c   f025
003e6e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	206; main.c	switch(current_screen_num){
003e70   0e04     movlw	0x4                	MOVLW	0x04
003e72   0100     movlb	0                  	BANKSEL	_current_screen_num
003e74   5de0     subwf	0xe0, 0, 0x1       	SUBWF	_current_screen_num, W, B
003e76   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003e78   d102     bra	0x407e               	BRA	_00324_DS_
003e7a   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003e7c   ffed
003e7e   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003e80   ffed
003e82   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           ; removed redundant BANKSEL
003e84   35e0     rlcf	0xe0, 0, 0x1        	RLCF	_current_screen_num, W, B
003e86   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
003e88   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003e8a   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
003e8c   0bfc     andlw	0xfc               	ANDLW	0xfc
003e8e   6e12     movwf	0x12, 0            	MOVWF	r0x02
003e90   0e00     movlw	0                  	MOVLW	UPPER(_00339_DS_)
003e92   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003e94   0e3e     movlw	0x3e               	MOVLW	HIGH(_00339_DS_)
003e96   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003e98   0eb0     movlw	0xb0               	MOVLW	LOW(_00339_DS_)
003e9a   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003e9c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003e9e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003ea0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ea2   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003ea4   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003ea6   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003ea8   f013
003eaa   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003eac   f012
003eae   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00339_DS_:
003eb0   ef60     goto	0x3ec0              	GOTO	_00295_DS_
003eb2   f01f
003eb4   ef7e     goto	0x3efc              	GOTO	_00299_DS_
003eb6   f01f
003eb8   efac     goto	0x3f58              	GOTO	_00309_DS_
003eba   f01f
003ebc   eff2     goto	0x3fe4              	GOTO	_00316_DS_
003ebe   f01f
                                           _00295_DS_:
                                           ;	.line	208; main.c	if(current_preset_num < 8)			
003ec0   0e08     movlw	0x8                	MOVLW	0x08
003ec2   0100     movlb	0                  	BANKSEL	_current_preset_num
003ec4   5de1     subwf	0xe1, 0, 0x1       	SUBWF	_current_preset_num, W, B
003ec6   e20b     bc	0x3ede                	BC	_00297_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	209; main.c	MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_preset_num));
003ec8   51e1     movf	0xe1, 0, 0x1        	MOVF	_current_preset_num, W, B
003eca   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003ecc   f016
003ece   6e10     movwf	0x10, 0            	MOVWF	r0x00
003ed0   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ed2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ed4   0e01     movlw	0x1                	MOVLW	0x01
003ed6   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003ed8   f025
003eda   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003edc   d0d0     bra	0x407e               	BRA	_00324_DS_
                                           _00297_DS_:
                                           ;	.line	211; main.c	MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_preset_num-8));				
003ede   0ef8     movlw	0xf8               	MOVLW	0xf8
003ee0   0100     movlb	0                  	BANKSEL	_current_preset_num
003ee2   25e1     addwf	0xe1, 0, 0x1       	ADDWF	_current_preset_num, W, B
003ee4   6e10     movwf	0x10, 0            	MOVWF	r0x00
003ee6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ee8   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003eea   f016
003eec   6e10     movwf	0x10, 0            	MOVWF	r0x00
003eee   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003ef0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003ef2   0e02     movlw	0x2                	MOVLW	0x02
003ef4   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003ef6   f025
003ef8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	212; main.c	break;
003efa   d0c1     bra	0x407e               	BRA	_00324_DS_
                                           _00299_DS_:
003efc   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	214; main.c	if(current_shift_state == 0x06)//buses assigned to inputs (info screen)
003efe   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003f00   0a06     xorlw	0x6                	XORLW	0x06
003f02   e104     bnz	0x3f0c               	BNZ	_00307_DS_
                                           ;	.line	215; main.c	info_screen_print(0);
003f04   0e00     movlw	0                  	MOVLW	0x00
003f06   ec80     call	0x3300, 0           	CALL	_info_screen_print
003f08   f019
003f0a   d0b9     bra	0x407e               	BRA	_00324_DS_
                                           _00307_DS_:
003f0c   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	216; main.c	else if(current_shift_state == 0x0A)//buses assigned to outputs (info screen)
003f0e   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003f10   0a0a     xorlw	0xa                	XORLW	0x0a
003f12   e104     bnz	0x3f1c               	BNZ	_00304_DS_
                                           ;	.line	217; main.c	info_screen_print(1);
003f14   0e01     movlw	0x1                	MOVLW	0x01
003f16   ec80     call	0x3300, 0           	CALL	_info_screen_print
003f18   f019
003f1a   d0b1     bra	0x407e               	BRA	_00324_DS_
                                           _00304_DS_:
                                           ;	.line	219; main.c	if(current_bus_num < 8)			
003f1c   0e08     movlw	0x8                	MOVLW	0x08
003f1e   0100     movlb	0                  	BANKSEL	_current_bus_num
003f20   5de2     subwf	0xe2, 0, 0x1       	SUBWF	_current_bus_num, W, B
003f22   e20b     bc	0x3f3a                	BC	_00301_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	220; main.c	MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_bus_num));
003f24   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003f26   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003f28   f016
003f2a   6e10     movwf	0x10, 0            	MOVWF	r0x00
003f2c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003f2e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f30   0e01     movlw	0x1                	MOVLW	0x01
003f32   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003f34   f025
003f36   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003f38   d0a2     bra	0x407e               	BRA	_00324_DS_
                                           _00301_DS_:
                                           ;	.line	222; main.c	MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_bus_num-8));							
003f3a   0ef8     movlw	0xf8               	MOVLW	0xf8
003f3c   0100     movlb	0                  	BANKSEL	_current_bus_num
003f3e   25e2     addwf	0xe2, 0, 0x1       	ADDWF	_current_bus_num, W, B
003f40   6e10     movwf	0x10, 0            	MOVWF	r0x00
003f42   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003f44   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003f46   f016
003f48   6e10     movwf	0x10, 0            	MOVWF	r0x00
003f4a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003f4c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003f4e   0e02     movlw	0x2                	MOVLW	0x02
003f50   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003f52   f025
003f54   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	224; main.c	break;
003f56   d093     bra	0x407e               	BRA	_00324_DS_
                                           _00309_DS_:
003f58   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	226; main.c	if(current_shift_state == 0x06)//inputs assigned to bus (info screen)
003f5a   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003f5c   0a06     xorlw	0x6                	XORLW	0x06
003f5e   e104     bnz	0x3f68               	BNZ	_00314_DS_
                                           ;	.line	227; main.c	info_screen_print(2);
003f60   0e02     movlw	0x2                	MOVLW	0x02
003f62   ec80     call	0x3300, 0           	CALL	_info_screen_print
003f64   f019
003f66   d08b     bra	0x407e               	BRA	_00324_DS_
                                           _00314_DS_:
003f68   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	228; main.c	else if(current_shift_state == 0x0C)//inputs assigned to outputs (info screen)
003f6a   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003f6c   0a0c     xorlw	0xc                	XORLW	0x0c
003f6e   e104     bnz	0x3f78               	BNZ	_00311_DS_
                                           ;	.line	229; main.c	info_screen_print(3);
003f70   0e03     movlw	0x3                	MOVLW	0x03
003f72   ec80     call	0x3300, 0           	CALL	_info_screen_print
003f74   f019
003f76   d083     bra	0x407e               	BRA	_00324_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00311_DS_:
003f78   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	231; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].inputs & 0x00ff));
003f7a   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003f7c   0d04     mullw	0x4                	MULLW	0x04
003f7e   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003f80   f010
003f82   6a11     clrf	0x11, 0             	CLRF	r0x01
003f84   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003f86   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003f88   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003f8a   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003f8c   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003f8e   ffe1
003f90   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003f92   ffe2
003f94   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003f96   f010
003f98   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003f9a   f011
003f9c   6a11     clrf	0x11, 0             	CLRF	r0x01
003f9e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003fa0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003fa2   0e01     movlw	0x1                	MOVLW	0x01
003fa4   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003fa6   f025
003fa8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003faa   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	232; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)((current_preset[current_bus_num].inputs >>8) & 0x00ff));
003fac   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
003fae   0d04     mullw	0x4                	MULLW	0x04
003fb0   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003fb2   f010
003fb4   6a11     clrf	0x11, 0             	CLRF	r0x01
003fb6   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003fb8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003fba   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003fbc   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003fbe   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003fc0   ffe1
003fc2   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003fc4   ffe2
003fc6   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003fc8   f010
003fca   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003fcc   f011
003fce   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003fd0   6e10     movwf	0x10, 0            	MOVWF	r0x00
003fd2   6a11     clrf	0x11, 0             	CLRF	r0x01
003fd4   6a11     clrf	0x11, 0             	CLRF	r0x01
003fd6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003fd8   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003fda   0e02     movlw	0x2                	MOVLW	0x02
003fdc   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003fde   f025
003fe0   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	234; main.c	break;
003fe2   d04d     bra	0x407e               	BRA	_00324_DS_
                                           _00316_DS_:
003fe4   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	236; main.c	if(current_shift_state == 0x0A)//outputs assigned to bus (info screen)
003fe6   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003fe8   0a0a     xorlw	0xa                	XORLW	0x0a
003fea   e104     bnz	0x3ff4               	BNZ	_00321_DS_
                                           ;	.line	237; main.c	info_screen_print(4);
003fec   0e04     movlw	0x4                	MOVLW	0x04
003fee   ec80     call	0x3300, 0           	CALL	_info_screen_print
003ff0   f019
003ff2   d045     bra	0x407e               	BRA	_00324_DS_
                                           _00321_DS_:
003ff4   0100     movlb	0                  	BANKSEL	_current_shift_state
                                           ;	.line	238; main.c	else if(current_shift_state == 0x0C)//outputs assigned to inputs (info screen)
003ff6   51e3     movf	0xe3, 0, 0x1        	MOVF	_current_shift_state, W, B
003ff8   0a0c     xorlw	0xc                	XORLW	0x0c
003ffa   e104     bnz	0x4004               	BNZ	_00318_DS_
                                           ;	.line	239; main.c	info_screen_print(5);
003ffc   0e05     movlw	0x5                	MOVLW	0x05
003ffe   ec80     call	0x3300, 0           	CALL	_info_screen_print
004000   f019
004002   d03d     bra	0x407e               	BRA	_00324_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00318_DS_:
004004   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	241; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].outputs & 0x00ff));
004006   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
004008   0d04     mullw	0x4                	MULLW	0x04
00400a   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
00400c   f010
00400e   6a11     clrf	0x11, 0             	CLRF	r0x01
004010   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
004012   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004014   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
004016   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004018   0e02     movlw	0x2                	MOVLW	0x02
00401a   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00401c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00401e   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
004020   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
004022   ffe1
004024   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004026   ffe2
004028   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
00402a   f010
00402c   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
00402e   f011
004030   6a11     clrf	0x11, 0             	CLRF	r0x01
004032   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004034   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004036   0e01     movlw	0x1                	MOVLW	0x01
004038   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
00403a   f025
00403c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00403e   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	242; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)((current_preset[current_bus_num].outputs >>8) & 0x00ff));
004040   51e2     movf	0xe2, 0, 0x1        	MOVF	_current_bus_num, W, B
004042   0d04     mullw	0x4                	MULLW	0x04
004044   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
004046   f010
004048   6a11     clrf	0x11, 0             	CLRF	r0x01
00404a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00404c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00404e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
004050   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
004052   0e02     movlw	0x2                	MOVLW	0x02
004054   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
004056   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004058   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
00405a   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
00405c   ffe1
00405e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
004060   ffe2
004062   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
004064   f010
004066   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
004068   f011
00406a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00406c   6e10     movwf	0x10, 0            	MOVWF	r0x00
00406e   6a11     clrf	0x11, 0             	CLRF	r0x01
004070   6a11     clrf	0x11, 0             	CLRF	r0x01
004072   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004074   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004076   0e02     movlw	0x2                	MOVLW	0x02
004078   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
00407a   f025
00407c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00324_DS_:
                                           ;	.line	244; main.c	}
00407e   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004080   f011
004082   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004084   f010
004086   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__info_screen_print	code
                                           _info_screen_print:
                                           ;	.line	153; main.c	void info_screen_print(unsigned char info_screen) __wparam{
003300   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003302   ffed
003304   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003306   ffd9
003308   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00330a   ffed
00330c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00330e   ffed
003310   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003312   ffed
003314   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003316   ffed
003318   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
00331a   ffed
00331c   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
00331e   ffed
003320   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003322   ffed
003324   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003326   ffed
003328   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
00332a   ffed
00332c   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
00332e   ffed
003330   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	154; main.c	unsigned int values_set = 0;
003332   6a11     clrf	0x11, 0             	CLRF	r0x01
003334   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           ;	.line	156; main.c	switch(info_screen){
003336   0e06     movlw	0x6                	MOVLW	0x06
003338   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00333a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00333c   ef9d     goto	0x373a              	GOTO	_00209_DS_
00333e   f01b
003340   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003342   ffed
003344   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003346   ffed
003348   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
00334a   3410     rlcf	0x10, 0, 0          	RLCF	r0x00, W
00334c   361b     rlcf	0x1b, 0x1, 0        	RLCF	r0x0b, F
00334e   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003350   361b     rlcf	0x1b, 0x1, 0        	RLCF	r0x0b, F
003352   0bfc     andlw	0xfc               	ANDLW	0xfc
003354   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003356   0e00     movlw	0                  	MOVLW	UPPER(_00266_DS_)
003358   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00335a   0e33     movlw	0x33               	MOVLW	HIGH(_00266_DS_)
00335c   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00335e   0e76     movlw	0x76               	MOVLW	LOW(_00266_DS_)
003360   261a     addwf	0x1a, 0x1, 0       	ADDWF	r0x0a, F
003362   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
003364   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003366   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003368   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00336a   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
00336c   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
00336e   f01b
003370   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
003372   f01a
003374   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00266_DS_:
003376   efc7     goto	0x338e              	GOTO	_00181_DS_
003378   f019
00337a   ef22     goto	0x3444              	GOTO	_00186_DS_
00337c   f01a
00337e   ef81     goto	0x3502              	GOTO	_00191_DS_
003380   f01a
003382   efb4     goto	0x3568              	GOTO	_00195_DS_
003384   f01a
003386   ef0b     goto	0x3616              	GOTO	_00200_DS_
003388   f01b
00338a   ef46     goto	0x368c              	GOTO	_00204_DS_
00338c   f01b
                                           _00181_DS_:
                                           ;	.line	158; main.c	for(bus=0;bus<16;bus++)
00338e   6a10     clrf	0x10, 0             	CLRF	r0x00
003390   6a13     clrf	0x13, 0             	CLRF	r0x03
003392   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00210_DS_:
003394   0e10     movlw	0x10               	MOVLW	0x10
003396   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003398   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00339a   d1cf     bra	0x373a               	BRA	_00209_DS_
                                           ;	.line	159; main.c	if(current_preset[bus].inputs && (temp_value==0xff || current_preset[bus].inputs & int_bit_ormask[temp_value]))
00339c   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00339e   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
0033a0   6e15     movwf	0x15, 0            	MOVWF	r0x05
0033a2   6a16     clrf	0x16, 0             	CLRF	r0x06
0033a4   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0033a6   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
0033a8   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
0033aa   ffe1
0033ac   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
0033ae   ffe2
0033b0   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
0033b2   f015
0033b4   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
0033b6   f016
0033b8   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0033ba   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
0033bc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0033be   d03c     bra	0x3438               	BRA	_00212_DS_
0033c0   0100     movlb	0                  	BANKSEL	_temp_value
0033c2   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
0033c4   0aff     xorlw	0xff               	XORLW	0xff
0033c6   e01f     bz	0x3406                	BZ	_00182_DS_
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0033c8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0033ca   0100     movlb	0                  	BANKSEL	_temp_value
0033cc   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
0033ce   6e17     movwf	0x17, 0            	MOVWF	r0x07
0033d0   6a18     clrf	0x18, 0             	CLRF	r0x08
0033d2   6a19     clrf	0x19, 0             	CLRF	r0x09
0033d4   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
0033d6   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
0033d8   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
0033da   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0033dc   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0033de   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
0033e0   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
0033e2   fff6
0033e4   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
0033e6   fff7
0033e8   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
0033ea   fff8
0033ec   0009     tblrd	*+                 	TBLRD*+	
0033ee   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0033f0   f017
0033f2   0009     tblrd	*+                 	TBLRD*+	
0033f4   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
0033f6   f018
0033f8   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0033fa   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x05, F
0033fc   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0033fe   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x06, F
003400   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003402   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
003404   e019     bz	0x3438                	BZ	_00212_DS_
                                           _00182_DS_:
                                           ;	.line	160; main.c	values_set |= int_bit_ormask[bus];
003406   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003408   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00340a   6e15     movwf	0x15, 0            	MOVWF	r0x05
00340c   6a16     clrf	0x16, 0             	CLRF	r0x06
00340e   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
003410   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
003412   6a17     clrf	0x17, 0             	CLRF	r0x07
003414   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003416   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003418   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
00341a   fff6
00341c   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
00341e   fff7
003420   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
003422   fff8
003424   0009     tblrd	*+                 	TBLRD*+	
003426   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
003428   f015
00342a   0009     tblrd	*+                 	TBLRD*+	
00342c   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
00342e   f016
003430   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003432   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
003434   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003436   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x02, F
                                           _00212_DS_:
                                           ;	.line	158; main.c	for(bus=0;bus<16;bus++)
003438   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
00343a   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
00343c   0e04     movlw	0x4                	MOVLW	0x04
00343e   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
003440   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003442   d7a8     bra	0x3394               	BRA	_00210_DS_
                                           _00186_DS_:
                                           ;	.line	163; main.c	for(bus=0;bus<16;bus++)
003444   6a10     clrf	0x10, 0             	CLRF	r0x00
003446   6a13     clrf	0x13, 0             	CLRF	r0x03
003448   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00214_DS_:
00344a   0e10     movlw	0x10               	MOVLW	0x10
00344c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00344e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003450   d174     bra	0x373a               	BRA	_00209_DS_
                                           ;	.line	164; main.c	if(current_preset[bus].outputs && (temp_value==0xff || current_preset[bus].outputs & int_bit_ormask[temp_value]))
003452   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003454   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
003456   6e15     movwf	0x15, 0            	MOVWF	r0x05
003458   6a16     clrf	0x16, 0             	CLRF	r0x06
00345a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00345c   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
00345e   0e02     movlw	0x2                	MOVLW	0x02
003460   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x05, F
003462   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003464   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003466   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
003468   ffe1
00346a   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
00346c   ffe2
00346e   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
003470   f015
003472   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
003474   f016
003476   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003478   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
00347a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00347c   d03c     bra	0x34f6               	BRA	_00216_DS_
00347e   0100     movlb	0                  	BANKSEL	_temp_value
003480   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
003482   0aff     xorlw	0xff               	XORLW	0xff
003484   e01f     bz	0x34c4                	BZ	_00187_DS_
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003486   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003488   0100     movlb	0                  	BANKSEL	_temp_value
00348a   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
00348c   6e17     movwf	0x17, 0            	MOVWF	r0x07
00348e   6a18     clrf	0x18, 0             	CLRF	r0x08
003490   6a19     clrf	0x19, 0             	CLRF	r0x09
003492   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003494   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
003496   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
003498   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
00349a   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
00349c   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
00349e   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
0034a0   fff6
0034a2   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
0034a4   fff7
0034a6   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
0034a8   fff8
0034aa   0009     tblrd	*+                 	TBLRD*+	
0034ac   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0034ae   f017
0034b0   0009     tblrd	*+                 	TBLRD*+	
0034b2   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
0034b4   f018
0034b6   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0034b8   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x05, F
0034ba   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0034bc   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x06, F
0034be   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0034c0   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
0034c2   e019     bz	0x34f6                	BZ	_00216_DS_
                                           _00187_DS_:
                                           ;	.line	165; main.c	values_set |= int_bit_ormask[bus];
0034c4   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
0034c6   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
0034c8   6e15     movwf	0x15, 0            	MOVWF	r0x05
0034ca   6a16     clrf	0x16, 0             	CLRF	r0x06
0034cc   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
0034ce   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
0034d0   6a17     clrf	0x17, 0             	CLRF	r0x07
0034d2   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0034d4   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0034d6   c015     movff	0x15, 0xff6        	MOVFF	r0x05, TBLPTRL
0034d8   fff6
0034da   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
0034dc   fff7
0034de   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
0034e0   fff8
0034e2   0009     tblrd	*+                 	TBLRD*+	
0034e4   cff5     movff	0xff5, 0x15        	MOVFF	TABLAT, r0x05
0034e6   f015
0034e8   0009     tblrd	*+                 	TBLRD*+	
0034ea   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
0034ec   f016
0034ee   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0034f0   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
0034f2   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0034f4   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x02, F
                                           _00216_DS_:
                                           ;	.line	163; main.c	for(bus=0;bus<16;bus++)
0034f6   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0034f8   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0034fa   0e04     movlw	0x4                	MOVLW	0x04
0034fc   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
0034fe   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003500   d7a4     bra	0x344a               	BRA	_00214_DS_
                                           _00191_DS_:
003502   0100     movlb	0                  	BANKSEL	_temp_value
                                           ;	.line	168; main.c	if(temp_value==0xff){//inputs of all buses
003504   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
003506   0aff     xorlw	0xff               	XORLW	0xff
003508   e11c     bnz	0x3542               	BNZ	_00193_DS_
                                           ;	.line	169; main.c	for(bus=0;bus<16;bus++)
00350a   6a10     clrf	0x10, 0             	CLRF	r0x00
00350c   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           _00218_DS_:
00350e   0e10     movlw	0x10               	MOVLW	0x10
003510   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003512   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003514   d112     bra	0x373a               	BRA	_00209_DS_
                                           ;	.line	170; main.c	values_set |= current_preset[bus].inputs;
003516   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003518   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00351a   6e14     movwf	0x14, 0            	MOVWF	r0x04
00351c   6a15     clrf	0x15, 0             	CLRF	r0x05
00351e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003520   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003522   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003524   ffe1
003526   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003528   ffe2
00352a   cfe6     movff	0xfe6, 0x14        	MOVFF	POSTINC0, r0x04
00352c   f014
00352e   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
003530   f015
003532   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003534   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
003536   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003538   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x02, F
                                           ;	.line	169; main.c	for(bus=0;bus<16;bus++)
00353a   0e04     movlw	0x4                	MOVLW	0x04
00353c   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
00353e   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003540   d7e6     bra	0x350e               	BRA	_00218_DS_
                                           ; ;multiply lit val:0x04 by variable _temp_value and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00193_DS_:
003542   0100     movlb	0                  	BANKSEL	_temp_value
                                           ;	.line	173; main.c	values_set = current_preset[temp_value].inputs;
003544   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
003546   0d04     mullw	0x4                	MULLW	0x04
003548   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
00354a   f010
00354c   6a13     clrf	0x13, 0             	CLRF	r0x03
00354e   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003550   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003552   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003554   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003556   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003558   ffe1
00355a   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00355c   ffe2
00355e   cfe6     movff	0xfe6, 0x11        	MOVFF	POSTINC0, r0x01
003560   f011
003562   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
003564   f012
                                           ;	.line	174; main.c	break;
003566   d0e9     bra	0x373a               	BRA	_00209_DS_
                                           _00195_DS_:
                                           ;	.line	176; main.c	for(bus=0;bus<16;bus++)
003568   6a10     clrf	0x10, 0             	CLRF	r0x00
00356a   6a13     clrf	0x13, 0             	CLRF	r0x03
00356c   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00222_DS_:
00356e   0e10     movlw	0x10               	MOVLW	0x10
003570   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003572   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003574   d0e2     bra	0x373a               	BRA	_00209_DS_
                                           ;	.line	177; main.c	if(current_preset[bus].outputs && (temp_value==0xff || current_preset[bus].outputs & int_bit_ormask[temp_value]))
003576   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003578   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
00357a   6e15     movwf	0x15, 0            	MOVWF	r0x05
00357c   6a16     clrf	0x16, 0             	CLRF	r0x06
00357e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003580   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
003582   0e02     movlw	0x2                	MOVLW	0x02
003584   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x05, F
003586   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003588   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
00358a   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
00358c   ffe1
00358e   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
003590   ffe2
003592   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
003594   f015
003596   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
003598   f016
00359a   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00359c   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
00359e   e035     bz	0x360a                	BZ	_00224_DS_
0035a0   0100     movlb	0                  	BANKSEL	_temp_value
0035a2   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
0035a4   0aff     xorlw	0xff               	XORLW	0xff
0035a6   e01f     bz	0x35e6                	BZ	_00196_DS_
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0035a8   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0035aa   0100     movlb	0                  	BANKSEL	_temp_value
0035ac   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
0035ae   6e17     movwf	0x17, 0            	MOVWF	r0x07
0035b0   6a18     clrf	0x18, 0             	CLRF	r0x08
0035b2   6a19     clrf	0x19, 0             	CLRF	r0x09
0035b4   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
0035b6   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
0035b8   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
0035ba   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0035bc   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0035be   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
0035c0   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
0035c2   fff6
0035c4   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
0035c6   fff7
0035c8   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
0035ca   fff8
0035cc   0009     tblrd	*+                 	TBLRD*+	
0035ce   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0035d0   f017
0035d2   0009     tblrd	*+                 	TBLRD*+	
0035d4   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
0035d6   f018
0035d8   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0035da   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x05, F
0035dc   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0035de   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x06, F
0035e0   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0035e2   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
0035e4   e012     bz	0x360a                	BZ	_00224_DS_
                                           _00196_DS_:
                                           ;	.line	178; main.c	values_set |= current_preset[bus].inputs;
0035e6   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0035e8   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
0035ea   6e15     movwf	0x15, 0            	MOVWF	r0x05
0035ec   6a16     clrf	0x16, 0             	CLRF	r0x06
0035ee   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0035f0   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
0035f2   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
0035f4   ffe1
0035f6   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
0035f8   ffe2
0035fa   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
0035fc   f015
0035fe   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
003600   f016
003602   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003604   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
003606   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003608   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x02, F
                                           _00224_DS_:
                                           ;	.line	176; main.c	for(bus=0;bus<16;bus++)
00360a   0e04     movlw	0x4                	MOVLW	0x04
00360c   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
00360e   0e04     movlw	0x4                	MOVLW	0x04
003610   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
003612   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003614   d7ac     bra	0x356e               	BRA	_00222_DS_
                                           _00200_DS_:
003616   0100     movlb	0                  	BANKSEL	_temp_value
                                           ;	.line	181; main.c	if(temp_value==0xff){//inputs of all buses
003618   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
00361a   0aff     xorlw	0xff               	XORLW	0xff
00361c   e120     bnz	0x365e               	BNZ	_00202_DS_
                                           ;	.line	182; main.c	for(bus=0;bus<16;bus++)
00361e   6a10     clrf	0x10, 0             	CLRF	r0x00
003620   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           _00226_DS_:
003622   0e10     movlw	0x10               	MOVLW	0x10
003624   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003626   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003628   d088     bra	0x373a               	BRA	_00209_DS_
                                           ;	.line	183; main.c	values_set |= current_preset[bus].outputs;
00362a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00362c   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00362e   6e14     movwf	0x14, 0            	MOVWF	r0x04
003630   6a15     clrf	0x15, 0             	CLRF	r0x05
003632   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003634   2215     addwfc	0x15, 0x1, 0      	ADDWFC	r0x05, F
003636   0e02     movlw	0x2                	MOVLW	0x02
003638   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
00363a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00363c   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
00363e   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003640   ffe1
003642   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003644   ffe2
003646   cfe6     movff	0xfe6, 0x14        	MOVFF	POSTINC0, r0x04
003648   f014
00364a   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
00364c   f015
00364e   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003650   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
003652   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003654   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x02, F
                                           ;	.line	182; main.c	for(bus=0;bus<16;bus++)
003656   0e04     movlw	0x4                	MOVLW	0x04
003658   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
00365a   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
00365c   d7e2     bra	0x3622               	BRA	_00226_DS_
                                           ; ;multiply lit val:0x04 by variable _temp_value and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00202_DS_:
00365e   0100     movlb	0                  	BANKSEL	_temp_value
                                           ;	.line	186; main.c	values_set = current_preset[temp_value].outputs;
003660   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
003662   0d04     mullw	0x4                	MULLW	0x04
003664   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003666   f010
003668   6a13     clrf	0x13, 0             	CLRF	r0x03
00366a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00366c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
00366e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003670   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003672   0e02     movlw	0x2                	MOVLW	0x02
003674   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003676   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003678   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
00367a   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
00367c   ffe1
00367e   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003680   ffe2
003682   cfe6     movff	0xfe6, 0x11        	MOVFF	POSTINC0, r0x01
003684   f011
003686   cfe7     movff	0xfe7, 0x12        	MOVFF	INDF0, r0x02
003688   f012
                                           ;	.line	187; main.c	break;
00368a   d057     bra	0x373a               	BRA	_00209_DS_
                                           _00204_DS_:
                                           ;	.line	189; main.c	for(bus=0;bus<16;bus++)
00368c   6a10     clrf	0x10, 0             	CLRF	r0x00
00368e   6a13     clrf	0x13, 0             	CLRF	r0x03
003690   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00230_DS_:
003692   0e10     movlw	0x10               	MOVLW	0x10
003694   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003696   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003698   d050     bra	0x373a               	BRA	_00209_DS_
                                           ;	.line	190; main.c	if(current_preset[bus].inputs && (temp_value==0xff || current_preset[bus].inputs & int_bit_ormask[temp_value]))
00369a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00369c   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
00369e   6e15     movwf	0x15, 0            	MOVWF	r0x05
0036a0   6a16     clrf	0x16, 0             	CLRF	r0x06
0036a2   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0036a4   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
0036a6   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
0036a8   ffe1
0036aa   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
0036ac   ffe2
0036ae   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
0036b0   f015
0036b2   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
0036b4   f016
0036b6   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0036b8   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
0036ba   e039     bz	0x372e                	BZ	_00232_DS_
0036bc   0100     movlb	0                  	BANKSEL	_temp_value
0036be   51e4     movf	0xe4, 0, 0x1        	MOVF	_temp_value, W, B
0036c0   0aff     xorlw	0xff               	XORLW	0xff
0036c2   e01f     bz	0x3702                	BZ	_00205_DS_
                                           ; ;multiply lit val:0x02 by variable _temp_value and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0036c4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0036c6   0100     movlb	0                  	BANKSEL	_temp_value
0036c8   35e4     rlcf	0xe4, 0, 0x1        	RLCF	_temp_value, W, B
0036ca   6e17     movwf	0x17, 0            	MOVWF	r0x07
0036cc   6a18     clrf	0x18, 0             	CLRF	r0x08
0036ce   6a19     clrf	0x19, 0             	CLRF	r0x09
0036d0   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
0036d2   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
0036d4   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
0036d6   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0036d8   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0036da   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
0036dc   c017     movff	0x17, 0xff6        	MOVFF	r0x07, TBLPTRL
0036de   fff6
0036e0   c018     movff	0x18, 0xff7        	MOVFF	r0x08, TBLPTRH
0036e2   fff7
0036e4   c019     movff	0x19, 0xff8        	MOVFF	r0x09, TBLPTRU
0036e6   fff8
0036e8   0009     tblrd	*+                 	TBLRD*+	
0036ea   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0036ec   f017
0036ee   0009     tblrd	*+                 	TBLRD*+	
0036f0   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x08
0036f2   f018
0036f4   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0036f6   1615     andwf	0x15, 0x1, 0       	ANDWF	r0x05, F
0036f8   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0036fa   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x06, F
0036fc   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
0036fe   1016     iorwf	0x16, 0, 0         	IORWF	r0x06, W
003700   e016     bz	0x372e                	BZ	_00232_DS_
                                           _00205_DS_:
                                           ;	.line	191; main.c	values_set |= current_preset[bus].outputs;
003702   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003704   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003706   6e15     movwf	0x15, 0            	MOVWF	r0x05
003708   6a16     clrf	0x16, 0             	CLRF	r0x06
00370a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00370c   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
00370e   0e02     movlw	0x2                	MOVLW	0x02
003710   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x05, F
003712   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003714   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003716   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
003718   ffe1
00371a   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
00371c   ffe2
00371e   cfe6     movff	0xfe6, 0x15        	MOVFF	POSTINC0, r0x05
003720   f015
003722   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
003724   f016
003726   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003728   1211     iorwf	0x11, 0x1, 0       	IORWF	r0x01, F
00372a   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
00372c   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x02, F
                                           _00232_DS_:
                                           ;	.line	189; main.c	for(bus=0;bus<16;bus++)
00372e   0e04     movlw	0x4                	MOVLW	0x04
003730   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003732   0e04     movlw	0x4                	MOVLW	0x04
003734   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
003736   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003738   d7ac     bra	0x3692               	BRA	_00230_DS_
                                           _00209_DS_:
                                           ;	.line	194; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(values_set & 0x00ff));
00373a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00373c   6e10     movwf	0x10, 0            	MOVWF	r0x00
00373e   6a13     clrf	0x13, 0             	CLRF	r0x03
003740   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003742   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003744   0e01     movlw	0x1                	MOVLW	0x01
003746   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
003748   f025
00374a   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	195; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)((values_set >>8) & 0x00ff));
00374c   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00374e   6e11     movwf	0x11, 0            	MOVWF	r0x01
003750   6a12     clrf	0x12, 0             	CLRF	r0x02
003752   6a12     clrf	0x12, 0             	CLRF	r0x02
003754   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003756   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003758   0e02     movlw	0x2                	MOVLW	0x02
00375a   ec46     call	0x4a8c, 0           	CALL	_MIOS_DOUT_SRSet
00375c   f025
00375e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003760   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003762   f019
003764   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
003766   f018
003768   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
00376a   f017
00376c   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
00376e   f016
003770   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003772   f015
003774   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003776   f014
003778   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00377a   f013
00377c   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
00377e   f012
003780   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003782   f011
003784   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003786   f010
003788   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00378a   ffd9
00378c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__inout_map_build	code
                                           _inout_map_build:
                                           ;	.line	129; main.c	void inout_map_build(void) __wparam{
003bac   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003bae   ffed
003bb0   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003bb2   ffed
003bb4   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003bb6   ffed
003bb8   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003bba   ffed
003bbc   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003bbe   ffed
003bc0   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003bc2   ffed
003bc4   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003bc6   ffed
003bc8   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003bca   ffed
003bcc   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
003bce   ffed
003bd0   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
003bd2   ffed
003bd4   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003bd6   ffed
003bd8   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003bda   ffed
003bdc   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
003bde   ffed
003be0   c01d     movff	0x1d, 0xfed        	MOVFF	r0x0d, POSTDEC1
003be2   ffed
003be4   c01e     movff	0x1e, 0xfed        	MOVFF	r0x0e, POSTDEC1
003be6   ffed
003be8   c01f     movff	0x1f, 0xfed        	MOVFF	r0x0f, POSTDEC1
003bea   ffed
003bec   c020     movff	0x20, 0xfed        	MOVFF	r0x10, POSTDEC1
003bee   ffed
003bf0   c021     movff	0x21, 0xfed        	MOVFF	r0x11, POSTDEC1
003bf2   ffed
                                           ;	.line	132; main.c	for(input=0;input<16;input++)
003bf4   6a10     clrf	0x10, 0             	CLRF	r0x00
003bf6   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00135_DS_:
003bf8   0e10     movlw	0x10               	MOVLW	0x10
003bfa   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003bfc   e212     bc	0x3c22                	BC	_00138_DS_
                                           ;	.line	133; main.c	outputs[input] = 0;
003bfe   0ec0     movlw	0xc0               	MOVLW	LOW(_inout_map_build_outputs_1_1)
003c00   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003c02   6e12     movwf	0x12, 0            	MOVWF	r0x02
003c04   6a13     clrf	0x13, 0             	CLRF	r0x03
003c06   0e00     movlw	0                  	MOVLW	HIGH(_inout_map_build_outputs_1_1)
003c08   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003c0a   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003c0c   ffe1
003c0e   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003c10   ffe2
003c12   0e00     movlw	0                  	MOVLW	0x00
003c14   6ee6     movwf	0xe6, 0            	MOVWF	POSTINC0
003c16   0e00     movlw	0                  	MOVLW	0x00
003c18   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	132; main.c	for(input=0;input<16;input++)
003c1a   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003c1c   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003c1e   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003c20   d7eb     bra	0x3bf8               	BRA	_00135_DS_
                                           _00138_DS_:
                                           ;	.line	134; main.c	for(input=0;input<16;input++){
003c22   6a10     clrf	0x10, 0             	CLRF	r0x00
                                           _00147_DS_:
003c24   0e10     movlw	0x10               	MOVLW	0x10
003c26   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003c28   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c2a   d06e     bra	0x3d08               	BRA	_00174_DS_
                                           ;	.line	135; main.c	for(bus=0;bus<16;bus++){
003c2c   6a11     clrf	0x11, 0             	CLRF	r0x01
003c2e   6a12     clrf	0x12, 0             	CLRF	r0x02
                                           _00143_DS_:
003c30   0e10     movlw	0x10               	MOVLW	0x10
003c32   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
003c34   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c36   d066     bra	0x3d04               	BRA	_00149_DS_
                                           ;	.line	136; main.c	for(input=0;input<16;input++){
003c38   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003c3a   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003c3c   6e13     movwf	0x13, 0            	MOVWF	r0x03
003c3e   6a14     clrf	0x14, 0             	CLRF	r0x04
003c40   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003c42   2214     addwfc	0x14, 0x1, 0      	ADDWFC	r0x04, F
003c44   6a15     clrf	0x15, 0             	CLRF	r0x05
003c46   6a16     clrf	0x16, 0             	CLRF	r0x06
                                           _00139_DS_:
003c48   0e10     movlw	0x10               	MOVLW	0x10
003c4a   5c15     subwf	0x15, 0, 0         	SUBWF	r0x05, W
003c4c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c4e   d054     bra	0x3cf8               	BRA	_00176_DS_
                                           ;	.line	137; main.c	if(current_preset[bus].inputs & int_bit_ormask[input])
003c50   c013     movff	0x13, 0xfe1        	MOVFF	r0x03, FSR0L
003c52   ffe1
003c54   c014     movff	0x14, 0xfe2        	MOVFF	r0x04, FSR0H
003c56   ffe2
003c58   cfe6     movff	0xfe6, 0x17        	MOVFF	POSTINC0, r0x07
003c5a   f017
003c5c   cfe7     movff	0xfe7, 0x18        	MOVFF	INDF0, r0x08
003c5e   f018
003c60   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003c62   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
003c64   6e19     movwf	0x19, 0            	MOVWF	r0x09
003c66   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
003c68   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
003c6a   221a     addwfc	0x1a, 0x1, 0      	ADDWFC	r0x0a, F
003c6c   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003c6e   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003c70   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
003c72   c019     movff	0x19, 0xff6        	MOVFF	r0x09, TBLPTRL
003c74   fff6
003c76   c01a     movff	0x1a, 0xff7        	MOVFF	r0x0a, TBLPTRH
003c78   fff7
003c7a   c01b     movff	0x1b, 0xff8        	MOVFF	r0x0b, TBLPTRU
003c7c   fff8
003c7e   0009     tblrd	*+                 	TBLRD*+	
003c80   cff5     movff	0xff5, 0x19        	MOVFF	TABLAT, r0x09
003c82   f019
003c84   0009     tblrd	*+                 	TBLRD*+	
003c86   cff5     movff	0xff5, 0x1a        	MOVFF	TABLAT, r0x0a
003c88   f01a
003c8a   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
003c8c   1617     andwf	0x17, 0x1, 0       	ANDWF	r0x07, F
003c8e   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
003c90   1618     andwf	0x18, 0x1, 0       	ANDWF	r0x08, F
003c92   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003c94   1018     iorwf	0x18, 0, 0         	IORWF	r0x08, W
003c96   e02c     bz	0x3cf0                	BZ	_00141_DS_
                                           ;	.line	138; main.c	outputs[input] |= current_preset[bus].outputs;
003c98   0ec0     movlw	0xc0               	MOVLW	LOW(_inout_map_build_outputs_1_1)
003c9a   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
003c9c   6e17     movwf	0x17, 0            	MOVWF	r0x07
003c9e   6a18     clrf	0x18, 0             	CLRF	r0x08
003ca0   0e00     movlw	0                  	MOVLW	HIGH(_inout_map_build_outputs_1_1)
003ca2   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003ca4   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
003ca6   ffe1
003ca8   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
003caa   ffe2
003cac   cfe6     movff	0xfe6, 0x19        	MOVFF	POSTINC0, r0x09
003cae   f019
003cb0   cfe7     movff	0xfe7, 0x1a        	MOVFF	INDF0, r0x0a
003cb2   f01a
003cb4   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003cb6   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003cb8   6e1b     movwf	0x1b, 0            	MOVWF	r0x0b
003cba   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
003cbc   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003cbe   221c     addwfc	0x1c, 0x1, 0      	ADDWFC	r0x0c, F
003cc0   0e02     movlw	0x2                	MOVLW	0x02
003cc2   261b     addwf	0x1b, 0x1, 0       	ADDWF	r0x0b, F
003cc4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003cc6   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
003cc8   c01b     movff	0x1b, 0xfe1        	MOVFF	r0x0b, FSR0L
003cca   ffe1
003ccc   c01c     movff	0x1c, 0xfe2        	MOVFF	r0x0c, FSR0H
003cce   ffe2
003cd0   cfe6     movff	0xfe6, 0x1b        	MOVFF	POSTINC0, r0x0b
003cd2   f01b
003cd4   cfe7     movff	0xfe7, 0x1c        	MOVFF	INDF0, r0x0c
003cd6   f01c
003cd8   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
003cda   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x09, F
003cdc   501c     movf	0x1c, 0, 0          	MOVF	r0x0c, W
003cde   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x0a, F
003ce0   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
003ce2   ffe1
003ce4   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
003ce6   ffe2
003ce8   c019     movff	0x19, 0xfe6        	MOVFF	r0x09, POSTINC0
003cea   ffe6
003cec   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
003cee   ffe7
                                           _00141_DS_:
                                           ;	.line	136; main.c	for(input=0;input<16;input++){
003cf0   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003cf2   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003cf4   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
003cf6   d7a8     bra	0x3c48               	BRA	_00139_DS_
                                           _00176_DS_:
003cf8   c015     movff	0x15, 0x10         	MOVFF	r0x05, r0x00
003cfa   f010
                                           ;	.line	135; main.c	for(bus=0;bus<16;bus++){
003cfc   0e04     movlw	0x4                	MOVLW	0x04
003cfe   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003d00   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003d02   d796     bra	0x3c30               	BRA	_00143_DS_
                                           _00149_DS_:
                                           ;	.line	134; main.c	for(input=0;input<16;input++){
003d04   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003d06   d78e     bra	0x3c24               	BRA	_00147_DS_
                                           _00174_DS_:
                                           ;	.line	142; main.c	for(input=0;input<16;input++){
003d08   6a10     clrf	0x10, 0             	CLRF	r0x00
003d0a   6a11     clrf	0x11, 0             	CLRF	r0x01
003d0c   6a12     clrf	0x12, 0             	CLRF	r0x02
003d0e   6a13     clrf	0x13, 0             	CLRF	r0x03
003d10   6a14     clrf	0x14, 0             	CLRF	r0x04
003d12   6a15     clrf	0x15, 0             	CLRF	r0x05
                                           _00155_DS_:
003d14   0e10     movlw	0x10               	MOVLW	0x10
003d16   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003d18   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d1a   d065     bra	0x3de6               	BRA	_00159_DS_
                                           ;	.line	144; main.c	for(output=0;output<16;output++)
003d1c   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003d1e   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003d20   6e16     movwf	0x16, 0            	MOVWF	r0x06
003d22   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003d24   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x02, W
003d26   6e17     movwf	0x17, 0            	MOVWF	r0x07
003d28   0ec0     movlw	0xc0               	MOVLW	LOW(_inout_map_build_outputs_1_1)
003d2a   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003d2c   6e18     movwf	0x18, 0            	MOVWF	r0x08
003d2e   6a19     clrf	0x19, 0             	CLRF	r0x09
003d30   0e00     movlw	0                  	MOVLW	HIGH(_inout_map_build_outputs_1_1)
003d32   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
003d34   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
003d36   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003d38   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
                                           _00151_DS_:
003d3a   0e10     movlw	0x10               	MOVLW	0x10
003d3c   5c1b     subwf	0x1b, 0, 0         	SUBWF	r0x0b, W
003d3e   e236     bc	0x3dac                	BC	_00154_DS_
                                           ;	.line	145; main.c	if(outputs[input]&int_bit_ormask[output])
003d40   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
003d42   ffe1
003d44   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
003d46   ffe2
003d48   cfe6     movff	0xfe6, 0x1d        	MOVFF	POSTINC0, r0x0d
003d4a   f01d
003d4c   cfe7     movff	0xfe7, 0x1e        	MOVFF	INDF0, r0x0e
003d4e   f01e
003d50   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
003d52   241c     addwf	0x1c, 0, 0         	ADDWF	r0x0c, W
003d54   6e1f     movwf	0x1f, 0            	MOVWF	r0x0f
003d56   6a20     clrf	0x20, 0             	CLRF	r0x10
003d58   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
003d5a   2220     addwfc	0x20, 0x1, 0      	ADDWFC	r0x10, F
003d5c   6a21     clrf	0x21, 0             	CLRF	r0x11
003d5e   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003d60   2221     addwfc	0x21, 0x1, 0      	ADDWFC	r0x11, F
003d62   c01f     movff	0x1f, 0xff6        	MOVFF	r0x0f, TBLPTRL
003d64   fff6
003d66   c020     movff	0x20, 0xff7        	MOVFF	r0x10, TBLPTRH
003d68   fff7
003d6a   c021     movff	0x21, 0xff8        	MOVFF	r0x11, TBLPTRU
003d6c   fff8
003d6e   0009     tblrd	*+                 	TBLRD*+	
003d70   cff5     movff	0xff5, 0x1f        	MOVFF	TABLAT, r0x0f
003d72   f01f
003d74   0009     tblrd	*+                 	TBLRD*+	
003d76   cff5     movff	0xff5, 0x20        	MOVFF	TABLAT, r0x10
003d78   f020
003d7a   501f     movf	0x1f, 0, 0          	MOVF	r0x0f, W
003d7c   161d     andwf	0x1d, 0x1, 0       	ANDWF	r0x0d, F
003d7e   5020     movf	0x20, 0, 0          	MOVF	r0x10, W
003d80   161e     andwf	0x1e, 0x1, 0       	ANDWF	r0x0e, F
003d82   501d     movf	0x1d, 0, 0          	MOVF	r0x0d, W
003d84   101e     iorwf	0x1e, 0, 0         	IORWF	r0x0e, W
003d86   e00e     bz	0x3da4                	BZ	_00153_DS_
                                           ;	.line	146; main.c	midi_inout_map[input][i++]=output;
003d88   c01a     movff	0x1a, 0x1d         	MOVFF	r0x0a, r0x0d
003d8a   f01d
003d8c   2a1a     incf	0x1a, 0x1, 0        	INCF	r0x0a, F
003d8e   6a1e     clrf	0x1e, 0             	CLRF	r0x0e
003d90   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003d92   261d     addwf	0x1d, 0x1, 0       	ADDWF	r0x0d, F
003d94   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003d96   221e     addwfc	0x1e, 0x1, 0      	ADDWFC	r0x0e, F
003d98   c01d     movff	0x1d, 0xfe1        	MOVFF	r0x0d, FSR0L
003d9a   ffe1
003d9c   c01e     movff	0x1e, 0xfe2        	MOVFF	r0x0e, FSR0H
003d9e   ffe2
003da0   c01b     movff	0x1b, 0xfe7        	MOVFF	r0x0b, INDF0
003da2   ffe7
                                           _00153_DS_:
                                           ;	.line	144; main.c	for(output=0;output<16;output++)
003da4   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
003da6   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
003da8   2a1b     incf	0x1b, 0x1, 0        	INCF	r0x0b, F
003daa   d7c7     bra	0x3d3a               	BRA	_00151_DS_
                                           _00154_DS_:
                                           ;	.line	147; main.c	midi_inout_map[input][i] = 0xff;
003dac   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003dae   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
003db0   6e16     movwf	0x16, 0            	MOVWF	r0x06
003db2   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003db4   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
003db6   6e17     movwf	0x17, 0            	MOVWF	r0x07
003db8   6a18     clrf	0x18, 0             	CLRF	r0x08
003dba   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003dbc   261a     addwf	0x1a, 0x1, 0       	ADDWF	r0x0a, F
003dbe   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003dc0   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003dc2   c01a     movff	0x1a, 0xfe1        	MOVFF	r0x0a, FSR0L
003dc4   ffe1
003dc6   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
003dc8   ffe2
003dca   0eff     movlw	0xff               	MOVLW	0xff
003dcc   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	142; main.c	for(input=0;input<16;input++){
003dce   0e10     movlw	0x10               	MOVLW	0x10
003dd0   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003dd2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003dd4   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
003dd6   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
003dd8   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
003dda   0e10     movlw	0x10               	MOVLW	0x10
003ddc   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
003dde   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003de0   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
003de2   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003de4   d797     bra	0x3d14               	BRA	_00155_DS_
                                           _00159_DS_:
003de6   cfec     movff	0xfec, 0x21        	MOVFF	PREINC1, r0x11
003de8   f021
003dea   cfec     movff	0xfec, 0x20        	MOVFF	PREINC1, r0x10
003dec   f020
003dee   cfec     movff	0xfec, 0x1f        	MOVFF	PREINC1, r0x0f
003df0   f01f
003df2   cfec     movff	0xfec, 0x1e        	MOVFF	PREINC1, r0x0e
003df4   f01e
003df6   cfec     movff	0xfec, 0x1d        	MOVFF	PREINC1, r0x0d
003df8   f01d
003dfa   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
003dfc   f01c
003dfe   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
003e00   f01b
003e02   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
003e04   f01a
003e06   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003e08   f019
003e0a   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
003e0c   f018
003e0e   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003e10   f017
003e12   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003e14   f016
003e16   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003e18   f015
003e1a   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003e1c   f014
003e1e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003e20   f013
003e22   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003e24   f012
003e26   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003e28   f011
003e2a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003e2c   f010
003e2e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_init	code
                                           _preset_init:
                                           ;	.line	120; main.c	void preset_init(unsigned char empty) __wparam{
004088   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00408a   ffed
00408c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00408e   ffd9
004090   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004092   ffed
004094   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004096   ffed
004098   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
00409a   ffed
00409c   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
00409e   ffed
0040a0   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0040a2   ffed
0040a4   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
0040a6   ffed
0040a8   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
0040aa   ffed
0040ac   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
0040ae   ffed
0040b0   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
0040b2   ffed
0040b4   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
0040b6   ffed
0040b8   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
0040ba   ffed
0040bc   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
0040be   ffed
0040c0   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
0040c2   ffed
0040c4   c01d     movff	0x1d, 0xfed        	MOVFF	r0x0d, POSTDEC1
0040c6   ffed
0040c8   c01e     movff	0x1e, 0xfed        	MOVFF	r0x0e, POSTDEC1
0040ca   ffed
0040cc   c01f     movff	0x1f, 0xfed        	MOVFF	r0x0f, POSTDEC1
0040ce   ffed
0040d0   c020     movff	0x20, 0xfed        	MOVFF	r0x10, POSTDEC1
0040d2   ffed
0040d4   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	122; main.c	for(i=0;i<16;i++){
0040d6   6a11     clrf	0x11, 0             	CLRF	r0x01
0040d8   6a12     clrf	0x12, 0             	CLRF	r0x02
0040da   6a13     clrf	0x13, 0             	CLRF	r0x03
0040dc   6a14     clrf	0x14, 0             	CLRF	r0x04
0040de   6a15     clrf	0x15, 0             	CLRF	r0x05
0040e0   6a16     clrf	0x16, 0             	CLRF	r0x06
0040e2   6a17     clrf	0x17, 0             	CLRF	r0x07
                                           _00117_DS_:
0040e4   0e10     movlw	0x10               	MOVLW	0x10
0040e6   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
0040e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0040ea   d06a     bra	0x41c0               	BRA	_00121_DS_
                                           ;	.line	123; main.c	current_preset[i].inputs = current_preset[i].outputs = (empty ? 0 : int_bit_ormask[i]);
0040ec   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0040ee   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
0040f0   6e18     movwf	0x18, 0            	MOVWF	r0x08
0040f2   6a19     clrf	0x19, 0             	CLRF	r0x09
0040f4   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0040f6   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
0040f8   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0040fa   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
0040fc   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
0040fe   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
004100   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
004102   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
004104   0e02     movlw	0x2                	MOVLW	0x02
004106   261a     addwf	0x1a, 0x1, 0       	ADDWF	r0x0a, F
004108   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00410a   2a1b     incf	0x1b, 0x1, 0        	INCF	r0x0b, F
00410c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00410e   e003     bz	0x4116                	BZ	_00123_DS_
004110   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
004112   6a1d     clrf	0x1d, 0             	CLRF	r0x0d
004114   d015     bra	0x4140               	BRA	_00124_DS_
                                           _00123_DS_:
004116   0e76     movlw	0x76               	MOVLW	LOW(_int_bit_ormask)
004118   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
00411a   6e1e     movwf	0x1e, 0            	MOVWF	r0x0e
00411c   6a1f     clrf	0x1f, 0             	CLRF	r0x0f
00411e   0e48     movlw	0x48               	MOVLW	HIGH(_int_bit_ormask)
004120   221f     addwfc	0x1f, 0x1, 0      	ADDWFC	r0x0f, F
004122   6a20     clrf	0x20, 0             	CLRF	r0x10
004124   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
004126   2220     addwfc	0x20, 0x1, 0      	ADDWFC	r0x10, F
004128   c01e     movff	0x1e, 0xff6        	MOVFF	r0x0e, TBLPTRL
00412a   fff6
00412c   c01f     movff	0x1f, 0xff7        	MOVFF	r0x0f, TBLPTRH
00412e   fff7
004130   c020     movff	0x20, 0xff8        	MOVFF	r0x10, TBLPTRU
004132   fff8
004134   0009     tblrd	*+                 	TBLRD*+	
004136   cff5     movff	0xff5, 0x1c        	MOVFF	TABLAT, r0x0c
004138   f01c
00413a   0009     tblrd	*+                 	TBLRD*+	
00413c   cff5     movff	0xff5, 0x1d        	MOVFF	TABLAT, r0x0d
00413e   f01d
                                           _00124_DS_:
004140   c01a     movff	0x1a, 0xfe1        	MOVFF	r0x0a, FSR0L
004142   ffe1
004144   c01b     movff	0x1b, 0xfe2        	MOVFF	r0x0b, FSR0H
004146   ffe2
004148   c01c     movff	0x1c, 0xfe6        	MOVFF	r0x0c, POSTINC0
00414a   ffe6
00414c   c01d     movff	0x1d, 0xfe7        	MOVFF	r0x0d, INDF0
00414e   ffe7
004150   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
004152   ffe1
004154   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
004156   ffe2
004158   c01c     movff	0x1c, 0xfe6        	MOVFF	r0x0c, POSTINC0
00415a   ffe6
00415c   c01d     movff	0x1d, 0xfe7        	MOVFF	r0x0d, INDF0
00415e   ffe7
                                           ;	.line	124; main.c	midi_inout_map[i][0]= (empty ? 0xff : i);
004160   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
004162   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
004164   6e18     movwf	0x18, 0            	MOVWF	r0x08
004166   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
004168   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
00416a   6e19     movwf	0x19, 0            	MOVWF	r0x09
00416c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00416e   e003     bz	0x4176                	BZ	_00125_DS_
004170   0eff     movlw	0xff               	MOVLW	0xff
004172   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
004174   d002     bra	0x417a               	BRA	_00126_DS_
                                           _00125_DS_:
004176   c011     movff	0x11, 0x1a         	MOVFF	r0x01, r0x0a
004178   f01a
                                           _00126_DS_:
00417a   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
00417c   ffe1
00417e   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
004180   ffe2
004182   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
004184   ffe7
                                           ;	.line	125; main.c	midi_inout_map[i][1]=0xff;//terminate		
004186   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
004188   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
00418a   6e18     movwf	0x18, 0            	MOVWF	r0x08
00418c   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
00418e   2017     addwfc	0x17, 0, 0        	ADDWFC	r0x07, W
004190   6e19     movwf	0x19, 0            	MOVWF	r0x09
004192   2a18     incf	0x18, 0x1, 0        	INCF	r0x08, F
004194   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004196   2a19     incf	0x19, 0x1, 0        	INCF	r0x09, F
004198   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
00419a   ffe1
00419c   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
00419e   ffe2
0041a0   0eff     movlw	0xff               	MOVLW	0xff
0041a2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	122; main.c	for(i=0;i<16;i++){
0041a4   0e04     movlw	0x4                	MOVLW	0x04
0041a6   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0041a8   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0041aa   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
0041ac   0e10     movlw	0x10               	MOVLW	0x10
0041ae   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
0041b0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0041b2   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
0041b4   0e10     movlw	0x10               	MOVLW	0x10
0041b6   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0041b8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0041ba   2a17     incf	0x17, 0x1, 0        	INCF	r0x07, F
0041bc   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
0041be   d792     bra	0x40e4               	BRA	_00117_DS_
                                           _00121_DS_:
0041c0   cfec     movff	0xfec, 0x20        	MOVFF	PREINC1, r0x10
0041c2   f020
0041c4   cfec     movff	0xfec, 0x1f        	MOVFF	PREINC1, r0x0f
0041c6   f01f
0041c8   cfec     movff	0xfec, 0x1e        	MOVFF	PREINC1, r0x0e
0041ca   f01e
0041cc   cfec     movff	0xfec, 0x1d        	MOVFF	PREINC1, r0x0d
0041ce   f01d
0041d0   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
0041d2   f01c
0041d4   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
0041d6   f01b
0041d8   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
0041da   f01a
0041dc   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
0041de   f019
0041e0   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
0041e2   f018
0041e4   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0041e6   f017
0041e8   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0041ea   f016
0041ec   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
0041ee   f015
0041f0   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0041f2   f014
0041f4   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0041f6   f013
0041f8   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0041fa   f012
0041fc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0041fe   f011
004200   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004202   f010
004204   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004206   ffd9
004208   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_store	code
                                           _preset_store:
                                           ;	.line	114; main.c	void preset_store(unsigned char num) __wparam{
00459c   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00459e   ffed
0045a0   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0045a2   ffd9
0045a4   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0045a6   ffed
0045a8   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0045aa   ffed
0045ac   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0045ae   ffed
0045b0   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0045b2   ffed
0045b4   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0045b6   ffed
0045b8   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	115; main.c	unsigned int addr=num;
0045ba   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           ;	.line	116; main.c	addr <<=6;
0045bc   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
0045be   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
0045c0   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
0045c2   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
0045c4   3011     rrcf	0x11, 0, 0          	RRCF	r0x01, W
0045c6   0bc0     andlw	0xc0               	ANDLW	0xc0
0045c8   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0045ca   1a10     xorwf	0x10, 0x1, 0       	XORWF	r0x00, F
0045cc   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
0045ce   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	117; main.c	MIOS_BANKSTICK_WritePage(addr,(char*)current_preset);	
0045d0   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0045d2   6e13     movwf	0x13, 0            	MOVWF	r0x03
0045d4   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0045d6   6e12     movwf	0x12, 0            	MOVWF	r0x02
0045d8   0e80     movlw	0x80               	MOVLW	0x80
0045da   6e14     movwf	0x14, 0            	MOVWF	r0x04
0045dc   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
0045de   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045e0   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0045e2   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045e4   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0045e6   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045e8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0045ea   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0045ec   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0045ee   ec74     call	0x48e8, 0           	CALL	_MIOS_BANKSTICK_WritePage
0045f0   f024
0045f2   0e04     movlw	0x4                	MOVLW	0x04
0045f4   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
0045f6   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0045f8   f014
0045fa   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0045fc   f013
0045fe   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004600   f012
004602   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004604   f011
004606   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004608   f010
00460a   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00460c   ffd9
00460e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_load	code
                                           _preset_load:
                                           ;	.line	107; main.c	void preset_load(unsigned char num) __wparam{
004610   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004612   ffed
004614   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
004616   ffd9
004618   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00461a   ffed
00461c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00461e   ffed
004620   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004622   ffed
004624   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004626   ffed
004628   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
00462a   ffed
00462c   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	108; main.c	unsigned int addr=num;
00462e   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           ;	.line	109; main.c	addr <<=6;
004630   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
004632   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
004634   3211     rrcf	0x11, 0x1, 0        	RRCF	r0x01, F
004636   3210     rrcf	0x10, 0x1, 0        	RRCF	r0x00, F
004638   3011     rrcf	0x11, 0, 0          	RRCF	r0x01, W
00463a   0bc0     andlw	0xc0               	ANDLW	0xc0
00463c   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
00463e   1a10     xorwf	0x10, 0x1, 0       	XORWF	r0x00, F
004640   1810     xorwf	0x10, 0, 0         	XORWF	r0x00, W
004642   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	110; main.c	MIOS_BANKSTICK_ReadPage(addr,(char*)current_preset);
004644   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
004646   6e13     movwf	0x13, 0            	MOVWF	r0x03
004648   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00464a   6e12     movwf	0x12, 0            	MOVWF	r0x02
00464c   0e80     movlw	0x80               	MOVLW	0x80
00464e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004650   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004652   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004654   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004656   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004658   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00465a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00465c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00465e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004660   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004662   ec7f     call	0x48fe, 0           	CALL	_MIOS_BANKSTICK_ReadPage
004664   f024
004666   0e04     movlw	0x4                	MOVLW	0x04
004668   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
00466a   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
00466c   f014
00466e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004670   f013
004672   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004674   f012
004676   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004678   f011
00467a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00467c   f010
00467e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004680   ffd9
004682   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Init	code
                                           _Init:
                                           ;	.line	91; main.c	MIOS_SRIO_UpdateFrqSet(3); // ms
00476e   0e03     movlw	0x3                	MOVLW	0x03
004770   ec80     call	0x2d00, 0           	CALL	_MIOS_SRIO_UpdateFrqSet
004772   f016
                                           ;	.line	92; main.c	MIOS_SRIO_NumberSet(3);//need 20 inputs / outputs 
004774   0e03     movlw	0x3                	MOVLW	0x03
004776   ec78     call	0x2cf0, 0           	CALL	_MIOS_SRIO_NumberSet
004778   f016
                                           ;	.line	93; main.c	MIOS_SRIO_DebounceSet(20);
00477a   0e14     movlw	0x14               	MOVLW	0x14
00477c   ec12     call	0x2e24, 0           	CALL	_MIOS_SRIO_DebounceSet
00477e   f017
                                           ;	.line	94; main.c	MIOS_BANKSTICK_CtrlSet(0x40);//stick 0, verify disabled
004780   0e40     movlw	0x40               	MOVLW	0x40
004782   ecee     call	0x2ddc, 0           	CALL	_MIOS_BANKSTICK_CtrlSet
004784   f016
                                           ;	.line	96; main.c	current_screen_num = MIOS_EEPROM_Read(0x00);
004786   0e00     movlw	0                  	MOVLW	0x00
004788   ec8c     call	0x4b18, 0           	CALL	_MIOS_EEPROM_Read
00478a   f025
00478c   0100     movlb	0                  	BANKSEL	_current_screen_num
00478e   6fe0     movwf	0xe0, 0x1          	MOVWF	_current_screen_num, B
                                           ;	.line	97; main.c	current_preset_num = MIOS_EEPROM_Read(0x01);
004790   0e01     movlw	0x1                	MOVLW	0x01
004792   ec8c     call	0x4b18, 0           	CALL	_MIOS_EEPROM_Read
004794   f025
004796   0100     movlb	0                  	BANKSEL	_current_preset_num
004798   6fe1     movwf	0xe1, 0x1          	MOVWF	_current_preset_num, B
                                           ;	.line	98; main.c	current_bus_num = MIOS_EEPROM_Read(0x02);
00479a   0e02     movlw	0x2                	MOVLW	0x02
00479c   ec8c     call	0x4b18, 0           	CALL	_MIOS_EEPROM_Read
00479e   f025
0047a0   0100     movlb	0                  	BANKSEL	_current_bus_num
0047a2   6fe2     movwf	0xe2, 0x1          	MOVWF	_current_bus_num, B
0047a4   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	99; main.c	preset_load(current_preset_num);
0047a6   51e1     movf	0xe1, 0, 0x1        	MOVF	_current_preset_num, W, B
0047a8   ec08     call	0x4610, 0           	CALL	_preset_load
0047aa   f023
                                           ;	.line	101; main.c	screen_print();
0047ac   ec18     call	0x3e30, 0           	CALL	_screen_print
0047ae   f01f
0047b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _int_bit_ormask:
004876   0001     dw	0x1  ;unknown opcode  	DB	0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00
004878   0002     dw	0x2  ;unknown opcode  
00487a   0004     clrwdt                   
00487c   0008     tblrd	*                  
00487e   0010     retfie	0                 
004880   0020     dw	0x20  ;unknown opcode 
004882   0040     dw	0x40  ;unknown opcode 	DB	0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08
004884   0080     dw	0x80  ;unknown opcode 
004886   0100     movlb	0                  
004888   0200     mulwf	0, 0               
00488a   0400     decf	0, 0, 0             
00488c   0800     sublw	0                  
00488e   1000     iorwf	0, 0, 0            	DB	0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80
004890   2000     addwfc	0, 0, 0           
004892   4000     rrncf	0, 0, 0            
004894   8000     bsf	0, 0, 0              
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5210 (0x145a) bytes ( 3.97%)
                                           ;           	 2605 (0x0a2d) words
                                           ; udata size:	  352 (0x0160) bytes (27.50%)
                                           ; access size:	   18 (0x0012) bytes
                                           
                                           
                                           	end
