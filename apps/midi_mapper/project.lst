gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 9-16-2008  06:43:12
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ; $Id: mios_wrapper.asm 63 2008-01-31 20:44:17Z tk $
                                           ;
                                           ; This is the MIOS wrapper for SDCC (qualified for v2.5.0 and v2.6.0)
                                           ;
                                           ; the upper boundary of the stacks are defined here 
                                           ; customize the values for your needs
                                           #ifndef STACK_HEAD
                                           #define STACK_HEAD 0x37f
                                           #endif
                                           
                                           #ifndef STACK_IRQ_HEAD
                                           #define STACK_IRQ_HEAD 0x33f
                                           #endif
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; ---[ MIOS header file ]---
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           
                                           ;; ---[ vectors to MIOS functions (never change!) ]---
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           
                                           ;; ---[ user hooks (never change!) ]---
                                           #include <user_vectors.inc>
                                           ; $Id: user_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; User vectortable - contains user hooks to MIOS
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           	;; never change the origin or the order of entries!
                                           	org	0x3000
                                           _User_Init
003000   ef19     goto	0x3e32              	goto	USER_Init
003002   f01f
                                           _USER_Tick
003004   ef1f     goto	0x3e3e              	goto	USER_Tick
003006   f01f
                                           _USER_Timer
003008   ef25     goto	0x3e4a              	goto	USER_Timer
00300a   f01f
                                           _USER_MPROC_DebugTrigger
00300c   ef34     goto	0x3e68              	goto	USER_MPROC_DebugTrigger
00300e   f01f
                                           _USER_DISPLAY_Init
003010   ef35     goto	0x3e6a              	goto	USER_DISPLAY_Init
003012   f01f
                                           _USER_DISPLAY_Tick
003014   ef3b     goto	0x3e76              	goto	USER_DISPLAY_Tick
003016   f01f
                                           _USER_SR_Service_Prepare
003018   ef77     goto	0x3eee              	goto	USER_SR_Service_Prepare
00301a   f01f
                                           _USER_SR_Service_Finish
00301c   ef86     goto	0x3f0c              	goto	USER_SR_Service_Finish
00301e   f01f
                                           _USER_DIN_NotifyToggle
003020   ef67     goto	0x3ece              	goto	USER_DIN_NotifyToggle
003022   f01f
                                           _USER_ENC_NotifyChange
003024   ef6f     goto	0x3ede              	goto	USER_ENC_NotifyChange
003026   f01f
                                           _USER_AIN_NotifyChange
003028   ef95     goto	0x3f2a              	goto	USER_AIN_NotifyChange
00302a   f01f
                                           _USER_MPROC_NotifyReceivedByte
00302c   ef5f     goto	0x3ebe              	goto	USER_MPROC_NotifyReceivedByte
00302e   f01f
                                           _USER_MPROC_NotifyTimeout
003030   ef59     goto	0x3eb2              	goto	USER_MPROC_NotifyTimeout
003032   f01f
                                           _USER_MPROC_NotifyReceivedEvent
003034   ef41     goto	0x3e82              	goto	USER_MPROC_NotifyReceivedEvent
003036   f01f
                                           _USER_MPROC_NotifyFoundEvent
003038   ef4c     goto	0x3e98              	goto	USER_MPROC_NotifyFoundEvent
00303a   f01f
                                           _USER_LCD_Init
00303c   ef05     goto	0x440a              	goto	USER_LCD_Init
00303e   f022
                                           _USER_LCD_Clear
003040   ef06     goto	0x440c              	goto	USER_LCD_Clear
003042   f022
                                           _USER_LCD_CursorSet
003044   ef07     goto	0x440e              	goto	USER_LCD_CursorSet
003046   f022
                                           _USER_LCD_PrintChar
003048   ef08     goto	0x4410              	goto	USER_LCD_PrintChar
00304a   f022
                                           _USER_MIDI_NotifyRx
00304c   ef66     goto	0x3ecc              	goto	USER_MIDI_NotifyRx
00304e   f01f
                                           _USER_MIDI_NotifyTx
003050   ef65     goto	0x3eca              	goto	USER_MIDI_NotifyTx
003052   f01f
                                           _USER_LCD_Data
003054   ef09     goto	0x4412              	goto	USER_LCD_Data
003056   f022
                                           _USER_LCD_Cmd
003058   ef0a     goto	0x4414              	goto	USER_LCD_Cmd
00305a   f022
                                           _USER_LCD_SpecialCharInit
00305c   ef0b     goto	0x4416              	goto	USER_LCD_SpecialCharInit
00305e   f022
                                           USER_RESERVED_25
003060   0012     return	0                 	return
003062   0000     nop                      	nop
                                           USER_RESERVED_26
003064   0012     return	0                 	return
003066   0000     nop                      	nop
                                           USER_RESERVED_27
003068   0012     return	0                 	return
00306a   0000     nop                      	nop
                                           USER_RESERVED_28
00306c   0012     return	0                 	return
00306e   0000     nop                      	nop
                                           USER_RESERVED_29
003070   0012     return	0                 	return
003072   0000     nop                      	nop
                                           USER_RESERVED_30
003074   0012     return	0                 	return
003076   0000     nop                      	nop
                                           USER_RESERVED_31
003078   0012     return	0                 	return
00307a   0000     nop                      	nop
                                           USER_RESERVED_32
00307c   0012     return	0                 	return
00307e   0000     nop                      	nop
                                           
                                           ;; ==========================================================================
                                           ;;  General Application Settings
                                           ;; ==========================================================================
                                           
                                           ;; ---[ configuration table for MIDI processor ]---
                                           #ifndef DONT_INCLUDE_MIOS_MT_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use MT entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_MT_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_MT_TABLE {
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x10), // CC#16
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x11), // CC#17
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x12), // CC#18
                                           ;;   MIOS_MT_ENTRY(0xb0, 0x13), // CC#19
                                           ;;   MIOS_MT_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           ;; 
                                           ;; Note that due to the inflexibility of the MT Table concept, it isn't
                                           ;; recommented for new designs
                                           #include <mios_mt_table.inc>
                                           ; $Id: mios_mt_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" MIDI Trigger Configuaration Table
                                           ; 
                                           ; Should be included by the application, if the MIDI processor feature
                                           ; is not used in order to pre-initialize the table area with EOT's
                                           ;
                                           ; Note: due to the inflexible concept (e.g. handling of Note On/Off events),
                                           ; the usage of this function is not recommented for new designs - please parse 
                                           ; MIDI events locally within the application.
                                           ;
                                           ;
                                           	org	0x3080		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; The MIDI Trigger table maps incoming MIDI events to control elements
                                           ;; (pots/faders, encoders, buttons, LEDs, ...)
                                           ;; 
                                           ;; After the MIOS MIDI processor (MPROC) has received a complete event, it
                                           ;; searches in this table for a matching entry and calls USER_MPROC_NotifyFoundEvent
                                           ;; with the table index in WREG and the MIDI event in MIOS_PARAMETER[123]
                                           ;; 
                                           ;; Note also that the MIDI processor stops scanning the table after
                                           ;; the first MT_EOT entry
                                           ;; 
                                           ;; Note2: never change the origin (memory location) of this table!
                                           ;; 
                                           ;; Optionally this table can also be used to define events, which should be
                                           ;; transmitted (Example: see example_ain64_din128_dout128), so that incoming
                                           ;; and outgoing events are located at one place
                                           ;; 
                                           ;; The table *must* contain 256 entries. Unused entries should be filled with
                                           ;; MT_EOT.
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; MIDI Trigger entry structure
                                           MT_ENTRY MACRO event_0, event_1
                                           	dw	(event_1 << 8) | event_0
                                           	ENDM
                                           
                                           MT_EOT	MACRO
003080   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003082   ffff     dw	0xffff  ;unknown opcode 
003084   ffff     dw	0xffff  ;unknown opcode 
003086   ffff     dw	0xffff  ;unknown opcode 
003088   ffff     dw	0xffff  ;unknown opcode 
00308a   ffff     dw	0xffff  ;unknown opcode 
00308c   ffff     dw	0xffff  ;unknown opcode 
00308e   ffff     dw	0xffff  ;unknown opcode 
003090   ffff     dw	0xffff  ;unknown opcode 
003092   ffff     dw	0xffff  ;unknown opcode 
003094   ffff     dw	0xffff  ;unknown opcode 
003096   ffff     dw	0xffff  ;unknown opcode 
003098   ffff     dw	0xffff  ;unknown opcode 
00309a   ffff     dw	0xffff  ;unknown opcode 
00309c   ffff     dw	0xffff  ;unknown opcode 
00309e   ffff     dw	0xffff  ;unknown opcode 
0030a0   ffff     dw	0xffff  ;unknown opcode 
0030a2   ffff     dw	0xffff  ;unknown opcode 
0030a4   ffff     dw	0xffff  ;unknown opcode 
0030a6   ffff     dw	0xffff  ;unknown opcode 
0030a8   ffff     dw	0xffff  ;unknown opcode 
0030aa   ffff     dw	0xffff  ;unknown opcode 
0030ac   ffff     dw	0xffff  ;unknown opcode 
0030ae   ffff     dw	0xffff  ;unknown opcode 
0030b0   ffff     dw	0xffff  ;unknown opcode 
0030b2   ffff     dw	0xffff  ;unknown opcode 
0030b4   ffff     dw	0xffff  ;unknown opcode 
0030b6   ffff     dw	0xffff  ;unknown opcode 
0030b8   ffff     dw	0xffff  ;unknown opcode 
0030ba   ffff     dw	0xffff  ;unknown opcode 
0030bc   ffff     dw	0xffff  ;unknown opcode 
0030be   ffff     dw	0xffff  ;unknown opcode 
0030c0   ffff     dw	0xffff  ;unknown opcode 
0030c2   ffff     dw	0xffff  ;unknown opcode 
0030c4   ffff     dw	0xffff  ;unknown opcode 
0030c6   ffff     dw	0xffff  ;unknown opcode 
0030c8   ffff     dw	0xffff  ;unknown opcode 
0030ca   ffff     dw	0xffff  ;unknown opcode 
0030cc   ffff     dw	0xffff  ;unknown opcode 
0030ce   ffff     dw	0xffff  ;unknown opcode 
0030d0   ffff     dw	0xffff  ;unknown opcode 
0030d2   ffff     dw	0xffff  ;unknown opcode 
0030d4   ffff     dw	0xffff  ;unknown opcode 
0030d6   ffff     dw	0xffff  ;unknown opcode 
0030d8   ffff     dw	0xffff  ;unknown opcode 
0030da   ffff     dw	0xffff  ;unknown opcode 
0030dc   ffff     dw	0xffff  ;unknown opcode 
0030de   ffff     dw	0xffff  ;unknown opcode 
0030e0   ffff     dw	0xffff  ;unknown opcode 
0030e2   ffff     dw	0xffff  ;unknown opcode 
0030e4   ffff     dw	0xffff  ;unknown opcode 
0030e6   ffff     dw	0xffff  ;unknown opcode 
0030e8   ffff     dw	0xffff  ;unknown opcode 
0030ea   ffff     dw	0xffff  ;unknown opcode 
0030ec   ffff     dw	0xffff  ;unknown opcode 
0030ee   ffff     dw	0xffff  ;unknown opcode 
0030f0   ffff     dw	0xffff  ;unknown opcode 
0030f2   ffff     dw	0xffff  ;unknown opcode 
0030f4   ffff     dw	0xffff  ;unknown opcode 
0030f6   ffff     dw	0xffff  ;unknown opcode 
0030f8   ffff     dw	0xffff  ;unknown opcode 
0030fa   ffff     dw	0xffff  ;unknown opcode 
0030fc   ffff     dw	0xffff  ;unknown opcode 
0030fe   ffff     dw	0xffff  ;unknown opcode 
003100   ffff     dw	0xffff  ;unknown opcode 
003102   ffff     dw	0xffff  ;unknown opcode 
003104   ffff     dw	0xffff  ;unknown opcode 
003106   ffff     dw	0xffff  ;unknown opcode 
003108   ffff     dw	0xffff  ;unknown opcode 
00310a   ffff     dw	0xffff  ;unknown opcode 
00310c   ffff     dw	0xffff  ;unknown opcode 
00310e   ffff     dw	0xffff  ;unknown opcode 
003110   ffff     dw	0xffff  ;unknown opcode 
003112   ffff     dw	0xffff  ;unknown opcode 
003114   ffff     dw	0xffff  ;unknown opcode 
003116   ffff     dw	0xffff  ;unknown opcode 
003118   ffff     dw	0xffff  ;unknown opcode 
00311a   ffff     dw	0xffff  ;unknown opcode 
00311c   ffff     dw	0xffff  ;unknown opcode 
00311e   ffff     dw	0xffff  ;unknown opcode 
003120   ffff     dw	0xffff  ;unknown opcode 
003122   ffff     dw	0xffff  ;unknown opcode 
003124   ffff     dw	0xffff  ;unknown opcode 
003126   ffff     dw	0xffff  ;unknown opcode 
003128   ffff     dw	0xffff  ;unknown opcode 
00312a   ffff     dw	0xffff  ;unknown opcode 
00312c   ffff     dw	0xffff  ;unknown opcode 
00312e   ffff     dw	0xffff  ;unknown opcode 
003130   ffff     dw	0xffff  ;unknown opcode 
003132   ffff     dw	0xffff  ;unknown opcode 
003134   ffff     dw	0xffff  ;unknown opcode 
003136   ffff     dw	0xffff  ;unknown opcode 
003138   ffff     dw	0xffff  ;unknown opcode 
00313a   ffff     dw	0xffff  ;unknown opcode 
00313c   ffff     dw	0xffff  ;unknown opcode 
00313e   ffff     dw	0xffff  ;unknown opcode 
003140   ffff     dw	0xffff  ;unknown opcode 
003142   ffff     dw	0xffff  ;unknown opcode 
003144   ffff     dw	0xffff  ;unknown opcode 
003146   ffff     dw	0xffff  ;unknown opcode 
003148   ffff     dw	0xffff  ;unknown opcode 
00314a   ffff     dw	0xffff  ;unknown opcode 
00314c   ffff     dw	0xffff  ;unknown opcode 
00314e   ffff     dw	0xffff  ;unknown opcode 
003150   ffff     dw	0xffff  ;unknown opcode 
003152   ffff     dw	0xffff  ;unknown opcode 
003154   ffff     dw	0xffff  ;unknown opcode 
003156   ffff     dw	0xffff  ;unknown opcode 
003158   ffff     dw	0xffff  ;unknown opcode 
00315a   ffff     dw	0xffff  ;unknown opcode 
00315c   ffff     dw	0xffff  ;unknown opcode 
00315e   ffff     dw	0xffff  ;unknown opcode 
003160   ffff     dw	0xffff  ;unknown opcode 
003162   ffff     dw	0xffff  ;unknown opcode 
003164   ffff     dw	0xffff  ;unknown opcode 
003166   ffff     dw	0xffff  ;unknown opcode 
003168   ffff     dw	0xffff  ;unknown opcode 
00316a   ffff     dw	0xffff  ;unknown opcode 
00316c   ffff     dw	0xffff  ;unknown opcode 
00316e   ffff     dw	0xffff  ;unknown opcode 
003170   ffff     dw	0xffff  ;unknown opcode 
003172   ffff     dw	0xffff  ;unknown opcode 
003174   ffff     dw	0xffff  ;unknown opcode 
003176   ffff     dw	0xffff  ;unknown opcode 
003178   ffff     dw	0xffff  ;unknown opcode 
00317a   ffff     dw	0xffff  ;unknown opcode 
00317c   ffff     dw	0xffff  ;unknown opcode 
00317e   ffff     dw	0xffff  ;unknown opcode 
003180   ffff     dw	0xffff  ;unknown opcode 
003182   ffff     dw	0xffff  ;unknown opcode 
003184   ffff     dw	0xffff  ;unknown opcode 
003186   ffff     dw	0xffff  ;unknown opcode 
003188   ffff     dw	0xffff  ;unknown opcode 
00318a   ffff     dw	0xffff  ;unknown opcode 
00318c   ffff     dw	0xffff  ;unknown opcode 
00318e   ffff     dw	0xffff  ;unknown opcode 
003190   ffff     dw	0xffff  ;unknown opcode 
003192   ffff     dw	0xffff  ;unknown opcode 
003194   ffff     dw	0xffff  ;unknown opcode 
003196   ffff     dw	0xffff  ;unknown opcode 
003198   ffff     dw	0xffff  ;unknown opcode 
00319a   ffff     dw	0xffff  ;unknown opcode 
00319c   ffff     dw	0xffff  ;unknown opcode 
00319e   ffff     dw	0xffff  ;unknown opcode 
0031a0   ffff     dw	0xffff  ;unknown opcode 
0031a2   ffff     dw	0xffff  ;unknown opcode 
0031a4   ffff     dw	0xffff  ;unknown opcode 
0031a6   ffff     dw	0xffff  ;unknown opcode 
0031a8   ffff     dw	0xffff  ;unknown opcode 
0031aa   ffff     dw	0xffff  ;unknown opcode 
0031ac   ffff     dw	0xffff  ;unknown opcode 
0031ae   ffff     dw	0xffff  ;unknown opcode 
0031b0   ffff     dw	0xffff  ;unknown opcode 
0031b2   ffff     dw	0xffff  ;unknown opcode 
0031b4   ffff     dw	0xffff  ;unknown opcode 
0031b6   ffff     dw	0xffff  ;unknown opcode 
0031b8   ffff     dw	0xffff  ;unknown opcode 
0031ba   ffff     dw	0xffff  ;unknown opcode 
0031bc   ffff     dw	0xffff  ;unknown opcode 
0031be   ffff     dw	0xffff  ;unknown opcode 
0031c0   ffff     dw	0xffff  ;unknown opcode 
0031c2   ffff     dw	0xffff  ;unknown opcode 
0031c4   ffff     dw	0xffff  ;unknown opcode 
0031c6   ffff     dw	0xffff  ;unknown opcode 
0031c8   ffff     dw	0xffff  ;unknown opcode 
0031ca   ffff     dw	0xffff  ;unknown opcode 
0031cc   ffff     dw	0xffff  ;unknown opcode 
0031ce   ffff     dw	0xffff  ;unknown opcode 
0031d0   ffff     dw	0xffff  ;unknown opcode 
0031d2   ffff     dw	0xffff  ;unknown opcode 
0031d4   ffff     dw	0xffff  ;unknown opcode 
0031d6   ffff     dw	0xffff  ;unknown opcode 
0031d8   ffff     dw	0xffff  ;unknown opcode 
0031da   ffff     dw	0xffff  ;unknown opcode 
0031dc   ffff     dw	0xffff  ;unknown opcode 
0031de   ffff     dw	0xffff  ;unknown opcode 
0031e0   ffff     dw	0xffff  ;unknown opcode 
0031e2   ffff     dw	0xffff  ;unknown opcode 
0031e4   ffff     dw	0xffff  ;unknown opcode 
0031e6   ffff     dw	0xffff  ;unknown opcode 
0031e8   ffff     dw	0xffff  ;unknown opcode 
0031ea   ffff     dw	0xffff  ;unknown opcode 
0031ec   ffff     dw	0xffff  ;unknown opcode 
0031ee   ffff     dw	0xffff  ;unknown opcode 
0031f0   ffff     dw	0xffff  ;unknown opcode 
0031f2   ffff     dw	0xffff  ;unknown opcode 
0031f4   ffff     dw	0xffff  ;unknown opcode 
0031f6   ffff     dw	0xffff  ;unknown opcode 
0031f8   ffff     dw	0xffff  ;unknown opcode 
0031fa   ffff     dw	0xffff  ;unknown opcode 
0031fc   ffff     dw	0xffff  ;unknown opcode 
0031fe   ffff     dw	0xffff  ;unknown opcode 
003200   ffff     dw	0xffff  ;unknown opcode 
003202   ffff     dw	0xffff  ;unknown opcode 
003204   ffff     dw	0xffff  ;unknown opcode 
003206   ffff     dw	0xffff  ;unknown opcode 
003208   ffff     dw	0xffff  ;unknown opcode 
00320a   ffff     dw	0xffff  ;unknown opcode 
00320c   ffff     dw	0xffff  ;unknown opcode 
00320e   ffff     dw	0xffff  ;unknown opcode 
003210   ffff     dw	0xffff  ;unknown opcode 
003212   ffff     dw	0xffff  ;unknown opcode 
003214   ffff     dw	0xffff  ;unknown opcode 
003216   ffff     dw	0xffff  ;unknown opcode 
003218   ffff     dw	0xffff  ;unknown opcode 
00321a   ffff     dw	0xffff  ;unknown opcode 
00321c   ffff     dw	0xffff  ;unknown opcode 
00321e   ffff     dw	0xffff  ;unknown opcode 
003220   ffff     dw	0xffff  ;unknown opcode 
003222   ffff     dw	0xffff  ;unknown opcode 
003224   ffff     dw	0xffff  ;unknown opcode 
003226   ffff     dw	0xffff  ;unknown opcode 
003228   ffff     dw	0xffff  ;unknown opcode 
00322a   ffff     dw	0xffff  ;unknown opcode 
00322c   ffff     dw	0xffff  ;unknown opcode 
00322e   ffff     dw	0xffff  ;unknown opcode 
003230   ffff     dw	0xffff  ;unknown opcode 
003232   ffff     dw	0xffff  ;unknown opcode 
003234   ffff     dw	0xffff  ;unknown opcode 
003236   ffff     dw	0xffff  ;unknown opcode 
003238   ffff     dw	0xffff  ;unknown opcode 
00323a   ffff     dw	0xffff  ;unknown opcode 
00323c   ffff     dw	0xffff  ;unknown opcode 
00323e   ffff     dw	0xffff  ;unknown opcode 
003240   ffff     dw	0xffff  ;unknown opcode 
003242   ffff     dw	0xffff  ;unknown opcode 
003244   ffff     dw	0xffff  ;unknown opcode 
003246   ffff     dw	0xffff  ;unknown opcode 
003248   ffff     dw	0xffff  ;unknown opcode 
00324a   ffff     dw	0xffff  ;unknown opcode 
00324c   ffff     dw	0xffff  ;unknown opcode 
00324e   ffff     dw	0xffff  ;unknown opcode 
003250   ffff     dw	0xffff  ;unknown opcode 
003252   ffff     dw	0xffff  ;unknown opcode 
003254   ffff     dw	0xffff  ;unknown opcode 
003256   ffff     dw	0xffff  ;unknown opcode 
003258   ffff     dw	0xffff  ;unknown opcode 
00325a   ffff     dw	0xffff  ;unknown opcode 
00325c   ffff     dw	0xffff  ;unknown opcode 
00325e   ffff     dw	0xffff  ;unknown opcode 
003260   ffff     dw	0xffff  ;unknown opcode 
003262   ffff     dw	0xffff  ;unknown opcode 
003264   ffff     dw	0xffff  ;unknown opcode 
003266   ffff     dw	0xffff  ;unknown opcode 
003268   ffff     dw	0xffff  ;unknown opcode 
00326a   ffff     dw	0xffff  ;unknown opcode 
00326c   ffff     dw	0xffff  ;unknown opcode 
00326e   ffff     dw	0xffff  ;unknown opcode 
003270   ffff     dw	0xffff  ;unknown opcode 
003272   ffff     dw	0xffff  ;unknown opcode 
003274   ffff     dw	0xffff  ;unknown opcode 
003276   ffff     dw	0xffff  ;unknown opcode 
003278   ffff     dw	0xffff  ;unknown opcode 
00327a   ffff     dw	0xffff  ;unknown opcode 
00327c   ffff     dw	0xffff  ;unknown opcode 
00327e   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           
                                           _MIOS_MPROC_EVENT_TABLE
                                           MIOS_MPROC_EVENT_TABLE
                                           	;; entry 0x00-0x0f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x10-0x1f	
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x20-0x2f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x30-0x3f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x40-0x4f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	
                                           	;; entry 0x50-0x5f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           		
                                           	;; entry 0x60-0x6f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x70-0x7f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x80-0x8f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0x90-0x9f
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xa0-0xaf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xb1-0xbf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xc0-0xcf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xd0-0xdf
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xe0-0xef
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           	;; entry 0xf0-0xff
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           	MT_EOT
                                           
                                           #endif
                                           
                                           ;; ---[ configuration table for rotary encoders ]---
                                           #ifndef DONT_INCLUDE_MIOS_ENC_TABLE
                                           ;; dummy table located in $MIOS_PATH/include/asm
                                           ;; If the application should use ENC entries,
                                           ;; just add "-DDONT_INCLUDE_MIOS_ENC_TABLE" to MIOS_WRAPPER_DEFINES
                                           ;; and build the table within the C program with:
                                           ;; 
                                           ;; MIOS_ENC_TABLE {
                                           ;;              // sr pin mode
                                           ;;   MIOS_ENC_ENTRY(1, 0, MIOS_ENC_MODE_DETENTED), // VPot #1
                                           ;;   MIOS_ENC_ENTRY(1, 2, MIOS_ENC_MODE_DETENTED), // VPot #2
                                           ;;   MIOS_ENC_ENTRY(1, 4, MIOS_ENC_MODE_DETENTED), // VPot #3
                                           ;;   MIOS_ENC_EOT
                                           ;; };
                                           ;; 
                                           ;; The MIOS_MT_* macros are defined in $MIOS_PATH/include/c/cmios.h
                                           #include <mios_enc_table.inc>
                                           ; $Id: mios_enc_table.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; "Dummy" Configuration Table for Rotary Encoders
                                           ; 
                                           ; Should be included by the application, if no rotary encoders are connected
                                           ; in order to pre-initialize the table area with EOT's
                                           ; 
                                           ; ==========================================================================
                                           
                                           	org	0x3280		; never change the origin!
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; In this table DIN pins have to be assigned to rotary encoders for the
                                           ;; MIOS_ENC driver 
                                           ;; 
                                           ;; up to 64 entries are provided
                                           ;; 
                                           ;; The table must be terminated with an ENC_EOT entry. Unused entries should
                                           ;; be filled with ENC_EOT
                                           ;; 
                                           ;; ENC_ENTRY provides following parameters
                                           ;;    o first parameter: number of shift register - 1, 2, 3, ... 16
                                           ;;    o second parameter: number of pin; since two pins are necessary
                                           ;;      for each encoder, an even number is expected: 0, 2, 4 or 6
                                           ;;    o the third parameter contains the encoder mode:
                                           ;;      either MIOS_ENC_MODE_NON_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED
                                           ;;          or MIOS_ENC_MODE_DETENTED2
                                           ;;          or MIOS_ENC_MODE_DETENTED3
                                           ;;
                                           ;; Configuration Examples:
                                           ;;    ENC_ENTRY  1,  0,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 0 and 1 of SR 1
                                           ;;    ENC_ENTRY  1,  2,  MIOS_ENC_MODE_DETENTED        ; detented encoder at pin 2 and 3 of SR 1
                                           ;;    ENC_ENTRY  9,  6,  MIOS_ENC_MODE_NON_DETENTED    ; non-detented encoder at pin 6 and 7 of SR 9
                                           ;; --------------------------------------------------------------------------
                                           
                                           	;; encoder entry structure
                                           ENC_ENTRY MACRO sr, din_0, mode
                                           	dw	(mode << 8) | (din_0 + 8*(sr-1))
                                           	ENDM	
                                           ENC_EOT	MACRO
003280   ffff     dw	0xffff  ;unknown opcode 	dw	0xffff
003282   ffff     dw	0xffff  ;unknown opcode 
003284   ffff     dw	0xffff  ;unknown opcode 
003286   ffff     dw	0xffff  ;unknown opcode 
003288   ffff     dw	0xffff  ;unknown opcode 
00328a   ffff     dw	0xffff  ;unknown opcode 
00328c   ffff     dw	0xffff  ;unknown opcode 
00328e   ffff     dw	0xffff  ;unknown opcode 
003290   ffff     dw	0xffff  ;unknown opcode 
003292   ffff     dw	0xffff  ;unknown opcode 
003294   ffff     dw	0xffff  ;unknown opcode 
003296   ffff     dw	0xffff  ;unknown opcode 
003298   ffff     dw	0xffff  ;unknown opcode 
00329a   ffff     dw	0xffff  ;unknown opcode 
00329c   ffff     dw	0xffff  ;unknown opcode 
00329e   ffff     dw	0xffff  ;unknown opcode 
0032a0   ffff     dw	0xffff  ;unknown opcode 
0032a2   ffff     dw	0xffff  ;unknown opcode 
0032a4   ffff     dw	0xffff  ;unknown opcode 
0032a6   ffff     dw	0xffff  ;unknown opcode 
0032a8   ffff     dw	0xffff  ;unknown opcode 
0032aa   ffff     dw	0xffff  ;unknown opcode 
0032ac   ffff     dw	0xffff  ;unknown opcode 
0032ae   ffff     dw	0xffff  ;unknown opcode 
0032b0   ffff     dw	0xffff  ;unknown opcode 
0032b2   ffff     dw	0xffff  ;unknown opcode 
0032b4   ffff     dw	0xffff  ;unknown opcode 
0032b6   ffff     dw	0xffff  ;unknown opcode 
0032b8   ffff     dw	0xffff  ;unknown opcode 
0032ba   ffff     dw	0xffff  ;unknown opcode 
0032bc   ffff     dw	0xffff  ;unknown opcode 
0032be   ffff     dw	0xffff  ;unknown opcode 
0032c0   ffff     dw	0xffff  ;unknown opcode 
0032c2   ffff     dw	0xffff  ;unknown opcode 
0032c4   ffff     dw	0xffff  ;unknown opcode 
0032c6   ffff     dw	0xffff  ;unknown opcode 
0032c8   ffff     dw	0xffff  ;unknown opcode 
0032ca   ffff     dw	0xffff  ;unknown opcode 
0032cc   ffff     dw	0xffff  ;unknown opcode 
0032ce   ffff     dw	0xffff  ;unknown opcode 
0032d0   ffff     dw	0xffff  ;unknown opcode 
0032d2   ffff     dw	0xffff  ;unknown opcode 
0032d4   ffff     dw	0xffff  ;unknown opcode 
0032d6   ffff     dw	0xffff  ;unknown opcode 
0032d8   ffff     dw	0xffff  ;unknown opcode 
0032da   ffff     dw	0xffff  ;unknown opcode 
0032dc   ffff     dw	0xffff  ;unknown opcode 
0032de   ffff     dw	0xffff  ;unknown opcode 
0032e0   ffff     dw	0xffff  ;unknown opcode 
0032e2   ffff     dw	0xffff  ;unknown opcode 
0032e4   ffff     dw	0xffff  ;unknown opcode 
0032e6   ffff     dw	0xffff  ;unknown opcode 
0032e8   ffff     dw	0xffff  ;unknown opcode 
0032ea   ffff     dw	0xffff  ;unknown opcode 
0032ec   ffff     dw	0xffff  ;unknown opcode 
0032ee   ffff     dw	0xffff  ;unknown opcode 
0032f0   ffff     dw	0xffff  ;unknown opcode 
0032f2   ffff     dw	0xffff  ;unknown opcode 
0032f4   ffff     dw	0xffff  ;unknown opcode 
0032f6   ffff     dw	0xffff  ;unknown opcode 
0032f8   ffff     dw	0xffff  ;unknown opcode 
0032fa   ffff     dw	0xffff  ;unknown opcode 
0032fc   ffff     dw	0xffff  ;unknown opcode 
0032fe   ffff     dw	0xffff  ;unknown opcode 
                                           	ENDM
                                           
                                           _MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_PIN_TABLE
                                           	;; encoders 1-16
                                           	;;        SR  Pin  Mode
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 17-32
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 33-48
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           	;; encoders 49-64
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           	ENC_EOT
                                           
                                           #endif
                                           
                                           	org	0x3300		; never change the origin!
                                           
                                           ; Don't enable this --- its only used by a special testcase which checks 
                                           ; parameter passing on functions which are difficult to verify with
                                           ; directed tests
                                           #ifndef PARAMETER_PASSING_TEST
                                           #define PARAMETER_PASSING_TEST 0
                                           #endif
                                           
                                           ;; ==========================================================================
                                           ;;  Export MIOS variables
                                           ;; ==========================================================================
                                           	global	_MIOS_BOX_CFG0
                                           	global	_MIOS_BOX_CFG1
                                           	global	_MIOS_BOX_STAT
                                           	global	_MIOS_PARAMETER1
                                           	global	_MIOS_PARAMETER2
                                           	global	_MIOS_PARAMETER3
                                           
                                           MIOS_VARIABLES		udata	0x0000
                                           _MIOS_BOX_CFG0		res	1
                                           _MIOS_BOX_CFG1		res	1
                                           _MIOS_BOX_STAT		res	1
                                           _MIOS_PARAMETER1	res	1
                                           _MIOS_PARAMETER2	res	1
                                           _MIOS_PARAMETER3	res	1
                                           _TMP1			res	1
                                           _TMP2			res	1
                                           _TMP3			res	1
                                           _TMP4			res	1
                                           _TMP5			res	1
                                           _IRQ_TMP1		res	1
                                           _IRQ_TMP2		res	1
                                           _IRQ_TMP3		res	1
                                           _IRQ_TMP4		res	1
                                           _IRQ_TMP5		res	1
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  USER_LCD_* vectors defined externally in $MIOS_PATH/modules/app_lcd/*/*.asm
                                           ;; ==========================================================================
                                           	extern	USER_LCD_Init
                                           	extern	USER_LCD_Data
                                           	extern	USER_LCD_Cmd
                                           	extern	USER_LCD_Clear
                                           	extern	USER_LCD_CursorSet
                                           	extern	USER_LCD_PrintChar
                                           	extern	USER_LCD_SpecialCharInit
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  All MIOS hooks in one file
                                           ;; ==========================================================================
                                           
                                           MIOS_WRAPPER_CODE	code
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after startup to initialize the 
                                           ;;  application
                                           ;; --------------------------------------------------------------------------
                                           USER_Init
                                           	extern	_Init
                                           
003e32   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e34   f07f
003e36   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e38   f07f
003e3a   eff8     goto	0x41f0              	goto	_Init	
003e3c   f020
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS in the mainloop when nothing else is to do
                                           ;; --------------------------------------------------------------------------
                                           USER_Tick
                                           	extern	_Tick
                                           
003e3e   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e40   f07f
003e42   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e44   f07f
003e46   ef74     goto	0x44e8              	goto	_Tick
003e48   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is periodically called by MIOS. The frequency has to be
                                           ;;  initialized with MIOS_Timer_Set
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;; --------------------------------------------------------------------------
                                           USER_Timer
                                           	extern	_Timer
                                           
003e4a   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
003e4c   f03f
003e4e   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
003e50   ffdd
003e52   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
003e54   ffdd
003e56   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
003e58   f03d
003e5a   eca2     call	0x4144, 0           	call	_Timer			; call C hook
003e5c   f020
003e5e   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
003e60   ffe9
003e62   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
003e64   ffea
003e66   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a debug command has been received
                                           ;;  via SysEx
                                           ;;  Input:
                                           ;;     o WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3 like
                                           ;;       specified in the debug command
                                           ;;  Output:
                                           ;;     o return values WREG, MIOS_PARAMETER1, MIOS_PARAMETER2, MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_DebugTrigger
                                           	;; not really required for C programs
003e68   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the display content should be 
                                           ;;  initialized. Thats the case during startup and after a temporary message
                                           ;;  has been printed on the screen
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Init
                                           	extern	_DISPLAY_Init
                                           
003e6a   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e6c   f07f
003e6e   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e70   f07f
003e72   ef76     goto	0x44ec              	goto	_DISPLAY_Init
003e74   f022
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called in the mainloop when no temporary message is shown
                                           ;;  on screen. Print the realtime messages here
                                           ;; --------------------------------------------------------------------------
                                           USER_DISPLAY_Tick
                                           	extern	_DISPLAY_Tick
                                           
003e76   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e78   f07f
003e7a   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e7c   f07f
003e7e   ef75     goto	0x44ea              	goto	_DISPLAY_Tick
003e80   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a complete MIDI event has been received
                                           ;;  Input:
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedEvent
                                           	extern	_MPROC_NotifyReceivedEvnt
                                           
003e82   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e84   f07f
003e86   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e88   f07f
                                           
003e8a   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
003e8c   ffed
003e8e   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003e90   ffed
003e92   5003     movf	0x3, 0, 0           	movf	MIOS_PARAMETER1, W
003e94   ef9f     goto	0x3f3e              	goto	_MPROC_NotifyReceivedEvnt
003e96   f01f
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has been received
                                           ;;  which has been specified in the CONFIG_MIDI_IN table
                                           ;;  Input:
                                           ;;     o number of entry in WREG
                                           ;;     o first  MIDI event byte in MIOS_PARAMETER1
                                           ;;     o second MIDI event byte in MIOS_PARAMETER2
                                           ;;     o third  MIDI event byte in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyFoundEvent
                                           	extern	_MPROC_NotifyFoundEvent
                                           
003e98   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003e9a   f07f
003e9c   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003e9e   f07f
                                           
003ea0   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
003ea2   ffed
003ea4   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003ea6   ffed
003ea8   c003     movff	0x3, 0xfed         	movff	MIOS_PARAMETER1, POSTDEC0
003eaa   ffed
003eac   6eed     movwf	0xed, 0            	movwf	POSTDEC0		; TK: required for SDCC 2.5.0, don't know why...
                                           	;; entry number still in wreg
003eae   ef1a     goto	0x4434              	goto	_MPROC_NotifyFoundEvent
003eb0   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI event has not been completly
                                           ;;  received within 2 seconds
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyTimeout
                                           	extern	_MPROC_NotifyTimeout
                                           
003eb2   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003eb4   f07f
003eb6   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003eb8   f07f
003eba   ef73     goto	0x44e6              	goto	_MPROC_NotifyTimeout
003ebc   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received
                                           ;;  Input:
                                           ;;     o received MIDI byte in WREG and MIOS_PARAMETER1
                                           ;; --------------------------------------------------------------------------
                                           USER_MPROC_NotifyReceivedByte
                                           	extern	_MPROC_NotifyReceivedByte
                                           
003ebe   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003ec0   f07f
003ec2   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003ec4   f07f
                                           
                                           	;; MIDI byte still in WREG
003ec6   ef0c     goto	0x4018              	goto	_MPROC_NotifyReceivedByte
003ec8   f020
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the transfer of a MIDI byte. 
                                           ;;  It can be used to monitor the Tx activity or to do any other actions
                                           ;;  (e.g. to switch a pin for multiplexed MIDI Outs) before the byte will 
                                           ;;  be sent.
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o transmitted byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyTx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_TX
                                           	extern	_MIDI_NotifyTx
                                           	goto	_MIDI_NotifyTx
                                           #else
003eca   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a MIDI byte has been received.
                                           ;;  It can be used to monitor the Rx activity or to do any action - e.g.
                                           ;;  to react on realtime events like MIDI clock (0xf8) with a minimum latency
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible!
                                           ;;  Input:
                                           ;;     o received byte in WREG
                                           ;; --------------------------------------------------------------------------
                                           USER_MIDI_NotifyRx
                                           	;; too time consuming for C programs --- should be handled so fast as
                                           	;; possible and therefore serviced in assembler
                                           
                                           	;; disabled by default
                                           	;; enable it if external function is available
                                           #ifdef ENABLE_MIDI_NOTIFY_RX
                                           	extern	_MIDI_NotifyRx
                                           	goto	_MIDI_NotifyRx
                                           #else
003ecc   0012     return	0                 	return
                                           #endif
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an button has been toggled
                                           ;;  Input:
                                           ;;     o Button number in WREG and MIOS_PARAMETER1
                                           ;;     o Button value MIOS_PARAMETER2:
                                           ;;       - 1 if button has been released (=5V)
                                           ;;       - 0 if button has been pressed (=0V)
                                           ;; --------------------------------------------------------------------------
                                           USER_DIN_NotifyToggle
                                           	extern	_DIN_NotifyToggle
                                           
003ece   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003ed0   f07f
003ed2   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003ed4   f07f
                                           
003ed6   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003ed8   ffed
                                           	;; button number still in WREG
003eda   ef80     goto	0x3300              	goto	_DIN_NotifyToggle
003edc   f019
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when an encoder has been moved
                                           ;;  Input:
                                           ;;     o Encoder number in WREG and MIOS_PARAMETER1
                                           ;;     o signed incrementer value in MIOS_PARAMETER2:
                                           ;;       - is positive when encoder has been turned clockwise
                                           ;;       - is negative when encoder has been turned counter clockwise
                                           ;; --------------------------------------------------------------------------
                                           USER_ENC_NotifyChange
                                           	extern	_ENC_NotifyChange
                                           
003ede   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003ee0   f07f
003ee2   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003ee4   f07f
                                           
003ee6   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003ee8   ffed
                                           	;; encoder number still in WREG
003eea   ef13     goto	0x4426              	goto	_ENC_NotifyChange
003eec   f022
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS before the shift register are loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Prepare
                                           	extern	_SR_Service_Prepare
                                           
003eee   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
003ef0   f03f
003ef2   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
003ef4   ffdd
003ef6   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
003ef8   ffdd
003efa   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
003efc   f03d
003efe   ec72     call	0x44e4, 0           	call	_SR_Service_Prepare	; call C hook
003f00   f022
003f02   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
003f04   ffe9
003f06   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
003f08   ffea
003f0a   0012     return	0                 	return
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS after the shift register have been loaded
                                           ;;  Note that this is an interrupt service routine! Use FSR2 instead of FSR0
                                           ;;  and IRQ_TMPx instead of TMPx -- and make the routine as fast as possible
                                           ;; --------------------------------------------------------------------------
                                           USER_SR_Service_Finish
                                           	extern	_SR_Service_Finish
                                           
003f0c   ee23     lfsr	0x2, 0x33f          	lfsr	FSR2, STACK_IRQ_HEAD	; initialize IRQ stack
003f0e   f03f
003f10   cfe9     movff	0xfe9, 0xfdd       	movff	FSR0L, POSTDEC2		; save FSR0[LH] on IRQ stack
003f12   ffdd
003f14   cfea     movff	0xfea, 0xfdd       	movff	FSR0H, POSTDEC2
003f16   ffdd
003f18   ee03     lfsr	0, 0x33d            	lfsr	FSR0, STACK_IRQ_HEAD-2	; write stack pointer also to FSR0
003f1a   f03d
003f1c   ec71     call	0x44e2, 0           	call	_SR_Service_Finish	; call C hook
003f1e   f022
003f20   c33f     movff	0x33f, 0xfe9       	movff	STACK_IRQ_HEAD-0, FSR0L	; restore FSR0[LH] directly from memory (more fail save)
003f22   ffe9
003f24   c33e     movff	0x33e, 0xfea       	movff	STACK_IRQ_HEAD-1, FSR0H	; restore FSR0[LH] directly from memory (more fail save)
003f26   ffea
003f28   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a pot has been moved
                                           ;;  Input:
                                           ;;     o Pot number in WREG and MIOS_PARAMETER1
                                           ;;     o LSB value in MIOS_PARAMETER2
                                           ;;     o MSB value in MIOS_PARAMETER3
                                           ;; --------------------------------------------------------------------------
                                           USER_AIN_NotifyChange
                                           	extern	_AIN_NotifyChange
                                           
003f2a   ee03     lfsr	0, 0x37f            	lfsr	FSR0, STACK_HEAD	; initialize stack
003f2c   f07f
003f2e   ee23     lfsr	0x2, 0x37f          	lfsr	FSR2, STACK_HEAD
003f30   f07f
                                           
003f32   c005     movff	0x5, 0xfed         	movff	MIOS_PARAMETER3, POSTDEC0
003f34   ffed
003f36   c004     movff	0x4, 0xfed         	movff	MIOS_PARAMETER2, POSTDEC0
003f38   ffed
                                           	;; pot number still in WREG
003f3a   ef0c     goto	0x4418              	goto	_AIN_NotifyChange
003f3c   f022
                                           
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  LINKS TO THE MIOS FUNCTIONS
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           .MIOS_MIDI_BeginStream code MIOS_MIDI_BeginStream
                                           _MIOS_MIDI_BeginStream
                                           	global	_MIOS_MIDI_BeginStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDAutoSet code MIOS_MIDI_DeviceIDAutoSet
                                           _MIOS_MIDI_DeviceIDAutoSet
                                           	global	_MIOS_MIDI_DeviceIDAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDGet code MIOS_MIDI_DeviceIDGet
                                           _MIOS_MIDI_DeviceIDGet
                                           	global	_MIOS_MIDI_DeviceIDGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_DeviceIDSet code MIOS_MIDI_DeviceIDSet
                                           _MIOS_MIDI_DeviceIDSet
                                           	global	_MIOS_MIDI_DeviceIDSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_EndStream code MIOS_MIDI_EndStream
                                           _MIOS_MIDI_EndStream
                                           	global	_MIOS_MIDI_EndStream
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_Init code MIOS_MIDI_Init
                                           _MIOS_MIDI_Init
                                           	global	_MIOS_MIDI_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceAutoSet code MIOS_MIDI_InterfaceAutoSet
                                           _MIOS_MIDI_InterfaceAutoSet
                                           	global	_MIOS_MIDI_InterfaceAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceGet code MIOS_MIDI_InterfaceGet
                                           _MIOS_MIDI_InterfaceGet
                                           	global	_MIOS_MIDI_InterfaceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_InterfaceSet code MIOS_MIDI_InterfaceSet
                                           _MIOS_MIDI_InterfaceSet
                                           	global	_MIOS_MIDI_InterfaceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerGet code MIOS_MIDI_MergerGet
                                           _MIOS_MIDI_MergerGet
                                           	global	_MIOS_MIDI_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_MergerSet code MIOS_MIDI_MergerSet
                                           _MIOS_MIDI_MergerSet
                                           	global	_MIOS_MIDI_MergerSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferFree code MIOS_MIDI_RxBufferFree
                                           _MIOS_MIDI_RxBufferFree
                                           	global	_MIOS_MIDI_RxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferGet code MIOS_MIDI_RxBufferGet
                                           _MIOS_MIDI_RxBufferGet
                                           	global	_MIOS_MIDI_RxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferPut code MIOS_MIDI_RxBufferPut
                                           _MIOS_MIDI_RxBufferPut
                                           	global	_MIOS_MIDI_RxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_RxBufferUsed code MIOS_MIDI_RxBufferUsed
                                           _MIOS_MIDI_RxBufferUsed
                                           	global	_MIOS_MIDI_RxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFlush code MIOS_MIDI_TxBufferFlush
                                           _MIOS_MIDI_TxBufferFlush
                                           	global	_MIOS_MIDI_TxBufferFlush
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferFree code MIOS_MIDI_TxBufferFree
                                           _MIOS_MIDI_TxBufferFree
                                           	global	_MIOS_MIDI_TxBufferFree
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferGet code MIOS_MIDI_TxBufferGet
                                           _MIOS_MIDI_TxBufferGet
                                           	global	_MIOS_MIDI_TxBufferGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferPut code MIOS_MIDI_TxBufferPut
                                           _MIOS_MIDI_TxBufferPut
                                           	global	_MIOS_MIDI_TxBufferPut
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MIDI_TxBufferUsed code MIOS_MIDI_TxBufferUsed
                                           _MIOS_MIDI_TxBufferUsed
                                           	global	_MIOS_MIDI_TxBufferUsed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerDisable code MIOS_MPROC_MergerDisable
                                           _MIOS_MPROC_MergerDisable
                                           	global	_MIOS_MPROC_MergerDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerEnable code MIOS_MPROC_MergerEnable
                                           _MIOS_MPROC_MergerEnable
                                           	global	_MIOS_MPROC_MergerEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MPROC_MergerGet code MIOS_MPROC_MergerGet
                                           _MIOS_MPROC_MergerGet
                                           	global	_MIOS_MPROC_MergerGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandGet code MIOS_AIN_DeadbandGet
                                           _MIOS_AIN_DeadbandGet
                                           	global	_MIOS_AIN_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DeadbandSet code MIOS_AIN_DeadbandSet
                                           _MIOS_AIN_DeadbandSet
                                           	global	_MIOS_AIN_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Muxed code MIOS_AIN_Muxed
                                           _MIOS_AIN_Muxed
                                           	global	_MIOS_AIN_Muxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberGet code MIOS_AIN_NumberGet
                                           _MIOS_AIN_NumberGet
                                           	global	_MIOS_AIN_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_NumberSet code MIOS_AIN_NumberSet
                                           _MIOS_AIN_NumberSet
                                           	global	_MIOS_AIN_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_Pin7bitGet code MIOS_AIN_Pin7bitGet
                                           _MIOS_AIN_Pin7bitGet
                                           	global	_MIOS_AIN_Pin7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinGet code
                                           _MIOS_AIN_PinGet
                                           	global	_MIOS_AIN_PinGet
                                           
0044c8   ec3a     call	0x2c74, 0           	call	MIOS_AIN_PinGet
0044ca   f016
0044cc   c004     movff	0x4, 0xff3         	movff	MIOS_PARAMETER2, PRODL	; high byte -> PRODL
0044ce   fff3
0044d0   0012     return	0                 	return				; low byte already in WREG
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinLSBGet code MIOS_AIN_PinLSBGet
                                           _MIOS_AIN_PinLSBGet
                                           	global	_MIOS_AIN_PinLSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_PinMSBGet code MIOS_AIN_PinMSBGet
                                           _MIOS_AIN_PinMSBGet
                                           	global	_MIOS_AIN_PinMSBGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_UnMuxed code MIOS_AIN_UnMuxed
                                           _MIOS_AIN_UnMuxed
                                           	global	_MIOS_AIN_UnMuxed
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownGet code MIOS_MF_PWM_DutyCycleDownGet
                                           _MIOS_MF_PWM_DutyCycleDownGet
                                           	global	_MIOS_MF_PWM_DutyCycleDownGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleDownSet code MIOS_MF_PWM_DutyCycleDownSet
                                           _MIOS_MF_PWM_DutyCycleDownSet
                                           	global	_MIOS_MF_PWM_DutyCycleDownSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpGet code MIOS_MF_PWM_DutyCycleUpGet
                                           _MIOS_MF_PWM_DutyCycleUpGet
                                           	global	_MIOS_MF_PWM_DutyCycleUpGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_DutyCycleUpSet code MIOS_MF_PWM_DutyCycleUpSet
                                           _MIOS_MF_PWM_DutyCycleUpSet
                                           	global	_MIOS_MF_PWM_DutyCycleUpSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandGet code MIOS_MF_DeadbandGet
                                           _MIOS_MF_DeadbandGet
                                           	global	_MIOS_MF_DeadbandGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_DeadbandSet code MIOS_MF_DeadbandSet
                                           _MIOS_MF_DeadbandSet
                                           	global	_MIOS_MF_DeadbandSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Disable code MIOS_MF_Disable
                                           _MIOS_MF_Disable
                                           	global	_MIOS_MF_Disable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_Enable code MIOS_MF_Enable
                                           _MIOS_MF_Enable
                                           	global	_MIOS_MF_Enable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_FaderMove code
                                           _MIOS_MF_FaderMove
                                           	global	_MIOS_MF_FaderMove
                                           
00439c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00439e   ffd9
0043a0   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0043a2   f003
0043a4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0043a6   f004
0043a8   ef52     goto	0x2ca4              	goto	MIOS_MF_FaderMove
0043aa   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendDisable code MIOS_MF_SuspendDisable
                                           _MIOS_MF_SuspendDisable
                                           	global	_MIOS_MF_SuspendDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendEnable code MIOS_MF_SuspendEnable
                                           _MIOS_MF_SuspendEnable
                                           	global	_MIOS_MF_SuspendEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_SuspendGet code MIOS_MF_SuspendGet
                                           _MIOS_MF_SuspendGet
                                           	global	_MIOS_MF_SuspendGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodGet code MIOS_MF_PWM_PeriodGet
                                           _MIOS_MF_PWM_PeriodGet
                                           	global	_MIOS_MF_PWM_PeriodGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_PWM_PeriodSet code MIOS_MF_PWM_PeriodSet
                                           _MIOS_MF_PWM_PeriodSet
                                           	global	_MIOS_MF_PWM_PeriodSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_MF_TouchDetectionReset code MIOS_MF_TouchDetectionReset
                                           _MIOS_MF_TouchDetectionReset
                                           	global	_MIOS_MF_TouchDetectionReset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinGet code MIOS_DIN_PinGet
                                           _MIOS_DIN_PinGet
                                           	global	_MIOS_DIN_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_SRGet code MIOS_DIN_SRGet
                                           _MIOS_DIN_SRGet
                                           	global	_MIOS_DIN_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinGet code MIOS_DOUT_PinGet
                                           _MIOS_DOUT_PinGet
                                           	global	_MIOS_DOUT_PinGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet code
                                           _MIOS_DOUT_PinSet
                                           	global	_MIOS_DOUT_PinSet
                                           
004450   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004452   ffd9
004454   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004456   f003
004458   ef60     goto	0x2cc0              	goto	MIOS_DOUT_PinSet
00445a   f016
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet0 code MIOS_DOUT_PinSet0
                                           _MIOS_DOUT_PinSet0
                                           	global	_MIOS_DOUT_PinSet0
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_PinSet1 code MIOS_DOUT_PinSet1
                                           _MIOS_DOUT_PinSet1
                                           	global	_MIOS_DOUT_PinSet1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRGet code MIOS_DOUT_SRGet
                                           _MIOS_DOUT_SRGet
                                           	global	_MIOS_DOUT_SRGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DOUT_SRSet code
                                           _MIOS_DOUT_SRSet
                                           	global	_MIOS_DOUT_SRSet
                                           	
00445c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00445e   ffd9
004460   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004462   f003
004464   ef68     goto	0x2cd0              	goto	MIOS_DOUT_SRSet
004466   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitAdd code
                                           _MIOS_ENC_Abs7bitAdd
                                           	global	_MIOS_ENC_Abs7bitAdd
                                           	
004468   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00446a   ffd9
00446c   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
00446e   f003
004470   ef6a     goto	0x2cd4              	goto	MIOS_ENC_Abs7bitAdd
004472   f016
                                           	
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitGet code MIOS_ENC_Abs7bitGet
                                           _MIOS_ENC_Abs7bitGet
                                           	global	_MIOS_ENC_Abs7bitGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_Abs7bitSet code
                                           _MIOS_ENC_Abs7bitSet
                                           	global	_MIOS_ENC_Abs7bitSet
                                           
004474   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004476   ffd9
004478   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
00447a   f003
00447c   ef6e     goto	0x2cdc              	goto	MIOS_ENC_Abs7bitSet
00447e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_NumberGet code MIOS_ENC_NumberGet
                                           _MIOS_ENC_NumberGet
                                           	global	_MIOS_ENC_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedGet code
                                           _MIOS_ENC_SpeedGet
                                           	global	_MIOS_ENC_SpeedGet
                                           
004480   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004482   ffd9
004484   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
004486   f003
004488   ef72     goto	0x2ce4              	goto	MIOS_ENC_SpeedGet
00448a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_ENC_SpeedSet code
                                           _MIOS_ENC_SpeedSet
                                           	global	_MIOS_ENC_SpeedSet
                                           
0043ac   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0043ae   ffd9
0043b0   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0043b2   f003
0043b4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0043b6   f004
0043b8   ef74     goto	0x2ce8              	goto	MIOS_ENC_SpeedSet
0043ba   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberGet code MIOS_SRIO_NumberGet
                                           _MIOS_SRIO_NumberGet
                                           	global	_MIOS_SRIO_NumberGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_NumberSet code MIOS_SRIO_NumberSet
                                           _MIOS_SRIO_NumberSet
                                           	global	_MIOS_SRIO_NumberSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivityGet code MIOS_SRIO_TS_SensitivityGet
                                           _MIOS_SRIO_TS_SensitivityGet
                                           	global	_MIOS_SRIO_TS_SensitivityGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_TS_SensitivitySet code MIOS_SRIO_TS_SensitivitySet
                                           _MIOS_SRIO_TS_SensitivitySet
                                           	global	_MIOS_SRIO_TS_SensitivitySet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqGet code MIOS_SRIO_UpdateFrqGet
                                           _MIOS_SRIO_UpdateFrqGet
                                           	global	_MIOS_SRIO_UpdateFrqGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_UpdateFrqSet code MIOS_SRIO_UpdateFrqSet
                                           _MIOS_SRIO_UpdateFrqSet
                                           	global	_MIOS_SRIO_UpdateFrqSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceGet code MIOS_SRIO_DebounceGet
                                           _MIOS_SRIO_DebounceGet
                                           	global	_MIOS_SRIO_DebounceGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SRIO_DebounceSet code MIOS_SRIO_DebounceSet
                                           _MIOS_SRIO_DebounceSet
                                           	global	_MIOS_SRIO_DebounceSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Clear code MIOS_LCD_Clear
                                           _MIOS_LCD_Clear
                                           	global	_MIOS_LCD_Clear
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Cmd code MIOS_LCD_Cmd
                                           _MIOS_LCD_Cmd
                                           	global	_MIOS_LCD_Cmd
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorGet code MIOS_LCD_CursorGet
                                           _MIOS_LCD_CursorGet
                                           	global	_MIOS_LCD_CursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_CursorSet code MIOS_LCD_CursorSet
                                           _MIOS_LCD_CursorSet
                                           	global	_MIOS_LCD_CursorSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Data code MIOS_LCD_Data
                                           _MIOS_LCD_Data
                                           	global	_MIOS_LCD_Data
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_Init code MIOS_LCD_Init
                                           _MIOS_LCD_Init
                                           	global	_MIOS_LCD_Init
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD1 code MIOS_LCD_PrintBCD1
                                           _MIOS_LCD_PrintBCD1
                                           	global	_MIOS_LCD_PrintBCD1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD2 code MIOS_LCD_PrintBCD2
                                           _MIOS_LCD_PrintBCD2
                                           	global	_MIOS_LCD_PrintBCD2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD3 code MIOS_LCD_PrintBCD3
                                           _MIOS_LCD_PrintBCD3
                                           	global	_MIOS_LCD_PrintBCD3
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD4 code
                                           _MIOS_LCD_PrintBCD4
                                           	global	_MIOS_LCD_PrintBCD4
                                           
00448c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00448e   ffd9
004490   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004492   f003
004494   eff6     goto	0x2dec              	goto	MIOS_LCD_PrintBCD4
004496   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintBCD5 code
                                           _MIOS_LCD_PrintBCD5
                                           	global	_MIOS_LCD_PrintBCD5
                                           
004498   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00449a   ffd9
00449c   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
00449e   f003
0044a0   eff8     goto	0x2df0              	goto	MIOS_LCD_PrintBCD5
0044a2   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintChar code MIOS_LCD_PrintChar
                                           _MIOS_LCD_PrintChar
                                           	global	_MIOS_LCD_PrintChar
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex1 code MIOS_LCD_PrintHex1
                                           _MIOS_LCD_PrintHex1
                                           	global	_MIOS_LCD_PrintHex1
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintHex2 code MIOS_LCD_PrintHex2
                                           _MIOS_LCD_PrintHex2
                                           	global	_MIOS_LCD_PrintHex2
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintMessage code
                                           _MIOS_LCD_PrintMessage
                                           	global	_MIOS_LCD_PrintMessage
                                           
004330   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004332   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004334   ffd9
004336   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004338   fff7
00433a   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00433c   fff8
00433e   ef9a     goto	0x2d34              	goto	MIOS_LCD_PrintMessage
004340   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintPreconfString code
                                           _MIOS_LCD_PrintPreconfString
                                           	global	_MIOS_LCD_PrintPreconfString
                                           
0042f4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0042f6   ffd9
0042f8   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0042fa   fff8
0042fc   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0042fe   fff7
004300   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
004302   fff6
004304   ef9c     goto	0x2d38              	goto	MIOS_LCD_PrintPreconfString
004306   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintString code
                                           _MIOS_LCD_PrintString
                                           	global	_MIOS_LCD_PrintString
                                           
004342   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004344   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004346   ffd9
004348   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00434a   fff7
00434c   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00434e   fff8
004350   ef9e     goto	0x2d3c              	goto	MIOS_LCD_PrintString
004352   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeAutoSet code MIOS_LCD_TypeAutoSet
                                           _MIOS_LCD_TypeAutoSet
                                           	global	_MIOS_LCD_TypeAutoSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeGet code MIOS_LCD_TypeGet
                                           _MIOS_LCD_TypeGet
                                           	global	_MIOS_LCD_TypeGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_TypeSet code
                                           _MIOS_LCD_TypeSet
                                           	global	_MIOS_LCD_TypeSet
                                           
0043bc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0043be   ffd9
0043c0   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0043c2   f003
0043c4   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
0043c6   f004
0043c8   efa4     goto	0x2d48              	goto	MIOS_LCD_TypeSet
0043ca   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressGet code
                                           _MIOS_LCD_YAddressGet
                                           	global	_MIOS_LCD_YAddressGet
0044de   efa6     goto	0x2d4c              	goto	MIOS_LCD_YAddressGet
0044e0   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_YAddressSet code
                                           _MIOS_LCD_YAddressSet
                                           	global	_MIOS_LCD_YAddressSet
                                           
004308   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00430a   ffd9
00430c   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
00430e   cfdc     movff	0xfdc, 0x4          	movff	PREINC2, MIOS_PARAMETER2
004310   f004
004312   cfdc     movff	0xfdc, 0x5          	movff	PREINC2, MIOS_PARAMETER3
004314   f005
004316   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
004318   efa8     goto	0x2d50              	goto	MIOS_LCD_YAddressSet
00431a   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStart code MIOS_LCD_MessageStart
                                           _MIOS_LCD_MessageStart
                                           	global	_MIOS_LCD_MessageStart
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_MessageStop code MIOS_LCD_MessageStop
                                           _MIOS_LCD_MessageStop
                                           	global	_MIOS_LCD_MessageStop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharInit code
                                           _MIOS_CLCD_SpecialCharInit
                                           	global	_MIOS_CLCD_SpecialCharInit
                                           
00431c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00431e   ffd9
004320   cfdc     movff	0xfdc, 0xff6       	movff	PREINC2, TBLPTRL
004322   fff6
004324   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
004326   fff7
004328   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
00432a   fff8
00432c   efe4     goto	0x2dc8              	goto	MIOS_CLCD_SpecialCharInit
00432e   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_CLCD_SpecialCharsInit code
                                           _MIOS_CLCD_SpecialCharsInit
                                           	global	_MIOS_CLCD_SpecialCharsInit
                                           
004354   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004356   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004358   ffd9
00435a   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00435c   fff7
00435e   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004360   fff8
004362   efe6     goto	0x2dcc              	goto	MIOS_CLCD_SpecialCharsInit
004364   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_FontInit code
                                           _MIOS_GLCD_FontInit
                                           	global	_MIOS_GLCD_FontInit
                                           
004366   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004368   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00436a   ffd9
00436c   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00436e   fff7
004370   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
004372   fff8
004374   efaa     goto	0x2d54              	goto	MIOS_GLCD_FontInit
004376   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorGet code MIOS_GLCD_GCursorGet
                                           _MIOS_GLCD_GCursorGet
                                           	global	_MIOS_GLCD_GCursorGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GLCD_GCursorSet code
                                           _MIOS_GLCD_GCursorSet
                                           	global	_MIOS_GLCD_GCursorSet
                                           
0044a4   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044a6   ffd9
0044a8   cfdc     movff	0xfdc, 0x3          	movff	PREINC2, MIOS_PARAMETER1
0044aa   f003
0044ac   efae     goto	0x2d5c              	goto	MIOS_GLCD_GCursorSet
0044ae   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Read code
                                           _MIOS_EEPROM_Read
                                           	global	_MIOS_EEPROM_Read
                                           
0044d2   6ea9     movwf	0xa9, 0            	movwf	EEADR
0044d4   efb0     goto	0x2d60              	goto	MIOS_EEPROM_Read
0044d6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_Write code
                                           _MIOS_EEPROM_Write
                                           	global	_MIOS_EEPROM_Write
                                           
0044b0   6ea9     movwf	0xa9, 0            	movwf	EEADR
0044b2   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044b4   ffd9
0044b6   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
0044b8   efb2     goto	0x2d64              	goto	MIOS_EEPROM_Write
0044ba   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_ReadPage code
                                           _MIOS_EEPROM_ReadPage
                                           	global	_MIOS_EEPROM_ReadPage
                                           
004378   6ea9     movwf	0xa9, 0            	movwf	EEADR
00437a   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00437c   ffd9
00437e   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004380   ffe1
004382   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004384   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004386   ef1a     goto	0x2e34              	goto	MIOS_EEPROM_ReadPage
004388   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_EEPROM_WritePage code
                                           _MIOS_EEPROM_WritePage
                                           	global	_MIOS_EEPROM_WritePage
                                           
00438a   6ea9     movwf	0xa9, 0            	movwf	EEADR
00438c   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
00438e   ffd9
004390   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004392   ffe1
004394   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004396   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	EEADR, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
004398   ef1c     goto	0x2e38              	goto	MIOS_EEPROM_WritePage
00439a   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Read code
                                           _MIOS_FLASH_Read
                                           	global	_MIOS_FLASH_Read
                                           
004294   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
004296   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004298   ffd9
00429a   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
00429c   fff7
00429e   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0042a0   fff8
0042a2   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0042a4   ffe1
0042a6   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0042a8   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0042aa   efb4     goto	0x2d68              	goto	MIOS_FLASH_Read
0042ac   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_FLASH_Write code
                                           _MIOS_FLASH_Write
                                           	global	_MIOS_FLASH_Write
                                           
0042ae   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0042b0   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0042b2   ffd9
0042b4   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0042b6   fff7
0042b8   cfdc     movff	0xfdc, 0xff8       	movff	PREINC2, TBLPTRU
0042ba   fff8
0042bc   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0042be   ffe1
0042c0   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0042c2   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	TBLPTRL, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	TBLPTRH, ACCESS
                                           	return
                                           
                                           	movlw	0x00
                                           	cpfseq	TBLPTRU, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0042c4   efb6     goto	0x2d6c              	goto	MIOS_FLASH_Write
0042c6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Read code
                                           _MIOS_BANKSTICK_Read
                                           	global	_MIOS_BANKSTICK_Read
                                           
0043fc   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0043fe   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004400   ffd9
004402   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
004404   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
004406   efb8     goto	0x2d70              	goto	MIOS_BANKSTICK_Read
004408   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_Write code
                                           _MIOS_BANKSTICK_Write
                                           	global	_MIOS_BANKSTICK_Write
                                           
0043cc   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0043ce   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0043d0   ffd9
0043d2   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0043d4   f004
0043d6   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0043d8   efba     goto	0x2d74              	goto	MIOS_BANKSTICK_Write
0043da   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlSet code MIOS_BANKSTICK_CtrlSet
                                           _MIOS_BANKSTICK_CtrlSet
                                           	global	_MIOS_BANKSTICK_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_CtrlGet code MIOS_BANKSTICK_CtrlGet
                                           _MIOS_BANKSTICK_CtrlGet
                                           	global	_MIOS_BANKSTICK_CtrlGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_WritePage code
                                           _MIOS_BANKSTICK_WritePage
                                           	global	_MIOS_BANKSTICK_WritePage
                                           
0042c8   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0042ca   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0042cc   ffd9
0042ce   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0042d0   f004
0042d2   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0042d4   ffe1
0042d6   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0042d8   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0042da   eff2     goto	0x2de4              	goto	MIOS_BANKSTICK_WritePage
0042dc   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_BANKSTICK_ReadPage code
                                           _MIOS_BANKSTICK_ReadPage
                                           	global	_MIOS_BANKSTICK_ReadPage
                                           	
0042de   6e03     movwf	0x3, 0             	movwf	MIOS_PARAMETER1
0042e0   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0042e2   ffd9
0042e4   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0042e6   f004
0042e8   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
0042ea   ffe1
0042ec   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
0042ee   ffe2
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movlw	0x56
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x78
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	FSR1L, ACCESS
                                           	return
                                           
                                           	movlw	0x03
                                           	cpfseq	FSR1H, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0042f0   ef18     goto	0x2e30              	goto	MIOS_BANKSTICK_ReadPage
0042f2   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Init code
                                           _MIOS_TIMER_Init
                                           	global	_MIOS_TIMER_Init
                                           
0043dc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0043de   ffd9
0043e0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
0043e2   f003
0043e4   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0043e6   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0043e8   efbc     goto	0x2d78              	goto	MIOS_TIMER_Init
0043ea   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Start code MIOS_TIMER_Start
                                           _MIOS_TIMER_Start
                                           	global	_MIOS_TIMER_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_Stop code MIOS_TIMER_Stop
                                           _MIOS_TIMER_Stop
                                           	global	_MIOS_TIMER_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_TIMER_ReInit code
                                           _MIOS_TIMER_ReInit
                                           	global	_MIOS_TIMER_ReInit
                                           
0043ec   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0043ee   ffd9
0043f0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
0043f2   f003
0043f4   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
0043f6   f004
                                           
                                           #if PARAMETER_PASSING_TEST
                                           	movwf	TMP1
                                           	movlw	0x56
                                           	cpfseq	TMP1, ACCESS
                                           	return
                                           
                                           	movlw	0x12
                                           	cpfseq	MIOS_PARAMETER1, ACCESS
                                           	return
                                           
                                           	movlw	0x34
                                           	cpfseq	MIOS_PARAMETER2, ACCESS
                                           	return
                                           
                                           	movlw	0x1a
                                           	movwf	MIOS_PARAMETER1
                                           	return
                                           #endif
                                           
0043f8   ef1e     goto	0x2e3c              	goto	MIOS_TIMER_ReInit
0043fa   f017
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitANDMask code MIOS_HLP_GetBitANDMask
                                           _MIOS_HLP_GetBitANDMask
                                           	global	_MIOS_HLP_GetBitANDMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_GetBitORMask code MIOS_HLP_GetBitORMask
                                           _MIOS_HLP_GetBitORMask
                                           	global	_MIOS_HLP_GetBitORMask
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_16bitAddSaturate code
                                           _MIOS_HLP_16bitAddSaturate
                                           	global	_MIOS_HLP_16bitAddSaturate
                                           
004234   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004236   ffd9
004238   6e0a     movwf	0xa, 0             	movwf	TMP5
                                           
00423a   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
00423c   ffe1
00423e   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004240   ffe2
004242   52dc     movf	0xdc, 0x1, 0        	movf	PREINC2, F
004244   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
004246   f003
004248   cfdc     movff	0xfdc, 0x4         	movff	PREINC2, MIOS_PARAMETER2
00424a   f004
                                           
00424c   cfe6     movff	0xfe6, 0x6         	movff	POSTINC1, TMP1	; due to requirement that FSR1 is aligned to 16bit address
00424e   f006
004250   cfe6     movff	0xfe6, 0x7         	movff	POSTINC1, TMP2
004252   f007
004254   ee10     lfsr	0x1, 0x6            	lfsr	FSR1, TMP1
004256   f006
                                           
004258   500a     movf	0xa, 0, 0           	movf	TMP5, W
00425a   ecdc     call	0x2db8, 0           	call	MIOS_HLP_16bitAddSaturate
00425c   f016
00425e   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
004260   ffd9
004262   cfdc     movff	0xfdc, 0xfe1       	movff	PREINC2, FSR1L
004264   ffe1
004266   cfdc     movff	0xfdc, 0xfe2       	movff	PREINC2, FSR1H
004268   ffe2
00426a   c006     movff	0x6, 0xfe6         	movff	TMP1, POSTINC1
00426c   ffe6
00426e   c007     movff	0x7, 0xfe6         	movff	TMP2, POSTINC1
004270   ffe6
004272   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_HLP_Dec2BCD code
                                           _MIOS_HLP_Dec2BCD
                                           	global	_MIOS_HLP_Dec2BCD
                                           
0044bc   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0044be   ffd9
0044c0   cfdc     movff	0xfdc, 0x3         	movff	PREINC2, MIOS_PARAMETER1
0044c2   f003
0044c4   eff4     goto	0x2de8              	goto	MIOS_HLP_Dec2BCD
0044c6   f016
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Delay code MIOS_Delay
                                           _MIOS_Delay
                                           	global	_MIOS_Delay
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_GPCounterGet code MIOS_GPCounterGet
                                           _MIOS_GPCounterGet
                                           	global	_MIOS_GPCounterGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_Reset code MIOS_Reset
                                           _MIOS_Reset
                                           	global	_MIOS_Reset
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemResume code MIOS_SystemResume
                                           _MIOS_SystemResume
                                           	global	_MIOS_SystemResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_SystemSuspend code MIOS_SystemSuspend
                                           _MIOS_SystemSuspend
                                           	global	_MIOS_SystemSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserResume code MIOS_UserResume
                                           _MIOS_UserResume
                                           	global	_MIOS_UserResume
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_UserSuspend code MIOS_UserSuspend
                                           _MIOS_UserSuspend
                                           	global	_MIOS_UserSuspend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatEnable code MIOS_DIN_PinAutoRepeatEnable
                                           _MIOS_DIN_PinAutoRepeatEnable
                                           	global	_MIOS_DIN_PinAutoRepeatEnable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatDisable code MIOS_DIN_PinAutoRepeatDisable
                                           _MIOS_DIN_PinAutoRepeatDisable
                                           	global	_MIOS_DIN_PinAutoRepeatDisable
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_DIN_PinAutoRepeatGet code MIOS_DIN_PinAutoRepeatGet
                                           _MIOS_DIN_PinAutoRepeatGet
                                           	global	_MIOS_DIN_PinAutoRepeatGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioSet code MIOS_AIN_DynamicPrioSet
                                           _MIOS_AIN_DynamicPrioSet
                                           	global	_MIOS_AIN_DynamicPrioSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_DynamicPrioGet code MIOS_AIN_DynamicPrioGet
                                           _MIOS_AIN_DynamicPrioGet
                                           	global	_MIOS_AIN_DynamicPrioGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_AIN_LastPinsGet code MIOS_AIN_LastPinsGet
                                           _MIOS_AIN_LastPinsGet
                                           	global	_MIOS_AIN_LastPinsGet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Start code MIOS_IIC_Start
                                           _MIOS_IIC_Start
                                           	global	_MIOS_IIC_Start
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_Stop code MIOS_IIC_Stop
                                           _MIOS_IIC_Stop
                                           	global	_MIOS_IIC_Stop
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteSend code MIOS_IIC_ByteSend
                                           _MIOS_IIC_ByteSend
                                           	global	_MIOS_IIC_ByteSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_ByteReceive code MIOS_IIC_ByteReceive
                                           _MIOS_IIC_ByteReceive
                                           	global	_MIOS_IIC_ByteReceive
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_AckSend code MIOS_IIC_AckSend
                                           _MIOS_IIC_AckSend
                                           	global	_MIOS_IIC_AckSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_NakSend code MIOS_IIC_NakSend
                                           _MIOS_IIC_NakSend
                                           	global	_MIOS_IIC_NakSend
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlSet code MIOS_IIC_CtrlSet
                                           _MIOS_IIC_CtrlSet
                                           	global	_MIOS_IIC_CtrlSet
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_IIC_CtrlGet code MIOS_IIC_CtrlGet
                                           _MIOS_IIC_CtrlGet
                                           	global	_MIOS_IIC_CtrlGet
                                           
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;; ==========================================================================
                                           ;;  Special functions supported by the wrapper
                                           ;; ==========================================================================
                                           ;; --------------------------------------------------------------------------
                                           
                                           ;; --------------------------------------------------------------------------
                                           .MIOS_LCD_PrintCString code
                                           _MIOS_LCD_PrintCString
                                           	global	_MIOS_LCD_PrintCString
                                           
0041ac   6ef6     movwf	0xf6, 0            	movwf	TBLPTRL
0041ae   cfe9     movff	0xfe9, 0xfd9       	movff	FSR0L, FSR2L
0041b0   ffd9
0041b2   cfdc     movff	0xfdc, 0xff7       	movff	PREINC2, TBLPTRH
0041b4   fff7
0041b6   50dc     movf	0xdc, 0, 0          	movf	PREINC2, W
                                           
                                           	;; SDCC passes a 24bit pointer, the MSB (now in WREG) bit 6 and 7 tells us, where the data is located:
                                           	;; 00 -> code
                                           	;; 01 -> EEPROM (not supported by MIOS_LCD_PrintCString yet)
                                           	;; 10 -> data
                                           	;; 11 -> unimplemented
                                           
0041b8   bee8     btfsc	0xe8, 0x7, 0       	btfsc	WREG, 7
0041ba   d008     bra	0x41cc               	bra	_MIOS_LCD_PrintCString_RAM
                                           _MIOS_LCD_PrintCString_Code
0041bc   6ef8     movwf	0xf8, 0            	movwf	TBLPTRU
                                           _MIOS_LCD_PrintCStringLoop_Code
0041be   0009     tblrd	*+                 	tblrd*+
0041c0   50f5     movf	0xf5, 0, 0          	movf	TABLAT, W
0041c2   e003     bz	0x41ca                	bz	_MIOS_LCD_PrintCString_Code_End
0041c4   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
0041c6   f016
0041c8   d7fa     bra	0x41be               	bra	_MIOS_LCD_PrintCStringLoop_Code
                                           _MIOS_LCD_PrintCString_Code_End
0041ca   0012     return	0                 	return
                                           
                                           _MIOS_LCD_PrintCString_RAM
                                           	;; using FSR2 as temporary pointer - store current FSR2 into TMP[12]
0041cc   cfd9     movff	0xfd9, 0x6         	movff	FSR2L, TMP1
0041ce   f006
0041d0   cfda     movff	0xfda, 0x7         	movff	FSR2H, TMP2
0041d2   f007
0041d4   cff6     movff	0xff6, 0xfd9       	movff	TBLPTRL, FSR2L
0041d6   ffd9
0041d8   cff7     movff	0xff7, 0xfda       	movff	TBLPTRH, FSR2H
0041da   ffda
                                           _MIOS_LCD_PrintCStringLoop_RAM
0041dc   50de     movf	0xde, 0, 0          	movf	POSTINC2, W
0041de   e003     bz	0x41e6                	bz	_MIOS_LCD_PrintCString_RAM_End
0041e0   ec94     call	0x2d28, 0           	call	MIOS_LCD_PrintChar
0041e2   f016
0041e4   d7fb     bra	0x41dc               	bra	_MIOS_LCD_PrintCStringLoop_RAM
                                           _MIOS_LCD_PrintCString_RAM_End
                                           	;; restore FSR2
0041e6   c006     movff	0x6, 0xfd9         	movff	TMP1, FSR2L
0041e8   ffd9
0041ea   c007     movff	0x7, 0xfda         	movff	TMP2, FSR2H
0041ec   ffda
0041ee   0012     return	0                 	return
                                           
                                           	END
                                           ; $Id: app_lcd.asm 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; Wrapper for app_lcd.inc
                                           ; To be used for relocatable programs
                                           ;
                                           ; ==========================================================================
                                           
                                           	radix	dec
                                           
                                           #include <mios.h>
                                           ; $Id: mios.h 387 2008-07-14 20:59:15Z tk $
                                           ;
                                           ; MIOS Definitions file
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2008 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  Include basic defines which characterize the derivative to
                                           ;;  simplify dependencies within MIOS source code
                                           ;; ==========================================================================
                                           #include <hw_flags.h>
                                           
                                           #ifndef _HW_FLAGS_H
                                           #define _HW_FLAGS_H
                                           
                                           #ifdef __18F452
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		0
                                           #define PIC_DERIVATIVE_CMCON_INIT	0
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4620
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x10000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xf80
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	1
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x08000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0x600
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x100
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	1
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	0
                                           #endif
                                           
                                           #ifdef __18F4682
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x14000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #ifdef __18F4685
                                           #define PIC_DERIVATIVE_CODE_SIZE	0x18000
                                           #define PIC_DERIVATIVE_RAM_SIZE		0xd00
                                           #define PIC_DERIVATIVE_EEPROM_SIZE	0x400
                                           #define PIC_DERIVATIVE_IRQ_WORKAROUND	0
                                           #define PIC_DERIVATIVE_NEW_ADC		1
                                           #define PIC_DERIVATIVE_CMCON_INIT	1
                                           #define PIC_DERIVATIVE_T08BIT_INVERTED	0
                                           #define PIC_DERIVATIVE_SET_LCD_4BIT	1
                                           #endif
                                           
                                           #endif
                                            
                                           ;; ==========================================================================
                                           ;;  Assembler directives & device specific include file
                                           ;;
                                           ;;  Natively supported devices are listed here.
                                           ;; ==========================================================================
                                           
                                           #ifdef __18F452
                                           	LIST R=DEC
                                           #include <p18f452.inc>
                                                   LIST
                                           ; P18F452.INC  Standard Header File, Version 1.4   Microchip Technology, Inc.
                                                   NOLIST
                                           #endif
                                           
                                           #ifdef __18F4620
                                           	LIST R=DEC
                                           #include <p18f4620.inc>
                                           #endif
                                           	
                                           #ifdef __18F4520
                                           	LIST R=DEC
                                           #include <p18f4520.inc>
                                           #endif
                                           
                                           #ifdef __18F4682
                                           	LIST R=DEC
                                           #include <p18f4682.inc>
                                           #endif
                                           
                                           #ifdef __18F4685
                                           	LIST R=DEC
                                           #include <p18f4685.inc>
                                           #endif
                                           
                                           
                                           ;; ==========================================================================
                                           ;;  General constants
                                           ;; ==========================================================================
                                           
                                           ;; used by MIOS_MIDI_Interface*
                                           MIOS_MIDI_INTERFACE_COMMON	EQU	0x00
                                           MIOS_MIDI_INTERFACE_TO_HOST	EQU	0x01
                                           
                                           ;; used by MIOS_MIDI_Merger*
                                           MIOS_MIDI_MERGER_DISABLED	EQU	0x00
                                           MIOS_MIDI_MERGER_ENABLED	EQU	0x01
                                           MIOS_MIDI_MERGER_MBLINK_EP	EQU	0x02
                                           MIOS_MIDI_MERGER_MBLINK_FP	EQU	0x03
                                           
                                           ;; used by MIOS_ENC_PIN_TABLE
                                           MIOS_ENC_MODE_NON_DETENTED	EQU	0x00
                                           MIOS_ENC_MODE_DETENTED		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED1		EQU	0x80
                                           MIOS_ENC_MODE_DETENTED2		EQU	0x81
                                           MIOS_ENC_MODE_DETENTED3		EQU	0x82
                                           
                                           ;; used by MIOS_ENC_Speed*
                                           MIOS_ENC_SPEED_SLOW		EQU	0
                                           MIOS_ENC_SPEED_NORMAL		EQU	1
                                           MIOS_ENC_SPEED_FAST		EQU	2
                                           
                                           ;; used by MIOS_LCD_Type*
                                           MIOS_LCD_TYPE_CLCD		EQU	0x00
                                           MIOS_LCD_TYPE_GLCD0		EQU	0x01
                                           MIOS_LCD_TYPE_GLCD1		EQU	0x02
                                           MIOS_LCD_TYPE_GLCD2		EQU	0x03
                                           MIOS_LCD_TYPE_GLCD3		EQU	0x04
                                           MIOS_LCD_TYPE_GLCD4		EQU	0x05
                                           MIOS_LCD_TYPE_MLCD		EQU	0x06
                                           MIOS_LCD_TYPE_GLCD_CUSTOM	EQU	0x07
                                           
                                           ;; location of default 5x8 font for graphical displays
                                           MIOS_GLCD_FONT			EQU	0x7cfc
                                           
                                           ;; general config flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_CFG0_LCD_TYPE0		EQU 0	; selects LCD type, bit 0
                                           MIOS_BOX_CFG0_LCD_TYPE1		EQU 1	; selects LCD type, bit 1
                                           MIOS_BOX_CFG0_LCD_TYPE2		EQU 2	; selects LCD type, bit 2
                                           MIOS_BOX_CFG0_USE_GLCD		EQU 3	; if 1, graphical LCD is connected
                                           MIOS_BOX_CFG0_MERGER		EQU 4	; if 1, MIDI merger is enabled
                                           MIOS_BOX_CFG0_MBLINK		EQU 5	; if 1, MIDIbox Link is enabled
                                           MIOS_BOX_CFG0_TO_HOST		EQU 6	; if 1, MIDI interface will run with 38400 baud instead of 31250
                                           MIOS_BOX_CFG0_20MHz		EQU 7	; if 1, it is assumed that box is running with 20 MHz, else with 40 MHz
                                           
                                           MIOS_BOX_CFG1_BS_A0		EQU 0	; A0 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A1		EQU 1	; A1 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_A2		EQU 2	; A2 of BankStick (never change the bit position)
                                           MIOS_BOX_CFG1_BS_DIS_VERIFY	EQU 3	; if 1, writes to the BankStick will not be verified
                                           MIOS_BOX_CFG1_IIC_STRETCH_CLK	EQU 4	; if 1, IIC clock stretching enabled
                                           
                                           ;; general status flags (never overwrite this flags directly!!!)
                                           MIOS_BOX_STAT_BS_AVAILABLE	EQU 0	; if 1, BankStick is available
                                           MIOS_BOX_STAT_MBLINK_TUNNEL_PASS EQU 1  ; if 1, a MBLinked event will be tunnled
                                           MIOS_BOX_STAT_SUSPEND_ALL       EQU 2   ; if 1, all system and user tasks are suspended
                                           MIOS_BOX_STAT_SUSPEND_USER      EQU 3   ; if 1, all user tasks are suspended
                                           MIOS_BOX_STAT_AUTOREPEAT	EQU 4	; if 1, start the auto-repeat handler
                                           MIOS_BOX_STAT_MLCD_TRANSFER	EQU 5	; if 1, a transfer to the MLCD has been started
                                           MIOS_BOX_STAT_FERR		EQU 6	; if 1, a frame error happened during MIDI receive
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS Special Function Registers
                                           ;; ==========================================================================
                                           
                                           MIOS_BOX_CFG0	EQU	0x000
                                           MIOS_BOX_CFG1	EQU	0x001
                                           MIOS_BOX_STAT	EQU	0x002
                                           MIOS_PARAMETER1	EQU	0x003
                                           MIOS_PARAMETER2	EQU	0x004
                                           MIOS_PARAMETER3	EQU	0x005
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for main programs
                                           ;; ==========================================================================
                                           TMP1		EQU	0x006
                                           TMP2		EQU	0x007
                                           TMP3		EQU	0x008
                                           TMP4		EQU	0x009
                                           TMP5		EQU	0x00a
                                           
                                           ;; ==========================================================================
                                           ;;  temporary registers for IRQs
                                           ;; ==========================================================================
                                           IRQ_TMP1	EQU	0x00b
                                           IRQ_TMP2	EQU	0x00c
                                           IRQ_TMP3	EQU	0x00d
                                           IRQ_TMP4	EQU	0x00e
                                           IRQ_TMP5	EQU	0x00f
                                           
                                           ;; ==========================================================================
                                           ;;  free memory space for user application:
                                           ;; ==========================================================================
                                           	;; 0x010-0x37f
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers -- not defined here -- 
                                           ;;  never use these memory locations!
                                           ;; ==========================================================================
                                           	;; 0x380-0x6ff
                                           
                                           ;; ==========================================================================
                                           ;;  MIOS System Registers for custom LCD driver
                                           ;; ==========================================================================
                                           MIOS_GLCD_BUFFER	EQU	0x570	; note: the buffer must be located at ...0-...7
                                           MIOS_LCD_OPTION1	EQU	0x578	; contains the first LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_OPTION2	EQU	0x579	; contains the second LCD option given by MIOS_LCD_TypeSet
                                           MIOS_LCD_CURSOR_POS	EQU	0x57a	; the current cursor pos of characters (GLCD: multiplied by width)
                                           MIOS_GLCD_GCURSOR_X	EQU	0x57b	; for GLCDs: the current X position of graphical cursor
                                           MIOS_GLCD_GCURSOR_Y	EQU	0x57c	; for GLCDs: the current Y position of graphical cursor
                                           MIOS_GLCD_FONT_WIDTH	EQU	0x57d	; for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_HEIGHT	EQU	0x57e	; for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           MIOS_GLCD_FONT_X0	EQU	0x57f	; for GLCDs: the first byte within a char entry
                                           MIOS_GLCD_FONT_OFFSET	EQU	0x580	; for GLCDs: the byte offset between the characters
                                           MIOS_GLCD_FONT_PTRL	EQU	0x581	; for GLCDs: pointer to the character table, low-byte
                                           MIOS_GLCD_FONT_PTRH	EQU	0x582	; for GLCDs: pointer to the character table, high-byte
                                           MIOS_LCD_TIMEOUT0	EQU	0x583   ; can be used for timeout loops
                                           MIOS_LCD_TIMEOUT1	EQU	0x584   ; can be used for timeout loops
                                           MIOS_GLCD_TMP1		EQU	0x585   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP2		EQU	0x586   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP3		EQU	0x587   ; can be used as temporary buffer
                                           MIOS_GLCD_TMP4		EQU	0x588   ; can be used as temporary buffer
                                           MIOS_LCD_Y0_OFFSET	EQU	0x589   ; Y0 offset of LCD
                                           MIOS_LCD_Y1_OFFSET	EQU	0x58a   ; Y1 offset of LCD
                                           MIOS_LCD_Y2_OFFSET	EQU	0x58b   ; Y2 offset of LCD
                                           MIOS_LCD_Y3_OFFSET	EQU	0x58c   ; Y3 offset of LCD
                                           MIOS_LCD_CURSOR_POS_REAL EQU	0x58d	; unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           MIOS_GLCD_FONT_PTRU	EQU	0x58e	; for GLCDs: pointer to the character table, upper-byte (>64k flash derivatives only)
                                           #include <mios_vectors.inc>
                                           ; $Id: mios_vectors.inc 49 2008-01-30 21:47:31Z tk $
                                           
                                           MIOS_MIDI_BeginStream                   EQU	0x2c00
                                           MIOS_MIDI_DeviceIDAutoSet               EQU	0x2c04
                                           MIOS_MIDI_DeviceIDGet                   EQU	0x2c08
                                           MIOS_MIDI_DeviceIDSet                   EQU	0x2c0c
                                           MIOS_MIDI_EndStream                     EQU	0x2c10
                                           MIOS_MIDI_Init                          EQU	0x2c14
                                           MIOS_MIDI_InterfaceAutoSet              EQU	0x2c18
                                           MIOS_MIDI_InterfaceGet                  EQU	0x2c1c
                                           MIOS_MIDI_InterfaceSet                  EQU	0x2c20
                                           MIOS_MIDI_MergerGet                     EQU	0x2c24
                                           MIOS_MIDI_MergerSet                     EQU	0x2c28
                                           MIOS_MIDI_RxBufferFree                  EQU	0x2c2c
                                           MIOS_MIDI_RxBufferGet                   EQU	0x2c30
                                           MIOS_MIDI_RxBufferPut                   EQU	0x2c34
                                           MIOS_MIDI_RxBufferUsed                  EQU	0x2c38
                                           MIOS_MIDI_TxBufferFlush                 EQU	0x2c3c
                                           MIOS_MIDI_TxBufferFree                  EQU	0x2c40
                                           MIOS_MIDI_TxBufferGet                   EQU	0x2c44
                                           MIOS_MIDI_TxBufferPut                   EQU	0x2c48
                                           MIOS_MIDI_TxBufferUsed                  EQU	0x2c4c
                                           MIOS_MPROC_MergerDisable                EQU	0x2c50
                                           MIOS_MPROC_MergerEnable                 EQU	0x2c54
                                           MIOS_MPROC_MergerGet                    EQU	0x2c58
                                           MIOS_AIN_DeadbandGet                    EQU	0x2c5c
                                           MIOS_AIN_DeadbandSet                    EQU	0x2c60
                                           MIOS_AIN_Muxed                          EQU	0x2c64
                                           MIOS_AIN_NumberGet                      EQU	0x2c68
                                           MIOS_AIN_NumberSet                      EQU	0x2c6c
                                           MIOS_AIN_Pin7bitGet                     EQU	0x2c70
                                           MIOS_AIN_PinGet                         EQU	0x2c74
                                           MIOS_AIN_PinLSBGet                      EQU	0x2c78
                                           MIOS_AIN_PinMSBGet                      EQU	0x2c7c
                                           MIOS_AIN_UnMuxed                        EQU	0x2c80
                                           MIOS_MF_PWM_DutyCycleDownGet            EQU	0x2c84
                                           MIOS_MF_PWM_DutyCycleDownSet            EQU	0x2c88
                                           MIOS_MF_PWM_DutyCycleUpGet              EQU	0x2c8c
                                           MIOS_MF_PWM_DutyCycleUpSet              EQU	0x2c90
                                           MIOS_MF_DeadbandGet                     EQU	0x2c94
                                           MIOS_MF_DeadbandSet                     EQU	0x2c98
                                           MIOS_MF_Disable                         EQU	0x2c9c
                                           MIOS_MF_Enable                          EQU	0x2ca0
                                           MIOS_MF_FaderMove                       EQU	0x2ca4
                                           MIOS_MF_SuspendDisable                  EQU	0x2ca8
                                           MIOS_MF_SuspendEnable                   EQU	0x2cac
                                           MIOS_MF_SuspendGet                      EQU	0x2cb0
                                           MIOS_DIN_PinGet                         EQU	0x2cb4
                                           MIOS_DIN_SRGet                          EQU	0x2cb8
                                           MIOS_DOUT_PinGet                        EQU	0x2cbc
                                           MIOS_DOUT_PinSet                        EQU	0x2cc0
                                           MIOS_DOUT_PinSet0                       EQU	0x2cc4
                                           MIOS_DOUT_PinSet1                       EQU	0x2cc8
                                           MIOS_DOUT_SRGet                         EQU	0x2ccc
                                           MIOS_DOUT_SRSet                         EQU	0x2cd0
                                           MIOS_ENC_Abs7bitAdd                     EQU	0x2cd4
                                           MIOS_ENC_Abs7bitGet                     EQU	0x2cd8
                                           MIOS_ENC_Abs7bitSet                     EQU	0x2cdc
                                           MIOS_ENC_NumberGet                      EQU	0x2ce0
                                           MIOS_ENC_SpeedGet                       EQU	0x2ce4
                                           MIOS_ENC_SpeedSet                       EQU	0x2ce8
                                           MIOS_SRIO_NumberGet                     EQU	0x2cec
                                           MIOS_SRIO_NumberSet                     EQU	0x2cf0
                                           MIOS_SRIO_TS_SensitivityGet             EQU	0x2cf4
                                           MIOS_SRIO_TS_SensitivitySet             EQU	0x2cf8
                                           MIOS_SRIO_UpdateFrqGet                  EQU	0x2cfc
                                           MIOS_SRIO_UpdateFrqSet                  EQU	0x2d00
                                           MIOS_LCD_Clear                          EQU	0x2d04
                                           MIOS_LCD_Cmd                            EQU	0x2d08
                                           MIOS_LCD_CursorGet                      EQU	0x2d0c
                                           MIOS_LCD_CursorSet                      EQU	0x2d10
                                           MIOS_LCD_Data                           EQU	0x2d14
                                           MIOS_LCD_Init                           EQU	0x2d18
                                           MIOS_LCD_PrintBCD1	                EQU	0x2d1c
                                           MIOS_LCD_PrintBCD2                      EQU	0x2d20
                                           MIOS_LCD_PrintBCD3                      EQU	0x2d24
                                           MIOS_LCD_PrintChar	                EQU	0x2d28
                                           MIOS_LCD_PrintHex1	                EQU	0x2d2c
                                           MIOS_LCD_PrintHex2                      EQU	0x2d30
                                           MIOS_LCD_PrintMessage                   EQU	0x2d34
                                           MIOS_LCD_PrintPreconfString             EQU	0x2d38
                                           MIOS_LCD_PrintString                    EQU	0x2d3c
                                           MIOS_LCD_TypeAutoSet                    EQU	0x2d40
                                           MIOS_LCD_TypeGet                        EQU	0x2d44
                                           MIOS_LCD_TypeSet                        EQU	0x2d48
                                           MIOS_LCD_YAddressGet                    EQU	0x2d4c
                                           MIOS_LCD_YAddressSet                    EQU	0x2d50
                                           MIOS_GLCD_FontInit                      EQU	0x2d54
                                           MIOS_GLCD_GCursorGet                    EQU	0x2d58
                                           MIOS_GLCD_GCursorSet                    EQU	0x2d5c
                                           MIOS_EEPROM_Read                        EQU	0x2d60
                                           MIOS_EEPROM_Write                       EQU	0x2d64
                                           MIOS_FLASH_Read                         EQU	0x2d68
                                           MIOS_FLASH_Write                        EQU	0x2d6c
                                           MIOS_BANKSTICK_Read                     EQU	0x2d70
                                           MIOS_BANKSTICK_Write                    EQU	0x2d74
                                           MIOS_TIMER_Init                         EQU	0x2d78
                                           MIOS_TIMER_Start                        EQU	0x2d7c
                                           MIOS_TIMER_Stop                         EQU	0x2d80
                                           MIOS_HLP_AddressFromTable               EQU	0x2d84
                                           MIOS_HLP_GetBitANDMask                  EQU	0x2d88
                                           MIOS_HLP_GetBitORMask                   EQU	0x2d8c
                                           MIOS_HLP_GetIndex_2bytes                EQU	0x2d90
                                           MIOS_HLP_GetIndex_4bytes                EQU	0x2d94
                                           MIOS_HLP_IndirectJump                   EQU	0x2d98
                                           MIOS_Delay                              EQU	0x2d9c
                                           MIOS_GPCounterGet                       EQU	0x2da0
                                           MIOS_Reset                              EQU	0x2da4
                                           MIOS_SystemResume                       EQU	0x2da8
                                           MIOS_SystemSuspend                      EQU	0x2dac
                                           MIOS_UserResume                         EQU	0x2db0
                                           MIOS_UserSuspend                        EQU	0x2db4
                                           MIOS_HLP_16bitAddSaturate		EQU	0x2db8
                                           MIOS_DIN_PinAutoRepeatEnable		EQU	0x2dbc
                                           MIOS_DIN_PinAutoRepeatDisable		EQU	0x2dc0
                                           MIOS_DIN_PinAutoRepeatGet		EQU	0x2dc4
                                           MIOS_CLCD_SpecialCharInit		EQU	0x2dc8
                                           MIOS_CLCD_SpecialCharsInit		EQU	0x2dcc
                                           MIOS_AIN_DynamicPrioSet			EQU	0x2dd0
                                           MIOS_AIN_DynamicPrioGet			EQU	0x2dd4
                                           MIOS_AIN_LastPinsGet			EQU	0x2dd8
                                           MIOS_BANKSTICK_CtrlSet			EQU	0x2ddc
                                           MIOS_BANKSTICK_CtrlGet			EQU	0x2de0
                                           MIOS_BANKSTICK_WritePage		EQU	0x2de4
                                           MIOS_HLP_Dec2BCD			EQU	0x2de8
                                           MIOS_LCD_PrintBCD4			EQU	0x2dec
                                           MIOS_LCD_PrintBCD5                      EQU	0x2df0
                                           MIOS_LCD_MessageStart			EQU	0x2df4
                                           MIOS_LCD_MessageStop			EQU	0x2df8
                                           MIOS_MF_PWM_PeriodGet                   EQU	0x2dfc
                                           MIOS_MF_PWM_PeriodSet                   EQU	0x2e00
                                           MIOS_IIC_Start				EQU	0x2e04
                                           MIOS_IIC_Stop				EQU	0x2e08
                                           MIOS_IIC_ByteSend			EQU	0x2e0c
                                           MIOS_IIC_ByteReceive			EQU	0x2e10
                                           MIOS_IIC_AckSend			EQU	0x2e14
                                           MIOS_IIC_NakSend			EQU	0x2e18
                                           MIOS_IIC_CtrlSet			EQU	0x2e1c
                                           MIOS_IIC_CtrlGet			EQU	0x2e20
                                           MIOS_SRIO_DebounceSet			EQU	0x2e24
                                           MIOS_SRIO_DebounceGet			EQU	0x2e28
                                           MIOS_MF_TouchDetectionReset		EQU	0x2e2c
                                           MIOS_BANKSTICK_ReadPage			EQU	0x2e30
                                           MIOS_EEPROM_ReadPage			EQU	0x2e34
                                           MIOS_EEPROM_WritePage			EQU	0x2e38
                                           MIOS_TIMER_ReInit			EQU	0x2e3c
                                           MIOS_RESERVED_144                       EQU	0x2e40
                                           MIOS_RESERVED_145                       EQU	0x2e44
                                           MIOS_RESERVED_146                       EQU	0x2e48
                                           MIOS_RESERVED_147                       EQU	0x2e4c
                                           MIOS_RESERVED_148                       EQU	0x2e50
                                           MIOS_RESERVED_149                       EQU	0x2e54
                                           MIOS_RESERVED_150                       EQU	0x2e58
                                           MIOS_RESERVED_151                       EQU	0x2e5c
                                           MIOS_RESERVED_152                       EQU	0x2e60
                                           MIOS_RESERVED_153                       EQU	0x2e64
                                           MIOS_RESERVED_154                       EQU	0x2e68
                                           MIOS_RESERVED_155                       EQU	0x2e6c
                                           MIOS_RESERVED_156                       EQU	0x2e70
                                           MIOS_RESERVED_157                       EQU	0x2e74
                                           MIOS_RESERVED_158                       EQU	0x2e78
                                           MIOS_RESERVED_159                       EQU	0x2e7c
                                           MIOS_RESERVED_160                       EQU	0x2e80
                                           MIOS_RESERVED_161                       EQU	0x2e84
                                           MIOS_RESERVED_162                       EQU	0x2e88
                                           MIOS_RESERVED_163                       EQU	0x2e8c
                                           MIOS_RESERVED_164                       EQU	0x2e90
                                           MIOS_RESERVED_165                       EQU	0x2e94
                                           MIOS_RESERVED_166                       EQU	0x2e98
                                           MIOS_RESERVED_167                       EQU	0x2e9c
                                           MIOS_RESERVED_168                       EQU	0x2ea0
                                           MIOS_RESERVED_169                       EQU	0x2ea4
                                           MIOS_RESERVED_170                       EQU	0x2ea8
                                           MIOS_RESERVED_171                       EQU	0x2eac
                                           MIOS_RESERVED_172                       EQU	0x2eb0
                                           MIOS_RESERVED_173                       EQU	0x2eb4
                                           MIOS_RESERVED_174                       EQU	0x2eb8
                                           MIOS_RESERVED_175                       EQU	0x2ebc
                                           MIOS_RESERVED_176                       EQU	0x2ec0
                                           MIOS_RESERVED_177                       EQU	0x2ec4
                                           MIOS_RESERVED_178                       EQU	0x2ec8
                                           MIOS_RESERVED_179                       EQU	0x2ecc
                                           MIOS_RESERVED_180                       EQU	0x2ed0
                                           MIOS_RESERVED_181                       EQU	0x2ed4
                                           MIOS_RESERVED_182                       EQU	0x2ed8
                                           MIOS_RESERVED_183                       EQU	0x2edc
                                           MIOS_RESERVED_184                       EQU	0x2ee0
                                           MIOS_RESERVED_185                       EQU	0x2ee4
                                           MIOS_RESERVED_186                       EQU	0x2ee8
                                           MIOS_RESERVED_187                       EQU	0x2eec
                                           MIOS_RESERVED_188                       EQU	0x2ef0
                                           MIOS_RESERVED_189                       EQU	0x2ef4
                                           MIOS_RESERVED_190                       EQU	0x2ef8
                                           MIOS_RESERVED_191                       EQU	0x2efc
                                           MIOS_RESERVED_192                       EQU	0x2f00
                                           MIOS_RESERVED_193                       EQU	0x2f04
                                           MIOS_RESERVED_194                       EQU	0x2f08
                                           MIOS_RESERVED_195                       EQU	0x2f0c
                                           MIOS_RESERVED_196                       EQU	0x2f10
                                           MIOS_RESERVED_197                       EQU	0x2f14
                                           MIOS_RESERVED_198                       EQU	0x2f18
                                           MIOS_RESERVED_199                       EQU	0x2f1c
                                           MIOS_RESERVED_200                       EQU	0x2f20
                                           MIOS_RESERVED_201                       EQU	0x2f24
                                           MIOS_RESERVED_202                       EQU	0x2f28
                                           MIOS_RESERVED_203                       EQU	0x2f2c
                                           MIOS_RESERVED_204                       EQU	0x2f30
                                           MIOS_RESERVED_205                       EQU	0x2f34
                                           MIOS_RESERVED_206                       EQU	0x2f38
                                           MIOS_RESERVED_207                       EQU	0x2f3c
                                           MIOS_RESERVED_208                       EQU	0x2f40
                                           MIOS_RESERVED_209                       EQU	0x2f44
                                           MIOS_RESERVED_210                       EQU	0x2f48
                                           MIOS_RESERVED_211                       EQU	0x2f4c
                                           MIOS_RESERVED_212                       EQU	0x2f50
                                           MIOS_RESERVED_213                       EQU	0x2f54
                                           MIOS_RESERVED_214                       EQU	0x2f58
                                           MIOS_RESERVED_215                       EQU	0x2f5c
                                           MIOS_RESERVED_216                       EQU	0x2f60
                                           MIOS_RESERVED_217                       EQU	0x2f64
                                           MIOS_RESERVED_218                       EQU	0x2f68
                                           MIOS_RESERVED_219                       EQU	0x2f6c
                                           MIOS_RESERVED_220                       EQU	0x2f70
                                           MIOS_RESERVED_221                       EQU	0x2f74
                                           MIOS_RESERVED_222                       EQU	0x2f78
                                           MIOS_RESERVED_223                       EQU	0x2f7c
                                           MIOS_RESERVED_224                       EQU	0x2f80
                                           MIOS_RESERVED_225                       EQU	0x2f84
                                           MIOS_RESERVED_226                       EQU	0x2f88
                                           MIOS_RESERVED_227                       EQU	0x2f8c
                                           MIOS_RESERVED_228                       EQU	0x2f90
                                           MIOS_RESERVED_229                       EQU	0x2f94
                                           MIOS_RESERVED_230                       EQU	0x2f98
                                           MIOS_RESERVED_231                       EQU	0x2f9c
                                           MIOS_RESERVED_232                       EQU	0x2fa0
                                           MIOS_RESERVED_233                       EQU	0x2fa4
                                           MIOS_RESERVED_234                       EQU	0x2fa8
                                           MIOS_RESERVED_235                       EQU	0x2fac
                                           MIOS_RESERVED_236                       EQU	0x2fb0
                                           MIOS_RESERVED_237                       EQU	0x2fb4
                                           MIOS_RESERVED_238                       EQU	0x2fb8
                                           MIOS_RESERVED_239                       EQU	0x2fbc
                                           MIOS_RESERVED_240                       EQU	0x2fc0
                                           MIOS_RESERVED_241                       EQU	0x2fc4
                                           MIOS_RESERVED_242                       EQU	0x2fc8
                                           MIOS_RESERVED_243                       EQU	0x2fcc
                                           MIOS_RESERVED_244                       EQU	0x2fd0
                                           MIOS_RESERVED_245                       EQU	0x2fd4
                                           MIOS_RESERVED_246                       EQU	0x2fd8
                                           MIOS_RESERVED_247                       EQU	0x2fdc
                                           MIOS_RESERVED_248                       EQU	0x2fe0
                                           MIOS_RESERVED_249                       EQU	0x2fe4
                                           MIOS_RESERVED_250                       EQU	0x2fe8
                                           MIOS_RESERVED_251                       EQU	0x2fec
                                           MIOS_RESERVED_252                       EQU	0x2ff0
                                           MIOS_RESERVED_253                       EQU	0x2ff4
                                           MIOS_RESERVED_254                       EQU	0x2ff8
                                           MIOS_RESERVED_255                       EQU	0x2ffc
                                           #include <macros.h>
                                           ; $Id: macros.h 49 2008-01-30 21:47:31Z tk $
                                           ;
                                           ; Macro Definitions
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           BRA_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           
                                           BRA_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	bra	label
                                           	ENDM
                                           
                                           GOTO_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           
                                           GOTO_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	goto	label
                                           	ENDM
                                           
                                           CALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           
                                           CALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	call	label
                                           	ENDM
                                           
                                           RCALL_IFSET	MACRO	reg, bit, reg_a, label
                                           	btfsc	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           
                                           RCALL_IFCLR	MACRO	reg, bit, reg_a, label
                                           	btfss	reg, bit, reg_a
                                           	rcall	label
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           IRQ_DISABLE MACRO
                                                   bcf     INTCON, GIE
                                                   ENDM
                                           
                                           IRQ_ENABLE MACRO
                                                   bsf     INTCON, GIE
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TABLE_ADDR_FULL MACRO addr
                                           	movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   movlw   UPPER(addr)		; store upper Byte
                                                   movwf   TBLPTRU
                                                   ENDM
                                                   
                                           TABLE_ADDR MACRO addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                                   movlw   UPPER(addr)		; store Upper Byte
                                                   movwf   TBLPTRU
                                           #endif
                                                   ENDM
                                                   
                                           TABLE_H MACRO   addr
                                                   movlw   HIGH(addr)		; store Hi Byte
                                                   movwf   TBLPTRH
                                                   ENDM
                                           
                                           TABLE_L MACRO   addr
                                                   movlw   LOW(addr)		; store Lo Byte
                                                   movwf   TBLPTRL
                                                   ENDM
                                           
                                           TABLE_ADD_W MACRO
                                           	addwf	TBLPTRL, F
                                           	movlw	0x00
                                           	addwfc	TBLPTRH, F
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	movlw	0x00
                                           	addwfc	TBLPTRU, F
                                           #endif
                                                   ENDM
                                           
                                           TABLE_ADDR_MUL_W MACRO addr, multiplicator
                                           	mullw	multiplicator
                                           	movlw	LOW(addr)
                                           	addwf	PRODL, W
                                           	movwf	TBLPTRL
                                           	movlw	HIGH(addr)
                                           	addwfc	PRODH, W
                                           	movwf	TBLPTRH
                                           #if PIC_DERIVATIVE_CODE_SIZE > 0x10000
                                           	clrf    TBLPTRU
                                                   movlw   UPPER(addr)
                                           	addwfc	TBLPTRU, F
                                           #endif
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           JUMPTABLE_2BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	movlw	-(max_value)
                                           	addlw	max_value
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_2BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_2bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES MACRO max_value
                                           	addlw	-(max_value)	; ensure that jump index is not greater than (max_value-1)
                                           	skpnc
                                           	return
                                           	addlw	(max_value)
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           JUMPTABLE_4BYTES_UNSECURE MACRO
                                           	call	MIOS_HLP_GetIndex_4bytes
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           TWOBYTE_ENTRY MACRO low_byte, high_byte
                                                   dw      (high_byte << 8) | (low_byte)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           #define skpnz	btfsc	STATUS, Z 
                                           #define skpz	btfss	STATUS, Z 
                                           #define skpndc	btfsc	STATUS, DC 
                                           #define skpdc	btfss	STATUS, DC
                                           #define skpnc	btfsc	STATUS, C
                                           #define skpc	btfss	STATUS, C
                                           #define clrc	bcf	STATUS, C
                                           #define setc	bsf	STATUS, C
                                           #define clrz	bcf	STATUS, Z
                                           #define setz	bsf	STATUS, Z
                                           #define rrf	rrcf	
                                           #define rlf	rlcf
                                           
                                           rgoto   MACRO   label
                                                   bra     label
                                                   ENDM
                                           
                                           SET_BSR MACRO   reg
                                                   movlb   HIGH(reg)
                                                   ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           FONT_ENTRY MACRO width, height, x0, char_offset
                                           	dw	((height) << 8) | (width), ((char_offset) << 8) | (x0)
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           STRING MACRO length, pos, str
                                           	da	((length) << 8) | (pos), str
                                           	ENDM
                                           
                                           ;; ==========================================================================
                                           
                                           ; ==========================================================================
                                           ; Import/Export Labels
                                           ; ==========================================================================
                                           	global	USER_LCD_Init
                                           	global	USER_LCD_Data
                                           	global	USER_LCD_Cmd
                                           	global	USER_LCD_Clear
                                           	global	USER_LCD_CursorSet
                                           	global	USER_LCD_PrintChar
                                           	global	USER_LCD_SpecialCharInit
                                           
                                           ; ==========================================================================
                                           ; Start code section and include driver code
                                           ; ==========================================================================
                                           APP_LCD CODE
                                           #include "app_lcd.inc"
                                           ; $Id: app_lcd.inc 69 2008-02-01 00:20:18Z tk $
                                           ;
                                           ; MIOS Custom LCD Driver Skeleton
                                           ;
                                           ; ==========================================================================
                                           ;
                                           ;  Copyright 1998-2006 Thorsten Klose (tk@midibox.org)
                                           ;  Licensed for personal non-commercial use only.
                                           ;  All other rights reserved.
                                           ; 
                                           ; ==========================================================================
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  Following system variables are given by MIOS and can be directly 
                                           ;;  accessed by the driver. The addresses are defined in mios.h and
                                           ;;  should not be changed
                                           ;; 
                                           ;;  MIOS_GLCD_BUFFER	     a 8 byte buffer for data transfers
                                           ;;  MIOS_LCD_OPTION1	     contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_OPTION2	     contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  MIOS_LCD_CURSOR_POS	     the current cursor pos of characters (GLCD: multiplied by width)
                                           ;;  MIOS_GLCD_GCURSOR_X	     for GLCDs: the current X position of graphical cursor
                                           ;;  MIOS_GLCD_GCURSOR_Y	     for GLCDs: the current Y position of graphical cursor
                                           ;;  MIOS_GLCD_FONT_WIDTH     for GLCDs: the fontwidth given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_HEIGHT    for GLCDs: the fontheight given by MIOS_GLCD_FontInit
                                           ;;  MIOS_GLCD_FONT_X0        for GLCDs: the first byte within a char entry
                                           ;;  MIOS_GLCD_FONT_OFFSET    for GLCDs: the byte offset between the characters
                                           ;;  MIOS_GLCD_FONT_PTRL      for GLCDs: pointer to the character table, low-byte
                                           ;;  MIOS_GLCD_FONT_PTRH      for GLCDs: pointer to the character table, high-byte
                                           ;;  MIOS_LCD_TIMEOUT0        can be used for timeout loops
                                           ;;  MIOS_LCD_TIMEOUT1        can be used for timeout loops
                                           ;;  MIOS_GLCD_TMP1           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP2           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP3           can be used as temporary buffer
                                           ;;  MIOS_GLCD_TMP4           can be used as temporary buffer
                                           ;;  MIOS_LCD_Y0_OFFSET       Y0 offset of LCD
                                           ;;  MIOS_LCD_Y1_OFFSET       Y1 offset of LCD
                                           ;;  MIOS_LCD_Y2_OFFSET       Y2 offset of LCD
                                           ;;  MIOS_LCD_Y3_OFFSET       Y3 offset of LCD
                                           ;;  MIOS_LCD_CURSOR_POS_REAL unmapped cursor position which has been set with MIOS_LCD_CursorSet
                                           ;; 
                                           ;;  Note: the addresses are located in an upper bank and therefore have to
                                           ;;        be accessed with the BANKED flag. Also the BSR has to be justified
                                           ;;        before using the registers
                                           ;;  Example:
                                           ;;	SET_BSR MIOS_LCD_OPTION1	; sets BSR to the bank where MIOS_LCD_*
                                           ;;					; has been located. You don't need to
                                           ;;					; change the BSR for the other LCD registers
                                           ;;      movf    MIOS_LCD_OPTION1, W, BANKED	; get LCD option #1
                                           ;; 
                                           ;;  Important: to allow a proper interaction with MIOS applications, you are
                                           ;;  only allowed to modify MIOS_PARAMETER[123], the mutliplication registers
                                           ;;  and FSR1. You are not allowed to change TMP[1-5] or FSR0
                                           ;;  if you need some temporary registers, use the given addresses above or
                                           ;;  locate them to addresses which are not used by the application
                                           ;; --------------------------------------------------------------------------
                                           	
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be initialized
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Init
00440a   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the custom LCD should be cleared
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Clear
00440c   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when the cursor should be changed
                                           ;;  In:  MIOS_LCD_OPTION1 - contains the first LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_LCD_OPTION2 - contains the second LCD option given by MIOS_LCD_TypeSet
                                           ;;       MIOS_GLCD_CURSOR_X - horizontal cursor position (for GLCDs)
                                           ;;       MIOS_GLCD_CURSOR_X - vertical cursor position   (for GLCDs)
                                           ;;       MIOS_LCD_CURSOR    - character cursor position  (for CLCDs)
                                           ;;  Out: -
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_CursorSet
00440e   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  This function is called by MIOS when a character should be print
                                           ;;  In:  WREG - character
                                           ;;       all other MIOS_*LCD_* registers
                                           ;;  Out: GLCDs should justify the X/Y cursor position
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_PrintChar
004410   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Data
                                           ;;  DESCRIPTION: sends a data value to the LCD display.<BR>
                                           ;;  On CLCDs: branch directly to USER_LCD_PrintChar<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  data which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Data
004412   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_Cmd
                                           ;;  DESCRIPTION: sends a command to the LCD display.<BR>
                                           ;;  On CLCDs: use this function to decode the HD44780 commands if required<BR>
                                           ;;  On GLCDs: ignore this function!
                                           ;;  IN:  command which should be sent
                                           ;;  OUT: -
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_Cmd
004414   0012     return	0                 	return
                                           
                                           ;; --------------------------------------------------------------------------
                                           ;;  FUNCTION: USER_LCD_SpecialCharInit
                                           ;;  DESCRIPTION: see MIOS_CLCD_SpecialCharInit
                                           ;;  IN:  number of special character (0-7) in WREG
                                           ;;       pointer to special char pattern in TBLPTR (consists of 8
                                           ;;          entries for every character-line)
                                           ;;  OUT: TBLPTR has to be set to next table entry (TBLPTR+=8)
                                           ;;  NOTE: see the custom_lcd_example for further details
                                           ;; --------------------------------------------------------------------------
                                           USER_LCD_SpecialCharInit
004416   0012     return	0                 	return
                                           	END
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.7.0 #4818 (Jan 18 2008)
                                           ; This file generated Tue Sep 16 06:43:12 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f452
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _current_screen_num
                                           	global _current_preset_num
                                           	global _current_bus_num
                                           	global _current_preset
                                           	global _midi_inout_map
                                           	global _timer_ticks_count
                                           	global _store_preset
                                           	global _load_preset
                                           	global _screen_init
                                           	global _preset_init
                                           	global _Init
                                           	global _Timer
                                           	global _MPROC_NotifyReceivedByte
                                           	global _MPROC_NotifyReceivedEvnt
                                           	global _DIN_NotifyToggle
                                           	global _DISPLAY_Init
                                           	global _DISPLAY_Tick
                                           	global _Tick
                                           	global _MPROC_NotifyFoundEvent
                                           	global _MPROC_NotifyTimeout
                                           	global _SR_Service_Prepare
                                           	global _SR_Service_Finish
                                           	global _ENC_NotifyChange
                                           	global _AIN_NotifyChange
                                           	global _int_bit_ormask
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _MIOS_BOX_CFG0
                                           	extern _MIOS_BOX_CFG1
                                           	extern _MIOS_BOX_STAT
                                           	extern _MIOS_PARAMETER1
                                           	extern _MIOS_PARAMETER2
                                           	extern _MIOS_PARAMETER3
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MIOS_MIDI_TxBufferPut
                                           	extern _MIOS_DIN_PinGet
                                           	extern _MIOS_DOUT_SRSet
                                           	extern _MIOS_SRIO_NumberSet
                                           	extern _MIOS_SRIO_UpdateFrqSet
                                           	extern _MIOS_SRIO_DebounceSet
                                           	extern _MIOS_EEPROM_Read
                                           	extern _MIOS_EEPROM_Write
                                           	extern _MIOS_BANKSTICK_CtrlSet
                                           	extern _MIOS_BANKSTICK_WritePage
                                           	extern _MIOS_BANKSTICK_ReadPage
                                           	extern _MIOS_TIMER_Init
                                           	extern _MIOS_TIMER_Stop
                                           	extern _MIOS_HLP_GetBitORMask
                                           	extern _mios_enc_pin_table
                                           	extern _mios_mproc_event_table
                                           	extern _MIOS_MPROC_EVENT_TABLE
                                           	extern _MIOS_ENC_PIN_TABLE
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L equ 0xfe1 ;; normaly 0xfe9, changed by mios-gpasm
                                           FSR0H equ 0xfe2 ;; normaly 0xfea, changed by mios-gpasm
                                           FSR1L equ 0xfe9 ;; normaly 0xfe1, changed by mios-gpasm
                                           FSR2L	equ	0xfd9
                                           INDF0 equ 0xfe7 ;; normaly 0xfef, changed by mios-gpasm
                                           POSTINC0 equ 0xfe6 ;; normaly 0xfee, changed by mios-gpasm
                                           POSTDEC1 equ 0xfed ;; normaly 0xfe5, changed by mios-gpasm
                                           PREINC1 equ 0xfec ;; normaly 0xfe4, changed by mios-gpasm
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _current_screen_num	db	0x00
                                           _current_preset_num	db	0x00
                                           _current_bus_num	db	0x00
                                           _timer_ticks_count	db	0x00
                                           _MPROC_NotifyReceivedByte_fx_status_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers udata_ovr 0x0010 ;; normaly 0x0000, changed by mios-gpasm
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_main_0	udata
                                           _current_preset	res	64
                                           
                                           udata_main_1	udata
                                           _midi_inout_map	res	256
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__AIN_NotifyChange	code
                                           _AIN_NotifyChange:
                                           ;	.line	353; main.c	void AIN_NotifyChange(unsigned char pin, unsigned int pin_value) __wparam{
004418   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00441a   ffed
00441c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00441e   ffd9
                                           ;	.line	354; main.c	}
004420   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004422   ffd9
004424   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ENC_NotifyChange	code
                                           _ENC_NotifyChange:
                                           ;	.line	347; main.c	void ENC_NotifyChange(unsigned char encoder, char incrementer) __wparam{
004426   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004428   ffed
00442a   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00442c   ffd9
                                           ;	.line	348; main.c	}
00442e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004430   ffd9
004432   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Finish	code
                                           _SR_Service_Finish:
                                           ;	.line	340; main.c	}
0044e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SR_Service_Prepare	code
                                           _SR_Service_Prepare:
                                           ;	.line	334; main.c	}
0044e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyTimeout	code
                                           _MPROC_NotifyTimeout:
                                           ;	.line	327; main.c	}
0044e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyFoundEvent	code
                                           _MPROC_NotifyFoundEvent:
                                           ;	.line	319; main.c	void MPROC_NotifyFoundEvent(unsigned entry, unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
004434   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
004436   ffed
004438   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00443a   ffd9
                                           ;	.line	320; main.c	}
00443c   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
00443e   ffd9
004440   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Tick	code
                                           _Tick:
                                           ;	.line	313; main.c	}
0044e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Tick	code
                                           _DISPLAY_Tick:
                                           ;	.line	307; main.c	}
0044ea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DISPLAY_Init	code
                                           _DISPLAY_Init:
                                           ;	.line	300; main.c	}
0044ec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__DIN_NotifyToggle	code
                                           _DIN_NotifyToggle:
                                           ;	.line	221; main.c	void DIN_NotifyToggle(unsigned char pin, unsigned char pin_value) __wparam{
003300   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003302   ffed
003304   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003306   ffd9
003308   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
00330a   ffed
00330c   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
00330e   ffed
003310   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003312   ffed
003314   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003316   ffed
003318   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
00331a   ffed
00331c   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
00331e   ffed
003320   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003322   ffed
003324   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003326   ffed
003328   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
00332a   ffed
00332c   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
00332e   ffed
003330   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003332   ffed
003334   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003336   ffed
003338   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
00333a   ffed
00333c   c01d     movff	0x1d, 0xfed        	MOVFF	r0x0d, POSTDEC1
00333e   ffed
003340   c01e     movff	0x1e, 0xfed        	MOVFF	r0x0e, POSTDEC1
003342   ffed
003344   c01f     movff	0x1f, 0xfed        	MOVFF	r0x0f, POSTDEC1
003346   ffed
003348   c020     movff	0x20, 0xfed        	MOVFF	r0x10, POSTDEC1
00334a   ffed
00334c   c021     movff	0x21, 0xfed        	MOVFF	r0x11, POSTDEC1
00334e   ffed
003350   c022     movff	0x22, 0xfed        	MOVFF	r0x12, POSTDEC1
003352   ffed
003354   6e10     movwf	0x10, 0            	MOVWF	r0x00
003356   0e02     movlw	0x2                	MOVLW	0x02
003358   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
00335a   f011
                                           ;	.line	223; main.c	MIOS_TIMER_Stop();//stops the init request countdown
00335c   ecc0     call	0x2d80, 0           	CALL	_MIOS_TIMER_Stop
00335e   f016
                                           ;	.line	224; main.c	if(pin_value) return;//button up, nothing more to do	
003360   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003362   e002     bz	0x3368                	BZ	_00255_DS_
003364   ef48     goto	0x3890              	GOTO	_00292_DS_
003366   f01c
                                           _00255_DS_:
                                           ;	.line	225; main.c	if(pin > 7){
003368   0e08     movlw	0x8                	MOVLW	0x08
00336a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00336c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00336e   ef2c     goto	0x3858              	GOTO	_00278_DS_
003370   f01c
                                           ;	.line	226; main.c	value = pin - 8;
003372   0ef8     movlw	0xf8               	MOVLW	0xf8
003374   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
003376   6e11     movwf	0x11, 0            	MOVWF	r0x01
                                           ;	.line	227; main.c	switch(current_screen_num){
003378   0e04     movlw	0x4                	MOVLW	0x04
00337a   0100     movlb	0                  	BANKSEL	_current_screen_num
00337c   5dc0     subwf	0xc0, 0, 0x1       	SUBWF	_current_screen_num, W, B
00337e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003380   ef46     goto	0x388c              	GOTO	_00279_DS_
003382   f01c
003384   c023     movff	0x23, 0xfed        	MOVFF	r0x13, POSTDEC1
003386   ffed
003388   c024     movff	0x24, 0xfed        	MOVFF	r0x14, POSTDEC1
00338a   ffed
00338c   6a24     clrf	0x24, 0             	CLRF	r0x14
                                           ; removed redundant BANKSEL
00338e   35c0     rlcf	0xc0, 0, 0x1        	RLCF	_current_screen_num, W, B
003390   3624     rlcf	0x24, 0x1, 0        	RLCF	r0x14, F
003392   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003394   3624     rlcf	0x24, 0x1, 0        	RLCF	r0x14, F
003396   0bfc     andlw	0xfc               	ANDLW	0xfc
003398   6e23     movwf	0x23, 0            	MOVWF	r0x13
00339a   0e00     movlw	0                  	MOVLW	UPPER(_00327_DS_)
00339c   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00339e   0e33     movlw	0x33               	MOVLW	HIGH(_00327_DS_)
0033a0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
0033a2   0eba     movlw	0xba               	MOVLW	LOW(_00327_DS_)
0033a4   2623     addwf	0x23, 0x1, 0       	ADDWF	r0x13, F
0033a6   5024     movf	0x24, 0, 0          	MOVF	r0x14, W
0033a8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
0033aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0033ac   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
0033ae   5023     movf	0x23, 0, 0          	MOVF	r0x13, W
0033b0   cfec     movff	0xfec, 0x24        	MOVFF	PREINC1, r0x14
0033b2   f024
0033b4   cfec     movff	0xfec, 0x23        	MOVFF	PREINC1, r0x13
0033b6   f023
0033b8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00327_DS_:
0033ba   efe5     goto	0x33ca              	GOTO	_00256_DS_
0033bc   f019
0033be   eff4     goto	0x33e8              	GOTO	_00257_DS_
0033c0   f019
0033c2   efff     goto	0x33fe              	GOTO	_00258_DS_
0033c4   f019
0033c6   eff5     goto	0x35ea              	GOTO	_00264_DS_
0033c8   f01a
                                           _00256_DS_:
                                           ;	.line	229; main.c	current_preset_num = value;				
0033ca   c011     movff	0x11, 0xc1         	MOVFF	r0x01, _current_preset_num
0033cc   f0c1
0033ce   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	230; main.c	load_preset(current_preset_num);
0033d0   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
0033d2   ec71     call	0x38e2, 0           	CALL	_load_preset
0033d4   f01c
0033d6   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	231; main.c	MIOS_EEPROM_Write(0x01,current_preset_num);
0033d8   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
0033da   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033dc   0e01     movlw	0x1                	MOVLW	0x01
0033de   ec58     call	0x44b0, 0           	CALL	_MIOS_EEPROM_Write
0033e0   f022
0033e2   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	232; main.c	break;			
0033e4   ef46     goto	0x388c              	GOTO	_00279_DS_
0033e6   f01c
                                           _00257_DS_:
                                           ;	.line	234; main.c	current_bus_num = value;
0033e8   c011     movff	0x11, 0xc2         	MOVFF	r0x01, _current_bus_num
0033ea   f0c2
0033ec   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	235; main.c	MIOS_EEPROM_Write(0x03,current_preset_num);
0033ee   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
0033f0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
0033f2   0e03     movlw	0x3                	MOVLW	0x03
0033f4   ec58     call	0x44b0, 0           	CALL	_MIOS_EEPROM_Write
0033f6   f022
0033f8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	236; main.c	break;			
0033fa   ef46     goto	0x388c              	GOTO	_00279_DS_
0033fc   f01c
                                           _00258_DS_:
                                           ;	.line	238; main.c	if (MIOS_DIN_PinGet(0x02)){//set/unset input chanel
0033fe   0e02     movlw	0x2                	MOVLW	0x02
003400   ec5a     call	0x2cb4, 0           	CALL	_MIOS_DIN_PinGet
003402   f016
003404   6e12     movwf	0x12, 0            	MOVWF	r0x02
003406   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003408   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00340a   d044     bra	0x3494               	BRA	_00260_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00340c   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	239; main.c	current_preset[current_bus_num].inputs = 
00340e   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003410   0d04     mullw	0x4                	MULLW	0x04
003412   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003414   f012
003416   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003418   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
00341a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00341c   6a13     clrf	0x13, 0             	CLRF	r0x03
00341e   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003420   c012     movff	0x12, 0x14         	MOVFF	r0x02, r0x04
003422   f014
003424   c013     movff	0x13, 0x15         	MOVFF	r0x03, r0x05
003426   f015
                                           ;	.line	240; main.c	current_preset[current_bus_num].inputs==int_bit_ormask[value] ? 0x0000 :int_bit_ormask[value];
003428   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00342a   ffe1
00342c   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00342e   ffe2
003430   cfe6     movff	0xfe6, 0x12        	MOVFF	POSTINC0, r0x02
003432   f012
003434   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
003436   f013
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003438   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00343a   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
00343c   6e16     movwf	0x16, 0            	MOVWF	r0x06
00343e   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
003440   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003442   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
003444   6a17     clrf	0x17, 0             	CLRF	r0x07
003446   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003448   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
00344a   6a18     clrf	0x18, 0             	CLRF	r0x08
00344c   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
00344e   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
003450   fff6
003452   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
003454   fff7
003456   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
003458   fff8
00345a   0009     tblrd	*+                 	TBLRD*+	
00345c   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
00345e   f016
003460   0009     tblrd	*+                 	TBLRD*+	
003462   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
003464   f017
003466   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003468   1816     xorwf	0x16, 0, 0         	XORWF	r0x06, W
00346a   e103     bnz	0x3472               	BNZ	_00328_DS_
00346c   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
00346e   1817     xorwf	0x17, 0, 0         	XORWF	r0x07, W
003470   e001     bz	0x3474                	BZ	_00329_DS_
                                           _00328_DS_:
003472   d003     bra	0x347a               	BRA	_00294_DS_
                                           _00329_DS_:
003474   6a12     clrf	0x12, 0             	CLRF	r0x02
003476   6a13     clrf	0x13, 0             	CLRF	r0x03
003478   d004     bra	0x3482               	BRA	_00295_DS_
                                           _00294_DS_:
00347a   c016     movff	0x16, 0x12         	MOVFF	r0x06, r0x02
00347c   f012
00347e   c017     movff	0x17, 0x13         	MOVFF	r0x07, r0x03
003480   f013
                                           _00295_DS_:
003482   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
003484   ffe1
003486   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003488   ffe2
00348a   c012     movff	0x12, 0xfe6        	MOVFF	r0x02, POSTINC0
00348c   ffe6
00348e   c013     movff	0x13, 0xfe7        	MOVFF	r0x03, INDF0
003490   ffe7
003492   d04b     bra	0x352a               	BRA	_00310_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00260_DS_:
003494   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	243; main.c	current_preset[current_bus_num].inputs = 
003496   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003498   0d04     mullw	0x4                	MULLW	0x04
00349a   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
00349c   f012
00349e   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0034a0   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0034a2   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
0034a4   6a13     clrf	0x13, 0             	CLRF	r0x03
0034a6   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0034a8   c012     movff	0x12, 0x14         	MOVFF	r0x02, r0x04
0034aa   f014
0034ac   c013     movff	0x13, 0x15         	MOVFF	r0x03, r0x05
0034ae   f015
                                           ;	.line	244; main.c	(current_preset[current_bus_num].inputs & int_bit_ormask[value])?
0034b0   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0034b2   ffe1
0034b4   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0034b6   ffe2
0034b8   cfe6     movff	0xfe6, 0x12        	MOVFF	POSTINC0, r0x02
0034ba   f012
0034bc   cfe7     movff	0xfe7, 0x13        	MOVFF	INDF0, r0x03
0034be   f013
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0034c0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0034c2   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
0034c4   6e16     movwf	0x16, 0            	MOVWF	r0x06
0034c6   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
0034c8   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
0034ca   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
0034cc   6a17     clrf	0x17, 0             	CLRF	r0x07
0034ce   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0034d0   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0034d2   6a18     clrf	0x18, 0             	CLRF	r0x08
0034d4   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0034d6   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
0034d8   fff6
0034da   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
0034dc   fff7
0034de   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
0034e0   fff8
0034e2   0009     tblrd	*+                 	TBLRD*+	
0034e4   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
0034e6   f016
0034e8   0009     tblrd	*+                 	TBLRD*+	
0034ea   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
0034ec   f017
0034ee   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0034f0   1412     andwf	0x12, 0, 0         	ANDWF	r0x02, W
0034f2   6e18     movwf	0x18, 0            	MOVWF	r0x08
0034f4   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0034f6   1413     andwf	0x13, 0, 0         	ANDWF	r0x03, W
0034f8   6e19     movwf	0x19, 0            	MOVWF	r0x09
0034fa   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
0034fc   1019     iorwf	0x19, 0, 0         	IORWF	r0x09, W
0034fe   e007     bz	0x350e                	BZ	_00296_DS_
                                           ;	.line	245; main.c	(current_preset[current_bus_num].inputs ^ int_bit_ormask[value]):
003500   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003502   1812     xorwf	0x12, 0, 0         	XORWF	r0x02, W
003504   6e18     movwf	0x18, 0            	MOVWF	r0x08
003506   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003508   1813     xorwf	0x13, 0, 0         	XORWF	r0x03, W
00350a   6e19     movwf	0x19, 0            	MOVWF	r0x09
00350c   d006     bra	0x351a               	BRA	_00297_DS_
                                           _00296_DS_:
                                           ;	.line	246; main.c	(current_preset[current_bus_num].inputs | int_bit_ormask[value]);
00350e   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003510   1012     iorwf	0x12, 0, 0         	IORWF	r0x02, W
003512   6e18     movwf	0x18, 0            	MOVWF	r0x08
003514   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
003516   1013     iorwf	0x13, 0, 0         	IORWF	r0x03, W
003518   6e19     movwf	0x19, 0            	MOVWF	r0x09
                                           _00297_DS_:
00351a   c014     movff	0x14, 0xfe1        	MOVFF	r0x04, FSR0L
00351c   ffe1
00351e   c015     movff	0x15, 0xfe2        	MOVFF	r0x05, FSR0H
003520   ffe2
003522   c018     movff	0x18, 0xfe6        	MOVFF	r0x08, POSTINC0
003524   ffe6
003526   c019     movff	0x19, 0xfe7        	MOVFF	r0x09, INDF0
003528   ffe7
                                           ; ;multiply lit val:0x10 by variable r0x01 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00310_DS_:
                                           ;	.line	250; main.c	for(chn_out=0;chn_out<16;chn_out++){
00352a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00352c   0d10     mullw	0x10               	MULLW	0x10
00352e   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003530   f012
003532   cff4     movff	0xff4, 0x13        	MOVFF	PRODH, r0x03
003534   f013
003536   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003538   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
00353a   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
00353c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00353e   6a14     clrf	0x14, 0             	CLRF	r0x04
003540   6a15     clrf	0x15, 0             	CLRF	r0x05
003542   6a16     clrf	0x16, 0             	CLRF	r0x06
                                           _00280_DS_:
003544   0e10     movlw	0x10               	MOVLW	0x10
003546   5c15     subwf	0x15, 0, 0         	SUBWF	r0x05, W
003548   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00354a   d044     bra	0x35d4               	BRA	_00283_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00354c   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	251; main.c	if(current_preset[current_bus_num].outputs & int_bit_ormask[chn_out])//this is a bus output
00354e   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003550   0d04     mullw	0x4                	MULLW	0x04
003552   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x07
003554   f017
003556   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003558   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
00355a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00355c   6a18     clrf	0x18, 0             	CLRF	r0x08
00355e   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003560   0e02     movlw	0x2                	MOVLW	0x02
003562   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
003564   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003566   2a18     incf	0x18, 0x1, 0        	INCF	r0x08, F
003568   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
00356a   ffe1
00356c   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
00356e   ffe2
003570   cfe6     movff	0xfe6, 0x17        	MOVFF	POSTINC0, r0x07
003572   f017
003574   cfe7     movff	0xfe7, 0x18        	MOVFF	INDF0, r0x08
003576   f018
003578   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
00357a   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
00357c   6e19     movwf	0x19, 0            	MOVWF	r0x09
00357e   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
003580   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
003582   221a     addwfc	0x1a, 0x1, 0      	ADDWFC	r0x0a, F
003584   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003586   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003588   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
00358a   c019     movff	0x19, 0xff6        	MOVFF	r0x09, TBLPTRL
00358c   fff6
00358e   c01a     movff	0x1a, 0xff7        	MOVFF	r0x0a, TBLPTRH
003590   fff7
003592   c01b     movff	0x1b, 0xff8        	MOVFF	r0x0b, TBLPTRU
003594   fff8
003596   0009     tblrd	*+                 	TBLRD*+	
003598   cff5     movff	0xff5, 0x19        	MOVFF	TABLAT, r0x09
00359a   f019
00359c   0009     tblrd	*+                 	TBLRD*+	
00359e   cff5     movff	0xff5, 0x1a        	MOVFF	TABLAT, r0x0a
0035a0   f01a
0035a2   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
0035a4   1617     andwf	0x17, 0x1, 0       	ANDWF	r0x07, F
0035a6   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
0035a8   1618     andwf	0x18, 0x1, 0       	ANDWF	r0x08, F
0035aa   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0035ac   1018     iorwf	0x18, 0, 0         	IORWF	r0x08, W
0035ae   e00e     bz	0x35cc                	BZ	_00282_DS_
                                           ;	.line	252; main.c	midi_inout_map[value][i++] = chn_out;
0035b0   c014     movff	0x14, 0x17         	MOVFF	r0x04, r0x07
0035b2   f017
0035b4   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
0035b6   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0035b8   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
0035ba   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
0035bc   6a18     clrf	0x18, 0             	CLRF	r0x08
0035be   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
0035c0   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
0035c2   ffe1
0035c4   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
0035c6   ffe2
0035c8   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
0035ca   ffe7
                                           _00282_DS_:
                                           ;	.line	250; main.c	for(chn_out=0;chn_out<16;chn_out++){
0035cc   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
0035ce   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
0035d0   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
0035d2   d7b8     bra	0x3544               	BRA	_00280_DS_
                                           _00283_DS_:
                                           ;	.line	254; main.c	midi_inout_map[value][i] = -1;
0035d4   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
0035d6   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
0035d8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0035da   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
0035dc   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0035de   ffe1
0035e0   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0035e2   ffe2
0035e4   0eff     movlw	0xff               	MOVLW	0xff
0035e6   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	255; main.c	break;			
0035e8   d151     bra	0x388c               	BRA	_00279_DS_
                                           _00264_DS_:
                                           ;	.line	257; main.c	if (MIOS_DIN_PinGet(0x03)){//set/unset output chanel
0035ea   0e03     movlw	0x3                	MOVLW	0x03
0035ec   ec5a     call	0x2cb4, 0           	CALL	_MIOS_DIN_PinGet
0035ee   f016
0035f0   6e12     movwf	0x12, 0            	MOVWF	r0x02
0035f2   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
0035f4   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0035f6   d044     bra	0x3680               	BRA	_00266_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0035f8   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	258; main.c	current_preset[current_bus_num].outputs = 
0035fa   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
0035fc   0d04     mullw	0x4                	MULLW	0x04
0035fe   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003600   f012
003602   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003604   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003606   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003608   6a13     clrf	0x13, 0             	CLRF	r0x03
00360a   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00360c   0e02     movlw	0x2                	MOVLW	0x02
00360e   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003610   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003612   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
                                           ;	.line	259; main.c	(current_preset[current_bus_num].outputs==int_bit_ormask[value]) ? 
003614   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003616   ffe1
003618   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00361a   ffe2
00361c   cfe6     movff	0xfe6, 0x14        	MOVFF	POSTINC0, r0x04
00361e   f014
003620   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
003622   f015
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003624   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003626   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
003628   6e16     movwf	0x16, 0            	MOVWF	r0x06
00362a   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
00362c   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
00362e   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
003630   6a17     clrf	0x17, 0             	CLRF	r0x07
003632   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003634   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003636   6a18     clrf	0x18, 0             	CLRF	r0x08
003638   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
00363a   c016     movff	0x16, 0xff6        	MOVFF	r0x06, TBLPTRL
00363c   fff6
00363e   c017     movff	0x17, 0xff7        	MOVFF	r0x07, TBLPTRH
003640   fff7
003642   c018     movff	0x18, 0xff8        	MOVFF	r0x08, TBLPTRU
003644   fff8
003646   0009     tblrd	*+                 	TBLRD*+	
003648   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
00364a   f016
00364c   0009     tblrd	*+                 	TBLRD*+	
00364e   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x07
003650   f017
003652   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003654   1816     xorwf	0x16, 0, 0         	XORWF	r0x06, W
003656   e103     bnz	0x365e               	BNZ	_00331_DS_
003658   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
00365a   1817     xorwf	0x17, 0, 0         	XORWF	r0x07, W
00365c   e001     bz	0x3660                	BZ	_00332_DS_
                                           _00331_DS_:
00365e   d003     bra	0x3666               	BRA	_00298_DS_
                                           _00332_DS_:
                                           ;	.line	260; main.c	0x0000 :int_bit_ormask[value];
003660   6a14     clrf	0x14, 0             	CLRF	r0x04
003662   6a15     clrf	0x15, 0             	CLRF	r0x05
003664   d004     bra	0x366e               	BRA	_00299_DS_
                                           _00298_DS_:
003666   c016     movff	0x16, 0x14         	MOVFF	r0x06, r0x04
003668   f014
00366a   c017     movff	0x17, 0x15         	MOVFF	r0x07, r0x05
00366c   f015
                                           _00299_DS_:
00366e   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003670   ffe1
003672   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
003674   ffe2
003676   c014     movff	0x14, 0xfe6        	MOVFF	r0x04, POSTINC0
003678   ffe6
00367a   c015     movff	0x15, 0xfe7        	MOVFF	r0x05, INDF0
00367c   ffe7
00367e   d04a     bra	0x3714               	BRA	_00319_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00266_DS_:
003680   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	263; main.c	current_preset[current_bus_num].outputs = 
003682   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003684   0d04     mullw	0x4                	MULLW	0x04
003686   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x02
003688   f012
00368a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00368c   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
00368e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003690   6a13     clrf	0x13, 0             	CLRF	r0x03
003692   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
003694   0e02     movlw	0x2                	MOVLW	0x02
003696   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003698   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00369a   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
                                           ;	.line	264; main.c	(current_preset[current_bus_num].outputs & int_bit_ormask[value])?
00369c   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
00369e   ffe1
0036a0   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0036a2   ffe2
0036a4   cfe6     movff	0xfe6, 0x14        	MOVFF	POSTINC0, r0x04
0036a6   f014
0036a8   cfe7     movff	0xfe7, 0x15        	MOVFF	INDF0, r0x05
0036aa   f015
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0036ac   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0036ae   3611     rlcf	0x11, 0x1, 0        	RLCF	r0x01, F
0036b0   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
0036b2   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
0036b4   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
0036b6   6a16     clrf	0x16, 0             	CLRF	r0x06
0036b8   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
0036ba   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0036bc   6a17     clrf	0x17, 0             	CLRF	r0x07
0036be   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
0036c0   c011     movff	0x11, 0xff6        	MOVFF	r0x01, TBLPTRL
0036c2   fff6
0036c4   c016     movff	0x16, 0xff7        	MOVFF	r0x06, TBLPTRH
0036c6   fff7
0036c8   c017     movff	0x17, 0xff8        	MOVFF	r0x07, TBLPTRU
0036ca   fff8
0036cc   0009     tblrd	*+                 	TBLRD*+	
0036ce   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x01
0036d0   f011
0036d2   0009     tblrd	*+                 	TBLRD*+	
0036d4   cff5     movff	0xff5, 0x16        	MOVFF	TABLAT, r0x06
0036d6   f016
0036d8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0036da   1414     andwf	0x14, 0, 0         	ANDWF	r0x04, W
0036dc   6e17     movwf	0x17, 0            	MOVWF	r0x07
0036de   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0036e0   1415     andwf	0x15, 0, 0         	ANDWF	r0x05, W
0036e2   6e18     movwf	0x18, 0            	MOVWF	r0x08
0036e4   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
0036e6   1018     iorwf	0x18, 0, 0         	IORWF	r0x08, W
0036e8   e007     bz	0x36f8                	BZ	_00300_DS_
                                           ;	.line	265; main.c	(current_preset[current_bus_num].outputs ^ int_bit_ormask[value]):
0036ea   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0036ec   1814     xorwf	0x14, 0, 0         	XORWF	r0x04, W
0036ee   6e17     movwf	0x17, 0            	MOVWF	r0x07
0036f0   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
0036f2   1815     xorwf	0x15, 0, 0         	XORWF	r0x05, W
0036f4   6e18     movwf	0x18, 0            	MOVWF	r0x08
0036f6   d006     bra	0x3704               	BRA	_00301_DS_
                                           _00300_DS_:
                                           ;	.line	266; main.c	(current_preset[current_bus_num].outputs | int_bit_ormask[value]);
0036f8   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
0036fa   1014     iorwf	0x14, 0, 0         	IORWF	r0x04, W
0036fc   6e17     movwf	0x17, 0            	MOVWF	r0x07
0036fe   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003700   1015     iorwf	0x15, 0, 0         	IORWF	r0x05, W
003702   6e18     movwf	0x18, 0            	MOVWF	r0x08
                                           _00301_DS_:
003704   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
003706   ffe1
003708   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
00370a   ffe2
00370c   c017     movff	0x17, 0xfe6        	MOVFF	r0x07, POSTINC0
00370e   ffe6
003710   c018     movff	0x18, 0xfe7        	MOVFF	r0x08, INDF0
003712   ffe7
                                           _00319_DS_:
                                           ;	.line	269; main.c	for(chn_in=0;chn_in<16;chn_in++){
003714   6a11     clrf	0x11, 0             	CLRF	r0x01
003716   6a12     clrf	0x12, 0             	CLRF	r0x02
003718   6a13     clrf	0x13, 0             	CLRF	r0x03
00371a   6a14     clrf	0x14, 0             	CLRF	r0x04
00371c   6a15     clrf	0x15, 0             	CLRF	r0x05
00371e   6a16     clrf	0x16, 0             	CLRF	r0x06
                                           _00288_DS_:
003720   0e10     movlw	0x10               	MOVLW	0x10
003722   5c11     subwf	0x11, 0, 0         	SUBWF	r0x01, W
003724   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003726   d0b2     bra	0x388c               	BRA	_00279_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003728   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	270; main.c	if(current_preset[current_bus_num].inputs & int_bit_ormask[chn_in]){//this is a bus input
00372a   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
00372c   0d04     mullw	0x4                	MULLW	0x04
00372e   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x07
003730   f017
003732   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003734   2417     addwf	0x17, 0, 0         	ADDWF	r0x07, W
003736   6e18     movwf	0x18, 0            	MOVWF	r0x08
003738   6a19     clrf	0x19, 0             	CLRF	r0x09
00373a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00373c   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
00373e   c018     movff	0x18, 0xfe1        	MOVFF	r0x08, FSR0L
003740   ffe1
003742   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
003744   ffe2
003746   cfe6     movff	0xfe6, 0x18        	MOVFF	POSTINC0, r0x08
003748   f018
00374a   cfe7     movff	0xfe7, 0x19        	MOVFF	INDF0, r0x09
00374c   f019
00374e   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
003750   2416     addwf	0x16, 0, 0         	ADDWF	r0x06, W
003752   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003754   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003756   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
003758   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
00375a   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
00375c   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
00375e   221c     addwfc	0x1c, 0x1, 0      	ADDWFC	r0x0c, F
003760   c01a     movff	0x1a, 0xff6        	MOVFF	r0x0a, TBLPTRL
003762   fff6
003764   c01b     movff	0x1b, 0xff7        	MOVFF	r0x0b, TBLPTRH
003766   fff7
003768   c01c     movff	0x1c, 0xff8        	MOVFF	r0x0c, TBLPTRU
00376a   fff8
00376c   0009     tblrd	*+                 	TBLRD*+	
00376e   cff5     movff	0xff5, 0x1a        	MOVFF	TABLAT, r0x0a
003770   f01a
003772   0009     tblrd	*+                 	TBLRD*+	
003774   cff5     movff	0xff5, 0x1b        	MOVFF	TABLAT, r0x0b
003776   f01b
003778   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
00377a   1618     andwf	0x18, 0x1, 0       	ANDWF	r0x08, F
00377c   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
00377e   1619     andwf	0x19, 0x1, 0       	ANDWF	r0x09, F
003780   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003782   1019     iorwf	0x19, 0, 0         	IORWF	r0x09, W
003784   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003786   d05c     bra	0x3840               	BRA	_00290_DS_
                                           ;	.line	272; main.c	for(chn_out=0;chn_out<16;chn_out++){
003788   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
00378a   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
00378c   6e18     movwf	0x18, 0            	MOVWF	r0x08
00378e   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003790   2013     addwfc	0x13, 0, 0        	ADDWFC	r0x03, W
003792   6e19     movwf	0x19, 0            	MOVWF	r0x09
003794   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003796   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
003798   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00379a   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
00379c   221a     addwfc	0x1a, 0x1, 0      	ADDWFC	r0x0a, F
00379e   0e02     movlw	0x2                	MOVLW	0x02
0037a0   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
0037a2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0037a4   2a1a     incf	0x1a, 0x1, 0        	INCF	r0x0a, F
0037a6   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
0037a8   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
0037aa   6a1d     clrf	0x1d, 0             	CLRF	r0x0d
                                           _00284_DS_:
0037ac   0e10     movlw	0x10               	MOVLW	0x10
0037ae   5c1c     subwf	0x1c, 0, 0         	SUBWF	r0x0c, W
0037b0   e236     bc	0x381e                	BC	_00287_DS_
                                           ;	.line	273; main.c	if(current_preset[current_bus_num].outputs & int_bit_ormask[chn_out])//this is a bus output
0037b2   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
0037b4   ffe1
0037b6   c01a     movff	0x1a, 0xfe2        	MOVFF	r0x0a, FSR0H
0037b8   ffe2
0037ba   cfe6     movff	0xfe6, 0x1e        	MOVFF	POSTINC0, r0x0e
0037bc   f01e
0037be   cfe7     movff	0xfe7, 0x1f        	MOVFF	INDF0, r0x0f
0037c0   f01f
0037c2   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
0037c4   241d     addwf	0x1d, 0, 0         	ADDWF	r0x0d, W
0037c6   6e20     movwf	0x20, 0            	MOVWF	r0x10
0037c8   6a21     clrf	0x21, 0             	CLRF	r0x11
0037ca   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
0037cc   2221     addwfc	0x21, 0x1, 0      	ADDWFC	r0x11, F
0037ce   6a22     clrf	0x22, 0             	CLRF	r0x12
0037d0   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0037d2   2222     addwfc	0x22, 0x1, 0      	ADDWFC	r0x12, F
0037d4   c020     movff	0x20, 0xff6        	MOVFF	r0x10, TBLPTRL
0037d6   fff6
0037d8   c021     movff	0x21, 0xff7        	MOVFF	r0x11, TBLPTRH
0037da   fff7
0037dc   c022     movff	0x22, 0xff8        	MOVFF	r0x12, TBLPTRU
0037de   fff8
0037e0   0009     tblrd	*+                 	TBLRD*+	
0037e2   cff5     movff	0xff5, 0x20        	MOVFF	TABLAT, r0x10
0037e4   f020
0037e6   0009     tblrd	*+                 	TBLRD*+	
0037e8   cff5     movff	0xff5, 0x21        	MOVFF	TABLAT, r0x11
0037ea   f021
0037ec   5020     movf	0x20, 0, 0          	MOVF	r0x10, W
0037ee   161e     andwf	0x1e, 0x1, 0       	ANDWF	r0x0e, F
0037f0   5021     movf	0x21, 0, 0          	MOVF	r0x11, W
0037f2   161f     andwf	0x1f, 0x1, 0       	ANDWF	r0x0f, F
0037f4   501e     movf	0x1e, 0, 0          	MOVF	r0x0e, W
0037f6   101f     iorwf	0x1f, 0, 0         	IORWF	r0x0f, W
0037f8   e00e     bz	0x3816                	BZ	_00286_DS_
                                           ;	.line	274; main.c	midi_inout_map[chn_in][i++] = chn_out;
0037fa   c01b     movff	0x1b, 0x1e         	MOVFF	r0x0b, r0x0e
0037fc   f01e
0037fe   2a1b     incf	0x1b, 0x1, 0        	INCF	r0x0b, F
003800   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003802   261e     addwf	0x1e, 0x1, 0       	ADDWF	r0x0e, F
003804   5019     movf	0x19, 0, 0          	MOVF	r0x09, W
003806   6a1f     clrf	0x1f, 0             	CLRF	r0x0f
003808   221f     addwfc	0x1f, 0x1, 0      	ADDWFC	r0x0f, F
00380a   c01e     movff	0x1e, 0xfe1        	MOVFF	r0x0e, FSR0L
00380c   ffe1
00380e   c01f     movff	0x1f, 0xfe2        	MOVFF	r0x0f, FSR0H
003810   ffe2
003812   c01c     movff	0x1c, 0xfe7        	MOVFF	r0x0c, INDF0
003814   ffe7
                                           _00286_DS_:
                                           ;	.line	272; main.c	for(chn_out=0;chn_out<16;chn_out++){
003816   2a1d     incf	0x1d, 0x1, 0        	INCF	r0x0d, F
003818   2a1d     incf	0x1d, 0x1, 0        	INCF	r0x0d, F
00381a   2a1c     incf	0x1c, 0x1, 0        	INCF	r0x0c, F
00381c   d7c7     bra	0x37ac               	BRA	_00284_DS_
                                           _00287_DS_:
                                           ;	.line	276; main.c	midi_inout_map[chn_in][i] = -1;
00381e   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003820   2414     addwf	0x14, 0, 0         	ADDWF	r0x04, W
003822   6e17     movwf	0x17, 0            	MOVWF	r0x07
003824   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003826   2015     addwfc	0x15, 0, 0        	ADDWFC	r0x05, W
003828   6e18     movwf	0x18, 0            	MOVWF	r0x08
00382a   5017     movf	0x17, 0, 0          	MOVF	r0x07, W
00382c   261b     addwf	0x1b, 0x1, 0       	ADDWF	r0x0b, F
00382e   5018     movf	0x18, 0, 0          	MOVF	r0x08, W
003830   6a19     clrf	0x19, 0             	CLRF	r0x09
003832   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x09, F
003834   c01b     movff	0x1b, 0xfe1        	MOVFF	r0x0b, FSR0L
003836   ffe1
003838   c019     movff	0x19, 0xfe2        	MOVFF	r0x09, FSR0H
00383a   ffe2
00383c   0eff     movlw	0xff               	MOVLW	0xff
00383e   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           _00290_DS_:
                                           ;	.line	269; main.c	for(chn_in=0;chn_in<16;chn_in++){
003840   0e10     movlw	0x10               	MOVLW	0x10
003842   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003844   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003846   2a13     incf	0x13, 0x1, 0        	INCF	r0x03, F
003848   0e10     movlw	0x10               	MOVLW	0x10
00384a   2614     addwf	0x14, 0x1, 0       	ADDWF	r0x04, F
00384c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00384e   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
003850   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003852   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003854   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003856   d764     bra	0x3720               	BRA	_00288_DS_
                                           _00278_DS_:
                                           ;	.line	282; main.c	else if(pin < 4){
003858   0e04     movlw	0x4                	MOVLW	0x04
00385a   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00385c   e217     bc	0x388c                	BC	_00279_DS_
                                           ;	.line	283; main.c	current_screen_num = pin;
00385e   c010     movff	0x10, 0xc0         	MOVFF	r0x00, _current_screen_num
003860   f0c0
003862   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	284; main.c	MIOS_EEPROM_Write(0x00, current_screen_num);
003864   51c0     movf	0xc0, 0, 0x1        	MOVF	_current_screen_num, W, B
003866   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003868   0e00     movlw	0                  	MOVLW	0x00
00386a   ec58     call	0x44b0, 0           	CALL	_MIOS_EEPROM_Write
00386c   f022
00386e   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	285; main.c	if(pin < 2){//start init request countdown
003870   0e02     movlw	0x2                	MOVLW	0x02
003872   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003874   e20b     bc	0x388c                	BC	_00279_DS_
003876   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	286; main.c	timer_ticks_count = 0;			
003878   6bc3     clrf	0xc3, 0x1           	CLRF	_timer_ticks_count, B
                                           ;	.line	287; main.c	MIOS_TIMER_Init(0x03,0xffff);
00387a   0eff     movlw	0xff               	MOVLW	0xff
00387c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00387e   0eff     movlw	0xff               	MOVLW	0xff
003880   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003882   0e03     movlw	0x3                	MOVLW	0x03
003884   ecee     call	0x43dc, 0           	CALL	_MIOS_TIMER_Init
003886   f021
003888   0e02     movlw	0x2                	MOVLW	0x02
00388a   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           _00279_DS_:
                                           ;	.line	290; main.c	screen_init();
00388c   ec92     call	0x3b24, 0           	CALL	_screen_init
00388e   f01d
                                           _00292_DS_:
003890   cfec     movff	0xfec, 0x22        	MOVFF	PREINC1, r0x12
003892   f022
003894   cfec     movff	0xfec, 0x21        	MOVFF	PREINC1, r0x11
003896   f021
003898   cfec     movff	0xfec, 0x20        	MOVFF	PREINC1, r0x10
00389a   f020
00389c   cfec     movff	0xfec, 0x1f        	MOVFF	PREINC1, r0x0f
00389e   f01f
0038a0   cfec     movff	0xfec, 0x1e        	MOVFF	PREINC1, r0x0e
0038a2   f01e
0038a4   cfec     movff	0xfec, 0x1d        	MOVFF	PREINC1, r0x0d
0038a6   f01d
0038a8   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
0038aa   f01c
0038ac   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
0038ae   f01b
0038b0   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
0038b2   f01a
0038b4   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
0038b6   f019
0038b8   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
0038ba   f018
0038bc   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
0038be   f017
0038c0   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
0038c2   f016
0038c4   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
0038c6   f015
0038c8   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
0038ca   f014
0038cc   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
0038ce   f013
0038d0   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
0038d2   f012
0038d4   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0038d6   f011
0038d8   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0038da   f010
0038dc   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0038de   ffd9
0038e0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedEvnt	code
                                           _MPROC_NotifyReceivedEvnt:
                                           ;	.line	204; main.c	void MPROC_NotifyReceivedEvnt(unsigned char evnt0, unsigned char evnt1, unsigned char evnt2) __wparam{
003f3e   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
003f40   ffed
003f42   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
003f44   ffd9
003f46   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003f48   ffed
003f4a   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003f4c   ffed
003f4e   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003f50   ffed
003f52   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003f54   ffed
003f56   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003f58   ffed
003f5a   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003f5c   ffed
003f5e   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003f60   ffed
003f62   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003f64   ffed
003f66   6e10     movwf	0x10, 0            	MOVWF	r0x00
003f68   0e02     movlw	0x2                	MOVLW	0x02
003f6a   cfdb     movff	0xfdb, 0x11        	MOVFF	PLUSW2, r0x01
003f6c   f011
003f6e   0e03     movlw	0x3                	MOVLW	0x03
003f70   cfdb     movff	0xfdb, 0x12        	MOVFF	PLUSW2, r0x02
003f72   f012
                                           ;	.line	206; main.c	unsigned char evnt_type = evnt0 & 0xf0;
003f74   0ef0     movlw	0xf0               	MOVLW	0xf0
003f76   1410     andwf	0x10, 0, 0         	ANDWF	r0x00, W
003f78   6e13     movwf	0x13, 0            	MOVWF	r0x03
                                           ;	.line	207; main.c	unsigned char in_chn = evnt0 & 0x0f;
003f7a   0e0f     movlw	0xf                	MOVLW	0x0f
003f7c   1610     andwf	0x10, 0x1, 0       	ANDWF	r0x00, F
                                           ;	.line	208; main.c	unsigned char evnt2_send = !(evnt_type == 0xc0 || evnt_type == 0xd0);
003f7e   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003f80   0ac0     xorlw	0xc0               	XORLW	0xc0
003f82   e005     bz	0x3f8e                	BZ	_00233_DS_
003f84   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003f86   0ad0     xorlw	0xd0               	XORLW	0xd0
003f88   e002     bz	0x3f8e                	BZ	_00233_DS_
003f8a   6a14     clrf	0x14, 0             	CLRF	r0x04
003f8c   d002     bra	0x3f92               	BRA	_00234_DS_
                                           _00233_DS_:
003f8e   0e01     movlw	0x1                	MOVLW	0x01
003f90   6e14     movwf	0x14, 0            	MOVWF	r0x04
                                           _00234_DS_:
003f92   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003f94   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
003f96   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
003f98   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003f9a   6a14     clrf	0x14, 0             	CLRF	r0x04
003f9c   3614     rlcf	0x14, 0x1, 0        	RLCF	r0x04, F
                                           ;	.line	209; main.c	for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
003f9e   6a15     clrf	0x15, 0             	CLRF	r0x05
                                           _00226_DS_:
003fa0   0e10     movlw	0x10               	MOVLW	0x10
003fa2   5c15     subwf	0x15, 0, 0         	SUBWF	r0x05, W
003fa4   e226     bc	0x3ff2                	BC	_00230_DS_
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003fa6   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003fa8   0d10     mullw	0x10               	MULLW	0x10
003faa   cff3     movff	0xff3, 0x16        	MOVFF	PRODL, r0x06
003fac   f016
003fae   cff4     movff	0xff4, 0x17        	MOVFF	PRODH, r0x07
003fb0   f017
003fb2   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003fb4   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003fb6   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003fb8   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003fba   5015     movf	0x15, 0, 0          	MOVF	r0x05, W
003fbc   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003fbe   6ae8     clrf	0xe8, 0             	CLRF	WREG
003fc0   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x07, F
003fc2   c016     movff	0x16, 0xfe1        	MOVFF	r0x06, FSR0L
003fc4   ffe1
003fc6   c017     movff	0x17, 0xfe2        	MOVFF	r0x07, FSR0H
003fc8   ffe2
003fca   cfe7     movff	0xfe7, 0x16        	MOVFF	INDF0, r0x06
003fcc   f016
003fce   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003fd0   0aff     xorlw	0xff               	XORLW	0xff
003fd2   e00f     bz	0x3ff2                	BZ	_00230_DS_
                                           ;	.line	210; main.c	MIOS_MIDI_TxBufferPut(evnt_type+midi_inout_map[in_chn][i]);
003fd4   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003fd6   2616     addwf	0x16, 0x1, 0       	ADDWF	r0x06, F
003fd8   5016     movf	0x16, 0, 0          	MOVF	r0x06, W
003fda   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
003fdc   f016
                                           ;	.line	211; main.c	MIOS_MIDI_TxBufferPut(evnt1);
003fde   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003fe0   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
003fe2   f016
                                           ;	.line	212; main.c	if(evnt2_send)
003fe4   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
003fe6   e003     bz	0x3fee                	BZ	_00228_DS_
                                           ;	.line	213; main.c	MIOS_MIDI_TxBufferPut(evnt2);
003fe8   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003fea   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
003fec   f016
                                           _00228_DS_:
                                           ;	.line	209; main.c	for(i=0;i<16 && midi_inout_map[in_chn][i]!=-1;i++){
003fee   2a15     incf	0x15, 0x1, 0        	INCF	r0x05, F
003ff0   d7d7     bra	0x3fa0               	BRA	_00226_DS_
                                           _00230_DS_:
003ff2   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003ff4   f017
003ff6   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003ff8   f016
003ffa   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003ffc   f015
003ffe   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
004000   f014
004002   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004004   f013
004006   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004008   f012
00400a   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
00400c   f011
00400e   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
004010   f010
004012   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004014   ffd9
004016   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__MPROC_NotifyReceivedByte	code
                                           _MPROC_NotifyReceivedByte:
                                           ;	.line	173; main.c	void MPROC_NotifyReceivedByte(unsigned char byte) __wparam{
004018   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
00401a   ffed
00401c   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
00401e   ffd9
004020   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004022   ffed
004024   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
004026   ffed
004028   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ;	.line	176; main.c	if(byte >= 0xf0){//system status byte
00402a   0ef0     movlw	0xf0               	MOVLW	0xf0
00402c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00402e   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
004030   6a11     clrf	0x11, 0             	CLRF	r0x01
004032   3611     rlcf	0x11, 0x1, 0        	RLCF	r0x01, F
004034   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004036   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004038   d03d     bra	0x40b4               	BRA	_00205_DS_
                                           ;	.line	177; main.c	MIOS_MIDI_TxBufferPut(byte);
00403a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00403c   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
00403e   f016
                                           ;	.line	179; main.c	switch(byte){
004040   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
004042   e135     bnz	0x40ae               	BNZ	_00198_DS_
004044   0ef4     movlw	0xf4               	MOVLW	0xf4
004046   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
004048   e232     bc	0x40ae                	BC	_00198_DS_
00404a   0e10     movlw	0x10               	MOVLW	0x10
00404c   2410     addwf	0x10, 0, 0         	ADDWF	r0x00, W
00404e   6e11     movwf	0x11, 0            	MOVWF	r0x01
004050   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
004052   ffed
004054   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
004056   ffed
004058   6a13     clrf	0x13, 0             	CLRF	r0x03
00405a   3411     rlcf	0x11, 0, 0          	RLCF	r0x01, W
00405c   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
00405e   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
004060   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
004062   0bfc     andlw	0xfc               	ANDLW	0xfc
004064   6e12     movwf	0x12, 0            	MOVWF	r0x02
004066   0e00     movlw	0                  	MOVLW	UPPER(_00217_DS_)
004068   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
00406a   0e40     movlw	0x40               	MOVLW	HIGH(_00217_DS_)
00406c   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00406e   0e86     movlw	0x86               	MOVLW	LOW(_00217_DS_)
004070   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
004072   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004074   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
004076   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004078   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
00407a   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00407c   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
00407e   f013
004080   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004082   f012
004084   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00217_DS_:
004086   ef53     goto	0x40a6              	GOTO	_00197_DS_
004088   f020
00408a   ef4b     goto	0x4096              	GOTO	_00195_DS_
00408c   f020
00408e   ef4f     goto	0x409e              	GOTO	_00196_DS_
004090   f020
004092   ef4b     goto	0x4096              	GOTO	_00195_DS_
004094   f020
                                           _00195_DS_:
                                           ;	.line	182; main.c	fx_status = 1;
004096   0e01     movlw	0x1                	MOVLW	0x01
004098   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
00409a   6fc4     movwf	0xc4, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	183; main.c	break; 	
00409c   d017     bra	0x40cc               	BRA	_00207_DS_
                                           _00196_DS_:
                                           ;	.line	185; main.c	fx_status = 2;				
00409e   0e02     movlw	0x2                	MOVLW	0x02
0040a0   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
0040a2   6fc4     movwf	0xc4, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	186; main.c	break;
0040a4   d013     bra	0x40cc               	BRA	_00207_DS_
                                           _00197_DS_:
                                           ;	.line	188; main.c	fx_status = 0xff;
0040a6   0eff     movlw	0xff               	MOVLW	0xff
0040a8   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
0040aa   6fc4     movwf	0xc4, 0x1          	MOVWF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	189; main.c	break;
0040ac   d00f     bra	0x40cc               	BRA	_00207_DS_
                                           _00198_DS_:
0040ae   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	191; main.c	fx_status = 0;
0040b0   6bc4     clrf	0xc4, 0x1           	CLRF	_MPROC_NotifyReceivedByte_fx_status_1_1, B
                                           ;	.line	192; main.c	}   
0040b2   d00c     bra	0x40cc               	BRA	_00207_DS_
                                           _00205_DS_:
0040b4   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	194; main.c	else if(fx_status){
0040b6   51c4     movf	0xc4, 0, 0x1        	MOVF	_MPROC_NotifyReceivedByte_fx_status_1_1, W, B
0040b8   e009     bz	0x40cc                	BZ	_00207_DS_
                                           ;	.line	195; main.c	MIOS_MIDI_TxBufferPut(byte);
0040ba   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0040bc   ec24     call	0x2c48, 0           	CALL	_MIOS_MIDI_TxBufferPut
0040be   f016
0040c0   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	196; main.c	if(fx_status!=0xff)
0040c2   51c4     movf	0xc4, 0, 0x1        	MOVF	_MPROC_NotifyReceivedByte_fx_status_1_1, W, B
0040c4   0aff     xorlw	0xff               	XORLW	0xff
0040c6   e002     bz	0x40cc                	BZ	_00207_DS_
                                           _00219_DS_:
0040c8   0100     movlb	0                  	BANKSEL	_MPROC_NotifyReceivedByte_fx_status_1_1
                                           ;	.line	197; main.c	fx_status--;
0040ca   07c4     decf	0xc4, 0x1, 0x1      	DECF	_MPROC_NotifyReceivedByte_fx_status_1_1, F, B
                                           _00207_DS_:
0040cc   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
0040ce   f011
0040d0   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0040d2   f010
0040d4   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
0040d6   ffd9
0040d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Timer	code
                                           _Timer:
                                           ;	.line	147; main.c	void Timer(void) __wparam{
004144   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
004146   ffed
004148   0100     movlb	0                  	BANKSEL	_timer_ticks_count
                                           ;	.line	149; main.c	if(++timer_ticks_count >= init_request_ticks){
00414a   2bc3     incf	0xc3, 0x1, 0x1      	INCF	_timer_ticks_count, F, B
00414c   0e3c     movlw	0x3c               	MOVLW	0x3c
                                           ; removed redundant BANKSEL
00414e   5dc3     subwf	0xc3, 0, 0x1       	SUBWF	_timer_ticks_count, W, B
004150   e32a     bnc	0x41a6               	BNC	_00178_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	150; main.c	if(timer_ticks_count == init_request_ticks){
004152   51c3     movf	0xc3, 0, 0x1        	MOVF	_timer_ticks_count, W, B
004154   0a3c     xorlw	0x3c               	XORLW	0x3c
004156   e11f     bnz	0x4196               	BNZ	_00170_DS_
                                           ;	.line	151; main.c	preset_init();//inits the current preset
004158   ec8a     call	0x3d14, 0           	CALL	_preset_init
00415a   f01e
00415c   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	152; main.c	if(!current_preset_num){//page is preset.. 
00415e   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
004160   e109     bnz	0x4174               	BNZ	_00165_DS_
                                           ;	.line	153; main.c	for(i=0;i<16;i++)//inits all presets on bankstick(store reset preset)
004162   6a10     clrf	0x10, 0             	CLRF	r0x00
                                           _00174_DS_:
004164   0e10     movlw	0x10               	MOVLW	0x10
004166   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
004168   e209     bc	0x417c                	BC	_00166_DS_
                                           ;	.line	154; main.c	store_preset(i);
00416a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00416c   ec6d     call	0x40da, 0           	CALL	_store_preset
00416e   f020
                                           ;	.line	153; main.c	for(i=0;i<16;i++)//inits all presets on bankstick(store reset preset)
004170   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
004172   d7f8     bra	0x4164               	BRA	_00174_DS_
                                           _00165_DS_:
004174   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	157; main.c	store_preset(current_preset_num);//store the current (reset) preset
004176   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
004178   ec6d     call	0x40da, 0           	CALL	_store_preset
00417a   f020
                                           _00166_DS_:
                                           ;	.line	159; main.c	MIOS_DOUT_SRSet(0x01,0xff);
00417c   0eff     movlw	0xff               	MOVLW	0xff
00417e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004180   0e01     movlw	0x1                	MOVLW	0x01
004182   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
004184   f022
004186   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	160; main.c	MIOS_DOUT_SRSet(0x02,0xff);
004188   0eff     movlw	0xff               	MOVLW	0xff
00418a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00418c   0e02     movlw	0x2                	MOVLW	0x02
00418e   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
004190   f022
004192   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
004194   d008     bra	0x41a6               	BRA	_00178_DS_
                                           _00170_DS_:
                                           ;	.line	162; main.c	else if(timer_ticks_count >= init_request_ticks+init_ledflash_ticks){
004196   0e43     movlw	0x43               	MOVLW	0x43
004198   0100     movlb	0                  	BANKSEL	_timer_ticks_count
00419a   5dc3     subwf	0xc3, 0, 0x1       	SUBWF	_timer_ticks_count, W, B
00419c   e304     bnc	0x41a6               	BNC	_00178_DS_
                                           ;	.line	163; main.c	MIOS_TIMER_Stop();//stops the init request countdown
00419e   ecc0     call	0x2d80, 0           	CALL	_MIOS_TIMER_Stop
0041a0   f016
                                           ;	.line	164; main.c	screen_init();
0041a2   ec92     call	0x3b24, 0           	CALL	_screen_init
0041a4   f01d
                                           _00178_DS_:
0041a6   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
0041a8   f010
0041aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__Init	code
                                           _Init:
                                           ;	.line	130; main.c	MIOS_SRIO_UpdateFrqSet(1); // ms
0041f0   0e01     movlw	0x1                	MOVLW	0x01
0041f2   ec80     call	0x2d00, 0           	CALL	_MIOS_SRIO_UpdateFrqSet
0041f4   f016
                                           ;	.line	131; main.c	MIOS_SRIO_NumberSet(3);//need 20 inputs / outputs 
0041f6   0e03     movlw	0x3                	MOVLW	0x03
0041f8   ec78     call	0x2cf0, 0           	CALL	_MIOS_SRIO_NumberSet
0041fa   f016
                                           ;	.line	132; main.c	MIOS_SRIO_DebounceSet(10);
0041fc   0e0a     movlw	0xa                	MOVLW	0x0a
0041fe   ec12     call	0x2e24, 0           	CALL	_MIOS_SRIO_DebounceSet
004200   f017
                                           ;	.line	133; main.c	MIOS_BANKSTICK_CtrlSet(0x00);//stick 0, verify enabled
004202   0e00     movlw	0                  	MOVLW	0x00
004204   ecee     call	0x2ddc, 0           	CALL	_MIOS_BANKSTICK_CtrlSet
004206   f016
                                           ;	.line	135; main.c	current_screen_num = MIOS_EEPROM_Read(0x00);
004208   0e00     movlw	0                  	MOVLW	0x00
00420a   ec69     call	0x44d2, 0           	CALL	_MIOS_EEPROM_Read
00420c   f022
00420e   0100     movlb	0                  	BANKSEL	_current_screen_num
004210   6fc0     movwf	0xc0, 0x1          	MOVWF	_current_screen_num, B
                                           ;	.line	136; main.c	current_preset_num = MIOS_EEPROM_Read(0x01);
004212   0e01     movlw	0x1                	MOVLW	0x01
004214   ec69     call	0x44d2, 0           	CALL	_MIOS_EEPROM_Read
004216   f022
004218   0100     movlb	0                  	BANKSEL	_current_preset_num
00421a   6fc1     movwf	0xc1, 0x1          	MOVWF	_current_preset_num, B
                                           ;	.line	137; main.c	current_bus_num = MIOS_EEPROM_Read(0x02);
00421c   0e02     movlw	0x2                	MOVLW	0x02
00421e   ec69     call	0x44d2, 0           	CALL	_MIOS_EEPROM_Read
004220   f022
004222   0100     movlb	0                  	BANKSEL	_current_bus_num
004224   6fc2     movwf	0xc2, 0x1          	MOVWF	_current_bus_num, B
004226   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	138; main.c	load_preset(current_preset_num);
004228   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
00422a   ec71     call	0x38e2, 0           	CALL	_load_preset
00422c   f01c
                                           ;	.line	140; main.c	screen_init();
00422e   ec92     call	0x3b24, 0           	CALL	_screen_init
004230   f01d
004232   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__preset_init	code
                                           _preset_init:
                                           ;	.line	115; main.c	void preset_init(void) __wparam{
003d14   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003d16   ffed
003d18   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003d1a   ffed
003d1c   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003d1e   ffed
003d20   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003d22   ffed
003d24   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
003d26   ffed
003d28   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003d2a   ffed
003d2c   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003d2e   ffed
003d30   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003d32   ffed
003d34   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
003d36   ffed
003d38   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
003d3a   ffed
003d3c   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003d3e   ffed
003d40   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003d42   ffed
                                           ;	.line	117; main.c	for(i=0;i<16;i++){
003d44   6a10     clrf	0x10, 0             	CLRF	r0x00
003d46   6a11     clrf	0x11, 0             	CLRF	r0x01
003d48   6a12     clrf	0x12, 0             	CLRF	r0x02
003d4a   6a13     clrf	0x13, 0             	CLRF	r0x03
003d4c   6a14     clrf	0x14, 0             	CLRF	r0x04
                                           _00152_DS_:
003d4e   0e10     movlw	0x10               	MOVLW	0x10
003d50   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
003d52   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d54   d051     bra	0x3df8               	BRA	_00155_DS_
                                           ;	.line	118; main.c	current_preset[i].inputs = current_preset[i].outputs = int_bit_ormask[i];
003d56   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003d58   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003d5a   6e15     movwf	0x15, 0            	MOVWF	r0x05
003d5c   6a16     clrf	0x16, 0             	CLRF	r0x06
003d5e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003d60   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x06, F
003d62   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003d64   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003d66   6e17     movwf	0x17, 0            	MOVWF	r0x07
003d68   6a18     clrf	0x18, 0             	CLRF	r0x08
003d6a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003d6c   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x08, F
003d6e   0e02     movlw	0x2                	MOVLW	0x02
003d70   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
003d72   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d74   2a18     incf	0x18, 0x1, 0        	INCF	r0x08, F
003d76   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
003d78   2412     addwf	0x12, 0, 0         	ADDWF	r0x02, W
003d7a   6e19     movwf	0x19, 0            	MOVWF	r0x09
003d7c   6a1a     clrf	0x1a, 0             	CLRF	r0x0a
003d7e   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
003d80   221a     addwfc	0x1a, 0x1, 0      	ADDWFC	r0x0a, F
003d82   6a1b     clrf	0x1b, 0             	CLRF	r0x0b
003d84   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003d86   221b     addwfc	0x1b, 0x1, 0      	ADDWFC	r0x0b, F
003d88   c019     movff	0x19, 0xff6        	MOVFF	r0x09, TBLPTRL
003d8a   fff6
003d8c   c01a     movff	0x1a, 0xff7        	MOVFF	r0x0a, TBLPTRH
003d8e   fff7
003d90   c01b     movff	0x1b, 0xff8        	MOVFF	r0x0b, TBLPTRU
003d92   fff8
003d94   0009     tblrd	*+                 	TBLRD*+	
003d96   cff5     movff	0xff5, 0x19        	MOVFF	TABLAT, r0x09
003d98   f019
003d9a   0009     tblrd	*+                 	TBLRD*+	
003d9c   cff5     movff	0xff5, 0x1a        	MOVFF	TABLAT, r0x0a
003d9e   f01a
003da0   c017     movff	0x17, 0xfe1        	MOVFF	r0x07, FSR0L
003da2   ffe1
003da4   c018     movff	0x18, 0xfe2        	MOVFF	r0x08, FSR0H
003da6   ffe2
003da8   c019     movff	0x19, 0xfe6        	MOVFF	r0x09, POSTINC0
003daa   ffe6
003dac   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
003dae   ffe7
003db0   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
003db2   ffe1
003db4   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
003db6   ffe2
003db8   c019     movff	0x19, 0xfe6        	MOVFF	r0x09, POSTINC0
003dba   ffe6
003dbc   c01a     movff	0x1a, 0xfe7        	MOVFF	r0x0a, INDF0
003dbe   ffe7
                                           ;	.line	119; main.c	midi_inout_map[i][0]=i;
003dc0   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003dc2   2413     addwf	0x13, 0, 0         	ADDWF	r0x03, W
003dc4   6e15     movwf	0x15, 0            	MOVWF	r0x05
003dc6   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003dc8   2014     addwfc	0x14, 0, 0        	ADDWFC	r0x04, W
003dca   6e16     movwf	0x16, 0            	MOVWF	r0x06
003dcc   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
003dce   ffe1
003dd0   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
003dd2   ffe2
003dd4   c010     movff	0x10, 0xfe7        	MOVFF	r0x00, INDF0
003dd6   ffe7
                                           ;	.line	120; main.c	midi_inout_map[i][0]=-1;//terminate		
003dd8   c015     movff	0x15, 0xfe1        	MOVFF	r0x05, FSR0L
003dda   ffe1
003ddc   c016     movff	0x16, 0xfe2        	MOVFF	r0x06, FSR0H
003dde   ffe2
003de0   0eff     movlw	0xff               	MOVLW	0xff
003de2   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           ;	.line	117; main.c	for(i=0;i<16;i++){
003de4   0e04     movlw	0x4                	MOVLW	0x04
003de6   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003de8   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
003dea   2a12     incf	0x12, 0x1, 0        	INCF	r0x02, F
003dec   0e10     movlw	0x10               	MOVLW	0x10
003dee   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x03, F
003df0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003df2   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
003df4   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003df6   d7ab     bra	0x3d4e               	BRA	_00152_DS_
                                           _00155_DS_:
003df8   0100     movlb	0                  	BANKSEL	_current_preset_num
                                           ;	.line	122; main.c	store_preset(current_preset_num);	
003dfa   51c1     movf	0xc1, 0, 0x1        	MOVF	_current_preset_num, W, B
003dfc   ec6d     call	0x40da, 0           	CALL	_store_preset
003dfe   f020
003e00   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
003e02   f01b
003e04   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
003e06   f01a
003e08   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003e0a   f019
003e0c   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
003e0e   f018
003e10   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003e12   f017
003e14   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003e16   f016
003e18   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003e1a   f015
003e1c   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003e1e   f014
003e20   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003e22   f013
003e24   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003e26   f012
003e28   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003e2a   f011
003e2c   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003e2e   f010
003e30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__screen_init	code
                                           _screen_init:
                                           ;	.line	85; main.c	void screen_init(void) __wparam{
003b24   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
003b26   ffed
003b28   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
003b2a   ffed
003b2c   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	87; main.c	MIOS_DOUT_SRSet(0x00,MIOS_HLP_GetBitORMask(current_screen_num));
003b2e   51c0     movf	0xc0, 0, 0x1        	MOVF	_current_screen_num, W, B
003b30   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003b32   f016
003b34   6e10     movwf	0x10, 0            	MOVWF	r0x00
003b36   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003b38   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003b3a   0e00     movlw	0                  	MOVLW	0x00
003b3c   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003b3e   f022
003b40   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	89; main.c	MIOS_DOUT_SRSet(0x01,0x00);
003b42   0e00     movlw	0                  	MOVLW	0x00
003b44   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003b46   0e01     movlw	0x1                	MOVLW	0x01
003b48   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003b4a   f022
003b4c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	90; main.c	MIOS_DOUT_SRSet(0x02,0x00);
003b4e   0e00     movlw	0                  	MOVLW	0x00
003b50   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003b52   0e02     movlw	0x2                	MOVLW	0x02
003b54   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003b56   f022
003b58   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	91; main.c	switch(current_screen_num){
003b5a   0e04     movlw	0x4                	MOVLW	0x04
003b5c   0100     movlb	0                  	BANKSEL	_current_screen_num
003b5e   5dc0     subwf	0xc0, 0, 0x1       	SUBWF	_current_screen_num, W, B
003b60   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003b62   d0d3     bra	0x3d0a               	BRA	_00141_DS_
003b64   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
003b66   ffed
003b68   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
003b6a   ffed
003b6c   6a13     clrf	0x13, 0             	CLRF	r0x03
                                           ; removed redundant BANKSEL
003b6e   35c0     rlcf	0xc0, 0, 0x1        	RLCF	_current_screen_num, W, B
003b70   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
003b72   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003b74   3613     rlcf	0x13, 0x1, 0        	RLCF	r0x03, F
003b76   0bfc     andlw	0xfc               	ANDLW	0xfc
003b78   6e12     movwf	0x12, 0            	MOVWF	r0x02
003b7a   0e00     movlw	0                  	MOVLW	UPPER(_00147_DS_)
003b7c   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003b7e   0e3b     movlw	0x3b               	MOVLW	HIGH(_00147_DS_)
003b80   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003b82   0e9a     movlw	0x9a               	MOVLW	LOW(_00147_DS_)
003b84   2612     addwf	0x12, 0x1, 0       	ADDWF	r0x02, F
003b86   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003b88   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003b8a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003b8c   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003b8e   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003b90   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003b92   f013
003b94   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003b96   f012
003b98   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00147_DS_:
003b9a   efd5     goto	0x3baa              	GOTO	_00130_DS_
003b9c   f01d
003b9e   eff4     goto	0x3be8              	GOTO	_00134_DS_
003ba0   f01d
003ba2   ef12     goto	0x3c24              	GOTO	_00138_DS_
003ba4   f01e
003ba6   ef48     goto	0x3c90              	GOTO	_00139_DS_
003ba8   f01e
                                           _00130_DS_:
                                           ;	.line	93; main.c	if(current_preset_num < 8)			
003baa   0e08     movlw	0x8                	MOVLW	0x08
003bac   0100     movlb	0                  	BANKSEL	_current_preset_num
003bae   5dc1     subwf	0xc1, 0, 0x1       	SUBWF	_current_preset_num, W, B
003bb0   e20c     bc	0x3bca                	BC	_00132_DS_
003bb2   0100     movlb	0                  	BANKSEL	_current_screen_num
                                           ;	.line	94; main.c	MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_screen_num));
003bb4   51c0     movf	0xc0, 0, 0x1        	MOVF	_current_screen_num, W, B
003bb6   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003bb8   f016
003bba   6e10     movwf	0x10, 0            	MOVWF	r0x00
003bbc   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003bbe   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003bc0   0e01     movlw	0x1                	MOVLW	0x01
003bc2   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003bc4   f022
003bc6   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003bc8   d0a0     bra	0x3d0a               	BRA	_00141_DS_
                                           _00132_DS_:
                                           ;	.line	96; main.c	MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_screen_num-8));				
003bca   0ef8     movlw	0xf8               	MOVLW	0xf8
003bcc   0100     movlb	0                  	BANKSEL	_current_screen_num
003bce   25c0     addwf	0xc0, 0, 0x1       	ADDWF	_current_screen_num, W, B
003bd0   6e10     movwf	0x10, 0            	MOVWF	r0x00
003bd2   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003bd4   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003bd6   f016
003bd8   6e10     movwf	0x10, 0            	MOVWF	r0x00
003bda   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003bdc   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003bde   0e02     movlw	0x2                	MOVLW	0x02
003be0   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003be2   f022
003be4   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	97; main.c	break;
003be6   d091     bra	0x3d0a               	BRA	_00141_DS_
                                           _00134_DS_:
                                           ;	.line	99; main.c	if(current_bus_num < 8)			
003be8   0e08     movlw	0x8                	MOVLW	0x08
003bea   0100     movlb	0                  	BANKSEL	_current_bus_num
003bec   5dc2     subwf	0xc2, 0, 0x1       	SUBWF	_current_bus_num, W, B
003bee   e20b     bc	0x3c06                	BC	_00136_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	100; main.c	MIOS_DOUT_SRSet(0x01,MIOS_HLP_GetBitORMask(current_bus_num));
003bf0   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003bf2   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003bf4   f016
003bf6   6e10     movwf	0x10, 0            	MOVWF	r0x00
003bf8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003bfa   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003bfc   0e01     movlw	0x1                	MOVLW	0x01
003bfe   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003c00   f022
003c02   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
003c04   d082     bra	0x3d0a               	BRA	_00141_DS_
                                           _00136_DS_:
                                           ;	.line	102; main.c	MIOS_DOUT_SRSet(0x02,MIOS_HLP_GetBitORMask(current_bus_num-8));							
003c06   0ef8     movlw	0xf8               	MOVLW	0xf8
003c08   0100     movlb	0                  	BANKSEL	_current_bus_num
003c0a   25c2     addwf	0xc2, 0, 0x1       	ADDWF	_current_bus_num, W, B
003c0c   6e10     movwf	0x10, 0            	MOVWF	r0x00
003c0e   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c10   ecc6     call	0x2d8c, 0           	CALL	_MIOS_HLP_GetBitORMask
003c12   f016
003c14   6e10     movwf	0x10, 0            	MOVWF	r0x00
003c16   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c18   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003c1a   0e02     movlw	0x2                	MOVLW	0x02
003c1c   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003c1e   f022
003c20   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	103; main.c	break;
003c22   d073     bra	0x3d0a               	BRA	_00141_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00138_DS_:
003c24   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	105; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].inputs & 0x00ff));
003c26   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003c28   0d04     mullw	0x4                	MULLW	0x04
003c2a   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003c2c   f010
003c2e   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003c30   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003c32   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003c34   6a11     clrf	0x11, 0             	CLRF	r0x01
003c36   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003c38   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003c3a   ffe1
003c3c   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c3e   ffe2
003c40   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003c42   f010
003c44   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003c46   f011
003c48   6a11     clrf	0x11, 0             	CLRF	r0x01
003c4a   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c4c   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003c4e   0e01     movlw	0x1                	MOVLW	0x01
003c50   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003c52   f022
003c54   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003c56   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	106; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)(current_preset[current_bus_num].inputs >>8 & 0x00ff));
003c58   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003c5a   0d04     mullw	0x4                	MULLW	0x04
003c5c   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003c5e   f010
003c60   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003c62   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003c64   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003c66   6a11     clrf	0x11, 0             	CLRF	r0x01
003c68   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003c6a   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003c6c   ffe1
003c6e   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003c70   ffe2
003c72   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003c74   f010
003c76   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003c78   f011
003c7a   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003c7c   6e10     movwf	0x10, 0            	MOVWF	r0x00
003c7e   6a11     clrf	0x11, 0             	CLRF	r0x01
003c80   6a11     clrf	0x11, 0             	CLRF	r0x01
003c82   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003c84   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003c86   0e02     movlw	0x2                	MOVLW	0x02
003c88   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003c8a   f022
003c8c   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	107; main.c	break;
003c8e   d03d     bra	0x3d0a               	BRA	_00141_DS_
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00139_DS_:
003c90   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	109; main.c	MIOS_DOUT_SRSet(0x01,(unsigned char)(current_preset[current_bus_num].outputs & 0x00ff));
003c92   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003c94   0d04     mullw	0x4                	MULLW	0x04
003c96   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003c98   f010
003c9a   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003c9c   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003c9e   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003ca0   6a11     clrf	0x11, 0             	CLRF	r0x01
003ca2   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003ca4   0e02     movlw	0x2                	MOVLW	0x02
003ca6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003ca8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003caa   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003cac   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003cae   ffe1
003cb0   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003cb2   ffe2
003cb4   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003cb6   f010
003cb8   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003cba   f011
003cbc   6a11     clrf	0x11, 0             	CLRF	r0x01
003cbe   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003cc0   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003cc2   0e01     movlw	0x1                	MOVLW	0x01
003cc4   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003cc6   f022
003cc8   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           ; ;multiply lit val:0x04 by variable _current_bus_num and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003cca   0100     movlb	0                  	BANKSEL	_current_bus_num
                                           ;	.line	110; main.c	MIOS_DOUT_SRSet(0x02,(unsigned char)(current_preset[current_bus_num].outputs >>8 & 0x00ff));
003ccc   51c2     movf	0xc2, 0, 0x1        	MOVF	_current_bus_num, W, B
003cce   0d04     mullw	0x4                	MULLW	0x04
003cd0   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
003cd2   f010
003cd4   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003cd6   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003cd8   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003cda   6a11     clrf	0x11, 0             	CLRF	r0x01
003cdc   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x01, F
003cde   0e02     movlw	0x2                	MOVLW	0x02
003ce0   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x00, F
003ce2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ce4   2a11     incf	0x11, 0x1, 0        	INCF	r0x01, F
003ce6   c010     movff	0x10, 0xfe1        	MOVFF	r0x00, FSR0L
003ce8   ffe1
003cea   c011     movff	0x11, 0xfe2        	MOVFF	r0x01, FSR0H
003cec   ffe2
003cee   cfe6     movff	0xfe6, 0x10        	MOVFF	POSTINC0, r0x00
003cf0   f010
003cf2   cfe7     movff	0xfe7, 0x11        	MOVFF	INDF0, r0x01
003cf4   f011
003cf6   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
003cf8   6e10     movwf	0x10, 0            	MOVWF	r0x00
003cfa   6a11     clrf	0x11, 0             	CLRF	r0x01
003cfc   6a11     clrf	0x11, 0             	CLRF	r0x01
003cfe   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003d00   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003d02   0e02     movlw	0x2                	MOVLW	0x02
003d04   ec2e     call	0x445c, 0           	CALL	_MIOS_DOUT_SRSet
003d06   f022
003d08   2ae9     incf	0xe9, 0x1, 0        	INCF	FSR1L, F
                                           _00141_DS_:
                                           ;	.line	111; main.c	}
003d0a   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003d0c   f011
003d0e   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003d10   f010
003d12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__load_preset	code
                                           _load_preset:
                                           ;	.line	67; main.c	void load_preset(unsigned char num) __wparam{
0038e2   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0038e4   ffed
0038e6   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0038e8   ffd9
0038ea   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0038ec   ffed
0038ee   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0038f0   ffed
0038f2   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0038f4   ffed
0038f6   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0038f8   ffed
0038fa   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0038fc   ffed
0038fe   c015     movff	0x15, 0xfed        	MOVFF	r0x05, POSTDEC1
003900   ffed
003902   c016     movff	0x16, 0xfed        	MOVFF	r0x06, POSTDEC1
003904   ffed
003906   c017     movff	0x17, 0xfed        	MOVFF	r0x07, POSTDEC1
003908   ffed
00390a   c018     movff	0x18, 0xfed        	MOVFF	r0x08, POSTDEC1
00390c   ffed
00390e   c019     movff	0x19, 0xfed        	MOVFF	r0x09, POSTDEC1
003910   ffed
003912   c01a     movff	0x1a, 0xfed        	MOVFF	r0x0a, POSTDEC1
003914   ffed
003916   c01b     movff	0x1b, 0xfed        	MOVFF	r0x0b, POSTDEC1
003918   ffed
00391a   c01c     movff	0x1c, 0xfed        	MOVFF	r0x0c, POSTDEC1
00391c   ffed
00391e   c01d     movff	0x1d, 0xfed        	MOVFF	r0x0d, POSTDEC1
003920   ffed
003922   c01e     movff	0x1e, 0xfed        	MOVFF	r0x0e, POSTDEC1
003924   ffed
003926   c01f     movff	0x1f, 0xfed        	MOVFF	r0x0f, POSTDEC1
003928   ffed
00392a   c020     movff	0x20, 0xfed        	MOVFF	r0x10, POSTDEC1
00392c   ffed
00392e   c021     movff	0x21, 0xfed        	MOVFF	r0x11, POSTDEC1
003930   ffed
003932   c022     movff	0x22, 0xfed        	MOVFF	r0x12, POSTDEC1
003934   ffed
003936   c023     movff	0x23, 0xfed        	MOVFF	r0x13, POSTDEC1
003938   ffed
00393a   c024     movff	0x24, 0xfed        	MOVFF	r0x14, POSTDEC1
00393c   ffed
00393e   c025     movff	0x25, 0xfed        	MOVFF	r0x15, POSTDEC1
003940   ffed
003942   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	69; main.c	MIOS_BANKSTICK_ReadPage(num*64, @current_preset);	
003944   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
003946   0d40     mullw	0x40               	MULLW	0x40
003948   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
00394a   f010
00394c   cff4     movff	0xff4, 0x11        	MOVFF	PRODH, r0x01
00394e   f011
003950   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003952   6e13     movwf	0x13, 0            	MOVWF	r0x03
003954   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003956   6e12     movwf	0x12, 0            	MOVWF	r0x02
003958   0e80     movlw	0x80               	MOVLW	0x80
00395a   6e14     movwf	0x14, 0            	MOVWF	r0x04
00395c   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
00395e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003960   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
003962   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003964   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
003966   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
003968   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00396a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00396c   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
00396e   ec6f     call	0x42de, 0           	CALL	_MIOS_BANKSTICK_ReadPage
003970   f021
003972   0e04     movlw	0x4                	MOVLW	0x04
003974   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	71; main.c	for(bus=0;bus<16;bus++){
003976   6a10     clrf	0x10, 0             	CLRF	r0x00
003978   6a11     clrf	0x11, 0             	CLRF	r0x01
                                           _00121_DS_:
00397a   0e10     movlw	0x10               	MOVLW	0x10
00397c   5c10     subwf	0x10, 0, 0         	SUBWF	r0x00, W
00397e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003980   d0a2     bra	0x3ac6               	BRA	_00125_DS_
                                           ;	.line	72; main.c	for(chn_in=0;chn_in<16;chn_in++){
003982   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
003984   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
003986   6e12     movwf	0x12, 0            	MOVWF	r0x02
003988   6a13     clrf	0x13, 0             	CLRF	r0x03
00398a   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
00398c   2213     addwfc	0x13, 0x1, 0      	ADDWFC	r0x03, F
00398e   6a14     clrf	0x14, 0             	CLRF	r0x04
003990   6a15     clrf	0x15, 0             	CLRF	r0x05
003992   6a16     clrf	0x16, 0             	CLRF	r0x06
003994   6a17     clrf	0x17, 0             	CLRF	r0x07
003996   6a18     clrf	0x18, 0             	CLRF	r0x08
003998   6a19     clrf	0x19, 0             	CLRF	r0x09
                                           _00117_DS_:
00399a   0e10     movlw	0x10               	MOVLW	0x10
00399c   5c14     subwf	0x14, 0, 0         	SUBWF	r0x04, W
00399e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0039a0   d08e     bra	0x3abe               	BRA	_00123_DS_
                                           ;	.line	73; main.c	if(current_preset[bus].inputs & int_bit_ormask[chn_in]){				
0039a2   c012     movff	0x12, 0xfe1        	MOVFF	r0x02, FSR0L
0039a4   ffe1
0039a6   c013     movff	0x13, 0xfe2        	MOVFF	r0x03, FSR0H
0039a8   ffe2
0039aa   cfe6     movff	0xfe6, 0x1a        	MOVFF	POSTINC0, r0x0a
0039ac   f01a
0039ae   cfe7     movff	0xfe7, 0x1b        	MOVFF	INDF0, r0x0b
0039b0   f01b
0039b2   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
0039b4   2419     addwf	0x19, 0, 0         	ADDWF	r0x09, W
0039b6   6e1c     movwf	0x1c, 0            	MOVWF	r0x0c
0039b8   6a1d     clrf	0x1d, 0             	CLRF	r0x0d
0039ba   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
0039bc   221d     addwfc	0x1d, 0x1, 0      	ADDWFC	r0x0d, F
0039be   6a1e     clrf	0x1e, 0             	CLRF	r0x0e
0039c0   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
0039c2   221e     addwfc	0x1e, 0x1, 0      	ADDWFC	r0x0e, F
0039c4   c01c     movff	0x1c, 0xff6        	MOVFF	r0x0c, TBLPTRL
0039c6   fff6
0039c8   c01d     movff	0x1d, 0xff7        	MOVFF	r0x0d, TBLPTRH
0039ca   fff7
0039cc   c01e     movff	0x1e, 0xff8        	MOVFF	r0x0e, TBLPTRU
0039ce   fff8
0039d0   0009     tblrd	*+                 	TBLRD*+	
0039d2   cff5     movff	0xff5, 0x1c        	MOVFF	TABLAT, r0x0c
0039d4   f01c
0039d6   0009     tblrd	*+                 	TBLRD*+	
0039d8   cff5     movff	0xff5, 0x1d        	MOVFF	TABLAT, r0x0d
0039da   f01d
0039dc   501c     movf	0x1c, 0, 0          	MOVF	r0x0c, W
0039de   161a     andwf	0x1a, 0x1, 0       	ANDWF	r0x0a, F
0039e0   501d     movf	0x1d, 0, 0          	MOVF	r0x0d, W
0039e2   161b     andwf	0x1b, 0x1, 0       	ANDWF	r0x0b, F
0039e4   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
0039e6   101b     iorwf	0x1b, 0, 0         	IORWF	r0x0b, W
0039e8   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0039ea   d05d     bra	0x3aa6               	BRA	_00119_DS_
                                           ;	.line	75; main.c	for(chn_out=0;chn_out<16;chn_out++){
0039ec   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
0039ee   2415     addwf	0x15, 0, 0         	ADDWF	r0x05, W
0039f0   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
0039f2   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
0039f4   2016     addwfc	0x16, 0, 0        	ADDWFC	r0x06, W
0039f6   6e1b     movwf	0x1b, 0            	MOVWF	r0x0b
0039f8   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
0039fa   2411     addwf	0x11, 0, 0         	ADDWF	r0x01, W
0039fc   6e1c     movwf	0x1c, 0            	MOVWF	r0x0c
0039fe   6a1d     clrf	0x1d, 0             	CLRF	r0x0d
003a00   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
003a02   221d     addwfc	0x1d, 0x1, 0      	ADDWFC	r0x0d, F
003a04   0e02     movlw	0x2                	MOVLW	0x02
003a06   261c     addwf	0x1c, 0x1, 0       	ADDWF	r0x0c, F
003a08   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003a0a   2a1d     incf	0x1d, 0x1, 0        	INCF	r0x0d, F
003a0c   6a1e     clrf	0x1e, 0             	CLRF	r0x0e
003a0e   6a1f     clrf	0x1f, 0             	CLRF	r0x0f
003a10   6a20     clrf	0x20, 0             	CLRF	r0x10
                                           _00113_DS_:
003a12   0e10     movlw	0x10               	MOVLW	0x10
003a14   5c1f     subwf	0x1f, 0, 0         	SUBWF	r0x0f, W
003a16   e236     bc	0x3a84                	BC	_00116_DS_
                                           ;	.line	76; main.c	if(current_preset[bus].outputs & int_bit_ormask[chn_out])
003a18   c01c     movff	0x1c, 0xfe1        	MOVFF	r0x0c, FSR0L
003a1a   ffe1
003a1c   c01d     movff	0x1d, 0xfe2        	MOVFF	r0x0d, FSR0H
003a1e   ffe2
003a20   cfe6     movff	0xfe6, 0x21        	MOVFF	POSTINC0, r0x11
003a22   f021
003a24   cfe7     movff	0xfe7, 0x22        	MOVFF	INDF0, r0x12
003a26   f022
003a28   0e74     movlw	0x74               	MOVLW	LOW(_int_bit_ormask)
003a2a   2420     addwf	0x20, 0, 0         	ADDWF	r0x10, W
003a2c   6e23     movwf	0x23, 0            	MOVWF	r0x13
003a2e   6a24     clrf	0x24, 0             	CLRF	r0x14
003a30   0e42     movlw	0x42               	MOVLW	HIGH(_int_bit_ormask)
003a32   2224     addwfc	0x24, 0x1, 0      	ADDWFC	r0x14, F
003a34   6a25     clrf	0x25, 0             	CLRF	r0x15
003a36   0e00     movlw	0                  	MOVLW	UPPER(_int_bit_ormask)
003a38   2225     addwfc	0x25, 0x1, 0      	ADDWFC	r0x15, F
003a3a   c023     movff	0x23, 0xff6        	MOVFF	r0x13, TBLPTRL
003a3c   fff6
003a3e   c024     movff	0x24, 0xff7        	MOVFF	r0x14, TBLPTRH
003a40   fff7
003a42   c025     movff	0x25, 0xff8        	MOVFF	r0x15, TBLPTRU
003a44   fff8
003a46   0009     tblrd	*+                 	TBLRD*+	
003a48   cff5     movff	0xff5, 0x23        	MOVFF	TABLAT, r0x13
003a4a   f023
003a4c   0009     tblrd	*+                 	TBLRD*+	
003a4e   cff5     movff	0xff5, 0x24        	MOVFF	TABLAT, r0x14
003a50   f024
003a52   5023     movf	0x23, 0, 0          	MOVF	r0x13, W
003a54   1621     andwf	0x21, 0x1, 0       	ANDWF	r0x11, F
003a56   5024     movf	0x24, 0, 0          	MOVF	r0x14, W
003a58   1622     andwf	0x22, 0x1, 0       	ANDWF	r0x12, F
003a5a   5021     movf	0x21, 0, 0          	MOVF	r0x11, W
003a5c   1022     iorwf	0x22, 0, 0         	IORWF	r0x12, W
003a5e   e00e     bz	0x3a7c                	BZ	_00115_DS_
                                           ;	.line	77; main.c	midi_inout_map[chn_in][i++] = chn_out;
003a60   c01e     movff	0x1e, 0x21         	MOVFF	r0x0e, r0x11
003a62   f021
003a64   2a1e     incf	0x1e, 0x1, 0        	INCF	r0x0e, F
003a66   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
003a68   2621     addwf	0x21, 0x1, 0       	ADDWF	r0x11, F
003a6a   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
003a6c   6a22     clrf	0x22, 0             	CLRF	r0x12
003a6e   2222     addwfc	0x22, 0x1, 0      	ADDWFC	r0x12, F
003a70   c021     movff	0x21, 0xfe1        	MOVFF	r0x11, FSR0L
003a72   ffe1
003a74   c022     movff	0x22, 0xfe2        	MOVFF	r0x12, FSR0H
003a76   ffe2
003a78   c01f     movff	0x1f, 0xfe7        	MOVFF	r0x0f, INDF0
003a7a   ffe7
                                           _00115_DS_:
                                           ;	.line	75; main.c	for(chn_out=0;chn_out<16;chn_out++){
003a7c   2a20     incf	0x20, 0x1, 0        	INCF	r0x10, F
003a7e   2a20     incf	0x20, 0x1, 0        	INCF	r0x10, F
003a80   2a1f     incf	0x1f, 0x1, 0        	INCF	r0x0f, F
003a82   d7c7     bra	0x3a12               	BRA	_00113_DS_
                                           _00116_DS_:
                                           ;	.line	79; main.c	midi_inout_map[chn_in][i] = -1;//terminate list
003a84   0e00     movlw	0                  	MOVLW	LOW(_midi_inout_map)
003a86   2417     addwf	0x17, 0, 0         	ADDWF	r0x07, W
003a88   6e1a     movwf	0x1a, 0            	MOVWF	r0x0a
003a8a   0e01     movlw	0x1                	MOVLW	HIGH(_midi_inout_map)
003a8c   2018     addwfc	0x18, 0, 0        	ADDWFC	r0x08, W
003a8e   6e1b     movwf	0x1b, 0            	MOVWF	r0x0b
003a90   501a     movf	0x1a, 0, 0          	MOVF	r0x0a, W
003a92   261e     addwf	0x1e, 0x1, 0       	ADDWF	r0x0e, F
003a94   501b     movf	0x1b, 0, 0          	MOVF	r0x0b, W
003a96   6a1c     clrf	0x1c, 0             	CLRF	r0x0c
003a98   221c     addwfc	0x1c, 0x1, 0      	ADDWFC	r0x0c, F
003a9a   c01e     movff	0x1e, 0xfe1        	MOVFF	r0x0e, FSR0L
003a9c   ffe1
003a9e   c01c     movff	0x1c, 0xfe2        	MOVFF	r0x0c, FSR0H
003aa0   ffe2
003aa2   0eff     movlw	0xff               	MOVLW	0xff
003aa4   6ee7     movwf	0xe7, 0            	MOVWF	INDF0
                                           _00119_DS_:
                                           ;	.line	72; main.c	for(chn_in=0;chn_in<16;chn_in++){
003aa6   0e10     movlw	0x10               	MOVLW	0x10
003aa8   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x05, F
003aaa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003aac   2a16     incf	0x16, 0x1, 0        	INCF	r0x06, F
003aae   0e10     movlw	0x10               	MOVLW	0x10
003ab0   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x07, F
003ab2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ab4   2a18     incf	0x18, 0x1, 0        	INCF	r0x08, F
003ab6   2a19     incf	0x19, 0x1, 0        	INCF	r0x09, F
003ab8   2a19     incf	0x19, 0x1, 0        	INCF	r0x09, F
003aba   2a14     incf	0x14, 0x1, 0        	INCF	r0x04, F
003abc   d76e     bra	0x399a               	BRA	_00117_DS_
                                           _00123_DS_:
                                           ;	.line	71; main.c	for(bus=0;bus<16;bus++){
003abe   0e04     movlw	0x4                	MOVLW	0x04
003ac0   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x01, F
003ac2   2a10     incf	0x10, 0x1, 0        	INCF	r0x00, F
003ac4   d75a     bra	0x397a               	BRA	_00121_DS_
                                           _00125_DS_:
003ac6   cfec     movff	0xfec, 0x25        	MOVFF	PREINC1, r0x15
003ac8   f025
003aca   cfec     movff	0xfec, 0x24        	MOVFF	PREINC1, r0x14
003acc   f024
003ace   cfec     movff	0xfec, 0x23        	MOVFF	PREINC1, r0x13
003ad0   f023
003ad2   cfec     movff	0xfec, 0x22        	MOVFF	PREINC1, r0x12
003ad4   f022
003ad6   cfec     movff	0xfec, 0x21        	MOVFF	PREINC1, r0x11
003ad8   f021
003ada   cfec     movff	0xfec, 0x20        	MOVFF	PREINC1, r0x10
003adc   f020
003ade   cfec     movff	0xfec, 0x1f        	MOVFF	PREINC1, r0x0f
003ae0   f01f
003ae2   cfec     movff	0xfec, 0x1e        	MOVFF	PREINC1, r0x0e
003ae4   f01e
003ae6   cfec     movff	0xfec, 0x1d        	MOVFF	PREINC1, r0x0d
003ae8   f01d
003aea   cfec     movff	0xfec, 0x1c        	MOVFF	PREINC1, r0x0c
003aec   f01c
003aee   cfec     movff	0xfec, 0x1b        	MOVFF	PREINC1, r0x0b
003af0   f01b
003af2   cfec     movff	0xfec, 0x1a        	MOVFF	PREINC1, r0x0a
003af4   f01a
003af6   cfec     movff	0xfec, 0x19        	MOVFF	PREINC1, r0x09
003af8   f019
003afa   cfec     movff	0xfec, 0x18        	MOVFF	PREINC1, r0x08
003afc   f018
003afe   cfec     movff	0xfec, 0x17        	MOVFF	PREINC1, r0x07
003b00   f017
003b02   cfec     movff	0xfec, 0x16        	MOVFF	PREINC1, r0x06
003b04   f016
003b06   cfec     movff	0xfec, 0x15        	MOVFF	PREINC1, r0x05
003b08   f015
003b0a   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
003b0c   f014
003b0e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
003b10   f013
003b12   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
003b14   f012
003b16   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
003b18   f011
003b1a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
003b1c   f010
003b1e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
003b20   ffd9
003b22   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__store_preset	code
                                           _store_preset:
                                           ;	.line	63; main.c	void store_preset(unsigned char num) __wparam{
0040da   cfd9     movff	0xfd9, 0xfed       	MOVFF	FSR2L, POSTDEC1
0040dc   ffed
0040de   cfe9     movff	0xfe9, 0xfd9       	MOVFF	FSR1L, FSR2L
0040e0   ffd9
0040e2   c010     movff	0x10, 0xfed        	MOVFF	r0x00, POSTDEC1
0040e4   ffed
0040e6   c011     movff	0x11, 0xfed        	MOVFF	r0x01, POSTDEC1
0040e8   ffed
0040ea   c012     movff	0x12, 0xfed        	MOVFF	r0x02, POSTDEC1
0040ec   ffed
0040ee   c013     movff	0x13, 0xfed        	MOVFF	r0x03, POSTDEC1
0040f0   ffed
0040f2   c014     movff	0x14, 0xfed        	MOVFF	r0x04, POSTDEC1
0040f4   ffed
0040f6   6e10     movwf	0x10, 0            	MOVWF	r0x00
                                           ; ;multiply lit val:0x40 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	64; main.c	MIOS_BANKSTICK_WritePage(num*64, @current_preset);
0040f8   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
0040fa   0d40     mullw	0x40               	MULLW	0x40
0040fc   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x00
0040fe   f010
004100   cff4     movff	0xff4, 0x11        	MOVFF	PRODH, r0x01
004102   f011
004104   0e00     movlw	0                  	MOVLW	HIGH(_current_preset)
004106   6e13     movwf	0x13, 0            	MOVWF	r0x03
004108   0e80     movlw	0x80               	MOVLW	LOW(_current_preset)
00410a   6e12     movwf	0x12, 0            	MOVWF	r0x02
00410c   0e80     movlw	0x80               	MOVLW	0x80
00410e   6e14     movwf	0x14, 0            	MOVWF	r0x04
004110   5014     movf	0x14, 0, 0          	MOVF	r0x04, W
004112   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004114   5013     movf	0x13, 0, 0          	MOVF	r0x03, W
004116   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004118   5012     movf	0x12, 0, 0          	MOVF	r0x02, W
00411a   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
00411c   5011     movf	0x11, 0, 0          	MOVF	r0x01, W
00411e   6eed     movwf	0xed, 0            	MOVWF	POSTDEC1
004120   5010     movf	0x10, 0, 0          	MOVF	r0x00, W
004122   ec64     call	0x42c8, 0           	CALL	_MIOS_BANKSTICK_WritePage
004124   f021
004126   0e04     movlw	0x4                	MOVLW	0x04
004128   26e9     addwf	0xe9, 0x1, 0       	ADDWF	FSR1L, F
00412a   cfec     movff	0xfec, 0x14        	MOVFF	PREINC1, r0x04
00412c   f014
00412e   cfec     movff	0xfec, 0x13        	MOVFF	PREINC1, r0x03
004130   f013
004132   cfec     movff	0xfec, 0x12        	MOVFF	PREINC1, r0x02
004134   f012
004136   cfec     movff	0xfec, 0x11        	MOVFF	PREINC1, r0x01
004138   f011
00413a   cfec     movff	0xfec, 0x10        	MOVFF	PREINC1, r0x00
00413c   f010
00413e   cfec     movff	0xfec, 0xfd9       	MOVFF	PREINC1, FSR2L
004140   ffd9
004142   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _int_bit_ormask:
004274   0001     dw	0x1  ;unknown opcode  	DB	0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00
004276   0002     dw	0x2  ;unknown opcode  
004278   0004     clrwdt                   
00427a   0008     tblrd	*                  
00427c   0010     retfie	0                 
00427e   0020     dw	0x20  ;unknown opcode 
004280   0040     dw	0x40  ;unknown opcode 	DB	0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08
004282   0080     dw	0x80  ;unknown opcode 
004284   0100     movlb	0                  
004286   0200     mulwf	0, 0               
004288   0400     decf	0, 0, 0             
00428a   0800     sublw	0                  
00428c   1000     iorwf	0, 0, 0            	DB	0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80
00428e   2000     addwfc	0, 0, 0           
004290   4000     rrncf	0, 0, 0            
004292   8000     bsf	0, 0, 0              
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3618 (0x0e22) bytes ( 2.76%)
                                           ;           	 1809 (0x0711) words
                                           ; udata size:	  320 (0x0140) bytes (25.00%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
