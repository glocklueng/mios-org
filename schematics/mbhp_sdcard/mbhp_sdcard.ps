%!PS-Adobe-3.0
%%Title: mbhp_sdcard
%%Creator: XCircuit v3.6 rev144
%%CreationDate: Sat May  9 10:38:18 2009
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%DocumentNeededResources: font Helvetica Times-Roman Courier 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.3
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--7/13/05  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-present)
%
%%BeginResource: procset XCIRCproc 3.3 0
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg /rotval exch def
	/just exch def just 384 and 0 gt {/mshow {pop} def} {/mshow {show}
	def} ifelse just 16 and 0 gt {gsave rotval rotate 0 1 dtransform
	gsave pagemat setmatrix idtransform exch grestore 1 0 dtransform
	gsave pagemat setmatrix idtransform exch grestore dup abs 1e-9 lt
	{pop mul 0 gt} {3 1 roll pop pop 0 lt} ifelse grestore {-1 /rotval
	rotval neg def /just just dup 3 and 1 ne {3 xor} if def} {1} ifelse
	exch -1e-9 lt {-1 /rotval rotval neg def /just just dup 12 and
	4 ne {12 xor} if def} {1} ifelse scale } if /showflag 0 def
	/fspc pspc def /Bline 0 def /Tabs 0 array def /fscale 1.0 def
	/kY 0 def gsave dup 1 add copy 0 exch 1 0 dtransform exch atan rotate
	{exch dup type /stringtype eq {true charpath flattenpath} {dup type
	/arraytype eq {exec} {12 string cvs true charpath flattenpath} ifelse}
	ifelse} repeat pop pathbbox grestore 3 -1 roll pop 3 1 roll just
	1 and 0 gt {just 2 and 0 gt {exch pop neg fspc sub} {exch sub 0.5
	mul neg} ifelse} {pop neg fspc add} ifelse exch Bline exch just 4
	and 0 gt {just 8 and 0 gt {exch pop neg fspc sub} {add 0.5 mul neg}
	ifelse} {pop neg fspc add} ifelse rotval rotate Kn currentpoint
	translate /showflag 1 def /Bline 0 def /Tabs 0 array def /fscale
	1.0 def /kY 0 def {dup type /stringtype eq {mshow} {dup type
	/arraytype eq {exec} {12 string cvs mshow} ifelse} ifelse} repeat
	grestore } def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate
	0 0 moveto neg rotate dup scale cvx exec image grestore } def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array
	astore def gsave sce translate 0 0 moveto neg rotate dup abs scale
	} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end} bind def

/hlevel 0 def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore} def     

/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 0 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef } def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup

/generic::tap {
% trivial
<</@in (bus\(0:7\)) /@out (bus\(0\)) >> begingate
496 1.000 0 8 16 0 0 -8 3 polygon
1.000 0.000 0.000 scb
mark @out {/Helvetica cf} ctmk 20 0 1.000 16 0 pinlabel
mark @in {/Helvetica cf} ctmk 23 0 1.000 0 0 pinlabel
endgate
} def

/generic::dot {
% trivial
begingate
248 1.000 0 0 6 0.000 360.000 xcarc
1.000 0.000 0.000 scb
(x) {/Times-Roman cf} 2 29 0 1.000 0 0 pinlabel
endgate
} def


%%EndSetup

%%Page: 1 1
%%PageOrientation: Landscape
%%PageBoundingBox: 0 0 612 792
/pgsave save def bop
% 32.00 3.91 gridspace
90 rotate -82 -529 translate
1.0733 inchscale
2.6000 setlinewidth 1329 91 translate

(MIDIbox Hardware Platform) {/Helvetica cf} 2 20 0 0.750 215 231 label
0 3.000 183 263 183 87 663 87 663 263 4 polygon
(\(C\) T. Klose 2009-02-24) {/Helvetica cf} 2 20 0 0.750 215 135 label
0.000 0.000 1.000 scb
(MBHP_SDCARD) {/Helvetica cf} 2 20 0 0.750 215 183 label
sce
1 1.000 -640 704 11 0.000 360.000 xcarc
1 1.000 -640 640 11 0.000 360.000 xcarc
1 1.000 -640 576 11 0.000 360.000 xcarc
1 1.000 -640 512 11 0.000 360.000 xcarc
1 1.000 -640 768 11 0.000 360.000 xcarc
1 1.000 -688 768 11 0.000 360.000 xcarc
0 2.000 -720 800 -720 464 -608 464 -608 800 4 polygon
0.000 0.000 1.000 scb
(Vs) {/Courier cf} 2 23 0 0.500 -688 752 label
(Vs) {/Courier cf} 2 23 0 0.500 -640 752 label
(Vd) {/Courier cf} 2 23 0 0.500 -640 688 label
(DI) {/Courier cf} 2 23 0 0.500 -640 624 label
(SC) {/Courier cf} 2 23 0 0.500 -640 560 label
(RC1) {/Courier cf} 2 23 0 0.500 -624 496 label
sce
1 1.000 -688 704 11 0.000 360.000 xcarc
0.000 0.000 1.000 scb
(Vd) {/Courier cf} 2 23 0 0.500 -688 688 label
sce
1 1.000 -688 640 11 0.000 360.000 xcarc
0.000 0.000 1.000 scb
(DO) {/Courier cf} 2 23 0 0.500 -688 624 label
sce
1 1.000 -688 576 11 0.000 360.000 xcarc
0.000 0.000 1.000 scb
(SC) {/Courier cf} 2 23 0 0.500 -688 560 label
sce
1 1.000 -688 512 11 0.000 360.000 xcarc
0.000 0.000 1.000 scb
(RC2) {/Courier cf} 2 23 0 0.500 -672 496 label
sce
(J1) {/Courier cf} 2 21 0 0.750 -664 832 label
0.800 0.800 0.800 scb
0 2.000 -735 808 -735 454 -592 454 -592 808 4 polygon
0 2.000 -733 684 -733 588 -717 588 -717 684 4 polygon
0.627 0.125 0.941 scb
(DO connected to SI of Core Module) {/Helvetica cf} 2 16 0 0.750 -744 368 label
(DI connected to SO of Core Module) {/Helvetica cf} 2 16 0 0.750 -744 336 label
(S stands for "Serial", not "Slave") {/Helvetica cf} 2 16 0 0.750 -744 296 
label
(Note:) {/Helvetica cf} 2 16 0 0.750 -832 368 label
0.000 0.000 1.000 scb
(CS#) {/Courier cf} 2 20 0 1.000 -118 761 label
(DAT/DI) {/Courier cf} 2 20 0 1.000 -133 715 label
(Vss) {/Courier cf} 2 20 0 1.000 -125 669 label
(Vcc) {/Courier cf} 2 20 0 1.000 -125 623 label
(SCLK) {/Courier cf} 2 20 0 1.000 -133 577 label
(Vss) {/Courier cf} 2 20 0 1.000 -133 531 label
(DO) {/Courier cf} 2 20 0 1.000 -133 477 label
0.627 0.125 0.941 scb
(SD Card) {/Helvetica cf} 2 19 0 2.000 388 635 label
(Top View!) {/Helvetica cf} 2 19 0 2.000 404 539 label
sce
0 2.000 -208 780 -208 748 -144 748 -144 780 4 polygon
0 2.000 -208 733 -208 701 -144 701 -144 733 4 polygon
0 2.000 -208 686 -208 654 -144 654 -144 686 4 polygon
0 2.000 -208 639 -208 607 -144 607 -144 639 4 polygon
0 2.000 -208 593 -208 561 -144 561 -144 593 4 polygon
0 2.000 -208 546 -208 514 -144 514 -144 546 4 polygon
0 2.000 -208 491 -208 459 -144 459 -144 491 4 polygon
0 2.000 -208 444 -208 427 -141 427 -141 444 4 polygon
0 2.000 -177 826 -177 794 -113 794 -113 826 4 polygon
1 4.000 -227 411 438 411 438 841 -180 841 -227 802 -227 411 6 polygon
1.000 0.000 0.000 scb
1.000 0 -752 704 generic::tap
1 4.000 -752 704 -822 704 2 polygon
(3.3V!) {/Courier cf} 2 21 0 0.750 -782 730 label
sce
1 1.000 -188 579 -641 579 2 polygon
1 1.000 -188 532 -321 532 -321 673 -188 673 4 polygon
1 1.000 -688 767 -321 767 -321 673 3 polygon
1.000 0 -321 673 generic::dot
1 1.000 -641 641 -438 641 -438 712 -188 712 4 polygon
1 1.000 -188 626 -485 626 -485 704 -688 704 4 polygon
1 1.000 -188 477 -508 477 -508 422 -774 422 -774 641 -688 641 6 polygon
1 1.000 -637 512 -544 512 -544 802 -285 802 -285 763 -188 763 6 polygon
0.627 0.125 0.941 scb
(Direct Connections are only possible with MBHP_CORE_STM32 \(3.3V IO\)) 
{/Helvetica cf} 2 16 0 0.750 -944 214 label

(PIC based MBHP_CORE \(5.0V IO\) requires additional resistors \(voltage dividers\)) 
{/Helvetica cf} 2 16 0 0.750 -944 163 label
(and a 3.3V Voltage Regulator) {/Helvetica cf} 2 16 0 0.750 -947 128 label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
